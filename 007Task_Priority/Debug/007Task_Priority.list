
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd0  08006dd0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dd8  08006dd8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a88c  2000001c  08006dfc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a8a8  08006dfc  0002a8a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018217  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fb4  00000000  00000000  00038263  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003b218  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  0003c548  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022f32  00000000  00000000  0003d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001000e  00000000  00000000  00060622  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5b25  00000000  00000000  00070630  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fdc  00000000  00000000  001461d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c94 	.word	0x08006c94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006c94 	.word	0x08006c94

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a800 	.word	0x2001a800

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b972 	b.w	8000570 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4615      	mov	r5, r2
 80002b6:	d967      	bls.n	8000388 <__udivmoddi4+0xe4>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0720 	rsb	r7, r2, #32
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ca:	4095      	lsls	r5, r2
 80002cc:	ea47 0803 	orr.w	r8, r7, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002dc:	fa1f fc85 	uxth.w	ip, r5
 80002e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18eb      	adds	r3, r5, r3
 80002f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f6:	f080 811b 	bcs.w	8000530 <__udivmoddi4+0x28c>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8118 	bls.w	8000530 <__udivmoddi4+0x28c>
 8000300:	3f02      	subs	r7, #2
 8000302:	442b      	add	r3, r5
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0fe 	udiv	r0, r3, lr
 800030c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fc0c 	mul.w	ip, r0, ip
 8000318:	45a4      	cmp	ip, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	192c      	adds	r4, r5, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x290>
 8000326:	45a4      	cmp	ip, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x290>
 800032c:	3802      	subs	r0, #2
 800032e:	442c      	add	r4, r5
 8000330:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000334:	eba4 040c 	sub.w	r4, r4, ip
 8000338:	2700      	movs	r7, #0
 800033a:	b11e      	cbz	r6, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c6 4300 	strd	r4, r3, [r6]
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xbe>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80eb 	beq.w	800052a <__udivmoddi4+0x286>
 8000354:	2700      	movs	r7, #0
 8000356:	e9c6 0100 	strd	r0, r1, [r6]
 800035a:	4638      	mov	r0, r7
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f783 	clz	r7, r3
 8000366:	2f00      	cmp	r7, #0
 8000368:	d147      	bne.n	80003fa <__udivmoddi4+0x156>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd0>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2c4>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa0>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa0>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xe8>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 808f 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000396:	1b49      	subs	r1, r1, r5
 8000398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800039c:	fa1f f885 	uxth.w	r8, r5
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a6:	0c23      	lsrs	r3, r4, #16
 80003a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb08 f10c 	mul.w	r1, r8, ip
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b8:	18eb      	adds	r3, r5, r3
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	f200 80cd 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1a59      	subs	r1, r3, r1
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x14c>
 80003e0:	192c      	adds	r4, r5, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x14a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80b6 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e79f      	b.n	800033a <__udivmoddi4+0x96>
 80003fa:	f1c7 0c20 	rsb	ip, r7, #32
 80003fe:	40bb      	lsls	r3, r7
 8000400:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000404:	ea4e 0e03 	orr.w	lr, lr, r3
 8000408:	fa01 f407 	lsl.w	r4, r1, r7
 800040c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000410:	fa21 f30c 	lsr.w	r3, r1, ip
 8000414:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000418:	4325      	orrs	r5, r4
 800041a:	fbb3 f9f8 	udiv	r9, r3, r8
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	fb08 3319 	mls	r3, r8, r9, r3
 8000424:	fa1f fa8e 	uxth.w	sl, lr
 8000428:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800042c:	fb09 f40a 	mul.w	r4, r9, sl
 8000430:	429c      	cmp	r4, r3
 8000432:	fa02 f207 	lsl.w	r2, r2, r7
 8000436:	fa00 f107 	lsl.w	r1, r0, r7
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1e 0303 	adds.w	r3, lr, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	f080 8087 	bcs.w	8000556 <__udivmoddi4+0x2b2>
 8000448:	429c      	cmp	r4, r3
 800044a:	f240 8084 	bls.w	8000556 <__udivmoddi4+0x2b2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4473      	add	r3, lr
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	b2ad      	uxth	r5, r5
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000464:	fb00 fa0a 	mul.w	sl, r0, sl
 8000468:	45a2      	cmp	sl, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1e 0404 	adds.w	r4, lr, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d26b      	bcs.n	800054e <__udivmoddi4+0x2aa>
 8000476:	45a2      	cmp	sl, r4
 8000478:	d969      	bls.n	800054e <__udivmoddi4+0x2aa>
 800047a:	3802      	subs	r0, #2
 800047c:	4474      	add	r4, lr
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	454c      	cmp	r4, r9
 800048c:	46c2      	mov	sl, r8
 800048e:	464b      	mov	r3, r9
 8000490:	d354      	bcc.n	800053c <__udivmoddi4+0x298>
 8000492:	d051      	beq.n	8000538 <__udivmoddi4+0x294>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d069      	beq.n	800056c <__udivmoddi4+0x2c8>
 8000498:	ebb1 050a 	subs.w	r5, r1, sl
 800049c:	eb64 0403 	sbc.w	r4, r4, r3
 80004a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a4:	40fd      	lsrs	r5, r7
 80004a6:	40fc      	lsrs	r4, r7
 80004a8:	ea4c 0505 	orr.w	r5, ip, r5
 80004ac:	e9c6 5400 	strd	r5, r4, [r6]
 80004b0:	2700      	movs	r7, #0
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f703 	lsr.w	r7, r0, r3
 80004bc:	4095      	lsls	r5, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	4338      	orrs	r0, r7
 80004cc:	0c01      	lsrs	r1, r0, #16
 80004ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80004d2:	fa1f f885 	uxth.w	r8, r5
 80004d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb07 f308 	mul.w	r3, r7, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	fa04 f402 	lsl.w	r4, r4, r2
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x256>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f107 3cff 	add.w	ip, r7, #4294967295
 80004f0:	d22f      	bcs.n	8000552 <__udivmoddi4+0x2ae>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d92d      	bls.n	8000552 <__udivmoddi4+0x2ae>
 80004f6:	3f02      	subs	r7, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1acb      	subs	r3, r1, r3
 80004fc:	b281      	uxth	r1, r0
 80004fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000502:	fb0e 3310 	mls	r3, lr, r0, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb00 f308 	mul.w	r3, r0, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x27e>
 8000512:	1869      	adds	r1, r5, r1
 8000514:	f100 3cff 	add.w	ip, r0, #4294967295
 8000518:	d217      	bcs.n	800054a <__udivmoddi4+0x2a6>
 800051a:	428b      	cmp	r3, r1
 800051c:	d915      	bls.n	800054a <__udivmoddi4+0x2a6>
 800051e:	3802      	subs	r0, #2
 8000520:	4429      	add	r1, r5
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000528:	e73b      	b.n	80003a2 <__udivmoddi4+0xfe>
 800052a:	4637      	mov	r7, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e709      	b.n	8000344 <__udivmoddi4+0xa0>
 8000530:	4607      	mov	r7, r0
 8000532:	e6e7      	b.n	8000304 <__udivmoddi4+0x60>
 8000534:	4618      	mov	r0, r3
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x8c>
 8000538:	4541      	cmp	r1, r8
 800053a:	d2ab      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 800053c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000540:	eb69 020e 	sbc.w	r2, r9, lr
 8000544:	3801      	subs	r0, #1
 8000546:	4613      	mov	r3, r2
 8000548:	e7a4      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054a:	4660      	mov	r0, ip
 800054c:	e7e9      	b.n	8000522 <__udivmoddi4+0x27e>
 800054e:	4618      	mov	r0, r3
 8000550:	e795      	b.n	800047e <__udivmoddi4+0x1da>
 8000552:	4667      	mov	r7, ip
 8000554:	e7d1      	b.n	80004fa <__udivmoddi4+0x256>
 8000556:	4681      	mov	r9, r0
 8000558:	e77c      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055a:	3802      	subs	r0, #2
 800055c:	442c      	add	r4, r5
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0x14c>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	442b      	add	r3, r5
 8000566:	e72f      	b.n	80003c8 <__udivmoddi4+0x124>
 8000568:	4638      	mov	r0, r7
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xda>
 800056c:	4637      	mov	r7, r6
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0xa0>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_Init+0x40>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_Init+0x40>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x40>)
 800058a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x40>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f8fa 	bl	8000796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 fcbe 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f001 fc94 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2001a77c 	.word	0x2001a77c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2001a77c 	.word	0x2001a77c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f7      	bhi.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0b      	blt.n	80006ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 021f 	and.w	r2, r3, #31
 80006b8:	4907      	ldr	r1, [pc, #28]	; (80006d8 <__NVIC_EnableIRQ+0x38>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff4c 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007be:	f7ff ff61 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	6978      	ldr	r0, [r7, #20]
 80007ca:	f7ff ffb1 	bl	8000730 <NVIC_EncodePriority>
 80007ce:	4602      	mov	r2, r0
 80007d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff80 	bl	80006dc <__NVIC_SetPriority>
}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff54 	bl	80006a0 <__NVIC_EnableIRQ>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	e16b      	b.n	8000af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800081c:	2201      	movs	r2, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	429a      	cmp	r2, r3
 8000836:	f040 815a 	bne.w	8000aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d00b      	beq.n	800085a <HAL_GPIO_Init+0x5a>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d007      	beq.n	800085a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084e:	2b11      	cmp	r3, #17
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d130      	bne.n	80008bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	2203      	movs	r2, #3
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	4013      	ands	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4013      	ands	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f003 0201 	and.w	r2, r3, #1
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0xfc>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b12      	cmp	r3, #18
 80008fa:	d123      	bne.n	8000944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	08da      	lsrs	r2, r3, #3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3208      	adds	r2, #8
 8000904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	220f      	movs	r2, #15
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	08da      	lsrs	r2, r3, #3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3208      	adds	r2, #8
 800093e:	69b9      	ldr	r1, [r7, #24]
 8000940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0203 	and.w	r2, r3, #3
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 80b4 	beq.w	8000aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <HAL_GPIO_Init+0x308>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a5e      	ldr	r2, [pc, #376]	; (8000b08 <HAL_GPIO_Init+0x308>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b5c      	ldr	r3, [pc, #368]	; (8000b08 <HAL_GPIO_Init+0x308>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009a2:	4a5a      	ldr	r2, [pc, #360]	; (8000b0c <HAL_GPIO_Init+0x30c>)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a51      	ldr	r2, [pc, #324]	; (8000b10 <HAL_GPIO_Init+0x310>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d02b      	beq.n	8000a26 <HAL_GPIO_Init+0x226>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x314>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d025      	beq.n	8000a22 <HAL_GPIO_Init+0x222>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <HAL_GPIO_Init+0x318>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d01f      	beq.n	8000a1e <HAL_GPIO_Init+0x21e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x31c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x21a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4d      	ldr	r2, [pc, #308]	; (8000b20 <HAL_GPIO_Init+0x320>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x216>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4c      	ldr	r2, [pc, #304]	; (8000b24 <HAL_GPIO_Init+0x324>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x212>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4b      	ldr	r2, [pc, #300]	; (8000b28 <HAL_GPIO_Init+0x328>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x20e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4a      	ldr	r2, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x32c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x20a>
 8000a06:	2307      	movs	r3, #7
 8000a08:	e00e      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e00c      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00a      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e008      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a16:	2304      	movs	r3, #4
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a26:	2300      	movs	r3, #0
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	f002 0203 	and.w	r2, r2, #3
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a38:	4934      	ldr	r1, [pc, #208]	; (8000b0c <HAL_GPIO_Init+0x30c>)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a46:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a94:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	f67f ae90 	bls.w	800081c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000afc:	bf00      	nop
 8000afe:	3724      	adds	r7, #36	; 0x24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40021c00 	.word	0x40021c00
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b50:	e003      	b.n	8000b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	619a      	str	r2, [r3, #24]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	401a      	ands	r2, r3
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d104      	bne.n	8000b8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	041a      	lsls	r2, r3, #16
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f806 	bl	8000bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013c00 	.word	0x40013c00

08000bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e25b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d075      	beq.n	8000cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c02:	4ba3      	ldr	r3, [pc, #652]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d00c      	beq.n	8000c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c0e:	4ba0      	ldr	r3, [pc, #640]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d112      	bne.n	8000c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c1a:	4b9d      	ldr	r3, [pc, #628]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c26:	d10b      	bne.n	8000c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c28:	4b99      	ldr	r3, [pc, #612]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d05b      	beq.n	8000cec <HAL_RCC_OscConfig+0x108>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d157      	bne.n	8000cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e236      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c48:	d106      	bne.n	8000c58 <HAL_RCC_OscConfig+0x74>
 8000c4a:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a90      	ldr	r2, [pc, #576]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e01d      	b.n	8000c94 <HAL_RCC_OscConfig+0xb0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x98>
 8000c62:	4b8b      	ldr	r3, [pc, #556]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a8a      	ldr	r2, [pc, #552]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a87      	ldr	r2, [pc, #540]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xb0>
 8000c7c:	4b84      	ldr	r3, [pc, #528]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a83      	ldr	r2, [pc, #524]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b81      	ldr	r3, [pc, #516]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a80      	ldr	r2, [pc, #512]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fca0 	bl	80005e0 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fc9c 	bl	80005e0 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1fb      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b76      	ldr	r3, [pc, #472]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xc0>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fc8c 	bl	80005e0 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fc88 	bl	80005e0 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1e7      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0xe8>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d063      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfa:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d06:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	4b5c      	ldr	r3, [pc, #368]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <HAL_RCC_OscConfig+0x152>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e1bb      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d36:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4952      	ldr	r1, [pc, #328]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	e03a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <HAL_RCC_OscConfig+0x2b0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fc41 	bl	80005e0 <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d62:	f7ff fc3d 	bl	80005e0 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e19c      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4940      	ldr	r1, [pc, #256]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_RCC_OscConfig+0x2b0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc20 	bl	80005e0 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc1c 	bl	80005e0 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e17b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d030      	beq.n	8000e30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d016      	beq.n	8000e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_RCC_OscConfig+0x2b4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc00 	bl	80005e0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fbfc 	bl	80005e0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e15b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x200>
 8000e02:	e015      	b.n	8000e30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_RCC_OscConfig+0x2b4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fbe9 	bl	80005e0 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e12:	f7ff fbe5 	bl	80005e0 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e144      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a0 	beq.w	8000f7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10f      	bne.n	8000e6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_RCC_OscConfig+0x2b8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d121      	bne.n	8000ebe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_RCC_OscConfig+0x2b8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_RCC_OscConfig+0x2b8>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e86:	f7ff fbab 	bl	80005e0 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8c:	e011      	b.n	8000eb2 <HAL_RCC_OscConfig+0x2ce>
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	42470000 	.word	0x42470000
 8000e98:	42470e80 	.word	0x42470e80
 8000e9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea0:	f7ff fb9e 	bl	80005e0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e0fd      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	4b81      	ldr	r3, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x4d4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
 8000ec6:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eca:	4a7c      	ldr	r2, [pc, #496]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed2:	e01c      	b.n	8000f0e <HAL_RCC_OscConfig+0x32a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d10c      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x312>
 8000edc:	4b77      	ldr	r3, [pc, #476]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	4a76      	ldr	r2, [pc, #472]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee8:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eec:	4a73      	ldr	r2, [pc, #460]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef4:	e00b      	b.n	8000f0e <HAL_RCC_OscConfig+0x32a>
 8000ef6:	4b71      	ldr	r3, [pc, #452]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efa:	4a70      	ldr	r2, [pc, #448]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6713      	str	r3, [r2, #112]	; 0x70
 8000f02:	4b6e      	ldr	r3, [pc, #440]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f06:	4a6d      	ldr	r2, [pc, #436]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f08:	f023 0304 	bic.w	r3, r3, #4
 8000f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d015      	beq.n	8000f42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f16:	f7ff fb63 	bl	80005e0 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	e00a      	b.n	8000f34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fb5f 	bl	80005e0 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0bc      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	4b61      	ldr	r3, [pc, #388]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0ee      	beq.n	8000f1e <HAL_RCC_OscConfig+0x33a>
 8000f40:	e014      	b.n	8000f6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb4d 	bl	80005e0 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb49 	bl	80005e0 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e0a6      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	4b56      	ldr	r3, [pc, #344]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1ee      	bne.n	8000f4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d105      	bne.n	8000f7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f72:	4b52      	ldr	r3, [pc, #328]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8092 	beq.w	80010ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f88:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d05c      	beq.n	800104e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d141      	bne.n	8001020 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9c:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_RCC_OscConfig+0x4dc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fb1d 	bl	80005e0 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff fb19 	bl	80005e0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e078      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f0      	bne.n	8000faa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	019b      	lsls	r3, r3, #6
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	061b      	lsls	r3, r3, #24
 8000fec:	4933      	ldr	r1, [pc, #204]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <HAL_RCC_OscConfig+0x4dc>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff faf2 	bl	80005e0 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001000:	f7ff faee 	bl	80005e0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e04d      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x41c>
 800101e:	e045      	b.n	80010ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_RCC_OscConfig+0x4dc>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fadb 	bl	80005e0 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fad7 	bl	80005e0 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e036      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x44a>
 800104c:	e02e      	b.n	80010ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e029      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	429a      	cmp	r2, r3
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001078:	429a      	cmp	r2, r3
 800107a:	d115      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001082:	4013      	ands	r3, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001088:	4293      	cmp	r3, r2
 800108a:	d10d      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001096:	429a      	cmp	r2, r3
 8001098:	d106      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40007000 	.word	0x40007000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	42470060 	.word	0x42470060

080010c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0cc      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d90c      	bls.n	8001100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4b65      	ldr	r3, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800113a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d044      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d119      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d003      	beq.n	8001182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117e:	2b03      	cmp	r3, #3
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e06f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e067      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f023 0203 	bic.w	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4934      	ldr	r1, [pc, #208]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fa14 	bl	80005e0 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fa10 	bl	80005e0 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e04f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f821 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 800124e:	4601      	mov	r1, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	fa21 f303 	lsr.w	r3, r1, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fe5a 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00
 8001280:	40023800 	.word	0x40023800
 8001284:	08006da0 	.word	0x08006da0
 8001288:	20000008 	.word	0x20000008
 800128c:	20000000 	.word	0x20000000

08001290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x32>
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d008      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0x38>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80b4 	bne.w	8001424 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012be:	60bb      	str	r3, [r7, #8]
       break;
 80012c0:	e0b3      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012c4:	60bb      	str	r3, [r7, #8]
      break;
 80012c6:	e0b0      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c8:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d2:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d04a      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012de:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	f04f 0400 	mov.w	r4, #0
 80012e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	ea03 0501 	and.w	r5, r3, r1
 80012f4:	ea04 0602 	and.w	r6, r4, r2
 80012f8:	4629      	mov	r1, r5
 80012fa:	4632      	mov	r2, r6
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f04f 0400 	mov.w	r4, #0
 8001304:	0154      	lsls	r4, r2, #5
 8001306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800130a:	014b      	lsls	r3, r1, #5
 800130c:	4619      	mov	r1, r3
 800130e:	4622      	mov	r2, r4
 8001310:	1b49      	subs	r1, r1, r5
 8001312:	eb62 0206 	sbc.w	r2, r2, r6
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	f04f 0400 	mov.w	r4, #0
 800131e:	0194      	lsls	r4, r2, #6
 8001320:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001324:	018b      	lsls	r3, r1, #6
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	eb64 0402 	sbc.w	r4, r4, r2
 800132c:	f04f 0100 	mov.w	r1, #0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	00e2      	lsls	r2, r4, #3
 8001336:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800133a:	00d9      	lsls	r1, r3, #3
 800133c:	460b      	mov	r3, r1
 800133e:	4614      	mov	r4, r2
 8001340:	195b      	adds	r3, r3, r5
 8001342:	eb44 0406 	adc.w	r4, r4, r6
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	0262      	lsls	r2, r4, #9
 8001350:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001354:	0259      	lsls	r1, r3, #9
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f04f 0400 	mov.w	r4, #0
 8001364:	461a      	mov	r2, r3
 8001366:	4623      	mov	r3, r4
 8001368:	f7fe ff84 	bl	8000274 <__aeabi_uldivmod>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e049      	b.n	8001408 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	ea03 0501 	and.w	r5, r3, r1
 800138a:	ea04 0602 	and.w	r6, r4, r2
 800138e:	4629      	mov	r1, r5
 8001390:	4632      	mov	r2, r6
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f04f 0400 	mov.w	r4, #0
 800139a:	0154      	lsls	r4, r2, #5
 800139c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013a0:	014b      	lsls	r3, r1, #5
 80013a2:	4619      	mov	r1, r3
 80013a4:	4622      	mov	r2, r4
 80013a6:	1b49      	subs	r1, r1, r5
 80013a8:	eb62 0206 	sbc.w	r2, r2, r6
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f04f 0400 	mov.w	r4, #0
 80013b4:	0194      	lsls	r4, r2, #6
 80013b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013ba:	018b      	lsls	r3, r1, #6
 80013bc:	1a5b      	subs	r3, r3, r1
 80013be:	eb64 0402 	sbc.w	r4, r4, r2
 80013c2:	f04f 0100 	mov.w	r1, #0
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	00e2      	lsls	r2, r4, #3
 80013cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013d0:	00d9      	lsls	r1, r3, #3
 80013d2:	460b      	mov	r3, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	195b      	adds	r3, r3, r5
 80013d8:	eb44 0406 	adc.w	r4, r4, r6
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	02a2      	lsls	r2, r4, #10
 80013e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013ea:	0299      	lsls	r1, r3, #10
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0400 	mov.w	r4, #0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	f7fe ff39 	bl	8000274 <__aeabi_uldivmod>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	3301      	adds	r3, #1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	60bb      	str	r3, [r7, #8]
      break;
 8001422:	e002      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001426:	60bb      	str	r3, [r7, #8]
      break;
 8001428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142a:	68bb      	ldr	r3, [r7, #8]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	00f42400 	.word	0x00f42400
 800143c:	007a1200 	.word	0x007a1200

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_RCC_GetHCLKFreq+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff0 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001460:	4601      	mov	r1, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0a9b      	lsrs	r3, r3, #10
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	08006db0 	.word	0x08006db0

08001480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	220f      	movs	r2, #15
 800148e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_RCC_GetClockConfig+0x60>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 020f 	and.w	r2, r3, #15
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e01d      	b.n	8001532 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f815 	bl	800153a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f000 f968 	bl	80017f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b06      	cmp	r3, #6
 8001576:	d007      	beq.n	8001588 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d122      	bne.n	80015f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d11b      	bne.n	80015f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f06f 0202 	mvn.w	r2, #2
 80015c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8ee 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 80015de:	e005      	b.n	80015ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f8e0 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8f1 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d122      	bne.n	8001646 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b04      	cmp	r3, #4
 800160c:	d11b      	bne.n	8001646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f06f 0204 	mvn.w	r2, #4
 8001616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8c4 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 8001632:	e005      	b.n	8001640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8b6 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8c7 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b08      	cmp	r3, #8
 8001652:	d122      	bne.n	800169a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b08      	cmp	r3, #8
 8001660:	d11b      	bne.n	800169a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f06f 0208 	mvn.w	r2, #8
 800166a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f89a 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 8001686:	e005      	b.n	8001694 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f88c 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f89d 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d122      	bne.n	80016ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d11b      	bne.n	80016ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f06f 0210 	mvn.w	r2, #16
 80016be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2208      	movs	r2, #8
 80016c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f870 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 80016da:	e005      	b.n	80016e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f862 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f873 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10e      	bne.n	800171a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f06f 0201 	mvn.w	r2, #1
 8001712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fbc3 	bl	8001ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	d10e      	bne.n	8001746 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d107      	bne.n	8001746 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800173e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f903 	bl	800194c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	2b40      	cmp	r3, #64	; 0x40
 8001752:	d10e      	bne.n	8001772 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d107      	bne.n	8001772 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800176a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f838 	bl	80017e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b20      	cmp	r3, #32
 800177e:	d10e      	bne.n	800179e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b20      	cmp	r3, #32
 800178c:	d107      	bne.n	800179e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f06f 0220 	mvn.w	r2, #32
 8001796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8cd 	bl	8001938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <TIM_Base_SetConfig+0x114>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001816:	d00f      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <TIM_Base_SetConfig+0x118>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00b      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <TIM_Base_SetConfig+0x11c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <TIM_Base_SetConfig+0x120>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d003      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3a      	ldr	r2, [pc, #232]	; (800191c <TIM_Base_SetConfig+0x124>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d108      	bne.n	800184a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a2f      	ldr	r2, [pc, #188]	; (800190c <TIM_Base_SetConfig+0x114>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d02b      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d027      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a2c      	ldr	r2, [pc, #176]	; (8001910 <TIM_Base_SetConfig+0x118>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d023      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <TIM_Base_SetConfig+0x11c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <TIM_Base_SetConfig+0x120>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01b      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <TIM_Base_SetConfig+0x124>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d017      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a28      	ldr	r2, [pc, #160]	; (8001920 <TIM_Base_SetConfig+0x128>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <TIM_Base_SetConfig+0x12c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00f      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <TIM_Base_SetConfig+0x130>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00b      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <TIM_Base_SetConfig+0x134>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <TIM_Base_SetConfig+0x138>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d003      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a23      	ldr	r2, [pc, #140]	; (8001934 <TIM_Base_SetConfig+0x13c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d108      	bne.n	80018bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <TIM_Base_SetConfig+0x114>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d003      	beq.n	80018f0 <TIM_Base_SetConfig+0xf8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <TIM_Base_SetConfig+0x124>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d103      	bne.n	80018f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	615a      	str	r2, [r3, #20]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40010000 	.word	0x40010000
 8001910:	40000400 	.word	0x40000400
 8001914:	40000800 	.word	0x40000800
 8001918:	40000c00 	.word	0x40000c00
 800191c:	40010400 	.word	0x40010400
 8001920:	40014000 	.word	0x40014000
 8001924:	40014400 	.word	0x40014400
 8001928:	40014800 	.word	0x40014800
 800192c:	40001800 	.word	0x40001800
 8001930:	40001c00 	.word	0x40001c00
 8001934:	40002000 	.word	0x40002000

08001938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f7fe fe05 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f84d 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 f8b5 	bl	8001adc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8001972:	481f      	ldr	r0, [pc, #124]	; (80019f0 <main+0x90>)
 8001974:	f003 faa2 	bl	8004ebc <SEGGER_UART_init>

  //CYCLCNT enable
   DWT_CTRL |= ( 1 << 0);
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <main+0x94>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <main+0x94>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

   SEGGER_SYSVIEW_Conf();
 8001984:	f003 f85c 	bl	8004a40 <SEGGER_SYSVIEW_Conf>

//   SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2302      	movs	r3, #2
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	22c8      	movs	r2, #200	; 0xc8
 8001996:	4918      	ldr	r1, [pc, #96]	; (80019f8 <main+0x98>)
 8001998:	4818      	ldr	r0, [pc, #96]	; (80019fc <main+0x9c>)
 800199a:	f000 ff57 	bl	800284c <xTaskCreate>
 800199e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d009      	beq.n	80019ba <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80019a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019aa:	f383 8811 	msr	BASEPRI, r3
 80019ae:	f3bf 8f6f 	isb	sy
 80019b2:	f3bf 8f4f 	dsb	sy
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e7fe      	b.n	80019b8 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, NULL, 3, &task2_handle);
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2303      	movs	r3, #3
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	22c8      	movs	r2, #200	; 0xc8
 80019c6:	490e      	ldr	r1, [pc, #56]	; (8001a00 <main+0xa0>)
 80019c8:	480e      	ldr	r0, [pc, #56]	; (8001a04 <main+0xa4>)
 80019ca:	f000 ff3f 	bl	800284c <xTaskCreate>
 80019ce:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d009      	beq.n	80019ea <main+0x8a>
 80019d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019da:	f383 8811 	msr	BASEPRI, r3
 80019de:	f3bf 8f6f 	isb	sy
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e7fe      	b.n	80019e8 <main+0x88>

  vTaskStartScheduler();
 80019ea:	f001 f9cd 	bl	8002d88 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <main+0x8e>
 80019f0:	0007a120 	.word	0x0007a120
 80019f4:	e0001000 	.word	0xe0001000
 80019f8:	08006cac 	.word	0x08006cac
 80019fc:	08001e3d 	.word	0x08001e3d
 8001a00:	08006cb4 	.word	0x08006cb4
 8001a04:	08001e61 	.word	0x08001e61

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b094      	sub	sp, #80	; 0x50
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	f107 0320 	add.w	r3, r7, #32
 8001a12:	2230      	movs	r2, #48	; 0x30
 8001a14:	2100      	movs	r1, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f005 f934 	bl	8006c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <SystemClock_Config+0xcc>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a21      	ldr	r2, [pc, #132]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <SystemClock_Config+0xd0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a70:	2302      	movs	r3, #2
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a74:	2300      	movs	r3, #0
 8001a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a7c:	23a8      	movs	r3, #168	; 0xa8
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a84:	2307      	movs	r3, #7
 8001a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8a9 	bl	8000be4 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a98:	f000 fa14 	bl	8001ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2105      	movs	r1, #5
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fb02 	bl	80010c4 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ac6:	f000 f9fd 	bl	8001ec4 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3750      	adds	r7, #80	; 0x50
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	4ba5      	ldr	r3, [pc, #660]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4aa4      	ldr	r2, [pc, #656]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4ba2      	ldr	r3, [pc, #648]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
 8001b12:	4b9e      	ldr	r3, [pc, #632]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a9d      	ldr	r2, [pc, #628]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b9b      	ldr	r3, [pc, #620]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	4b97      	ldr	r3, [pc, #604]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b94      	ldr	r3, [pc, #592]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a8f      	ldr	r2, [pc, #572]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b8d      	ldr	r3, [pc, #564]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a88      	ldr	r2, [pc, #544]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b82      	ldr	r3, [pc, #520]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a81      	ldr	r2, [pc, #516]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b7f      	ldr	r3, [pc, #508]	; (8001d8c <MX_GPIO_Init+0x2b0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	487c      	ldr	r0, [pc, #496]	; (8001d90 <MX_GPIO_Init+0x2b4>)
 8001ba0:	f7fe ffc8 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	487a      	ldr	r0, [pc, #488]	; (8001d94 <MX_GPIO_Init+0x2b8>)
 8001baa:	f7fe ffc3 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001bb4:	4878      	ldr	r0, [pc, #480]	; (8001d98 <MX_GPIO_Init+0x2bc>)
 8001bb6:	f7fe ffbd 	bl	8000b34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001bba:	2308      	movs	r3, #8
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	486f      	ldr	r0, [pc, #444]	; (8001d90 <MX_GPIO_Init+0x2b4>)
 8001bd2:	f7fe fe15 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 031c 	add.w	r3, r7, #28
 8001bea:	4619      	mov	r1, r3
 8001bec:	4869      	ldr	r0, [pc, #420]	; (8001d94 <MX_GPIO_Init+0x2b8>)
 8001bee:	f7fe fe07 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c02:	2305      	movs	r3, #5
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4861      	ldr	r0, [pc, #388]	; (8001d94 <MX_GPIO_Init+0x2b8>)
 8001c0e:	f7fe fdf7 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c16:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <MX_GPIO_Init+0x2c0>)
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	485e      	ldr	r0, [pc, #376]	; (8001da0 <MX_GPIO_Init+0x2c4>)
 8001c26:	f7fe fdeb 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4856      	ldr	r0, [pc, #344]	; (8001da0 <MX_GPIO_Init+0x2c4>)
 8001c46:	f7fe fddb 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c4a:	23e0      	movs	r3, #224	; 0xe0
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	484e      	ldr	r0, [pc, #312]	; (8001da0 <MX_GPIO_Init+0x2c4>)
 8001c66:	f7fe fdcb 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4849      	ldr	r0, [pc, #292]	; (8001da4 <MX_GPIO_Init+0x2c8>)
 8001c7e:	f7fe fdbf 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c94:	2305      	movs	r3, #5
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4841      	ldr	r0, [pc, #260]	; (8001da4 <MX_GPIO_Init+0x2c8>)
 8001ca0:	f7fe fdae 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001ca4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001ca8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4836      	ldr	r0, [pc, #216]	; (8001d98 <MX_GPIO_Init+0x2bc>)
 8001cbe:	f7fe fd9f 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001cc2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cd4:	2306      	movs	r3, #6
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	4619      	mov	r1, r3
 8001cde:	482d      	ldr	r0, [pc, #180]	; (8001d94 <MX_GPIO_Init+0x2b8>)
 8001ce0:	f7fe fd8e 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4829      	ldr	r0, [pc, #164]	; (8001da0 <MX_GPIO_Init+0x2c4>)
 8001cfa:	f7fe fd81 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001cfe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d10:	230a      	movs	r3, #10
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 031c 	add.w	r3, r7, #28
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4821      	ldr	r0, [pc, #132]	; (8001da0 <MX_GPIO_Init+0x2c4>)
 8001d1c:	f7fe fd70 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d20:	2320      	movs	r3, #32
 8001d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4819      	ldr	r0, [pc, #100]	; (8001d98 <MX_GPIO_Init+0x2bc>)
 8001d34:	f7fe fd64 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d38:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3e:	2312      	movs	r3, #18
 8001d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	4619      	mov	r1, r3
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_GPIO_Init+0x2c8>)
 8001d56:	f7fe fd53 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <MX_GPIO_Init+0x2cc>)
 8001d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4808      	ldr	r0, [pc, #32]	; (8001d90 <MX_GPIO_Init+0x2b4>)
 8001d6e:	f7fe fd47 	bl	8000800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2106      	movs	r1, #6
 8001d76:	2006      	movs	r0, #6
 8001d78:	f7fe fd18 	bl	80007ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d7c:	2006      	movs	r0, #6
 8001d7e:	f7fe fd31 	bl	80007e4 <HAL_NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	10210000 	.word	0x10210000
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	10120000 	.word	0x10120000

08001dac <switch_priority>:

/* USER CODE BEGIN 4 */
void switch_priority(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8001db6:	f002 fb1d 	bl	80043f4 <vPortEnterCritical>
	if(status_button){
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <switch_priority+0x84>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <switch_priority+0x20>
		status_button = 0;
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <switch_priority+0x84>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8001dcc:	f002 fb40 	bl	8004450 <vPortExitCritical>

	if(switch_priority){
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d027      	beq.n	8001e26 <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 8001dd6:	4817      	ldr	r0, [pc, #92]	; (8001e34 <switch_priority+0x88>)
 8001dd8:	f001 f9d2 	bl	8003180 <xTaskGetHandle>
 8001ddc:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 8001dde:	4816      	ldr	r0, [pc, #88]	; (8001e38 <switch_priority+0x8c>)
 8001de0:	f001 f9ce 	bl	8003180 <xTaskGetHandle>
 8001de4:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8001de6:	6938      	ldr	r0, [r7, #16]
 8001de8:	f000 fec8 	bl	8002b7c <uxTaskPriorityGet>
 8001dec:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fec4 	bl	8002b7c <uxTaskPriorityGet>
 8001df4:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8001df6:	f001 fe23 	bl	8003a40 <xTaskGetCurrentTaskHandle>
 8001dfa:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d108      	bne.n	8001e16 <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6938      	ldr	r0, [r7, #16]
 8001e08:	f000 fed2 	bl	8002bb0 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fece 	bl	8002bb0 <vTaskPrioritySet>
		}else{
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}
}
 8001e14:	e007      	b.n	8001e26 <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fec9 	bl	8002bb0 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	6938      	ldr	r0, [r7, #16]
 8001e22:	f000 fec5 	bl	8002bb0 <vTaskPrioritySet>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000038 	.word	0x20000038
 8001e34:	08006cac 	.word	0x08006cac
 8001e38:	08006cb4 	.word	0x08006cb4

08001e3c <task1_handler>:

static void task1_handler(void* parameters)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8001e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <task1_handler+0x20>)
 8001e4a:	f7fe fe8c 	bl	8000b66 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001e4e:	2064      	movs	r0, #100	; 0x64
 8001e50:	f7fe fbd2 	bl	80005f8 <HAL_Delay>
		switch_priority();
 8001e54:	f7ff ffaa 	bl	8001dac <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8001e58:	e7f4      	b.n	8001e44 <task1_handler+0x8>
 8001e5a:	bf00      	nop
 8001e5c:	40020c00 	.word	0x40020c00

08001e60 <task2_handler>:
	}
}


static void task2_handler(void* parameters)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8001e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <task2_handler+0x20>)
 8001e6e:	f7fe fe7a 	bl	8000b66 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e76:	f7fe fbbf 	bl	80005f8 <HAL_Delay>
		switch_priority();
 8001e7a:	f7ff ff97 	bl	8001dac <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8001e7e:	e7f3      	b.n	8001e68 <task2_handler+0x8>
 8001e80:	40020c00 	.word	0x40020c00

08001e84 <button_interrupt_handler>:
	}
}


void button_interrupt_handler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8001e88:	f004 fb8c 	bl	80065a4 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <button_interrupt_handler+0x18>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8001e92:	f004 fbc9 	bl	8006628 <SEGGER_SYSVIEW_RecordExitISR>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000038 	.word	0x20000038

08001ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eb2:	f7fe fb81 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40001000 	.word	0x40001000

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001f12:	f002 f9f5 	bl	8004300 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	2036      	movs	r0, #54	; 0x36
 8001f3a:	f7fe fc37 	bl	80007ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001f3e:	2036      	movs	r0, #54	; 0x36
 8001f40:	f7fe fc50 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fa88 	bl	8001480 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f70:	f7ff fa72 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_InitTick+0xa8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3b01      	subs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <HAL_InitTick+0xb0>)
 8001f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <HAL_InitTick+0xac>)
 8001faa:	f7ff fa9b 	bl	80014e4 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fb6:	f7ff faca 	bl	800154e <HAL_TIM_Base_Start_IT>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	2001a780 	.word	0x2001a780
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8002010:	f7ff ff38 	bl	8001e84 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002014:	2001      	movs	r0, #1
 8002016:	f7fe fdc1 	bl	8000b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE END EXTI0_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM6_DAC_IRQHandler+0x10>)
 8002026:	f7ff fab6 	bl	8001596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2001a780 	.word	0x2001a780

08002034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <SystemInit+0x28>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	4a07      	ldr	r2, [pc, #28]	; (800205c <SystemInit+0x28>)
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002048:	4b04      	ldr	r3, [pc, #16]	; (800205c <SystemInit+0x28>)
 800204a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800204e:	609a      	str	r2, [r3, #8]
#endif
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002066:	e003      	b.n	8002070 <LoopCopyDataInit>

08002068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800206a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800206c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800206e:	3104      	adds	r1, #4

08002070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002070:	480b      	ldr	r0, [pc, #44]	; (80020a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002078:	d3f6      	bcc.n	8002068 <CopyDataInit>
  ldr  r2, =_sbss
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800207c:	e002      	b.n	8002084 <LoopFillZerobss>

0800207e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800207e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002080:	f842 3b04 	str.w	r3, [r2], #4

08002084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002084:	4b09      	ldr	r3, [pc, #36]	; (80020ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002088:	d3f9      	bcc.n	800207e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800208a:	f7ff ffd3 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208e:	f004 fdbb 	bl	8006c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002092:	f7ff fc65 	bl	8001960 <main>
  bx  lr    
 8002096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002098:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800209c:	08006de0 	.word	0x08006de0
  ldr  r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020a4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80020a8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80020ac:	2001a8a8 	.word	0x2001a8a8

080020b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b0:	e7fe      	b.n	80020b0 <ADC_IRQHandler>

080020b2 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 0208 	add.w	r2, r3, #8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 0208 	add.w	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f103 0208 	add.w	r2, r3, #8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d103      	bne.n	800212c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e00c      	b.n	8002146 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3308      	adds	r3, #8
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e002      	b.n	800213a <vListInsert+0x2e>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	429a      	cmp	r2, r3
 8002144:	d2f6      	bcs.n	8002134 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6892      	ldr	r2, [r2, #8]
 8002194:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6852      	ldr	r2, [r2, #4]
 800219e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d103      	bne.n	80021b2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021de:	2301      	movs	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <xQueueGenericReset+0x2c>
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e7fe      	b.n	80021fe <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d063      	beq.n	80022ce <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800220a:	2b00      	cmp	r3, #0
 800220c:	d05f      	beq.n	80022ce <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2000      	movs	r0, #0
 8002218:	fba2 1203 	umull	r1, r2, r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f04f 0400 	mov.w	r4, #0
 8002224:	0013      	movs	r3, r2
 8002226:	2400      	movs	r4, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d000      	beq.n	800222e <xQueueGenericReset+0x5a>
 800222c:	2001      	movs	r0, #1
 800222e:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d14c      	bne.n	80022ce <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002234:	f002 f8de 	bl	80043f4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	441a      	add	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2200      	movs	r2, #0
 8002252:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	3b01      	subs	r3, #1
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	441a      	add	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	22ff      	movs	r2, #255	; 0xff
 8002280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d114      	bne.n	80022b4 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01a      	beq.n	80022c8 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	3310      	adds	r3, #16
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f9c4 	bl	8003624 <xTaskRemoveFromEventList>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <xQueueGenericReset+0x124>)
 80022a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	e009      	b.n	80022c8 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3310      	adds	r3, #16
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fefa 	bl	80020b2 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	3324      	adds	r3, #36	; 0x24
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fef5 	bl	80020b2 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022c8:	f002 f8c2 	bl	8004450 <vPortExitCritical>
 80022cc:	e001      	b.n	80022d2 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <xQueueGenericReset+0x118>
 80022d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022dc:	f383 8811 	msr	BASEPRI, r3
 80022e0:	f3bf 8f6f 	isb	sy
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	e7fe      	b.n	80022ea <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022ec:	697b      	ldr	r3, [r7, #20]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b08b      	sub	sp, #44	; 0x2c
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d034      	beq.n	800237e <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002314:	2000      	movs	r0, #0
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	fba2 1203 	umull	r1, r2, r2, r3
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	f04f 0400 	mov.w	r4, #0
 8002326:	0013      	movs	r3, r2
 8002328:	2400      	movs	r4, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d000      	beq.n	8002330 <xQueueGenericCreate+0x34>
 800232e:	2001      	movs	r0, #1
 8002330:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d123      	bne.n	800237e <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800233e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002342:	d81c      	bhi.n	800237e <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	3350      	adds	r3, #80	; 0x50
 8002352:	4618      	mov	r0, r3
 8002354:	f002 f96e 	bl	8004634 <pvPortMalloc>
 8002358:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3350      	adds	r3, #80	; 0x50
 8002368:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f813 	bl	80023a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800237c:	e00c      	b.n	8002398 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <xQueueGenericCreate+0x9c>
 8002384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002388:	f383 8811 	msr	BASEPRI, r3
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e7fe      	b.n	8002396 <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002398:	69fb      	ldr	r3, [r7, #28]
    }
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd90      	pop	{r4, r7, pc}

080023a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e002      	b.n	80023c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023d0:	2101      	movs	r1, #1
 80023d2:	69b8      	ldr	r0, [r7, #24]
 80023d4:	f7ff fefe 	bl	80021d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	78fa      	ldrb	r2, [r7, #3]
 80023dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	2073      	movs	r0, #115	; 0x73
 80023e8:	f003 fd0c 	bl	8005e04 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b08f      	sub	sp, #60	; 0x3c
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <xQueueReceive+0x2e>
 800240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002412:	f383 8811 	msr	BASEPRI, r3
 8002416:	f3bf 8f6f 	isb	sy
 800241a:	f3bf 8f4f 	dsb	sy
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	e7fe      	b.n	8002420 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <xQueueReceive+0x3c>
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <xQueueReceive+0x40>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <xQueueReceive+0x42>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <xQueueReceive+0x5a>
 800243a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243e:	f383 8811 	msr	BASEPRI, r3
 8002442:	f3bf 8f6f 	isb	sy
 8002446:	f3bf 8f4f 	dsb	sy
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	e7fe      	b.n	800244c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800244e:	f001 fb07 	bl	8003a60 <xTaskGetSchedulerState>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <xQueueReceive+0x6a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <xQueueReceive+0x6e>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <xQueueReceive+0x70>
 8002462:	2300      	movs	r3, #0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d109      	bne.n	800247c <xQueueReceive+0x88>
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e7fe      	b.n	800247a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800247c:	f001 ffba 	bl	80043f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2b00      	cmp	r3, #0
 800248a:	d031      	beq.n	80024f0 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002490:	f000 f8c4 	bl	800261c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002496:	4618      	mov	r0, r3
 8002498:	f004 fa40 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 800249c:	4604      	mov	r4, r0
 800249e:	2000      	movs	r0, #0
 80024a0:	f004 fa3c 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 80024a4:	4601      	mov	r1, r0
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	460a      	mov	r2, r1
 80024b0:	4621      	mov	r1, r4
 80024b2:	205c      	movs	r0, #92	; 0x5c
 80024b4:	f003 fd1c 	bl	8005ef0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00f      	beq.n	80024e8 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ca:	3310      	adds	r3, #16
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f8a9 	bl	8003624 <xTaskRemoveFromEventList>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024d8:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <xQueueReceive+0x224>)
 80024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024e8:	f001 ffb2 	bl	8004450 <vPortExitCritical>
                return pdPASS;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e08e      	b.n	800260e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d115      	bne.n	8002522 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024f6:	f001 ffab 	bl	8004450 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fa0d 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 8002502:	4604      	mov	r4, r0
 8002504:	2000      	movs	r0, #0
 8002506:	f004 fa09 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 800250a:	4601      	mov	r1, r0
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	2301      	movs	r3, #1
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	460a      	mov	r2, r1
 8002516:	4621      	mov	r1, r4
 8002518:	205c      	movs	r0, #92	; 0x5c
 800251a:	f003 fce9 	bl	8005ef0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800251e:	2300      	movs	r3, #0
 8002520:	e075      	b.n	800260e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4618      	mov	r0, r3
 800252e:	f001 f951 	bl	80037d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002532:	2301      	movs	r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002536:	f001 ff8b 	bl	8004450 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800253a:	f000 fc85 	bl	8002e48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800253e:	f001 ff59 	bl	80043f4 <vPortEnterCritical>
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002548:	b25b      	sxtb	r3, r3
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d103      	bne.n	8002558 <xQueueReceive+0x164>
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800255e:	b25b      	sxtb	r3, r3
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d103      	bne.n	800256e <xQueueReceive+0x17a>
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800256e:	f001 ff6f 	bl	8004450 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002572:	1d3a      	adds	r2, r7, #4
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f001 f940 	bl	8003800 <xTaskCheckForTimeOut>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d124      	bne.n	80025d0 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002588:	f000 f8c0 	bl	800270c <prvIsQueueEmpty>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	3324      	adds	r3, #36	; 0x24
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f000 ffd6 	bl	800354c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a2:	f000 f861 	bl	8002668 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025a6:	f000 fc5d 	bl	8002e64 <xTaskResumeAll>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f47f af65 	bne.w	800247c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80025b2:	4b19      	ldr	r3, [pc, #100]	; (8002618 <xQueueReceive+0x224>)
 80025b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	e75b      	b.n	800247c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025c6:	f000 f84f 	bl	8002668 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025ca:	f000 fc4b 	bl	8002e64 <xTaskResumeAll>
 80025ce:	e755      	b.n	800247c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d2:	f000 f849 	bl	8002668 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025d6:	f000 fc45 	bl	8002e64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025dc:	f000 f896 	bl	800270c <prvIsQueueEmpty>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f43f af4a 	beq.w	800247c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 f996 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 80025f0:	4604      	mov	r4, r0
 80025f2:	2000      	movs	r0, #0
 80025f4:	f004 f992 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 80025f8:	4601      	mov	r1, r0
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	2301      	movs	r3, #1
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	460a      	mov	r2, r1
 8002604:	4621      	mov	r1, r4
 8002606:	205c      	movs	r0, #92	; 0x5c
 8002608:	f003 fc72 	bl	8005ef0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800260c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800260e:	4618      	mov	r0, r3
 8002610:	3734      	adds	r7, #52	; 0x34
 8002612:	46bd      	mov	sp, r7
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	bf00      	nop
 8002618:	e000ed04 	.word	0xe000ed04

0800261c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	441a      	add	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	429a      	cmp	r2, r3
 8002646:	d303      	bcc.n	8002650 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68d9      	ldr	r1, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	461a      	mov	r2, r3
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f004 fb07 	bl	8006c6e <memcpy>
    }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002670:	f001 fec0 	bl	80043f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800267c:	e011      	b.n	80026a2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3324      	adds	r3, #36	; 0x24
 800268a:	4618      	mov	r0, r3
 800268c:	f000 ffca 	bl	8003624 <xTaskRemoveFromEventList>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002696:	f001 f917 	bl	80038c8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	3b01      	subs	r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	dce9      	bgt.n	800267e <prvUnlockQueue+0x16>
 80026aa:	e000      	b.n	80026ae <prvUnlockQueue+0x46>
                        break;
 80026ac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80026b6:	f001 fecb 	bl	8004450 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026ba:	f001 fe9b 	bl	80043f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026c4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026c6:	e011      	b.n	80026ec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3310      	adds	r3, #16
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 ffa5 	bl	8003624 <xTaskRemoveFromEventList>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026e0:	f001 f8f2 	bl	80038c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026e4:	7bbb      	ldrb	r3, [r7, #14]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	dce9      	bgt.n	80026c8 <prvUnlockQueue+0x60>
 80026f4:	e000      	b.n	80026f8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026f6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	22ff      	movs	r2, #255	; 0xff
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002700:	f001 fea6 	bl	8004450 <vPortExitCritical>
}
 8002704:	bf00      	nop
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002714:	f001 fe6e 	bl	80043f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002720:	2301      	movs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e001      	b.n	800272a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800272a:	f001 fe91 	bl	8004450 <vPortExitCritical>

    return xReturn;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <vQueueAddToRegistry+0x24>
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e7fe      	b.n	800275a <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d024      	beq.n	80027b0 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e01e      	b.n	80027aa <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800276c:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <vQueueAddToRegistry+0xa8>)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	d105      	bne.n	8002788 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <vQueueAddToRegistry+0xa8>)
 8002782:	4413      	add	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
                    break;
 8002786:	e013      	b.n	80027b0 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <vQueueAddToRegistry+0x6c>
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <vQueueAddToRegistry+0xa8>)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <vQueueAddToRegistry+0xa8>)
 80027a0:	4413      	add	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3301      	adds	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b07      	cmp	r3, #7
 80027ae:	d9dd      	bls.n	800276c <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f004 f8a9 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 80027ca:	4601      	mov	r1, r0
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	2071      	movs	r0, #113	; 0x71
 80027d2:	f003 fabd 	bl	8005d50 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2001a7c0 	.word	0x2001a7c0

080027e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027f4:	f001 fdfe 	bl	80043f4 <vPortEnterCritical>
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d103      	bne.n	800280e <vQueueWaitForMessageRestricted+0x2a>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002814:	b25b      	sxtb	r3, r3
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d103      	bne.n	8002824 <vQueueWaitForMessageRestricted+0x40>
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002824:	f001 fe14 	bl	8004450 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3324      	adds	r3, #36	; 0x24
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 feab 	bl	8003594 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff12 	bl	8002668 <prvUnlockQueue>
    }
 8002844:	bf00      	nop
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af04      	add	r7, sp, #16
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fee7 	bl	8004634 <pvPortMalloc>
 8002866:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800286e:	2058      	movs	r0, #88	; 0x58
 8002870:	f001 fee0 	bl	8004634 <pvPortMalloc>
 8002874:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
 8002882:	e005      	b.n	8002890 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f001 ffb1 	bl	80047ec <vPortFree>
 800288a:	e001      	b.n	8002890 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d013      	beq.n	80028be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	2300      	movs	r3, #0
 800289a:	9303      	str	r3, [sp, #12]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	9302      	str	r3, [sp, #8]
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f80e 	bl	80028ce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80028b2:	69f8      	ldr	r0, [r7, #28]
 80028b4:	f000 f8ae 	bl	8002a14 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028b8:	2301      	movs	r3, #1
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e002      	b.n	80028c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028c4:	69bb      	ldr	r3, [r7, #24]
    }
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b088      	sub	sp, #32
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	461a      	mov	r2, r3
 80028e6:	21a5      	movs	r1, #165	; 0xa5
 80028e8:	f004 f9cc 	bl	8006c84 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028f6:	3b01      	subs	r3, #1
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f023 0307 	bic.w	r3, r3, #7
 8002904:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <prvInitialiseNewTask+0x56>
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e7fe      	b.n	8002922 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01f      	beq.n	800296a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	e012      	b.n	8002956 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	7819      	ldrb	r1, [r3, #0]
 8002938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	3334      	adds	r3, #52	; 0x34
 8002940:	460a      	mov	r2, r1
 8002942:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	3301      	adds	r3, #1
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2b09      	cmp	r3, #9
 800295a:	d9e9      	bls.n	8002930 <prvInitialiseNewTask+0x62>
 800295c:	e000      	b.n	8002960 <prvInitialiseNewTask+0x92>
            {
                break;
 800295e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002968:	e003      	b.n	8002972 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	2b04      	cmp	r3, #4
 8002976:	d909      	bls.n	800298c <prvInitialiseNewTask+0xbe>
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	e7fe      	b.n	800298a <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	2b04      	cmp	r3, #4
 8002990:	d901      	bls.n	8002996 <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002992:	2304      	movs	r3, #4
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	2200      	movs	r2, #0
 80029a6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	3304      	adds	r3, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fba0 	bl	80020f2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	3318      	adds	r3, #24
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fb9b 	bl	80020f2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	f1c3 0205 	rsb	r2, r3, #5
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	3350      	adds	r3, #80	; 0x50
 80029d6:	2204      	movs	r2, #4
 80029d8:	2100      	movs	r1, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f952 	bl	8006c84 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80029e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e2:	3354      	adds	r3, #84	; 0x54
 80029e4:	2201      	movs	r2, #1
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f004 f94b 	bl	8006c84 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	68f9      	ldr	r1, [r7, #12]
 80029f2:	69b8      	ldr	r0, [r7, #24]
 80029f4:	f001 fb5e 	bl	80040b4 <pxPortInitialiseStack>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a0a:	bf00      	nop
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a14:	b5b0      	push	{r4, r5, r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a1c:	f001 fcea 	bl	80043f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a20:	4b4f      	ldr	r3, [pc, #316]	; (8002b60 <prvAddNewTaskToReadyList+0x14c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	4a4e      	ldr	r2, [pc, #312]	; (8002b60 <prvAddNewTaskToReadyList+0x14c>)
 8002a28:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <prvAddNewTaskToReadyList+0x150>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a32:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <prvAddNewTaskToReadyList+0x150>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a38:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <prvAddNewTaskToReadyList+0x14c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d110      	bne.n	8002a62 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a40:	f000 ff66 	bl	8003910 <prvInitialiseTaskLists>
 8002a44:	e00d      	b.n	8002a62 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a46:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <prvAddNewTaskToReadyList+0x154>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a4e:	4b45      	ldr	r3, [pc, #276]	; (8002b64 <prvAddNewTaskToReadyList+0x150>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d802      	bhi.n	8002a62 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a5c:	4a41      	ldr	r2, [pc, #260]	; (8002b64 <prvAddNewTaskToReadyList+0x150>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a62:	4b42      	ldr	r3, [pc, #264]	; (8002b6c <prvAddNewTaskToReadyList+0x158>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	4a40      	ldr	r2, [pc, #256]	; (8002b6c <prvAddNewTaskToReadyList+0x158>)
 8002a6a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <prvAddNewTaskToReadyList+0x158>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d016      	beq.n	8002aa8 <prvAddNewTaskToReadyList+0x94>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fe27 	bl	80066d0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	461d      	mov	r5, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461c      	mov	r4, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	1ae3      	subs	r3, r4, r3
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	f002 f866 	bl	8004b74 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 fe94 	bl	80067d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <prvAddNewTaskToReadyList+0x15c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	4a2c      	ldr	r2, [pc, #176]	; (8002b70 <prvAddNewTaskToReadyList+0x15c>)
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	492b      	ldr	r1, [pc, #172]	; (8002b74 <prvAddNewTaskToReadyList+0x160>)
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	3204      	adds	r2, #4
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	1d1a      	adds	r2, r3, #4
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <prvAddNewTaskToReadyList+0x160>)
 8002b06:	441a      	add	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	615a      	str	r2, [r3, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	4918      	ldr	r1, [pc, #96]	; (8002b74 <prvAddNewTaskToReadyList+0x160>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	1c59      	adds	r1, r3, #1
 8002b20:	4814      	ldr	r0, [pc, #80]	; (8002b74 <prvAddNewTaskToReadyList+0x160>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b2e:	f001 fc8f 	bl	8004450 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b32:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <prvAddNewTaskToReadyList+0x154>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00e      	beq.n	8002b58 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <prvAddNewTaskToReadyList+0x150>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <prvAddNewTaskToReadyList+0x164>)
 8002b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b60:	20000114 	.word	0x20000114
 8002b64:	2000003c 	.word	0x2000003c
 8002b68:	20000120 	.word	0x20000120
 8002b6c:	20000130 	.word	0x20000130
 8002b70:	2000011c 	.word	0x2000011c
 8002b74:	20000040 	.word	0x20000040
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002b84:	f001 fc36 	bl	80043f4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <uxTaskPriorityGet+0x18>
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <uxTaskPriorityGet+0x30>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e000      	b.n	8002b96 <uxTaskPriorityGet+0x1a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002b9e:	f001 fc57 	bl	8004450 <vPortExitCritical>

        return uxReturn;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
    }
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	2000003c 	.word	0x2000003c

08002bb0 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08a      	sub	sp, #40	; 0x28
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d909      	bls.n	8002bd8 <vTaskPrioritySet+0x28>
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	e7fe      	b.n	8002bd6 <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d901      	bls.n	8002be2 <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bde:	2304      	movs	r3, #4
 8002be0:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002be2:	f001 fc07 	bl	80043f4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <vTaskPrioritySet+0x42>
 8002bec:	4b62      	ldr	r3, [pc, #392]	; (8002d78 <vTaskPrioritySet+0x1c8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e000      	b.n	8002bf4 <vTaskPrioritySet+0x44>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fe8f 	bl	800691c <SEGGER_SYSVIEW_ShrinkId>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	4619      	mov	r1, r3
 8002c04:	2028      	movs	r0, #40	; 0x28
 8002c06:	f003 f8a3 	bl	8005d50 <SEGGER_SYSVIEW_RecordU32x2>
 8002c0a:	69b8      	ldr	r0, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	461a      	mov	r2, r3
 8002c18:	2300      	movs	r3, #0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	f002 f810 	bl	8004c44 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c28:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	f000 809c 	beq.w	8002d6c <vTaskPrioritySet+0x1bc>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d90d      	bls.n	8002c58 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002c3c:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <vTaskPrioritySet+0x1c8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d00f      	beq.n	8002c66 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002c46:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <vTaskPrioritySet+0x1c8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d309      	bcc.n	8002c66 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e006      	b.n	8002c66 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002c58:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <vTaskPrioritySet+0x1c8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d101      	bne.n	8002c66 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d102      	bne.n	8002c7e <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db04      	blt.n	8002c96 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f1c3 0205 	rsb	r2, r3, #5
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6959      	ldr	r1, [r3, #20]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4a35      	ldr	r2, [pc, #212]	; (8002d7c <vTaskPrioritySet+0x1cc>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4299      	cmp	r1, r3
 8002caa:	d154      	bne.n	8002d56 <vTaskPrioritySet+0x1a6>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fa64 	bl	800217e <uxListRemove>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <vTaskPrioritySet+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	4a2c      	ldr	r2, [pc, #176]	; (8002d80 <vTaskPrioritySet+0x1d0>)
 8002cce:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fd80 	bl	80067d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	2201      	movs	r2, #1
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <vTaskPrioritySet+0x1d0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	4a26      	ldr	r2, [pc, #152]	; (8002d80 <vTaskPrioritySet+0x1d0>)
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cee:	4923      	ldr	r1, [pc, #140]	; (8002d7c <vTaskPrioritySet+0x1cc>)
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	3204      	adds	r2, #4
 8002d16:	605a      	str	r2, [r3, #4]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1d1a      	adds	r2, r3, #4
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <vTaskPrioritySet+0x1cc>)
 8002d2e:	441a      	add	r2, r3
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	4910      	ldr	r1, [pc, #64]	; (8002d7c <vTaskPrioritySet+0x1cc>)
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <vTaskPrioritySet+0x1cc>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4403      	add	r3, r0
 8002d54:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <vTaskPrioritySet+0x1bc>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <vTaskPrioritySet+0x1d4>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002d6c:	f001 fb70 	bl	8004450 <vPortExitCritical>
    }
 8002d70:	bf00      	nop
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	2000003c 	.word	0x2000003c
 8002d7c:	20000040 	.word	0x20000040
 8002d80:	2000011c 	.word	0x2000011c
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <vTaskStartScheduler+0xa0>)
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	2300      	movs	r3, #0
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	2300      	movs	r3, #0
 8002d98:	2282      	movs	r2, #130	; 0x82
 8002d9a:	4924      	ldr	r1, [pc, #144]	; (8002e2c <vTaskStartScheduler+0xa4>)
 8002d9c:	4824      	ldr	r0, [pc, #144]	; (8002e30 <vTaskStartScheduler+0xa8>)
 8002d9e:	f7ff fd55 	bl	800284c <xTaskCreate>
 8002da2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002daa:	f000 ff03 	bl	8003bb4 <xTimerCreateTimerTask>
 8002dae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d123      	bne.n	8002dfe <vTaskStartScheduler+0x76>
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <vTaskStartScheduler+0xac>)
 8002dca:	f04f 32ff 	mov.w	r2, #4294967295
 8002dce:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <vTaskStartScheduler+0xb0>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <vTaskStartScheduler+0xb4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ddc:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <vTaskStartScheduler+0xb8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <vTaskStartScheduler+0xa0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d102      	bne.n	8002dee <vTaskStartScheduler+0x66>
 8002de8:	f003 fc56 	bl	8006698 <SEGGER_SYSVIEW_OnIdle>
 8002dec:	e004      	b.n	8002df8 <vTaskStartScheduler+0x70>
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <vTaskStartScheduler+0xb8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fcae 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002df8:	f001 f9e4 	bl	80041c4 <xPortStartScheduler>
 8002dfc:	e00d      	b.n	8002e1a <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d109      	bne.n	8002e1a <vTaskStartScheduler+0x92>
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	e7fe      	b.n	8002e18 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <vTaskStartScheduler+0xbc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000138 	.word	0x20000138
 8002e2c:	08006cbc 	.word	0x08006cbc
 8002e30:	080038e1 	.word	0x080038e1
 8002e34:	20000134 	.word	0x20000134
 8002e38:	20000120 	.word	0x20000120
 8002e3c:	20000118 	.word	0x20000118
 8002e40:	2000003c 	.word	0x2000003c
 8002e44:	2000000c 	.word	0x2000000c

08002e48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <vTaskSuspendAll+0x18>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a03      	ldr	r2, [pc, #12]	; (8002e60 <vTaskSuspendAll+0x18>)
 8002e54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	2000013c 	.word	0x2000013c

08002e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e72:	4b72      	ldr	r3, [pc, #456]	; (800303c <xTaskResumeAll+0x1d8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <xTaskResumeAll+0x2a>
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	e7fe      	b.n	8002e8c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e8e:	f001 fab1 	bl	80043f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e92:	4b6a      	ldr	r3, [pc, #424]	; (800303c <xTaskResumeAll+0x1d8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a68      	ldr	r2, [pc, #416]	; (800303c <xTaskResumeAll+0x1d8>)
 8002e9a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9c:	4b67      	ldr	r3, [pc, #412]	; (800303c <xTaskResumeAll+0x1d8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f040 80c4 	bne.w	800302e <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ea6:	4b66      	ldr	r3, [pc, #408]	; (8003040 <xTaskResumeAll+0x1dc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80bf 	beq.w	800302e <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb0:	e08e      	b.n	8002fd0 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb2:	4b64      	ldr	r3, [pc, #400]	; (8003044 <xTaskResumeAll+0x1e0>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	69fa      	ldr	r2, [r7, #28]
 8002ec6:	6a12      	ldr	r2, [r2, #32]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	69d2      	ldr	r2, [r2, #28]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3318      	adds	r3, #24
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d103      	bne.n	8002ee8 <xTaskResumeAll+0x84>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2200      	movs	r2, #0
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	1e5a      	subs	r2, r3, #1
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	6892      	ldr	r2, [r2, #8]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d103      	bne.n	8002f26 <xTaskResumeAll+0xc2>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fc4d 	bl	80067d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	2201      	movs	r2, #1
 8002f44:	409a      	lsls	r2, r3
 8002f46:	4b40      	ldr	r3, [pc, #256]	; (8003048 <xTaskResumeAll+0x1e4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	4a3e      	ldr	r2, [pc, #248]	; (8003048 <xTaskResumeAll+0x1e4>)
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	493d      	ldr	r1, [pc, #244]	; (800304c <xTaskResumeAll+0x1e8>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3304      	adds	r3, #4
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	3204      	adds	r2, #4
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	1d1a      	adds	r2, r3, #4
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4a2e      	ldr	r2, [pc, #184]	; (800304c <xTaskResumeAll+0x1e8>)
 8002f94:	441a      	add	r2, r3
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	615a      	str	r2, [r3, #20]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	492b      	ldr	r1, [pc, #172]	; (800304c <xTaskResumeAll+0x1e8>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	1c59      	adds	r1, r3, #1
 8002fae:	4827      	ldr	r0, [pc, #156]	; (800304c <xTaskResumeAll+0x1e8>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4403      	add	r3, r0
 8002fba:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	4b23      	ldr	r3, [pc, #140]	; (8003050 <xTaskResumeAll+0x1ec>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d302      	bcc.n	8002fd0 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8002fca:	4b22      	ldr	r3, [pc, #136]	; (8003054 <xTaskResumeAll+0x1f0>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <xTaskResumeAll+0x1e0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f af6c 	bne.w	8002eb2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fe0:	f000 fd12 	bl	8003a08 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <xTaskResumeAll+0x1f4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ff0:	f000 f92a 	bl	8003248 <xTaskIncrementTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <xTaskResumeAll+0x1f0>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3b01      	subs	r3, #1
 8003004:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f1      	bne.n	8002ff0 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <xTaskResumeAll+0x1f4>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <xTaskResumeAll+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <xTaskResumeAll+0x1f8>)
 8003020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800302e:	f001 fa0f 	bl	8004450 <vPortExitCritical>

    return xAlreadyYielded;
 8003032:	69bb      	ldr	r3, [r7, #24]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	2000013c 	.word	0x2000013c
 8003040:	20000114 	.word	0x20000114
 8003044:	200000d4 	.word	0x200000d4
 8003048:	2000011c 	.word	0x2000011c
 800304c:	20000040 	.word	0x20000040
 8003050:	2000003c 	.word	0x2000003c
 8003054:	20000128 	.word	0x20000128
 8003058:	20000124 	.word	0x20000124
 800305c:	e000ed04 	.word	0xe000ed04

08003060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <xTaskGetTickCount+0x1c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800306c:	687b      	ldr	r3, [r7, #4]
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000118 	.word	0x20000118

08003080 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003086:	f001 fa97 	bl	80045b8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <xTaskGetTickCountFromISR+0x20>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003094:	683b      	ldr	r3, [r7, #0]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000118 	.word	0x20000118

080030a4 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 80030a4:	b480      	push	{r7}
 80030a6:	b08b      	sub	sp, #44	; 0x2c
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d05b      	beq.n	8003172 <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	3308      	adds	r3, #8
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d104      	bne.n	80030de <prvSearchForNameWithinSingleList+0x3a>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3308      	adds	r3, #8
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d104      	bne.n	800310a <prvSearchForNameWithinSingleList+0x66>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003116:	2300      	movs	r3, #0
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	e01c      	b.n	8003156 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	4413      	add	r3, r2
 8003122:	3334      	adds	r3, #52	; 0x34
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	4413      	add	r3, r2
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	7afa      	ldrb	r2, [r7, #11]
 8003132:	429a      	cmp	r2, r3
 8003134:	d002      	beq.n	800313c <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e006      	b.n	800314a <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	3301      	adds	r3, #1
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d9df      	bls.n	800311c <prvSearchForNameWithinSingleList+0x78>
 800315c:	e000      	b.n	8003160 <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 800315e:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d1bb      	bne.n	80030e6 <prvSearchForNameWithinSingleList+0x42>
 800316e:	e000      	b.n	8003172 <prvSearchForNameWithinSingleList+0xce>
                    break;
 8003170:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003174:	4618      	mov	r0, r3
 8003176:	372c      	adds	r7, #44	; 0x2c
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003188:	2305      	movs	r3, #5
 800318a:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7fd f869 	bl	8000264 <strlen>
 8003192:	4603      	mov	r3, r0
 8003194:	2b09      	cmp	r3, #9
 8003196:	d909      	bls.n	80031ac <xTaskGetHandle+0x2c>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e7fe      	b.n	80031aa <xTaskGetHandle+0x2a>

        vTaskSuspendAll();
 80031ac:	f7ff fe4c 	bl	8002e48 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <xTaskGetHandle+0xb4>)
 80031c2:	4413      	add	r3, r2
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff6c 	bl	80030a4 <prvSearchForNameWithinSingleList>
 80031cc:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <xTaskGetHandle+0x5c>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ea      	bne.n	80031b0 <xTaskGetHandle+0x30>
 80031da:	e000      	b.n	80031de <xTaskGetHandle+0x5e>
                    break;
 80031dc:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <xTaskGetHandle+0x72>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <xTaskGetHandle+0xb8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff5a 	bl	80030a4 <prvSearchForNameWithinSingleList>
 80031f0:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <xTaskGetHandle+0x86>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80031f8:	4b10      	ldr	r3, [pc, #64]	; (800323c <xTaskGetHandle+0xbc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff50 	bl	80030a4 <prvSearchForNameWithinSingleList>
 8003204:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <xTaskGetHandle+0x96>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	480c      	ldr	r0, [pc, #48]	; (8003240 <xTaskGetHandle+0xc0>)
 8003210:	f7ff ff48 	bl	80030a4 <prvSearchForNameWithinSingleList>
 8003214:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <xTaskGetHandle+0xa6>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4809      	ldr	r0, [pc, #36]	; (8003244 <xTaskGetHandle+0xc4>)
 8003220:	f7ff ff40 	bl	80030a4 <prvSearchForNameWithinSingleList>
 8003224:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 8003226:	f7ff fe1d 	bl	8002e64 <xTaskResumeAll>

        return pxTCB;
 800322a:	693b      	ldr	r3, [r7, #16]
    }
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000040 	.word	0x20000040
 8003238:	200000cc 	.word	0x200000cc
 800323c:	200000d0 	.word	0x200000d0
 8003240:	20000100 	.word	0x20000100
 8003244:	200000e8 	.word	0x200000e8

08003248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003252:	4b7f      	ldr	r3, [pc, #508]	; (8003450 <xTaskIncrementTick+0x208>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 80ef 	bne.w	800343a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800325c:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <xTaskIncrementTick+0x20c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003264:	4a7b      	ldr	r2, [pc, #492]	; (8003454 <xTaskIncrementTick+0x20c>)
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11f      	bne.n	80032b0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003270:	4b79      	ldr	r3, [pc, #484]	; (8003458 <xTaskIncrementTick+0x210>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <xTaskIncrementTick+0x46>
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	e7fe      	b.n	800328c <xTaskIncrementTick+0x44>
 800328e:	4b72      	ldr	r3, [pc, #456]	; (8003458 <xTaskIncrementTick+0x210>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	4b71      	ldr	r3, [pc, #452]	; (800345c <xTaskIncrementTick+0x214>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <xTaskIncrementTick+0x210>)
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4a6f      	ldr	r2, [pc, #444]	; (800345c <xTaskIncrementTick+0x214>)
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <xTaskIncrementTick+0x218>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <xTaskIncrementTick+0x218>)
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	f000 fbac 	bl	8003a08 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032b0:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <xTaskIncrementTick+0x21c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f0c0 80aa 	bcc.w	8003410 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032bc:	4b66      	ldr	r3, [pc, #408]	; (8003458 <xTaskIncrementTick+0x210>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <xTaskIncrementTick+0x21c>)
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	601a      	str	r2, [r3, #0]
                    break;
 80032ce:	e09f      	b.n	8003410 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <xTaskIncrementTick+0x210>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d203      	bcs.n	80032f0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032e8:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <xTaskIncrementTick+0x21c>)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80032ee:	e08f      	b.n	8003410 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	68d2      	ldr	r2, [r2, #12]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3304      	adds	r3, #4
 8003312:	429a      	cmp	r2, r3
 8003314:	d103      	bne.n	800331e <xTaskIncrementTick+0xd6>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2200      	movs	r2, #0
 8003322:	615a      	str	r2, [r3, #20]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	1e5a      	subs	r2, r3, #1
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01e      	beq.n	8003374 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	6a12      	ldr	r2, [r2, #32]
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	69d2      	ldr	r2, [r2, #28]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	3318      	adds	r3, #24
 8003358:	429a      	cmp	r2, r3
 800335a:	d103      	bne.n	8003364 <xTaskIncrementTick+0x11c>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6a1a      	ldr	r2, [r3, #32]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2200      	movs	r2, #0
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fa2e 	bl	80067d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	4b38      	ldr	r3, [pc, #224]	; (8003468 <xTaskIncrementTick+0x220>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4313      	orrs	r3, r2
 800338a:	4a37      	ldr	r2, [pc, #220]	; (8003468 <xTaskIncrementTick+0x220>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	4936      	ldr	r1, [pc, #216]	; (800346c <xTaskIncrementTick+0x224>)
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3304      	adds	r3, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	3204      	adds	r2, #4
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4a26      	ldr	r2, [pc, #152]	; (800346c <xTaskIncrementTick+0x224>)
 80033d2:	441a      	add	r2, r3
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	615a      	str	r2, [r3, #20]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4923      	ldr	r1, [pc, #140]	; (800346c <xTaskIncrementTick+0x224>)
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	481f      	ldr	r0, [pc, #124]	; (800346c <xTaskIncrementTick+0x224>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4403      	add	r3, r0
 80033f8:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <xTaskIncrementTick+0x228>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	429a      	cmp	r2, r3
 8003406:	f4ff af59 	bcc.w	80032bc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800340a:	2301      	movs	r3, #1
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340e:	e755      	b.n	80032bc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <xTaskIncrementTick+0x228>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4915      	ldr	r1, [pc, #84]	; (800346c <xTaskIncrementTick+0x224>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d901      	bls.n	800342c <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <xTaskIncrementTick+0x22c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8003434:	2301      	movs	r3, #1
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	e004      	b.n	8003444 <xTaskIncrementTick+0x1fc>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <xTaskIncrementTick+0x230>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a0d      	ldr	r2, [pc, #52]	; (8003478 <xTaskIncrementTick+0x230>)
 8003442:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	2000013c 	.word	0x2000013c
 8003454:	20000118 	.word	0x20000118
 8003458:	200000cc 	.word	0x200000cc
 800345c:	200000d0 	.word	0x200000d0
 8003460:	2000012c 	.word	0x2000012c
 8003464:	20000134 	.word	0x20000134
 8003468:	2000011c 	.word	0x2000011c
 800346c:	20000040 	.word	0x20000040
 8003470:	2000003c 	.word	0x2000003c
 8003474:	20000128 	.word	0x20000128
 8003478:	20000124 	.word	0x20000124

0800347c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003482:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <vTaskSwitchContext+0xb8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800348a:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <vTaskSwitchContext+0xbc>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003490:	e04c      	b.n	800352c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8003492:	4b29      	ldr	r3, [pc, #164]	; (8003538 <vTaskSwitchContext+0xbc>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <vTaskSwitchContext+0xc0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80034a6:	7afb      	ldrb	r3, [r7, #11]
 80034a8:	f1c3 031f 	rsb	r3, r3, #31
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	4924      	ldr	r1, [pc, #144]	; (8003540 <vTaskSwitchContext+0xc4>)
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <vTaskSwitchContext+0x5a>
        __asm volatile
 80034c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c6:	f383 8811 	msr	BASEPRI, r3
 80034ca:	f3bf 8f6f 	isb	sy
 80034ce:	f3bf 8f4f 	dsb	sy
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	e7fe      	b.n	80034d4 <vTaskSwitchContext+0x58>
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <vTaskSwitchContext+0xc4>)
 80034e2:	4413      	add	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	3308      	adds	r3, #8
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d104      	bne.n	8003506 <vTaskSwitchContext+0x8a>
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <vTaskSwitchContext+0xc8>)
 800350e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <vTaskSwitchContext+0xc8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <vTaskSwitchContext+0xcc>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d102      	bne.n	8003522 <vTaskSwitchContext+0xa6>
 800351c:	f003 f8bc 	bl	8006698 <SEGGER_SYSVIEW_OnIdle>
}
 8003520:	e004      	b.n	800352c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <vTaskSwitchContext+0xc8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f003 f914 	bl	8006754 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800352c:	bf00      	nop
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	2000013c 	.word	0x2000013c
 8003538:	20000128 	.word	0x20000128
 800353c:	2000011c 	.word	0x2000011c
 8003540:	20000040 	.word	0x20000040
 8003544:	2000003c 	.word	0x2000003c
 8003548:	20000138 	.word	0x20000138

0800354c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <vTaskPlaceOnEventList+0x24>
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e7fe      	b.n	800356e <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <vTaskPlaceOnEventList+0x44>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3318      	adds	r3, #24
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fe fdc7 	bl	800210c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800357e:	2101      	movs	r1, #1
 8003580:	6838      	ldr	r0, [r7, #0]
 8003582:	f000 fa8b 	bl	8003a9c <prvAddCurrentTaskToDelayedList>
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000003c 	.word	0x2000003c

08003594 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <vTaskPlaceOnEventListRestricted+0x26>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e7fe      	b.n	80035b8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	4b17      	ldr	r3, [pc, #92]	; (8003620 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	61da      	str	r2, [r3, #28]
 80035c8:	4b15      	ldr	r3, [pc, #84]	; (8003620 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	621a      	str	r2, [r3, #32]
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	3218      	adds	r2, #24
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f103 0218 	add.w	r2, r3, #24
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <vTaskPlaceOnEventListRestricted+0x8c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003608:	2024      	movs	r0, #36	; 0x24
 800360a:	f002 fb47 	bl	8005c9c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	68b8      	ldr	r0, [r7, #8]
 8003612:	f000 fa43 	bl	8003a9c <prvAddCurrentTaskToDelayedList>
    }
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2000003c 	.word	0x2000003c

08003624 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d109      	bne.n	800364e <xTaskRemoveFromEventList+0x2a>
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e7fe      	b.n	800364c <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	6a3a      	ldr	r2, [r7, #32]
 800365a:	6a12      	ldr	r2, [r2, #32]
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	6a3a      	ldr	r2, [r7, #32]
 8003664:	69d2      	ldr	r2, [r2, #28]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	3318      	adds	r3, #24
 8003670:	429a      	cmp	r2, r3
 8003672:	d103      	bne.n	800367c <xTaskRemoveFromEventList+0x58>
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1e5a      	subs	r2, r3, #1
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <xTaskRemoveFromEventList+0x198>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d162      	bne.n	800375a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	6a3a      	ldr	r2, [r7, #32]
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	6892      	ldr	r2, [r2, #8]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	3304      	adds	r3, #4
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d103      	bne.n	80036c2 <xTaskRemoveFromEventList+0x9e>
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 f87f 	bl	80067d8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	2201      	movs	r2, #1
 80036e0:	409a      	lsls	r2, r3
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <xTaskRemoveFromEventList+0x19c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	4a35      	ldr	r2, [pc, #212]	; (80037c0 <xTaskRemoveFromEventList+0x19c>)
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	4934      	ldr	r1, [pc, #208]	; (80037c4 <xTaskRemoveFromEventList+0x1a0>)
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	3304      	adds	r3, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	3204      	adds	r2, #4
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	1d1a      	adds	r2, r3, #4
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a25      	ldr	r2, [pc, #148]	; (80037c4 <xTaskRemoveFromEventList+0x1a0>)
 8003730:	441a      	add	r2, r3
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	615a      	str	r2, [r3, #20]
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	4922      	ldr	r1, [pc, #136]	; (80037c4 <xTaskRemoveFromEventList+0x1a0>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	1c59      	adds	r1, r3, #1
 800374a:	481e      	ldr	r0, [pc, #120]	; (80037c4 <xTaskRemoveFromEventList+0x1a0>)
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4403      	add	r3, r0
 8003756:	6019      	str	r1, [r3, #0]
 8003758:	e01b      	b.n	8003792 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <xTaskRemoveFromEventList+0x1a4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	61da      	str	r2, [r3, #28]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	3218      	adds	r2, #24
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f103 0218 	add.w	r2, r3, #24
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <xTaskRemoveFromEventList+0x1a4>)
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <xTaskRemoveFromEventList+0x1a4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <xTaskRemoveFromEventList+0x1a4>)
 8003790:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <xTaskRemoveFromEventList+0x1a8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d905      	bls.n	80037ac <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <xTaskRemoveFromEventList+0x1ac>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e001      	b.n	80037b0 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3728      	adds	r7, #40	; 0x28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000013c 	.word	0x2000013c
 80037c0:	2000011c 	.word	0x2000011c
 80037c4:	20000040 	.word	0x20000040
 80037c8:	200000d4 	.word	0x200000d4
 80037cc:	2000003c 	.word	0x2000003c
 80037d0:	20000128 	.word	0x20000128

080037d4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <vTaskInternalSetTimeOutState+0x24>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <vTaskInternalSetTimeOutState+0x28>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	2000012c 	.word	0x2000012c
 80037fc:	20000118 	.word	0x20000118

08003800 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <xTaskCheckForTimeOut+0x24>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	e7fe      	b.n	8003822 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <xTaskCheckForTimeOut+0x3e>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e7fe      	b.n	800383c <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800383e:	f000 fdd9 	bl	80043f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <xTaskCheckForTimeOut+0xc0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e026      	b.n	80038b0 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <xTaskCheckForTimeOut+0xc4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d00a      	beq.n	8003884 <xTaskCheckForTimeOut+0x84>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	429a      	cmp	r2, r3
 8003876:	d305      	bcc.n	8003884 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e015      	b.n	80038b0 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	429a      	cmp	r2, r3
 800388c:	d20b      	bcs.n	80038a6 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff9a 	bl	80037d4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e004      	b.n	80038b0 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038ac:	2301      	movs	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038b0:	f000 fdce 	bl	8004450 <vPortExitCritical>

    return xReturn;
 80038b4:	69fb      	ldr	r3, [r7, #28]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000118 	.word	0x20000118
 80038c4:	2000012c 	.word	0x2000012c

080038c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <vTaskMissedYield+0x14>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000128 	.word	0x20000128

080038e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038e8:	f000 f852 	bl	8003990 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038ec:	4b06      	ldr	r3, [pc, #24]	; (8003908 <prvIdleTask+0x28>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d9f9      	bls.n	80038e8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <prvIdleTask+0x2c>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003904:	e7f0      	b.n	80038e8 <prvIdleTask+0x8>
 8003906:	bf00      	nop
 8003908:	20000040 	.word	0x20000040
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	e00c      	b.n	8003936 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <prvInitialiseTaskLists+0x60>)
 8003928:	4413      	add	r3, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fbc1 	bl	80020b2 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3301      	adds	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d9ef      	bls.n	800391c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800393c:	480d      	ldr	r0, [pc, #52]	; (8003974 <prvInitialiseTaskLists+0x64>)
 800393e:	f7fe fbb8 	bl	80020b2 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003942:	480d      	ldr	r0, [pc, #52]	; (8003978 <prvInitialiseTaskLists+0x68>)
 8003944:	f7fe fbb5 	bl	80020b2 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003948:	480c      	ldr	r0, [pc, #48]	; (800397c <prvInitialiseTaskLists+0x6c>)
 800394a:	f7fe fbb2 	bl	80020b2 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800394e:	480c      	ldr	r0, [pc, #48]	; (8003980 <prvInitialiseTaskLists+0x70>)
 8003950:	f7fe fbaf 	bl	80020b2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003954:	480b      	ldr	r0, [pc, #44]	; (8003984 <prvInitialiseTaskLists+0x74>)
 8003956:	f7fe fbac 	bl	80020b2 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <prvInitialiseTaskLists+0x78>)
 800395c:	4a05      	ldr	r2, [pc, #20]	; (8003974 <prvInitialiseTaskLists+0x64>)
 800395e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <prvInitialiseTaskLists+0x7c>)
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <prvInitialiseTaskLists+0x68>)
 8003964:	601a      	str	r2, [r3, #0]
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000040 	.word	0x20000040
 8003974:	200000a4 	.word	0x200000a4
 8003978:	200000b8 	.word	0x200000b8
 800397c:	200000d4 	.word	0x200000d4
 8003980:	200000e8 	.word	0x200000e8
 8003984:	20000100 	.word	0x20000100
 8003988:	200000cc 	.word	0x200000cc
 800398c:	200000d0 	.word	0x200000d0

08003990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003996:	e019      	b.n	80039cc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003998:	f000 fd2c 	bl	80043f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <prvCheckTasksWaitingTermination+0x4c>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fe fbe8 	bl	800217e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <prvCheckTasksWaitingTermination+0x50>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <prvCheckTasksWaitingTermination+0x50>)
 80039b6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <prvCheckTasksWaitingTermination+0x54>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <prvCheckTasksWaitingTermination+0x54>)
 80039c0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80039c2:	f000 fd45 	bl	8004450 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f80e 	bl	80039e8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <prvCheckTasksWaitingTermination+0x54>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e1      	bne.n	8003998 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200000e8 	.word	0x200000e8
 80039e0:	20000114 	.word	0x20000114
 80039e4:	200000fc 	.word	0x200000fc

080039e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fef9 	bl	80047ec <vPortFree>
                vPortFree( pxTCB );
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fef6 	bl	80047ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <prvResetNextTaskUnblockTime+0x30>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <prvResetNextTaskUnblockTime+0x34>)
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a1e:	e005      	b.n	8003a2c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <prvResetNextTaskUnblockTime+0x30>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <prvResetNextTaskUnblockTime+0x34>)
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	200000cc 	.word	0x200000cc
 8003a3c:	20000134 	.word	0x20000134

08003a40 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <xTaskGetCurrentTaskHandle+0x1c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003a4c:	687b      	ldr	r3, [r7, #4]
    }
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	2000003c 	.word	0x2000003c

08003a60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a66:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <xTaskGetSchedulerState+0x34>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	e008      	b.n	8003a86 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <xTaskGetSchedulerState+0x38>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	e001      	b.n	8003a86 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a86:	687b      	ldr	r3, [r7, #4]
    }
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000120 	.word	0x20000120
 8003a98:	2000013c 	.word	0x2000013c

08003a9c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aac:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fb63 	bl	800217e <uxListRemove>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43da      	mvns	r2, r3
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x104>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	4a33      	ldr	r2, [pc, #204]	; (8003ba0 <prvAddCurrentTaskToDelayedList+0x104>)
 8003ad4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d124      	bne.n	8003b28 <prvAddCurrentTaskToDelayedList+0x8c>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d021      	beq.n	8003b28 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae4:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	609a      	str	r2, [r3, #8]
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	6892      	ldr	r2, [r2, #8]
 8003afa:	60da      	str	r2, [r3, #12]
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	3204      	adds	r2, #4
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	609a      	str	r2, [r3, #8]
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003b18:	615a      	str	r2, [r3, #20]
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b26:	e032      	b.n	8003b8e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d20f      	bcs.n	8003b60 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2104      	movs	r1, #4
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 fe88 	bl	800685c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3304      	adds	r3, #4
 8003b56:	4619      	mov	r1, r3
 8003b58:	4610      	mov	r0, r2
 8003b5a:	f7fe fad7 	bl	800210c <vListInsert>
}
 8003b5e:	e016      	b.n	8003b8e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2104      	movs	r1, #4
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fe78 	bl	800685c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <prvAddCurrentTaskToDelayedList+0x110>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <prvAddCurrentTaskToDelayedList+0x100>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4619      	mov	r1, r3
 8003b78:	4610      	mov	r0, r2
 8003b7a:	f7fe fac7 	bl	800210c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b7e:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d202      	bcs.n	8003b8e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b88:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6013      	str	r3, [r2, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000118 	.word	0x20000118
 8003b9c:	2000003c 	.word	0x2000003c
 8003ba0:	2000011c 	.word	0x2000011c
 8003ba4:	20000100 	.word	0x20000100
 8003ba8:	200000d0 	.word	0x200000d0
 8003bac:	200000cc 	.word	0x200000cc
 8003bb0:	20000134 	.word	0x20000134

08003bb4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003bbe:	f000 fa43 	bl	8004048 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <xTimerCreateTimerTask+0x54>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00b      	beq.n	8003be2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <xTimerCreateTimerTask+0x58>)
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	2302      	movs	r3, #2
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bd8:	490d      	ldr	r1, [pc, #52]	; (8003c10 <xTimerCreateTimerTask+0x5c>)
 8003bda:	480e      	ldr	r0, [pc, #56]	; (8003c14 <xTimerCreateTimerTask+0x60>)
 8003bdc:	f7fe fe36 	bl	800284c <xTaskCreate>
 8003be0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <xTimerCreateTimerTask+0x48>
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	e7fe      	b.n	8003bfa <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003bfc:	687b      	ldr	r3, [r7, #4]
    }
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000170 	.word	0x20000170
 8003c0c:	20000174 	.word	0x20000174
 8003c10:	08006cc4 	.word	0x08006cc4
 8003c14:	08003cb9 	.word	0x08003cb9

08003c18 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c24:	e008      	b.n	8003c38 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	18d1      	adds	r1, r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f8db 	bl	8003e00 <prvInsertTimerInActiveList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ea      	bne.n	8003c26 <prvReloadTimer+0xe>
        }
    }
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <prvProcessExpiredTimer+0x5c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fa84 	bl	800217e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff ffc5 	bl	8003c18 <prvReloadTimer>
 8003c8e:	e008      	b.n	8003ca2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	4798      	blx	r3
    }
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000168 	.word	0x20000168

08003cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f857 	bl	8003d78 <prvGetNextExpireTime>
 8003cca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f803 	bl	8003cdc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003cd6:	f000 f8d5 	bl	8003e84 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cda:	e7f1      	b.n	8003cc0 <prvTimerTask+0x8>

08003cdc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ce6:	f7ff f8af 	bl	8002e48 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cea:	f107 0308 	add.w	r3, r7, #8
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f866 	bl	8003dc0 <prvSampleTimeNow>
 8003cf4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d130      	bne.n	8003d5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10a      	bne.n	8003d18 <prvProcessTimerOrBlockTask+0x3c>
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d806      	bhi.n	8003d18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d0a:	f7ff f8ab 	bl	8002e64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ffa1 	bl	8003c58 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d16:	e024      	b.n	8003d62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <prvProcessTimerOrBlockTask+0x90>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <prvProcessTimerOrBlockTask+0x50>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <prvProcessTimerOrBlockTask+0x52>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <prvProcessTimerOrBlockTask+0x94>)
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f7fe fd51 	bl	80027e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d42:	f7ff f88f 	bl	8002e64 <xTaskResumeAll>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <prvProcessTimerOrBlockTask+0x98>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
    }
 8003d5c:	e001      	b.n	8003d62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d5e:	f7ff f881 	bl	8002e64 <xTaskResumeAll>
    }
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	2000016c 	.word	0x2000016c
 8003d70:	20000170 	.word	0x20000170
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <prvGetNextExpireTime+0x44>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <prvGetNextExpireTime+0x16>
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	e000      	b.n	8003d90 <prvGetNextExpireTime+0x18>
 8003d8e:	2200      	movs	r2, #0
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <prvGetNextExpireTime+0x44>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e001      	b.n	8003dac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003dac:	68fb      	ldr	r3, [r7, #12]
    }
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000168 	.word	0x20000168

08003dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003dc8:	f7ff f94a 	bl	8003060 <xTaskGetTickCount>
 8003dcc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <prvSampleTimeNow+0x3c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d205      	bcs.n	8003de4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003dd8:	f000 f910 	bl	8003ffc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e002      	b.n	8003dea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <prvSampleTimeNow+0x3c>)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003df0:	68fb      	ldr	r3, [r7, #12]
    }
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000178 	.word	0x20000178

08003e00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d812      	bhi.n	8003e4c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad2      	subs	r2, r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e01b      	b.n	8003e72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <prvInsertTimerInActiveList+0x7c>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe f961 	bl	800210c <vListInsert>
 8003e4a:	e012      	b.n	8003e72 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d206      	bcs.n	8003e62 <prvInsertTimerInActiveList+0x62>
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d302      	bcc.n	8003e62 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e007      	b.n	8003e72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <prvInsertTimerInActiveList+0x80>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe f94d 	bl	800210c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e72:	697b      	ldr	r3, [r7, #20]
    }
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	2000016c 	.word	0x2000016c
 8003e80:	20000168 	.word	0x20000168

08003e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e8a:	e0a5      	b.n	8003fd8 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f2c0 80a1 	blt.w	8003fd6 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe f96a 	bl	800217e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ff87 	bl	8003dc0 <prvSampleTimeNow>
 8003eb2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	f200 808d 	bhi.w	8003fd8 <prvProcessReceivedCommands+0x154>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <prvProcessReceivedCommands+0x40>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ee9 	.word	0x08003ee9
 8003ecc:	08003f51 	.word	0x08003f51
 8003ed0:	08003f65 	.word	0x08003f65
 8003ed4:	08003fad 	.word	0x08003fad
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003ee9 	.word	0x08003ee9
 8003ee0:	08003f51 	.word	0x08003f51
 8003ee4:	08003f65 	.word	0x08003f65
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	18d1      	adds	r1, r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	69f8      	ldr	r0, [r7, #28]
 8003f08:	f7ff ff7a 	bl	8003e00 <prvInsertTimerInActiveList>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d062      	beq.n	8003fd8 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	4413      	add	r3, r2
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	69f8      	ldr	r0, [r7, #28]
 8003f2e:	f7ff fe73 	bl	8003c18 <prvReloadTimer>
 8003f32:	e008      	b.n	8003f46 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	69f8      	ldr	r0, [r7, #28]
 8003f4c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f4e:	e043      	b.n	8003fd8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f62:	e039      	b.n	8003fd8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <prvProcessReceivedCommands+0x114>
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e7fe      	b.n	8003f96 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	18d1      	adds	r1, r2, r3
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	69f8      	ldr	r0, [r7, #28]
 8003fa6:	f7ff ff2b 	bl	8003e00 <prvInsertTimerInActiveList>
                        break;
 8003faa:	e015      	b.n	8003fd8 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8003fba:	69f8      	ldr	r0, [r7, #28]
 8003fbc:	f000 fc16 	bl	80047ec <vPortFree>
 8003fc0:	e00a      	b.n	8003fd8 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003fd4:	e000      	b.n	8003fd8 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003fd6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <prvProcessReceivedCommands+0x174>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f107 0108 	add.w	r1, r7, #8
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fa06 	bl	80023f4 <xQueueReceive>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f47f af4e 	bne.w	8003e8c <prvProcessReceivedCommands+0x8>
        }
    }
 8003ff0:	bf00      	nop
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000170 	.word	0x20000170

08003ffc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004002:	e009      	b.n	8004018 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004004:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <prvSwitchTimerLists+0x44>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800400e:	f04f 31ff 	mov.w	r1, #4294967295
 8004012:	6838      	ldr	r0, [r7, #0]
 8004014:	f7ff fe20 	bl	8003c58 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <prvSwitchTimerLists+0x44>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004022:	4b07      	ldr	r3, [pc, #28]	; (8004040 <prvSwitchTimerLists+0x44>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <prvSwitchTimerLists+0x48>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <prvSwitchTimerLists+0x44>)
 800402e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <prvSwitchTimerLists+0x48>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6013      	str	r3, [r2, #0]
    }
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000168 	.word	0x20000168
 8004044:	2000016c 	.word	0x2000016c

08004048 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800404c:	f000 f9d2 	bl	80043f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <prvCheckForValidListAndQueue+0x54>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11d      	bne.n	8004094 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004058:	4811      	ldr	r0, [pc, #68]	; (80040a0 <prvCheckForValidListAndQueue+0x58>)
 800405a:	f7fe f82a 	bl	80020b2 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800405e:	4811      	ldr	r0, [pc, #68]	; (80040a4 <prvCheckForValidListAndQueue+0x5c>)
 8004060:	f7fe f827 	bl	80020b2 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <prvCheckForValidListAndQueue+0x60>)
 8004066:	4a0e      	ldr	r2, [pc, #56]	; (80040a0 <prvCheckForValidListAndQueue+0x58>)
 8004068:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <prvCheckForValidListAndQueue+0x64>)
 800406c:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <prvCheckForValidListAndQueue+0x5c>)
 800406e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004070:	2200      	movs	r2, #0
 8004072:	210c      	movs	r1, #12
 8004074:	200a      	movs	r0, #10
 8004076:	f7fe f941 	bl	80022fc <xQueueGenericCreate>
 800407a:	4602      	mov	r2, r0
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <prvCheckForValidListAndQueue+0x54>)
 800407e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <prvCheckForValidListAndQueue+0x54>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <prvCheckForValidListAndQueue+0x54>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4908      	ldr	r1, [pc, #32]	; (80040b0 <prvCheckForValidListAndQueue+0x68>)
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe fb52 	bl	8002738 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004094:	f000 f9dc 	bl	8004450 <vPortExitCritical>
    }
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000170 	.word	0x20000170
 80040a0:	20000140 	.word	0x20000140
 80040a4:	20000154 	.word	0x20000154
 80040a8:	20000168 	.word	0x20000168
 80040ac:	2000016c 	.word	0x2000016c
 80040b0:	08006ccc 	.word	0x08006ccc

080040b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b04      	subs	r3, #4
 80040c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	3b04      	subs	r3, #4
 80040d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f023 0201 	bic.w	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3b04      	subs	r3, #4
 80040e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040e4:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <pxPortInitialiseStack+0x64>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b14      	subs	r3, #20
 80040ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f06f 0202 	mvn.w	r2, #2
 8004102:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3b20      	subs	r3, #32
 8004108:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	0800411d 	.word	0x0800411d

0800411c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <prvTaskExitError+0x50>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d009      	beq.n	8004144 <prvTaskExitError+0x28>
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e7fe      	b.n	8004142 <prvTaskExitError+0x26>
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004156:	bf00      	nop
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0fc      	beq.n	8004158 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000010 	.word	0x20000010

08004170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <pxCurrentTCBConst2>)
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417a:	f380 8809 	msr	PSP, r0
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	f380 8811 	msr	BASEPRI, r0
 800418a:	4770      	bx	lr
 800418c:	f3af 8000 	nop.w

08004190 <pxCurrentTCBConst2>:
 8004190:	2000003c 	.word	0x2000003c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop

08004198 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004198:	4808      	ldr	r0, [pc, #32]	; (80041bc <prvPortStartFirstTask+0x24>)
 800419a:	6800      	ldr	r0, [r0, #0]
 800419c:	6800      	ldr	r0, [r0, #0]
 800419e:	f380 8808 	msr	MSP, r0
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f380 8814 	msr	CONTROL, r0
 80041aa:	b662      	cpsie	i
 80041ac:	b661      	cpsie	f
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	df00      	svc	0
 80041b8:	bf00      	nop
 80041ba:	0000      	.short	0x0000
 80041bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop

080041c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041ca:	4b44      	ldr	r3, [pc, #272]	; (80042dc <xPortStartScheduler+0x118>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a44      	ldr	r2, [pc, #272]	; (80042e0 <xPortStartScheduler+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d109      	bne.n	80041e8 <xPortStartScheduler+0x24>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e7fe      	b.n	80041e6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041e8:	4b3c      	ldr	r3, [pc, #240]	; (80042dc <xPortStartScheduler+0x118>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <xPortStartScheduler+0x120>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d109      	bne.n	8004206 <xPortStartScheduler+0x42>
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e7fe      	b.n	8004204 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004206:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <xPortStartScheduler+0x124>)
 8004208:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	22ff      	movs	r2, #255	; 0xff
 8004216:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004228:	b2da      	uxtb	r2, r3
 800422a:	4b30      	ldr	r3, [pc, #192]	; (80042ec <xPortStartScheduler+0x128>)
 800422c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <xPortStartScheduler+0x12c>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004234:	e009      	b.n	800424a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004236:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <xPortStartScheduler+0x12c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <xPortStartScheduler+0x12c>)
 800423e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d0ef      	beq.n	8004236 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <xPortStartScheduler+0x12c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1c3 0307 	rsb	r3, r3, #7
 800425e:	2b04      	cmp	r3, #4
 8004260:	d009      	beq.n	8004276 <xPortStartScheduler+0xb2>
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	e7fe      	b.n	8004274 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004276:	4b1e      	ldr	r3, [pc, #120]	; (80042f0 <xPortStartScheduler+0x12c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <xPortStartScheduler+0x12c>)
 800427e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004280:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <xPortStartScheduler+0x12c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <xPortStartScheduler+0x12c>)
 800428a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004294:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <xPortStartScheduler+0x130>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <xPortStartScheduler+0x130>)
 800429a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800429e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80042a0:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <xPortStartScheduler+0x130>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <xPortStartScheduler+0x130>)
 80042a6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042aa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042ac:	f000 f954 	bl	8004558 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <xPortStartScheduler+0x134>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042b6:	f000 f973 	bl	80045a0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <xPortStartScheduler+0x138>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a0f      	ldr	r2, [pc, #60]	; (80042fc <xPortStartScheduler+0x138>)
 80042c0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042c4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042c6:	f7ff ff67 	bl	8004198 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042ca:	f7ff f8d7 	bl	800347c <vTaskSwitchContext>
    prvTaskExitError();
 80042ce:	f7ff ff25 	bl	800411c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	e000ed00 	.word	0xe000ed00
 80042e0:	410fc271 	.word	0x410fc271
 80042e4:	410fc270 	.word	0x410fc270
 80042e8:	e000e400 	.word	0xe000e400
 80042ec:	2000017c 	.word	0x2000017c
 80042f0:	20000180 	.word	0x20000180
 80042f4:	e000ed20 	.word	0xe000ed20
 80042f8:	20000010 	.word	0x20000010
 80042fc:	e000ef34 	.word	0xe000ef34

08004300 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004306:	4b35      	ldr	r3, [pc, #212]	; (80043dc <vInitPrioGroupValue+0xdc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a35      	ldr	r2, [pc, #212]	; (80043e0 <vInitPrioGroupValue+0xe0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d109      	bne.n	8004324 <vInitPrioGroupValue+0x24>
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e7fe      	b.n	8004322 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004324:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <vInitPrioGroupValue+0xdc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <vInitPrioGroupValue+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d109      	bne.n	8004342 <vInitPrioGroupValue+0x42>
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e7fe      	b.n	8004340 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <vInitPrioGroupValue+0xe8>)
 8004344:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	b2db      	uxtb	r3, r3
 800434c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	22ff      	movs	r2, #255	; 0xff
 8004352:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b21      	ldr	r3, [pc, #132]	; (80043ec <vInitPrioGroupValue+0xec>)
 8004368:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 800436c:	2207      	movs	r2, #7
 800436e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004370:	e009      	b.n	8004386 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 800437a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d0ef      	beq.n	8004372 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f1c3 0307 	rsb	r3, r3, #7
 800439a:	2b04      	cmp	r3, #4
 800439c:	d009      	beq.n	80043b2 <vInitPrioGroupValue+0xb2>
 800439e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	60bb      	str	r3, [r7, #8]
 80043b0:	e7fe      	b.n	80043b0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b2:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	4a0d      	ldr	r2, [pc, #52]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 80043ba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <vInitPrioGroupValue+0xf0>)
 80043c6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000ed00 	.word	0xe000ed00
 80043e0:	410fc271 	.word	0x410fc271
 80043e4:	410fc270 	.word	0x410fc270
 80043e8:	e000e400 	.word	0xe000e400
 80043ec:	2000017c 	.word	0x2000017c
 80043f0:	20000180 	.word	0x20000180

080043f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <vPortEnterCritical+0x54>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <vPortEnterCritical+0x54>)
 8004414:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004416:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <vPortEnterCritical+0x54>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d10e      	bne.n	800443c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <vPortEnterCritical+0x58>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <vPortEnterCritical+0x48>
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	e7fe      	b.n	800443a <vPortEnterCritical+0x46>
    }
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20000010 	.word	0x20000010
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <vPortExitCritical+0x4c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <vPortExitCritical+0x22>
 800445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	607b      	str	r3, [r7, #4]
 8004470:	e7fe      	b.n	8004470 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <vPortExitCritical+0x4c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3b01      	subs	r3, #1
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <vPortExitCritical+0x4c>)
 800447a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <vPortExitCritical+0x4c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <vPortExitCritical+0x3e>
 8004484:	2300      	movs	r3, #0
 8004486:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000010 	.word	0x20000010

080044a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044a0:	f3ef 8009 	mrs	r0, PSP
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <pxCurrentTCBConst>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f01e 0f10 	tst.w	lr, #16
 80044b0:	bf08      	it	eq
 80044b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044c4:	f380 8811 	msr	BASEPRI, r0
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f7fe ffd4 	bl	800347c <vTaskSwitchContext>
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f380 8811 	msr	BASEPRI, r0
 80044dc:	bc09      	pop	{r0, r3}
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	6808      	ldr	r0, [r1, #0]
 80044e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e6:	f01e 0f10 	tst.w	lr, #16
 80044ea:	bf08      	it	eq
 80044ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044f0:	f380 8809 	msr	PSP, r0
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	f3af 8000 	nop.w

08004500 <pxCurrentTCBConst>:
 8004500:	2000003c 	.word	0x2000003c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
        __asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004520:	f002 f840 	bl	80065a4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004524:	f7fe fe90 	bl	8003248 <xTaskIncrementTick>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800452e:	f002 f897 	bl	8006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <SysTick_Handler+0x4c>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e001      	b.n	8004540 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800453c:	f002 f874 	bl	8006628 <SEGGER_SYSVIEW_RecordExitISR>
 8004540:	2300      	movs	r3, #0
 8004542:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <vPortSetupTimerInterrupt+0x34>)
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <vPortSetupTimerInterrupt+0x38>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <vPortSetupTimerInterrupt+0x3c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <vPortSetupTimerInterrupt+0x40>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	4a09      	ldr	r2, [pc, #36]	; (800459c <vPortSetupTimerInterrupt+0x44>)
 8004576:	3b01      	subs	r3, #1
 8004578:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <vPortSetupTimerInterrupt+0x34>)
 800457c:	2207      	movs	r2, #7
 800457e:	601a      	str	r2, [r3, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e010 	.word	0xe000e010
 8004590:	e000e018 	.word	0xe000e018
 8004594:	20000008 	.word	0x20000008
 8004598:	10624dd3 	.word	0x10624dd3
 800459c:	e000e014 	.word	0xe000e014

080045a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045b0 <vPortEnableVFP+0x10>
 80045a4:	6801      	ldr	r1, [r0, #0]
 80045a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045aa:	6001      	str	r1, [r0, #0]
 80045ac:	4770      	bx	lr
 80045ae:	0000      	.short	0x0000
 80045b0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	d913      	bls.n	80045f2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ca:	4a16      	ldr	r2, [pc, #88]	; (8004624 <vPortValidateInterruptPriority+0x6c>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045d4:	4b14      	ldr	r3, [pc, #80]	; (8004628 <vPortValidateInterruptPriority+0x70>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	7afa      	ldrb	r2, [r7, #11]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d209      	bcs.n	80045f2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	e7fe      	b.n	80045f0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045f2:	4b0e      	ldr	r3, [pc, #56]	; (800462c <vPortValidateInterruptPriority+0x74>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <vPortValidateInterruptPriority+0x78>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d909      	bls.n	8004616 <vPortValidateInterruptPriority+0x5e>
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	e7fe      	b.n	8004614 <vPortValidateInterruptPriority+0x5c>
    }
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000e3f0 	.word	0xe000e3f0
 8004628:	2000017c 	.word	0x2000017c
 800462c:	e000ed0c 	.word	0xe000ed0c
 8004630:	20000180 	.word	0x20000180

08004634 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004640:	f7fe fc02 	bl	8002e48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004644:	4b63      	ldr	r3, [pc, #396]	; (80047d4 <pvPortMalloc+0x1a0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800464c:	f000 f92e 	bl	80048ac <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004650:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <pvPortMalloc+0x1a4>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 80a5 	bne.w	80047a8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d02c      	beq.n	80046be <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004664:	2208      	movs	r2, #8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d226      	bcs.n	80046be <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004670:	2208      	movs	r2, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d020      	beq.n	80046c4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f023 0307 	bic.w	r3, r3, #7
 8004688:	3308      	adds	r3, #8
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d213      	bcs.n	80046b8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	3308      	adds	r3, #8
 8004698:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <pvPortMalloc+0x90>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e7fe      	b.n	80046b6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046bc:	e002      	b.n	80046c4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	e000      	b.n	80046c6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046c4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d06d      	beq.n	80047a8 <pvPortMalloc+0x174>
 80046cc:	4b43      	ldr	r3, [pc, #268]	; (80047dc <pvPortMalloc+0x1a8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d868      	bhi.n	80047a8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046d6:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <pvPortMalloc+0x1ac>)
 80046d8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046da:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <pvPortMalloc+0x1ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046e0:	e004      	b.n	80046ec <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d903      	bls.n	80046fe <pvPortMalloc+0xca>
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f1      	bne.n	80046e2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046fe:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <pvPortMalloc+0x1a0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004704:	429a      	cmp	r2, r3
 8004706:	d04f      	beq.n	80047a8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2208      	movs	r2, #8
 800470e:	4413      	add	r3, r2
 8004710:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	1ad2      	subs	r2, r2, r3
 8004722:	2308      	movs	r3, #8
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	429a      	cmp	r2, r3
 8004728:	d91e      	bls.n	8004768 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4413      	add	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <pvPortMalloc+0x11c>
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e7fe      	b.n	800474e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	1ad2      	subs	r2, r2, r3
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004762:	69b8      	ldr	r0, [r7, #24]
 8004764:	f000 f904 	bl	8004970 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <pvPortMalloc+0x1a8>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <pvPortMalloc+0x1a8>)
 8004774:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <pvPortMalloc+0x1a8>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <pvPortMalloc+0x1b0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d203      	bcs.n	800478a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <pvPortMalloc+0x1a8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a17      	ldr	r2, [pc, #92]	; (80047e4 <pvPortMalloc+0x1b0>)
 8004788:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <pvPortMalloc+0x1a4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	431a      	orrs	r2, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <pvPortMalloc+0x1b4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a10      	ldr	r2, [pc, #64]	; (80047e8 <pvPortMalloc+0x1b4>)
 80047a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047a8:	f7fe fb5c 	bl	8002e64 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d009      	beq.n	80047ca <pvPortMalloc+0x196>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e7fe      	b.n	80047c8 <pvPortMalloc+0x194>
    return pvReturn;
 80047ca:	69fb      	ldr	r3, [r7, #28]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	; 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2001918c 	.word	0x2001918c
 80047d8:	200191a0 	.word	0x200191a0
 80047dc:	20019190 	.word	0x20019190
 80047e0:	20019184 	.word	0x20019184
 80047e4:	20019194 	.word	0x20019194
 80047e8:	20019198 	.word	0x20019198

080047ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d04b      	beq.n	8004896 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047fe:	2308      	movs	r3, #8
 8004800:	425b      	negs	r3, r3
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4413      	add	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <vPortFree+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <vPortFree+0x42>
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e7fe      	b.n	800482c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <vPortFree+0x5e>
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	e7fe      	b.n	8004848 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <vPortFree+0xb4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01e      	beq.n	8004896 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11a      	bne.n	8004896 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <vPortFree+0xb4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	43db      	mvns	r3, r3
 800486a:	401a      	ands	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004870:	f7fe faea 	bl	8002e48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <vPortFree+0xb8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4413      	add	r3, r2
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <vPortFree+0xb8>)
 8004880:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004882:	6938      	ldr	r0, [r7, #16]
 8004884:	f000 f874 	bl	8004970 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <vPortFree+0xbc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	4a06      	ldr	r2, [pc, #24]	; (80048a8 <vPortFree+0xbc>)
 8004890:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004892:	f7fe fae7 	bl	8002e64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200191a0 	.word	0x200191a0
 80048a4:	20019190 	.word	0x20019190
 80048a8:	2001919c 	.word	0x2001919c

080048ac <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048b2:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80048b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048b8:	4b27      	ldr	r3, [pc, #156]	; (8004958 <prvHeapInit+0xac>)
 80048ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3307      	adds	r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0307 	bic.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <prvHeapInit+0xac>)
 80048dc:	4413      	add	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <prvHeapInit+0xb0>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <prvHeapInit+0xb0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048f8:	2208      	movs	r2, #8
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <prvHeapInit+0xb4>)
 800490c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <prvHeapInit+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <prvHeapInit+0xb4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <prvHeapInit+0xb4>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <prvHeapInit+0xb8>)
 800493a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a09      	ldr	r2, [pc, #36]	; (8004968 <prvHeapInit+0xbc>)
 8004942:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <prvHeapInit+0xc0>)
 8004946:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000184 	.word	0x20000184
 800495c:	20019184 	.word	0x20019184
 8004960:	2001918c 	.word	0x2001918c
 8004964:	20019194 	.word	0x20019194
 8004968:	20019190 	.word	0x20019190
 800496c:	200191a0 	.word	0x200191a0

08004970 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004978:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <prvInsertBlockIntoFreeList+0xac>)
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e002      	b.n	8004984 <prvInsertBlockIntoFreeList+0x14>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d8f7      	bhi.n	800497e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4413      	add	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d108      	bne.n	80049b2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	441a      	add	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	441a      	add	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d118      	bne.n	80049f8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <prvInsertBlockIntoFreeList+0xb0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d00d      	beq.n	80049ee <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	441a      	add	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e008      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <prvInsertBlockIntoFreeList+0xb0>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e003      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d002      	beq.n	8004a0e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20019184 	.word	0x20019184
 8004a20:	2001918c 	.word	0x2001918c

08004a24 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <_cbSendSystemDesc+0x14>)
 8004a2a:	f001 fd67 	bl	80064fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a2e:	4803      	ldr	r0, [pc, #12]	; (8004a3c <_cbSendSystemDesc+0x18>)
 8004a30:	f001 fd64 	bl	80064fc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08006cd4 	.word	0x08006cd4
 8004a3c:	08006d18 	.word	0x08006d18

08004a40 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a4e:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <SEGGER_SYSVIEW_Conf+0x28>)
 8004a50:	f001 f8d0 	bl	8005bf4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a54:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a58:	f001 f910 	bl	8005c7c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000008 	.word	0x20000008
 8004a64:	08004a25 	.word	0x08004a25
 8004a68:	08006db8 	.word	0x08006db8

08004a6c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
 8004a76:	e034      	b.n	8004ae2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a78:	491e      	ldr	r1, [pc, #120]	; (8004af4 <_cbSendTaskList+0x88>)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	491a      	ldr	r1, [pc, #104]	; (8004af4 <_cbSendTaskList+0x88>)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3304      	adds	r3, #4
 8004a98:	681c      	ldr	r4, [r3, #0]
 8004a9a:	4916      	ldr	r1, [pc, #88]	; (8004af4 <_cbSendTaskList+0x88>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	681d      	ldr	r5, [r3, #0]
 8004aac:	4911      	ldr	r1, [pc, #68]	; (8004af4 <_cbSendTaskList+0x88>)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	330c      	adds	r3, #12
 8004abc:	681e      	ldr	r6, [r3, #0]
 8004abe:	490d      	ldr	r1, [pc, #52]	; (8004af4 <_cbSendTaskList+0x88>)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	3310      	adds	r3, #16
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	f000 f924 	bl	8004d24 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <_cbSendTaskList+0x8c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3c5      	bcc.n	8004a78 <_cbSendTaskList+0xc>
  }
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af4:	200191a4 	.word	0x200191a4
 8004af8:	20019244 	.word	0x20019244

08004afc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b02:	f7fe fabd 	bl	8003080 <xTaskGetTickCountFromISR>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f04f 0400 	mov.w	r4, #0
 8004b0c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b10:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004b14:	462b      	mov	r3, r5
 8004b16:	4634      	mov	r4, r6
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	0162      	lsls	r2, r4, #5
 8004b22:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004b26:	0159      	lsls	r1, r3, #5
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	1b5b      	subs	r3, r3, r5
 8004b2e:	eb64 0406 	sbc.w	r4, r4, r6
 8004b32:	f04f 0100 	mov.w	r1, #0
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	00a2      	lsls	r2, r4, #2
 8004b3c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004b40:	0099      	lsls	r1, r3, #2
 8004b42:	460b      	mov	r3, r1
 8004b44:	4614      	mov	r4, r2
 8004b46:	195b      	adds	r3, r3, r5
 8004b48:	eb44 0406 	adc.w	r4, r4, r6
 8004b4c:	f04f 0100 	mov.w	r1, #0
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	00e2      	lsls	r2, r4, #3
 8004b56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b5a:	00d9      	lsls	r1, r3, #3
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4614      	mov	r4, r2
 8004b60:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004b64:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b74 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b82:	2205      	movs	r2, #5
 8004b84:	492b      	ldr	r1, [pc, #172]	; (8004c34 <SYSVIEW_AddTask+0xc0>)
 8004b86:	68b8      	ldr	r0, [r7, #8]
 8004b88:	f002 f862 	bl	8006c50 <memcmp>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d04b      	beq.n	8004c2a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b92:	4b29      	ldr	r3, [pc, #164]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b07      	cmp	r3, #7
 8004b98:	d903      	bls.n	8004ba2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b9a:	4828      	ldr	r0, [pc, #160]	; (8004c3c <SYSVIEW_AddTask+0xc8>)
 8004b9c:	f001 ffaa 	bl	8006af4 <SEGGER_SYSVIEW_Warn>
    return;
 8004ba0:	e044      	b.n	8004c2c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ba2:	4b25      	ldr	r3, [pc, #148]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4926      	ldr	r1, [pc, #152]	; (8004c40 <SYSVIEW_AddTask+0xcc>)
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bb6:	4b20      	ldr	r3, [pc, #128]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4921      	ldr	r1, [pc, #132]	; (8004c40 <SYSVIEW_AddTask+0xcc>)
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	491b      	ldr	r1, [pc, #108]	; (8004c40 <SYSVIEW_AddTask+0xcc>)
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3308      	adds	r3, #8
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4916      	ldr	r1, [pc, #88]	; (8004c40 <SYSVIEW_AddTask+0xcc>)
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4910      	ldr	r1, [pc, #64]	; (8004c40 <SYSVIEW_AddTask+0xcc>)
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	3310      	adds	r3, #16
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <SYSVIEW_AddTask+0xc4>)
 8004c16:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f87e 	bl	8004d24 <SYSVIEW_SendTaskInfo>
 8004c28:	e000      	b.n	8004c2c <SYSVIEW_AddTask+0xb8>
    return;
 8004c2a:	bf00      	nop

}
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	08006d28 	.word	0x08006d28
 8004c38:	20019244 	.word	0x20019244
 8004c3c:	08006d30 	.word	0x08006d30
 8004c40:	200191a4 	.word	0x200191a4

08004c44 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c52:	2205      	movs	r2, #5
 8004c54:	4930      	ldr	r1, [pc, #192]	; (8004d18 <SYSVIEW_UpdateTask+0xd4>)
 8004c56:	68b8      	ldr	r0, [r7, #8]
 8004c58:	f001 fffa 	bl	8006c50 <memcmp>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d056      	beq.n	8004d10 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e00d      	b.n	8004c84 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004c68:	492c      	ldr	r1, [pc, #176]	; (8004d1c <SYSVIEW_UpdateTask+0xd8>)
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d008      	beq.n	8004c90 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	4b26      	ldr	r3, [pc, #152]	; (8004d20 <SYSVIEW_UpdateTask+0xdc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d3ec      	bcc.n	8004c68 <SYSVIEW_UpdateTask+0x24>
 8004c8e:	e000      	b.n	8004c92 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004c90:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004c92:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <SYSVIEW_UpdateTask+0xdc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d230      	bcs.n	8004cfe <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004c9c:	491f      	ldr	r1, [pc, #124]	; (8004d1c <SYSVIEW_UpdateTask+0xd8>)
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	440b      	add	r3, r1
 8004caa:	3304      	adds	r3, #4
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004cb0:	491a      	ldr	r1, [pc, #104]	; (8004d1c <SYSVIEW_UpdateTask+0xd8>)
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004cc4:	4915      	ldr	r1, [pc, #84]	; (8004d1c <SYSVIEW_UpdateTask+0xd8>)
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004cd8:	4910      	ldr	r1, [pc, #64]	; (8004d1c <SYSVIEW_UpdateTask+0xd8>)
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	6a3a      	ldr	r2, [r7, #32]
 8004cea:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f814 	bl	8004d24 <SYSVIEW_SendTaskInfo>
 8004cfc:	e009      	b.n	8004d12 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ff33 	bl	8004b74 <SYSVIEW_AddTask>
 8004d0e:	e000      	b.n	8004d12 <SYSVIEW_UpdateTask+0xce>
    return;
 8004d10:	bf00      	nop
  }
}
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	08006d28 	.word	0x08006d28
 8004d1c:	200191a4 	.word	0x200191a4
 8004d20:	20019244 	.word	0x20019244

08004d24 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d32:	f107 0314 	add.w	r3, r7, #20
 8004d36:	2214      	movs	r2, #20
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 ffa2 	bl	8006c84 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 fad7 	bl	800630c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d5e:	bf00      	nop
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <__NVIC_EnableIRQ>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	db0b      	blt.n	8004d92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	4907      	ldr	r1, [pc, #28]	; (8004da0 <__NVIC_EnableIRQ+0x38>)
 8004d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2001      	movs	r0, #1
 8004d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e100 	.word	0xe000e100

08004da4 <__NVIC_SetPriority>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db0a      	blt.n	8004dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	490c      	ldr	r1, [pc, #48]	; (8004df0 <__NVIC_SetPriority+0x4c>)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004dcc:	e00a      	b.n	8004de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4908      	ldr	r1, [pc, #32]	; (8004df4 <__NVIC_SetPriority+0x50>)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	0112      	lsls	r2, r2, #4
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	440b      	add	r3, r1
 8004de2:	761a      	strb	r2, [r3, #24]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000e100 	.word	0xe000e100
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004dfe:	f001 fed5 	bl	8006bac <SEGGER_SYSVIEW_IsStarted>
 8004e02:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e0a:	f001 f903 	bl	8006014 <SEGGER_SYSVIEW_Start>
  }
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <_cbOnUARTRx+0x3c>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d806      	bhi.n	8004e38 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <_cbOnUARTRx+0x3c>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <_cbOnUARTRx+0x3c>)
 8004e34:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004e36:	e009      	b.n	8004e4c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004e38:	f7ff ffde 	bl	8004df8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <_cbOnUARTRx+0x3c>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4618      	mov	r0, r3
 8004e42:	1dfb      	adds	r3, r7, #7
 8004e44:	2201      	movs	r2, #1
 8004e46:	4619      	mov	r1, r3
 8004e48:	f000 fb98 	bl	800557c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004e4c:	bf00      	nop
}
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000014 	.word	0x20000014

08004e58 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <_cbOnUARTTx+0x5c>)
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d80f      	bhi.n	8004e88 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004e68:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <_cbOnUARTTx+0x5c>)
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <_cbOnUARTTx+0x60>)
 8004e70:	5c9a      	ldrb	r2, [r3, r2]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004e76:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <_cbOnUARTTx+0x5c>)
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <_cbOnUARTTx+0x5c>)
 8004e80:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004e86:	e00f      	b.n	8004ea8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <_cbOnUARTTx+0x5c>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fa19 	bl	80052c8 <SEGGER_RTT_ReadUpBufferNoLock>
 8004e96:	4603      	mov	r3, r0
 8004e98:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	da02      	bge.n	8004ea6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	e000      	b.n	8004ea8 <_cbOnUARTTx+0x50>
  }
Done:
 8004ea6:	bf00      	nop
  return r;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000014 	.word	0x20000014
 8004eb8:	08006dc0 	.word	0x08006dc0

08004ebc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <SEGGER_UART_init+0x1c>)
 8004ec6:	4905      	ldr	r1, [pc, #20]	; (8004edc <SEGGER_UART_init+0x20>)
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f863 	bl	8004f94 <HIF_UART_Init>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08004e19 	.word	0x08004e19
 8004edc:	08004e59 	.word	0x08004e59

08004ee0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <USART2_IRQHandler+0x80>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d011      	beq.n	8004f1a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004ef6:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <USART2_IRQHandler+0x84>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f003 030b 	and.w	r3, r3, #11
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d108      	bne.n	8004f1a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <USART2_IRQHandler+0x88>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f10:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <USART2_IRQHandler+0x88>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	79fa      	ldrb	r2, [r7, #7]
 8004f16:	4610      	mov	r0, r2
 8004f18:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01a      	beq.n	8004f5a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <USART2_IRQHandler+0x8c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d015      	beq.n	8004f58 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <USART2_IRQHandler+0x8c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	1dfa      	adds	r2, r7, #7
 8004f32:	4610      	mov	r0, r2
 8004f34:	4798      	blx	r3
 8004f36:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <USART2_IRQHandler+0x90>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a0b      	ldr	r2, [pc, #44]	; (8004f70 <USART2_IRQHandler+0x90>)
 8004f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e006      	b.n	8004f5a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <USART2_IRQHandler+0x80>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f50:	79fa      	ldrb	r2, [r7, #7]
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <USART2_IRQHandler+0x84>)
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e000      	b.n	8004f5a <USART2_IRQHandler+0x7a>
      return;
 8004f58:	bf00      	nop
    }
  }
}
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	40004400 	.word	0x40004400
 8004f64:	40004404 	.word	0x40004404
 8004f68:	20019248 	.word	0x20019248
 8004f6c:	2001924c 	.word	0x2001924c
 8004f70:	4000440c 	.word	0x4000440c

08004f74 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	6013      	str	r3, [r2, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	4000440c 	.word	0x4000440c

08004f94 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004fa0:	4b2e      	ldr	r3, [pc, #184]	; (800505c <HIF_UART_Init+0xc8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a2d      	ldr	r2, [pc, #180]	; (800505c <HIF_UART_Init+0xc8>)
 8004fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004faa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004fac:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <HIF_UART_Init+0xcc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <HIF_UART_Init+0xcc>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <HIF_UART_Init+0xd0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fc4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004fcc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004fce:	4a25      	ldr	r2, [pc, #148]	; (8005064 <HIF_UART_Init+0xd0>)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <HIF_UART_Init+0xd4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004fe8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004fea:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <HIF_UART_Init+0xd4>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	; (800506c <HIF_UART_Init+0xd8>)
 8004ff2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004ff6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <HIF_UART_Init+0xdc>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HIF_UART_Init+0xe0>)
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800500a:	4a1b      	ldr	r2, [pc, #108]	; (8005078 <HIF_UART_Init+0xe4>)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	3301      	adds	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005022:	d302      	bcc.n	800502a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005024:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005028:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	4a11      	ldr	r2, [pc, #68]	; (800507c <HIF_UART_Init+0xe8>)
 8005036:	b29b      	uxth	r3, r3
 8005038:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800503a:	4a11      	ldr	r2, [pc, #68]	; (8005080 <HIF_UART_Init+0xec>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005040:	4a10      	ldr	r2, [pc, #64]	; (8005084 <HIF_UART_Init+0xf0>)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005046:	2106      	movs	r1, #6
 8005048:	2026      	movs	r0, #38	; 0x26
 800504a:	f7ff feab 	bl	8004da4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800504e:	2026      	movs	r0, #38	; 0x26
 8005050:	f7ff fe8a 	bl	8004d68 <__NVIC_EnableIRQ>
}
 8005054:	bf00      	nop
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40023840 	.word	0x40023840
 8005060:	40023830 	.word	0x40023830
 8005064:	40020020 	.word	0x40020020
 8005068:	40020000 	.word	0x40020000
 800506c:	4000440c 	.word	0x4000440c
 8005070:	40004410 	.word	0x40004410
 8005074:	40004414 	.word	0x40004414
 8005078:	0501bd00 	.word	0x0501bd00
 800507c:	40004408 	.word	0x40004408
 8005080:	20019248 	.word	0x20019248
 8005084:	2001924c 	.word	0x2001924c

08005088 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <_DoInit+0x98>)
 8005090:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2203      	movs	r2, #3
 8005096:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2203      	movs	r2, #3
 800509c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a20      	ldr	r2, [pc, #128]	; (8005124 <_DoInit+0x9c>)
 80050a2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a20      	ldr	r2, [pc, #128]	; (8005128 <_DoInit+0xa0>)
 80050a8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <_DoInit+0x9c>)
 80050c8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a17      	ldr	r2, [pc, #92]	; (800512c <_DoInit+0xa4>)
 80050ce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2210      	movs	r2, #16
 80050d4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3307      	adds	r3, #7
 80050ec:	4a10      	ldr	r2, [pc, #64]	; (8005130 <_DoInit+0xa8>)
 80050ee:	6810      	ldr	r0, [r2, #0]
 80050f0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050f2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <_DoInit+0xac>)
 80050fa:	6810      	ldr	r0, [r2, #0]
 80050fc:	6018      	str	r0, [r3, #0]
 80050fe:	8891      	ldrh	r1, [r2, #4]
 8005100:	7992      	ldrb	r2, [r2, #6]
 8005102:	8099      	strh	r1, [r3, #4]
 8005104:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005106:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005110:	f3bf 8f5f 	dmb	sy
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	2001a800 	.word	0x2001a800
 8005124:	08006d80 	.word	0x08006d80
 8005128:	20019250 	.word	0x20019250
 800512c:	20019650 	.word	0x20019650
 8005130:	08006d8c 	.word	0x08006d8c
 8005134:	08006d90 	.word	0x08006d90

08005138 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005144:	2300      	movs	r3, #0
 8005146:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d905      	bls.n	8005168 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	e007      	b.n	8005178 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1acb      	subs	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3b01      	subs	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	4293      	cmp	r3, r2
 8005184:	bf28      	it	cs
 8005186:	4613      	movcs	r3, r2
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4293      	cmp	r3, r2
 8005190:	bf28      	it	cs
 8005192:	4613      	movcs	r3, r2
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	6978      	ldr	r0, [r7, #20]
 80051a6:	f001 fd62 	bl	8006c6e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80051aa:	6a3a      	ldr	r2, [r7, #32]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	4413      	add	r3, r2
 80051b0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	4413      	add	r3, r2
 80051b8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	4413      	add	r3, r2
 80051c8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d101      	bne.n	80051d8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1b2      	bne.n	800514e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80051e8:	6a3b      	ldr	r3, [r7, #32]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b088      	sub	sp, #32
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d911      	bls.n	800523a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6938      	ldr	r0, [r7, #16]
 8005226:	f001 fd22 	bl	8006c6e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800522a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	441a      	add	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005238:	e01f      	b.n	800527a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	6938      	ldr	r0, [r7, #16]
 800524e:	f001 fd0e 	bl	8006c6e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	4413      	add	r3, r2
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4619      	mov	r1, r3
 800526a:	6938      	ldr	r0, [r7, #16]
 800526c:	f001 fcff 	bl	8006c6e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005270:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	60da      	str	r2, [r3, #12]
}
 800527a:	bf00      	nop
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005282:	b480      	push	{r7}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	429a      	cmp	r2, r3
 800529c:	d808      	bhi.n	80052b0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad2      	subs	r2, r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	3b01      	subs	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e004      	b.n	80052ba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08c      	sub	sp, #48	; 0x30
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80052d4:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80052e2:	f7ff fed1 	bl	8005088 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4a37      	ldr	r2, [pc, #220]	; (80053d0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052f4:	4413      	add	r3, r2
 80052f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005308:	2300      	movs	r3, #0
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800530c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	429a      	cmp	r2, r3
 8005312:	d92b      	bls.n	800536c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4293      	cmp	r3, r2
 8005324:	bf28      	it	cs
 8005326:	4613      	movcs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	4413      	add	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	6939      	ldr	r1, [r7, #16]
 8005338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533a:	f001 fc98 	bl	8006c6e <memcpy>
    NumBytesRead += NumBytesRem;
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005364:	429a      	cmp	r2, r3
 8005366:	d101      	bne.n	800536c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005368:	2300      	movs	r3, #0
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4293      	cmp	r3, r2
 800537a:	bf28      	it	cs
 800537c:	4613      	movcs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d019      	beq.n	80053ba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	4413      	add	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005396:	f001 fc6a 	bl	8006c6e <memcpy>
    NumBytesRead += NumBytesRem;
 800539a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3730      	adds	r7, #48	; 0x30
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2001a800 	.word	0x2001a800

080053d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	; 0x30
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80053e0:	4b3e      	ldr	r3, [pc, #248]	; (80054dc <SEGGER_RTT_ReadNoLock+0x108>)
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80053ee:	f7ff fe4b 	bl	8005088 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	3360      	adds	r3, #96	; 0x60
 80053fe:	4a37      	ldr	r2, [pc, #220]	; (80054dc <SEGGER_RTT_ReadNoLock+0x108>)
 8005400:	4413      	add	r3, r2
 8005402:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005414:	2300      	movs	r3, #0
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	429a      	cmp	r2, r3
 800541e:	d92b      	bls.n	8005478 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4293      	cmp	r3, r2
 8005430:	bf28      	it	cs
 8005432:	4613      	movcs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543c:	4413      	add	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	6939      	ldr	r1, [r7, #16]
 8005444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005446:	f001 fc12 	bl	8006c6e <memcpy>
    NumBytesRead += NumBytesRem;
 800544a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	4413      	add	r3, r2
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005470:	429a      	cmp	r2, r3
 8005472:	d101      	bne.n	8005478 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005474:	2300      	movs	r3, #0
 8005476:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4293      	cmp	r3, r2
 8005486:	bf28      	it	cs
 8005488:	4613      	movcs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d019      	beq.n	80054c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	4413      	add	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	6939      	ldr	r1, [r7, #16]
 80054a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054a2:	f001 fbe4 	bl	8006c6e <memcpy>
    NumBytesRead += NumBytesRem;
 80054a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80054ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3730      	adds	r7, #48	; 0x30
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	2001a800 	.word	0x2001a800

080054e0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	3360      	adds	r3, #96	; 0x60
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 80054fe:	4413      	add	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d017      	beq.n	800553a <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 800550a:	2b01      	cmp	r3, #1
 800550c:	d302      	bcc.n	8005514 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 800550e:	2b02      	cmp	r3, #2
 8005510:	d023      	beq.n	800555a <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8005512:	e029      	b.n	8005568 <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005514:	6978      	ldr	r0, [r7, #20]
 8005516:	f7ff feb4 	bl	8005282 <_GetAvailWriteSpace>
 800551a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d202      	bcs.n	800552a <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8005524:	2300      	movs	r3, #0
 8005526:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005528:	e021      	b.n	800556e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	6978      	ldr	r0, [r7, #20]
 8005534:	f7ff fe5d 	bl	80051f2 <_WriteNoCheck>
    break;
 8005538:	e019      	b.n	800556e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800553a:	6978      	ldr	r0, [r7, #20]
 800553c:	f7ff fea1 	bl	8005282 <_GetAvailWriteSpace>
 8005540:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4293      	cmp	r3, r2
 8005548:	bf28      	it	cs
 800554a:	4613      	movcs	r3, r2
 800554c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	69b9      	ldr	r1, [r7, #24]
 8005552:	6978      	ldr	r0, [r7, #20]
 8005554:	f7ff fe4d 	bl	80051f2 <_WriteNoCheck>
    break;
 8005558:	e009      	b.n	800556e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	6978      	ldr	r0, [r7, #20]
 8005560:	f7ff fdea 	bl	8005138 <_WriteBlocking>
 8005564:	61f8      	str	r0, [r7, #28]
    break;
 8005566:	e002      	b.n	800556e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
    break;
 800556c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800556e:	69fb      	ldr	r3, [r7, #28]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	2001a800 	.word	0x2001a800

0800557c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005588:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005596:	f7ff fd77 	bl	8005088 <_DoInit>
  SEGGER_RTT_LOCK();
 800559a:	f3ef 8311 	mrs	r3, BASEPRI
 800559e:	f04f 0120 	mov.w	r1, #32
 80055a2:	f381 8811 	msr	BASEPRI, r1
 80055a6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff ff97 	bl	80054e0 <SEGGER_RTT_WriteDownBufferNoLock>
 80055b2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80055ba:	697b      	ldr	r3, [r7, #20]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	2001a800 	.word	0x2001a800

080055c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80055e4:	f7ff fd50 	bl	8005088 <_DoInit>
  SEGGER_RTT_LOCK();
 80055e8:	f3ef 8311 	mrs	r3, BASEPRI
 80055ec:	f04f 0120 	mov.w	r1, #32
 80055f0:	f381 8811 	msr	BASEPRI, r1
 80055f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055f6:	4b35      	ldr	r3, [pc, #212]	; (80056cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80055fe:	6939      	ldr	r1, [r7, #16]
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	4613      	mov	r3, r2
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4413      	add	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	440b      	add	r3, r1
 800560e:	3304      	adds	r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d008      	beq.n	8005628 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	3301      	adds	r3, #1
 800561a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	429a      	cmp	r2, r3
 8005624:	dbeb      	blt.n	80055fe <SEGGER_RTT_AllocUpBuffer+0x36>
 8005626:	e000      	b.n	800562a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005628:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	429a      	cmp	r2, r3
 8005632:	da3f      	bge.n	80056b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005634:	6939      	ldr	r1, [r7, #16]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	4613      	mov	r3, r2
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	440b      	add	r3, r1
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	3304      	adds	r3, #4
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800565e:	6939      	ldr	r1, [r7, #16]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3320      	adds	r3, #32
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	3328      	adds	r3, #40	; 0x28
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	3324      	adds	r3, #36	; 0x24
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800569a:	6939      	ldr	r1, [r7, #16]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	332c      	adds	r3, #44	; 0x2c
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056ae:	f3bf 8f5f 	dmb	sy
 80056b2:	e002      	b.n	80056ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295
 80056b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80056c0:	69fb      	ldr	r3, [r7, #28]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2001a800 	.word	0x2001a800

080056d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80056de:	4b33      	ldr	r3, [pc, #204]	; (80057ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80056ec:	f7ff fccc 	bl	8005088 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056f0:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80056f2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	461a      	mov	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d24d      	bcs.n	800579c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005700:	f3ef 8311 	mrs	r3, BASEPRI
 8005704:	f04f 0120 	mov.w	r1, #32
 8005708:	f381 8811 	msr	BASEPRI, r1
 800570c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d031      	beq.n	8005778 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3360      	adds	r3, #96	; 0x60
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	440b      	add	r3, r1
 8005736:	3364      	adds	r3, #100	; 0x64
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800573c:	6979      	ldr	r1, [r7, #20]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4613      	mov	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	4413      	add	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	440b      	add	r3, r1
 800574a:	3368      	adds	r3, #104	; 0x68
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005750:	6979      	ldr	r1, [r7, #20]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	440b      	add	r3, r1
 800575e:	3370      	adds	r3, #112	; 0x70
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005764:	6979      	ldr	r1, [r7, #20]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	440b      	add	r3, r1
 8005772:	336c      	adds	r3, #108	; 0x6c
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005778:	6979      	ldr	r1, [r7, #20]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	3374      	adds	r3, #116	; 0x74
 8005788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800578c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e002      	b.n	80057a2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295
 80057a0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80057a2:	69fb      	ldr	r3, [r7, #28]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3720      	adds	r7, #32
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	2001a800 	.word	0x2001a800

080057b0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80057c0:	e002      	b.n	80057c8 <_EncodeStr+0x18>
    Len++;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3301      	adds	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f6      	bne.n	80057c2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d901      	bls.n	80057e0 <_EncodeStr+0x30>
    Len = Limit;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	2bfe      	cmp	r3, #254	; 0xfe
 80057e4:	d806      	bhi.n	80057f4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	60fa      	str	r2, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e011      	b.n	8005818 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	60fa      	str	r2, [r7, #12]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	60fa      	str	r2, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	0a19      	lsrs	r1, r3, #8
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	60fa      	str	r2, [r7, #12]
 8005814:	b2ca      	uxtb	r2, r1
 8005816:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800581c:	e00a      	b.n	8005834 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	1c53      	adds	r3, r2, #1
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1c59      	adds	r1, r3, #1
 8005828:	60f9      	str	r1, [r7, #12]
 800582a:	7812      	ldrb	r2, [r2, #0]
 800582c:	701a      	strb	r2, [r3, #0]
    n++;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	3301      	adds	r3, #1
 8005832:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d3f0      	bcc.n	800581e <_EncodeStr+0x6e>
  }
  return pPayload;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3304      	adds	r3, #4
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800586a:	4b33      	ldr	r3, [pc, #204]	; (8005938 <_HandleIncomingPacket+0xd4>)
 800586c:	7e1b      	ldrb	r3, [r3, #24]
 800586e:	4618      	mov	r0, r3
 8005870:	1cfb      	adds	r3, r7, #3
 8005872:	2201      	movs	r2, #1
 8005874:	4619      	mov	r1, r3
 8005876:	f7ff fdad 	bl	80053d4 <SEGGER_RTT_ReadNoLock>
 800587a:	4603      	mov	r3, r0
 800587c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	dd4d      	ble.n	8005920 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	2b05      	cmp	r3, #5
 8005888:	d022      	beq.n	80058d0 <_HandleIncomingPacket+0x6c>
 800588a:	2b05      	cmp	r3, #5
 800588c:	dc0b      	bgt.n	80058a6 <_HandleIncomingPacket+0x42>
 800588e:	2b02      	cmp	r3, #2
 8005890:	d015      	beq.n	80058be <_HandleIncomingPacket+0x5a>
 8005892:	2b02      	cmp	r3, #2
 8005894:	dc02      	bgt.n	800589c <_HandleIncomingPacket+0x38>
 8005896:	2b01      	cmp	r3, #1
 8005898:	d00e      	beq.n	80058b8 <_HandleIncomingPacket+0x54>
 800589a:	e034      	b.n	8005906 <_HandleIncomingPacket+0xa2>
 800589c:	2b03      	cmp	r3, #3
 800589e:	d011      	beq.n	80058c4 <_HandleIncomingPacket+0x60>
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d012      	beq.n	80058ca <_HandleIncomingPacket+0x66>
 80058a4:	e02f      	b.n	8005906 <_HandleIncomingPacket+0xa2>
 80058a6:	2b07      	cmp	r3, #7
 80058a8:	d018      	beq.n	80058dc <_HandleIncomingPacket+0x78>
 80058aa:	2b07      	cmp	r3, #7
 80058ac:	db13      	blt.n	80058d6 <_HandleIncomingPacket+0x72>
 80058ae:	2b7f      	cmp	r3, #127	; 0x7f
 80058b0:	d038      	beq.n	8005924 <_HandleIncomingPacket+0xc0>
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d015      	beq.n	80058e2 <_HandleIncomingPacket+0x7e>
 80058b6:	e026      	b.n	8005906 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80058b8:	f000 fbac 	bl	8006014 <SEGGER_SYSVIEW_Start>
      break;
 80058bc:	e037      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80058be:	f000 fc65 	bl	800618c <SEGGER_SYSVIEW_Stop>
      break;
 80058c2:	e034      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80058c4:	f000 fe3e 	bl	8006544 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80058c8:	e031      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80058ca:	f000 fe03 	bl	80064d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80058ce:	e02e      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80058d0:	f000 fc82 	bl	80061d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80058d4:	e02b      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80058d6:	f001 f8cf 	bl	8006a78 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80058da:	e028      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80058dc:	f001 f8ae 	bl	8006a3c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80058e0:	e025      	b.n	800592e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058e2:	4b15      	ldr	r3, [pc, #84]	; (8005938 <_HandleIncomingPacket+0xd4>)
 80058e4:	7e1b      	ldrb	r3, [r3, #24]
 80058e6:	4618      	mov	r0, r3
 80058e8:	1cfb      	adds	r3, r7, #3
 80058ea:	2201      	movs	r2, #1
 80058ec:	4619      	mov	r1, r3
 80058ee:	f7ff fd71 	bl	80053d4 <SEGGER_RTT_ReadNoLock>
 80058f2:	4603      	mov	r3, r0
 80058f4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dd15      	ble.n	8005928 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 f81c 	bl	800693c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005904:	e010      	b.n	8005928 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	b25b      	sxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	da0e      	bge.n	800592c <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <_HandleIncomingPacket+0xd4>)
 8005910:	7e1b      	ldrb	r3, [r3, #24]
 8005912:	4618      	mov	r0, r3
 8005914:	1cfb      	adds	r3, r7, #3
 8005916:	2201      	movs	r2, #1
 8005918:	4619      	mov	r1, r3
 800591a:	f7ff fd5b 	bl	80053d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800591e:	e005      	b.n	800592c <_HandleIncomingPacket+0xc8>
    }
  }
 8005920:	bf00      	nop
 8005922:	e004      	b.n	800592e <_HandleIncomingPacket+0xca>
      break;
 8005924:	bf00      	nop
 8005926:	e002      	b.n	800592e <_HandleIncomingPacket+0xca>
      break;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <_HandleIncomingPacket+0xca>
      break;
 800592c:	bf00      	nop
}
 800592e:	bf00      	nop
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2001a668 	.word	0x2001a668

0800593c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b08c      	sub	sp, #48	; 0x30
 8005940:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005942:	2301      	movs	r3, #1
 8005944:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005946:	1d3b      	adds	r3, r7, #4
 8005948:	3301      	adds	r3, #1
 800594a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005950:	4b32      	ldr	r3, [pc, #200]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
 8005956:	e00b      	b.n	8005970 <_TrySendOverflowPacket+0x34>
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	b2da      	uxtb	r2, r3
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	1c59      	adds	r1, r3, #1
 8005960:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	09db      	lsrs	r3, r3, #7
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b7f      	cmp	r3, #127	; 0x7f
 8005974:	d8f0      	bhi.n	8005958 <_TrySendOverflowPacket+0x1c>
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800597c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <_TrySendOverflowPacket+0xe4>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800598c:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	e00b      	b.n	80059b8 <_TrySendOverflowPacket+0x7c>
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	6279      	str	r1, [r7, #36]	; 0x24
 80059aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	623b      	str	r3, [r7, #32]
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	2b7f      	cmp	r3, #127	; 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <_TrySendOverflowPacket+0x64>
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	627a      	str	r2, [r7, #36]	; 0x24
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	4618      	mov	r0, r3
 80059d4:	69fa      	ldr	r2, [r7, #28]
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	1d3b      	adds	r3, r7, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	f7fa fbf6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059e4:	4603      	mov	r3, r0
 80059e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80059e8:	f7ff fac4 	bl	8004f74 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80059f8:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e004      	b.n	8005a10 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005a06:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	4a03      	ldr	r2, [pc, #12]	; (8005a1c <_TrySendOverflowPacket+0xe0>)
 8005a0e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005a10:	693b      	ldr	r3, [r7, #16]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3730      	adds	r7, #48	; 0x30
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	2001a668 	.word	0x2001a668
 8005a20:	e0001004 	.word	0xe0001004

08005a24 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a30:	4b6d      	ldr	r3, [pc, #436]	; (8005be8 <_SendPacket+0x1c4>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d010      	beq.n	8005a5a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a38:	4b6b      	ldr	r3, [pc, #428]	; (8005be8 <_SendPacket+0x1c4>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80a5 	beq.w	8005b8c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a42:	4b69      	ldr	r3, [pc, #420]	; (8005be8 <_SendPacket+0x1c4>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d109      	bne.n	8005a5e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a4a:	f7ff ff77 	bl	800593c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a4e:	4b66      	ldr	r3, [pc, #408]	; (8005be8 <_SendPacket+0x1c4>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	f040 809c 	bne.w	8005b90 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005a58:	e001      	b.n	8005a5e <_SendPacket+0x3a>
    goto Send;
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <_SendPacket+0x3c>
Send:
 8005a5e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b1f      	cmp	r3, #31
 8005a64:	d809      	bhi.n	8005a7a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a66:	4b60      	ldr	r3, [pc, #384]	; (8005be8 <_SendPacket+0x1c4>)
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 808d 	bne.w	8005b94 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b17      	cmp	r3, #23
 8005a7e:	d807      	bhi.n	8005a90 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e03d      	b.n	8005b0c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9c:	d912      	bls.n	8005ac4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	09da      	lsrs	r2, r3, #7
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	3a01      	subs	r2, #1
 8005ab6:	60fa      	str	r2, [r7, #12]
 8005ab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e006      	b.n	8005ad2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad6:	d912      	bls.n	8005afe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	09da      	lsrs	r2, r3, #7
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	3a01      	subs	r2, #1
 8005af0:	60fa      	str	r2, [r7, #12]
 8005af2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e006      	b.n	8005b0c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b0c:	4b37      	ldr	r3, [pc, #220]	; (8005bec <_SendPacket+0x1c8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b12:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <_SendPacket+0x1c4>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	623b      	str	r3, [r7, #32]
 8005b24:	e00b      	b.n	8005b3e <_SendPacket+0x11a>
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	1c59      	adds	r1, r3, #1
 8005b2e:	6279      	str	r1, [r7, #36]	; 0x24
 8005b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	09db      	lsrs	r3, r3, #7
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	2b7f      	cmp	r3, #127	; 0x7f
 8005b42:	d8f0      	bhi.n	8005b26 <_SendPacket+0x102>
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	627a      	str	r2, [r7, #36]	; 0x24
 8005b4a:	6a3a      	ldr	r2, [r7, #32]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b54:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <_SendPacket+0x1c4>)
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f7fa fb34 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005b6c:	f7ff fa02 	bl	8004f74 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b76:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <_SendPacket+0x1c4>)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	60d3      	str	r3, [r2, #12]
 8005b7c:	e00b      	b.n	8005b96 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b7e:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <_SendPacket+0x1c4>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	4b18      	ldr	r3, [pc, #96]	; (8005be8 <_SendPacket+0x1c4>)
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e004      	b.n	8005b96 <_SendPacket+0x172>
    goto SendDone;
 8005b8c:	bf00      	nop
 8005b8e:	e002      	b.n	8005b96 <_SendPacket+0x172>
      goto SendDone;
 8005b90:	bf00      	nop
 8005b92:	e000      	b.n	8005b96 <_SendPacket+0x172>
      goto SendDone;
 8005b94:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <_SendPacket+0x1c4>)
 8005b98:	7e1b      	ldrb	r3, [r3, #24]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <_SendPacket+0x1cc>)
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	440b      	add	r3, r1
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	336c      	adds	r3, #108	; 0x6c
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <_SendPacket+0x1c4>)
 8005bae:	7e1b      	ldrb	r3, [r3, #24]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	490f      	ldr	r1, [pc, #60]	; (8005bf0 <_SendPacket+0x1cc>)
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4403      	add	r3, r0
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	440b      	add	r3, r1
 8005bbe:	3370      	adds	r3, #112	; 0x70
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d00b      	beq.n	8005bde <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <_SendPacket+0x1c4>)
 8005bc8:	789b      	ldrb	r3, [r3, #2]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <_SendPacket+0x1c4>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005bd4:	f7ff fe46 	bl	8005864 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005bd8:	4b03      	ldr	r3, [pc, #12]	; (8005be8 <_SendPacket+0x1c4>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005bde:	bf00      	nop
 8005be0:	3728      	adds	r7, #40	; 0x28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	2001a668 	.word	0x2001a668
 8005bec:	e0001004 	.word	0xe0001004
 8005bf0:	2001a800 	.word	0x2001a800

08005bf4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c02:	2300      	movs	r3, #0
 8005c04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c08:	4917      	ldr	r1, [pc, #92]	; (8005c68 <SEGGER_SYSVIEW_Init+0x74>)
 8005c0a:	4818      	ldr	r0, [pc, #96]	; (8005c6c <SEGGER_SYSVIEW_Init+0x78>)
 8005c0c:	f7ff fcdc 	bl	80055c8 <SEGGER_RTT_AllocUpBuffer>
 8005c10:	4603      	mov	r3, r0
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c16:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005c18:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c1a:	785a      	ldrb	r2, [r3, #1]
 8005c1c:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c1e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c22:	7e1b      	ldrb	r3, [r3, #24]
 8005c24:	4618      	mov	r0, r3
 8005c26:	2300      	movs	r3, #0
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	4a11      	ldr	r2, [pc, #68]	; (8005c74 <SEGGER_SYSVIEW_Init+0x80>)
 8005c2e:	490f      	ldr	r1, [pc, #60]	; (8005c6c <SEGGER_SYSVIEW_Init+0x78>)
 8005c30:	f7ff fd4e 	bl	80056d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <SEGGER_SYSVIEW_Init+0x84>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c40:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005c42:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005c48:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005c4e:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005c54:	4a06      	ldr	r2, [pc, #24]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005c5a:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	20019660 	.word	0x20019660
 8005c6c:	08006d98 	.word	0x08006d98
 8005c70:	2001a668 	.word	0x2001a668
 8005c74:	2001a660 	.word	0x2001a660
 8005c78:	e0001004 	.word	0xe0001004

08005c7c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005c84:	4a04      	ldr	r2, [pc, #16]	; (8005c98 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6113      	str	r3, [r2, #16]
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	2001a668 	.word	0x2001a668

08005c9c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca8:	f04f 0120 	mov.w	r1, #32
 8005cac:	f381 8811 	msr	BASEPRI, r1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	4808      	ldr	r0, [pc, #32]	; (8005cd4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005cb4:	f7ff fdc9 	bl	800584a <_PreparePacket>
 8005cb8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	68b8      	ldr	r0, [r7, #8]
 8005cc0:	f7ff feb0 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f383 8811 	msr	BASEPRI, r3
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2001a698 	.word	0x2001a698

08005cd8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ce2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce6:	f04f 0120 	mov.w	r1, #32
 8005cea:	f381 8811 	msr	BASEPRI, r1
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	4816      	ldr	r0, [pc, #88]	; (8005d4c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005cf2:	f7ff fdaa 	bl	800584a <_PreparePacket>
 8005cf6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	61fb      	str	r3, [r7, #28]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	e00b      	b.n	8005d1e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	1c59      	adds	r1, r3, #1
 8005d0e:	61f9      	str	r1, [r7, #28]
 8005d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	09db      	lsrs	r3, r3, #7
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b7f      	cmp	r3, #127	; 0x7f
 8005d22:	d8f0      	bhi.n	8005d06 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	61fa      	str	r2, [r7, #28]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	6938      	ldr	r0, [r7, #16]
 8005d3a:	f7ff fe73 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f383 8811 	msr	BASEPRI, r3
}
 8005d44:	bf00      	nop
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	2001a698 	.word	0x2001a698

08005d50 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d60:	f04f 0120 	mov.w	r1, #32
 8005d64:	f381 8811 	msr	BASEPRI, r1
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	4825      	ldr	r0, [pc, #148]	; (8005e00 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d6c:	f7ff fd6d 	bl	800584a <_PreparePacket>
 8005d70:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7e:	e00b      	b.n	8005d98 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	1c59      	adds	r1, r3, #1
 8005d88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d94:	09db      	lsrs	r3, r3, #7
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9c:	d8f0      	bhi.n	8005d80 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	623b      	str	r3, [r7, #32]
 8005db6:	e00b      	b.n	8005dd0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	6279      	str	r1, [r7, #36]	; 0x24
 8005dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	09db      	lsrs	r3, r3, #7
 8005dce:	623b      	str	r3, [r7, #32]
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd4:	d8f0      	bhi.n	8005db8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	627a      	str	r2, [r7, #36]	; 0x24
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	6979      	ldr	r1, [r7, #20]
 8005dea:	69b8      	ldr	r0, [r7, #24]
 8005dec:	f7ff fe1a 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f383 8811 	msr	BASEPRI, r3
}
 8005df6:	bf00      	nop
 8005df8:	3730      	adds	r7, #48	; 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2001a698 	.word	0x2001a698

08005e04 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	; 0x38
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e12:	f3ef 8311 	mrs	r3, BASEPRI
 8005e16:	f04f 0120 	mov.w	r1, #32
 8005e1a:	f381 8811 	msr	BASEPRI, r1
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	4832      	ldr	r0, [pc, #200]	; (8005eec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005e22:	f7ff fd12 	bl	800584a <_PreparePacket>
 8005e26:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
 8005e34:	e00b      	b.n	8005e4e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	1c59      	adds	r1, r3, #1
 8005e3e:	6379      	str	r1, [r7, #52]	; 0x34
 8005e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	09db      	lsrs	r3, r3, #7
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2b7f      	cmp	r3, #127	; 0x7f
 8005e52:	d8f0      	bhi.n	8005e36 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	637a      	str	r2, [r7, #52]	; 0x34
 8005e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6c:	e00b      	b.n	8005e86 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	09db      	lsrs	r3, r3, #7
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e88:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8a:	d8f0      	bhi.n	8005e6e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	e00b      	b.n	8005ebe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	09db      	lsrs	r3, r3, #7
 8005ebc:	623b      	str	r3, [r7, #32]
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec2:	d8f0      	bhi.n	8005ea6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8005eca:	6a3a      	ldr	r2, [r7, #32]
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	69b8      	ldr	r0, [r7, #24]
 8005eda:	f7ff fda3 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f383 8811 	msr	BASEPRI, r3
}
 8005ee4:	bf00      	nop
 8005ee6:	3738      	adds	r7, #56	; 0x38
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	2001a698 	.word	0x2001a698

08005ef0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b090      	sub	sp, #64	; 0x40
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005efe:	f3ef 8311 	mrs	r3, BASEPRI
 8005f02:	f04f 0120 	mov.w	r1, #32
 8005f06:	f381 8811 	msr	BASEPRI, r1
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	4840      	ldr	r0, [pc, #256]	; (8006010 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f0e:	f7ff fc9c 	bl	800584a <_PreparePacket>
 8005f12:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f20:	e00b      	b.n	8005f3a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f28:	1c59      	adds	r1, r3, #1
 8005f2a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	09db      	lsrs	r3, r3, #7
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3e:	d8f0      	bhi.n	8005f22 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	633b      	str	r3, [r7, #48]	; 0x30
 8005f58:	e00b      	b.n	8005f72 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	1c59      	adds	r1, r3, #1
 8005f62:	6379      	str	r1, [r7, #52]	; 0x34
 8005f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
 8005f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f74:	2b7f      	cmp	r3, #127	; 0x7f
 8005f76:	d8f0      	bhi.n	8005f5a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	637a      	str	r2, [r7, #52]	; 0x34
 8005f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]
 8005f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f90:	e00b      	b.n	8005faa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	1c59      	adds	r1, r3, #1
 8005f9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa0:	b2d2      	uxtb	r2, r2
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	09db      	lsrs	r3, r3, #7
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	2b7f      	cmp	r3, #127	; 0x7f
 8005fae:	d8f0      	bhi.n	8005f92 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc6:	623b      	str	r3, [r7, #32]
 8005fc8:	e00b      	b.n	8005fe2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1c59      	adds	r1, r3, #1
 8005fd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	09db      	lsrs	r3, r3, #7
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe6:	d8f0      	bhi.n	8005fca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	627a      	str	r2, [r7, #36]	; 0x24
 8005fee:	6a3a      	ldr	r2, [r7, #32]
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	6979      	ldr	r1, [r7, #20]
 8005ffc:	69b8      	ldr	r0, [r7, #24]
 8005ffe:	f7ff fd11 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f383 8811 	msr	BASEPRI, r3
}
 8006008:	bf00      	nop
 800600a:	3740      	adds	r7, #64	; 0x40
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	2001a698 	.word	0x2001a698

08006014 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	; 0x30
 8006018:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800601a:	4b59      	ldr	r3, [pc, #356]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 800601c:	2201      	movs	r2, #1
 800601e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006020:	f3ef 8311 	mrs	r3, BASEPRI
 8006024:	f04f 0120 	mov.w	r1, #32
 8006028:	f381 8811 	msr	BASEPRI, r1
 800602c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800602e:	4b54      	ldr	r3, [pc, #336]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	220a      	movs	r2, #10
 8006034:	4953      	ldr	r1, [pc, #332]	; (8006184 <SEGGER_SYSVIEW_Start+0x170>)
 8006036:	4618      	mov	r0, r3
 8006038:	f7fa f8ca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006042:	f7fe ff97 	bl	8004f74 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006046:	200a      	movs	r0, #10
 8006048:	f7ff fe28 	bl	8005c9c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800604c:	f3ef 8311 	mrs	r3, BASEPRI
 8006050:	f04f 0120 	mov.w	r1, #32
 8006054:	f381 8811 	msr	BASEPRI, r1
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	484b      	ldr	r0, [pc, #300]	; (8006188 <SEGGER_SYSVIEW_Start+0x174>)
 800605c:	f7ff fbf5 	bl	800584a <_PreparePacket>
 8006060:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606a:	4b45      	ldr	r3, [pc, #276]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006070:	e00b      	b.n	800608a <SEGGER_SYSVIEW_Start+0x76>
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	b2da      	uxtb	r2, r3
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800607c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	62bb      	str	r3, [r7, #40]	; 0x28
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d8f0      	bhi.n	8006072 <SEGGER_SYSVIEW_Start+0x5e>
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
 80060a4:	4b36      	ldr	r3, [pc, #216]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	623b      	str	r3, [r7, #32]
 80060aa:	e00b      	b.n	80060c4 <SEGGER_SYSVIEW_Start+0xb0>
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	6279      	str	r1, [r7, #36]	; 0x24
 80060b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	623b      	str	r3, [r7, #32]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b7f      	cmp	r3, #127	; 0x7f
 80060c8:	d8f0      	bhi.n	80060ac <SEGGER_SYSVIEW_Start+0x98>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	627a      	str	r2, [r7, #36]	; 0x24
 80060d0:	6a3a      	ldr	r2, [r7, #32]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	4b28      	ldr	r3, [pc, #160]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	e00b      	b.n	80060fe <SEGGER_SYSVIEW_Start+0xea>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	61f9      	str	r1, [r7, #28]
 80060f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	09db      	lsrs	r3, r3, #7
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b7f      	cmp	r3, #127	; 0x7f
 8006102:	d8f0      	bhi.n	80060e6 <SEGGER_SYSVIEW_Start+0xd2>
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	61fa      	str	r2, [r7, #28]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	e00b      	b.n	8006136 <SEGGER_SYSVIEW_Start+0x122>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	1c59      	adds	r1, r3, #1
 8006126:	6179      	str	r1, [r7, #20]
 8006128:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	09db      	lsrs	r3, r3, #7
 8006134:	613b      	str	r3, [r7, #16]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b7f      	cmp	r3, #127	; 0x7f
 800613a:	d8f0      	bhi.n	800611e <SEGGER_SYSVIEW_Start+0x10a>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	617a      	str	r2, [r7, #20]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800614c:	2218      	movs	r2, #24
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff fc67 	bl	8005a24 <_SendPacket>
      RECORD_END();
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006164:	4b06      	ldr	r3, [pc, #24]	; (8006180 <SEGGER_SYSVIEW_Start+0x16c>)
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800616a:	f000 f9eb 	bl	8006544 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800616e:	f000 f9b1 	bl	80064d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006172:	f000 fc81 	bl	8006a78 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006176:	bf00      	nop
 8006178:	3730      	adds	r7, #48	; 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	2001a668 	.word	0x2001a668
 8006184:	08006dc4 	.word	0x08006dc4
 8006188:	2001a698 	.word	0x2001a698

0800618c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006192:	f3ef 8311 	mrs	r3, BASEPRI
 8006196:	f04f 0120 	mov.w	r1, #32
 800619a:	f381 8811 	msr	BASEPRI, r1
 800619e:	607b      	str	r3, [r7, #4]
 80061a0:	480b      	ldr	r0, [pc, #44]	; (80061d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80061a2:	f7ff fb52 	bl	800584a <_PreparePacket>
 80061a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80061b0:	220b      	movs	r2, #11
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6838      	ldr	r0, [r7, #0]
 80061b6:	f7ff fc35 	bl	8005a24 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f383 8811 	msr	BASEPRI, r3
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	2001a698 	.word	0x2001a698
 80061d4:	2001a668 	.word	0x2001a668

080061d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061de:	f3ef 8311 	mrs	r3, BASEPRI
 80061e2:	f04f 0120 	mov.w	r1, #32
 80061e6:	f381 8811 	msr	BASEPRI, r1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	4845      	ldr	r0, [pc, #276]	; (8006304 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80061ee:	f7ff fb2c 	bl	800584a <_PreparePacket>
 80061f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	4b42      	ldr	r3, [pc, #264]	; (8006308 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	62bb      	str	r3, [r7, #40]	; 0x28
 8006202:	e00b      	b.n	800621c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	b2da      	uxtb	r2, r3
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	1c59      	adds	r1, r3, #1
 800620c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800620e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	09db      	lsrs	r3, r3, #7
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	2b7f      	cmp	r3, #127	; 0x7f
 8006220:	d8f0      	bhi.n	8006204 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006230:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
 8006236:	4b34      	ldr	r3, [pc, #208]	; (8006308 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	623b      	str	r3, [r7, #32]
 800623c:	e00b      	b.n	8006256 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	6279      	str	r1, [r7, #36]	; 0x24
 8006248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2b7f      	cmp	r3, #127	; 0x7f
 800625a:	d8f0      	bhi.n	800623e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	627a      	str	r2, [r7, #36]	; 0x24
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	61f9      	str	r1, [r7, #28]
 8006282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b7f      	cmp	r3, #127	; 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	6179      	str	r1, [r7, #20]
 80062ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b7f      	cmp	r3, #127	; 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	617a      	str	r2, [r7, #20]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062de:	2218      	movs	r2, #24
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	68b8      	ldr	r0, [r7, #8]
 80062e4:	f7ff fb9e 	bl	8005a24 <_SendPacket>
  RECORD_END();
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80062f6:	4b04      	ldr	r3, [pc, #16]	; (8006308 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	4798      	blx	r3
  }
}
 80062fc:	bf00      	nop
 80062fe:	3730      	adds	r7, #48	; 0x30
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2001a698 	.word	0x2001a698
 8006308:	2001a668 	.word	0x2001a668

0800630c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b092      	sub	sp, #72	; 0x48
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	f04f 0120 	mov.w	r1, #32
 800631c:	f381 8811 	msr	BASEPRI, r1
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	486a      	ldr	r0, [pc, #424]	; (80064cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006324:	f7ff fa91 	bl	800584a <_PreparePacket>
 8006328:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	647b      	str	r3, [r7, #68]	; 0x44
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b66      	ldr	r3, [pc, #408]	; (80064d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	643b      	str	r3, [r7, #64]	; 0x40
 800633e:	e00b      	b.n	8006358 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006342:	b2da      	uxtb	r2, r3
 8006344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	6479      	str	r1, [r7, #68]	; 0x44
 800634a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	643b      	str	r3, [r7, #64]	; 0x40
 8006358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635a:	2b7f      	cmp	r3, #127	; 0x7f
 800635c:	d8f0      	bhi.n	8006340 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800635e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	647a      	str	r2, [r7, #68]	; 0x44
 8006364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	63bb      	str	r3, [r7, #56]	; 0x38
 8006378:	e00b      	b.n	8006392 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006380:	1c59      	adds	r1, r3, #1
 8006382:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006384:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	63bb      	str	r3, [r7, #56]	; 0x38
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2b7f      	cmp	r3, #127	; 0x7f
 8006396:	d8f0      	bhi.n	800637a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800639e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff f9fd 	bl	80057b0 <_EncodeStr>
 80063b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80063b8:	2209      	movs	r2, #9
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6938      	ldr	r0, [r7, #16]
 80063be:	f7ff fb31 	bl	8005a24 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b40      	ldr	r3, [pc, #256]	; (80064d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	633b      	str	r3, [r7, #48]	; 0x30
 80063d6:	e00b      	b.n	80063f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063de:	1c59      	adds	r1, r3, #1
 80063e0:	6379      	str	r1, [r7, #52]	; 0x34
 80063e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	09db      	lsrs	r3, r3, #7
 80063ee:	633b      	str	r3, [r7, #48]	; 0x30
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	d8f0      	bhi.n	80063d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	637a      	str	r2, [r7, #52]	; 0x34
 80063fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006410:	e00b      	b.n	800642a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	b2da      	uxtb	r2, r3
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800641c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	09db      	lsrs	r3, r3, #7
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2b7f      	cmp	r3, #127	; 0x7f
 800642e:	d8f0      	bhi.n	8006412 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	623b      	str	r3, [r7, #32]
 800644a:	e00b      	b.n	8006464 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1c59      	adds	r1, r3, #1
 8006454:	6279      	str	r1, [r7, #36]	; 0x24
 8006456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	09db      	lsrs	r3, r3, #7
 8006462:	623b      	str	r3, [r7, #32]
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b7f      	cmp	r3, #127	; 0x7f
 8006468:	d8f0      	bhi.n	800644c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	627a      	str	r2, [r7, #36]	; 0x24
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e00b      	b.n	800649c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	61f9      	str	r1, [r7, #28]
 800648e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	09db      	lsrs	r3, r3, #7
 800649a:	61bb      	str	r3, [r7, #24]
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2b7f      	cmp	r3, #127	; 0x7f
 80064a0:	d8f0      	bhi.n	8006484 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	61fa      	str	r2, [r7, #28]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80064b2:	2215      	movs	r2, #21
 80064b4:	68f9      	ldr	r1, [r7, #12]
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7ff fab4 	bl	8005a24 <_SendPacket>
  RECORD_END();
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f383 8811 	msr	BASEPRI, r3
}
 80064c2:	bf00      	nop
 80064c4:	3748      	adds	r7, #72	; 0x48
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	2001a698 	.word	0x2001a698
 80064d0:	2001a668 	.word	0x2001a668

080064d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064d8:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064e0:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4798      	blx	r3
  }
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2001a668 	.word	0x2001a668

080064fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006504:	f3ef 8311 	mrs	r3, BASEPRI
 8006508:	f04f 0120 	mov.w	r1, #32
 800650c:	f381 8811 	msr	BASEPRI, r1
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	480b      	ldr	r0, [pc, #44]	; (8006540 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006514:	f7ff f999 	bl	800584a <_PreparePacket>
 8006518:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800651a:	2280      	movs	r2, #128	; 0x80
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	6938      	ldr	r0, [r7, #16]
 8006520:	f7ff f946 	bl	80057b0 <_EncodeStr>
 8006524:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006526:	220e      	movs	r2, #14
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	6938      	ldr	r0, [r7, #16]
 800652c:	f7ff fa7a 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f383 8811 	msr	BASEPRI, r3
}
 8006536:	bf00      	nop
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	2001a698 	.word	0x2001a698

08006544 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800654a:	4b14      	ldr	r3, [pc, #80]	; (800659c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d019      	beq.n	8006586 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d014      	beq.n	8006586 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800655c:	4b0f      	ldr	r3, [pc, #60]	; (800659c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4798      	blx	r3
 8006564:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006568:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800656a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	f04f 0400 	mov.w	r4, #0
 8006576:	0013      	movs	r3, r2
 8006578:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800657a:	461a      	mov	r2, r3
 800657c:	4601      	mov	r1, r0
 800657e:	200d      	movs	r0, #13
 8006580:	f7ff fbe6 	bl	8005d50 <SEGGER_SYSVIEW_RecordU32x2>
 8006584:	e005      	b.n	8006592 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	200c      	movs	r0, #12
 800658e:	f7ff fba3 	bl	8005cd8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bd90      	pop	{r4, r7, pc}
 800659a:	bf00      	nop
 800659c:	2001a668 	.word	0x2001a668
 80065a0:	e0001004 	.word	0xe0001004

080065a4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065aa:	f3ef 8311 	mrs	r3, BASEPRI
 80065ae:	f04f 0120 	mov.w	r1, #32
 80065b2:	f381 8811 	msr	BASEPRI, r1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	4819      	ldr	r0, [pc, #100]	; (8006620 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80065ba:	f7ff f946 	bl	800584a <_PreparePacket>
 80065be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80065c4:	4b17      	ldr	r3, [pc, #92]	; (8006624 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065cc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	6179      	str	r1, [r7, #20]
 80065e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b7f      	cmp	r3, #127	; 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	617a      	str	r2, [r7, #20]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006606:	2202      	movs	r2, #2
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	68b8      	ldr	r0, [r7, #8]
 800660c:	f7ff fa0a 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f383 8811 	msr	BASEPRI, r3
}
 8006616:	bf00      	nop
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	2001a698 	.word	0x2001a698
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800662e:	f3ef 8311 	mrs	r3, BASEPRI
 8006632:	f04f 0120 	mov.w	r1, #32
 8006636:	f381 8811 	msr	BASEPRI, r1
 800663a:	607b      	str	r3, [r7, #4]
 800663c:	4807      	ldr	r0, [pc, #28]	; (800665c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800663e:	f7ff f904 	bl	800584a <_PreparePacket>
 8006642:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006644:	2203      	movs	r2, #3
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6838      	ldr	r0, [r7, #0]
 800664a:	f7ff f9eb 	bl	8005a24 <_SendPacket>
  RECORD_END();
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	2001a698 	.word	0x2001a698

08006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006666:	f3ef 8311 	mrs	r3, BASEPRI
 800666a:	f04f 0120 	mov.w	r1, #32
 800666e:	f381 8811 	msr	BASEPRI, r1
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	4807      	ldr	r0, [pc, #28]	; (8006694 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006676:	f7ff f8e8 	bl	800584a <_PreparePacket>
 800667a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800667c:	2212      	movs	r2, #18
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6838      	ldr	r0, [r7, #0]
 8006682:	f7ff f9cf 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f383 8811 	msr	BASEPRI, r3
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	2001a698 	.word	0x2001a698

08006698 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	f04f 0120 	mov.w	r1, #32
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	4807      	ldr	r0, [pc, #28]	; (80066cc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80066ae:	f7ff f8cc 	bl	800584a <_PreparePacket>
 80066b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80066b4:	2211      	movs	r2, #17
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6838      	ldr	r0, [r7, #0]
 80066ba:	f7ff f9b3 	bl	8005a24 <_SendPacket>
  RECORD_END();
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f383 8811 	msr	BASEPRI, r3
}
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	2001a698 	.word	0x2001a698

080066d0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066d8:	f3ef 8311 	mrs	r3, BASEPRI
 80066dc:	f04f 0120 	mov.w	r1, #32
 80066e0:	f381 8811 	msr	BASEPRI, r1
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	4819      	ldr	r0, [pc, #100]	; (800674c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80066e8:	f7ff f8af 	bl	800584a <_PreparePacket>
 80066ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066f2:	4b17      	ldr	r3, [pc, #92]	; (8006750 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	e00b      	b.n	800671e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	1c59      	adds	r1, r3, #1
 800670e:	61f9      	str	r1, [r7, #28]
 8006710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	09db      	lsrs	r3, r3, #7
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	2b7f      	cmp	r3, #127	; 0x7f
 8006722:	d8f0      	bhi.n	8006706 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	61fa      	str	r2, [r7, #28]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006734:	2208      	movs	r2, #8
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	6938      	ldr	r0, [r7, #16]
 800673a:	f7ff f973 	bl	8005a24 <_SendPacket>
  RECORD_END();
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f383 8811 	msr	BASEPRI, r3
}
 8006744:	bf00      	nop
 8006746:	3720      	adds	r7, #32
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	2001a698 	.word	0x2001a698
 8006750:	2001a668 	.word	0x2001a668

08006754 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800675c:	f3ef 8311 	mrs	r3, BASEPRI
 8006760:	f04f 0120 	mov.w	r1, #32
 8006764:	f381 8811 	msr	BASEPRI, r1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	4819      	ldr	r0, [pc, #100]	; (80067d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800676c:	f7ff f86d 	bl	800584a <_PreparePacket>
 8006770:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006776:	4b17      	ldr	r3, [pc, #92]	; (80067d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	e00b      	b.n	80067a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	61f9      	str	r1, [r7, #28]
 8006794:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006798:	b2d2      	uxtb	r2, r2
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	09db      	lsrs	r3, r3, #7
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b7f      	cmp	r3, #127	; 0x7f
 80067a6:	d8f0      	bhi.n	800678a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	61fa      	str	r2, [r7, #28]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80067b8:	2204      	movs	r2, #4
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6938      	ldr	r0, [r7, #16]
 80067be:	f7ff f931 	bl	8005a24 <_SendPacket>
  RECORD_END();
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f383 8811 	msr	BASEPRI, r3
}
 80067c8:	bf00      	nop
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	2001a698 	.word	0x2001a698
 80067d4:	2001a668 	.word	0x2001a668

080067d8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b088      	sub	sp, #32
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067e0:	f3ef 8311 	mrs	r3, BASEPRI
 80067e4:	f04f 0120 	mov.w	r1, #32
 80067e8:	f381 8811 	msr	BASEPRI, r1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	4819      	ldr	r0, [pc, #100]	; (8006854 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80067f0:	f7ff f82b 	bl	800584a <_PreparePacket>
 80067f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067fa:	4b17      	ldr	r3, [pc, #92]	; (8006858 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	e00b      	b.n	8006826 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	61f9      	str	r1, [r7, #28]
 8006818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	09db      	lsrs	r3, r3, #7
 8006824:	61bb      	str	r3, [r7, #24]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b7f      	cmp	r3, #127	; 0x7f
 800682a:	d8f0      	bhi.n	800680e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	61fa      	str	r2, [r7, #28]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800683c:	2206      	movs	r2, #6
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6938      	ldr	r0, [r7, #16]
 8006842:	f7ff f8ef 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f383 8811 	msr	BASEPRI, r3
}
 800684c:	bf00      	nop
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}
 8006854:	2001a698 	.word	0x2001a698
 8006858:	2001a668 	.word	0x2001a668

0800685c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b08a      	sub	sp, #40	; 0x28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006866:	f3ef 8311 	mrs	r3, BASEPRI
 800686a:	f04f 0120 	mov.w	r1, #32
 800686e:	f381 8811 	msr	BASEPRI, r1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	4827      	ldr	r0, [pc, #156]	; (8006914 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006876:	f7fe ffe8 	bl	800584a <_PreparePacket>
 800687a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	e00b      	b.n	80068ac <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	6279      	str	r1, [r7, #36]	; 0x24
 800689e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	09db      	lsrs	r3, r3, #7
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2b7f      	cmp	r3, #127	; 0x7f
 80068b0:	d8f0      	bhi.n	8006894 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	627a      	str	r2, [r7, #36]	; 0x24
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	61bb      	str	r3, [r7, #24]
 80068ca:	e00b      	b.n	80068e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	1c59      	adds	r1, r3, #1
 80068d4:	61f9      	str	r1, [r7, #28]
 80068d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	09db      	lsrs	r3, r3, #7
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b7f      	cmp	r3, #127	; 0x7f
 80068e8:	d8f0      	bhi.n	80068cc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	61fa      	str	r2, [r7, #28]
 80068f0:	69ba      	ldr	r2, [r7, #24]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80068fa:	2207      	movs	r2, #7
 80068fc:	68f9      	ldr	r1, [r7, #12]
 80068fe:	6938      	ldr	r0, [r7, #16]
 8006900:	f7ff f890 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f383 8811 	msr	BASEPRI, r3
}
 800690a:	bf00      	nop
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2001a698 	.word	0x2001a698
 8006918:	2001a668 	.word	0x2001a668

0800691c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006924:	4b04      	ldr	r3, [pc, #16]	; (8006938 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	1ad3      	subs	r3, r2, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	2001a668 	.word	0x2001a668

0800693c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b08c      	sub	sp, #48	; 0x30
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006946:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d06d      	beq.n	8006a2a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800694e:	4b39      	ldr	r3, [pc, #228]	; (8006a34 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006954:	2300      	movs	r3, #0
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
 8006958:	e008      	b.n	800696c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	3301      	adds	r3, #1
 800696a:	62bb      	str	r3, [r7, #40]	; 0x28
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006970:	429a      	cmp	r2, r3
 8006972:	d3f2      	bcc.n	800695a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006974:	e000      	b.n	8006978 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006976:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	2b00      	cmp	r3, #0
 800697c:	d055      	beq.n	8006a2a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800697e:	f3ef 8311 	mrs	r3, BASEPRI
 8006982:	f04f 0120 	mov.w	r1, #32
 8006986:	f381 8811 	msr	BASEPRI, r1
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	482a      	ldr	r0, [pc, #168]	; (8006a38 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800698e:	f7fe ff5c 	bl	800584a <_PreparePacket>
 8006992:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	e00b      	b.n	80069ba <SEGGER_SYSVIEW_SendModule+0x7e>
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1c59      	adds	r1, r3, #1
 80069aa:	6279      	str	r1, [r7, #36]	; 0x24
 80069ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	09db      	lsrs	r3, r3, #7
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2b7f      	cmp	r3, #127	; 0x7f
 80069be:	d8f0      	bhi.n	80069a2 <SEGGER_SYSVIEW_SendModule+0x66>
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	627a      	str	r2, [r7, #36]	; 0x24
 80069c6:	6a3a      	ldr	r2, [r7, #32]
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_SendModule+0xb8>
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	61f9      	str	r1, [r7, #28]
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_SendModule+0xa0>
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	61fa      	str	r2, [r7, #28]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2280      	movs	r2, #128	; 0x80
 8006a10:	4619      	mov	r1, r3
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7fe fecc 	bl	80057b0 <_EncodeStr>
 8006a18:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a1a:	2216      	movs	r2, #22
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f7ff f800 	bl	8005a24 <_SendPacket>
      RECORD_END();
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006a2a:	bf00      	nop
 8006a2c:	3730      	adds	r7, #48	; 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	2001a690 	.word	0x2001a690
 8006a38:	2001a698 	.word	0x2001a698

08006a3c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00f      	beq.n	8006a6a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006a4a:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f2      	bne.n	8006a50 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	2001a690 	.word	0x2001a690

08006a78 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a7e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a82:	f04f 0120 	mov.w	r1, #32
 8006a86:	f381 8811 	msr	BASEPRI, r1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	4817      	ldr	r0, [pc, #92]	; (8006aec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a8e:	f7fe fedc 	bl	800584a <_PreparePacket>
 8006a92:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	4b14      	ldr	r3, [pc, #80]	; (8006af0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e00b      	b.n	8006abc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1c59      	adds	r1, r3, #1
 8006aac:	6179      	str	r1, [r7, #20]
 8006aae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	09db      	lsrs	r3, r3, #7
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d8f0      	bhi.n	8006aa4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	617a      	str	r2, [r7, #20]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ad2:	221b      	movs	r2, #27
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	68b8      	ldr	r0, [r7, #8]
 8006ad8:	f7fe ffa4 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f383 8811 	msr	BASEPRI, r3
}
 8006ae2:	bf00      	nop
 8006ae4:	3718      	adds	r7, #24
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	2001a698 	.word	0x2001a698
 8006af0:	2001a694 	.word	0x2001a694

08006af4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006afc:	f3ef 8311 	mrs	r3, BASEPRI
 8006b00:	f04f 0120 	mov.w	r1, #32
 8006b04:	f381 8811 	msr	BASEPRI, r1
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	4827      	ldr	r0, [pc, #156]	; (8006ba8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b0c:	f7fe fe9d 	bl	800584a <_PreparePacket>
 8006b10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b12:	2280      	movs	r2, #128	; 0x80
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	6938      	ldr	r0, [r7, #16]
 8006b18:	f7fe fe4a 	bl	80057b0 <_EncodeStr>
 8006b1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
 8006b22:	2301      	movs	r3, #1
 8006b24:	623b      	str	r3, [r7, #32]
 8006b26:	e00b      	b.n	8006b40 <SEGGER_SYSVIEW_Warn+0x4c>
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	6279      	str	r1, [r7, #36]	; 0x24
 8006b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	09db      	lsrs	r3, r3, #7
 8006b3e:	623b      	str	r3, [r7, #32]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	2b7f      	cmp	r3, #127	; 0x7f
 8006b44:	d8f0      	bhi.n	8006b28 <SEGGER_SYSVIEW_Warn+0x34>
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	61fb      	str	r3, [r7, #28]
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	e00b      	b.n	8006b78 <SEGGER_SYSVIEW_Warn+0x84>
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	61f9      	str	r1, [r7, #28]
 8006b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	09db      	lsrs	r3, r3, #7
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	d8f0      	bhi.n	8006b60 <SEGGER_SYSVIEW_Warn+0x6c>
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	61fa      	str	r2, [r7, #28]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b8e:	221a      	movs	r2, #26
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	6938      	ldr	r0, [r7, #16]
 8006b94:	f7fe ff46 	bl	8005a24 <_SendPacket>
  RECORD_END();
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f383 8811 	msr	BASEPRI, r3
}
 8006b9e:	bf00      	nop
 8006ba0:	3728      	adds	r7, #40	; 0x28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	2001a698 	.word	0x2001a698

08006bac <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bb2:	7e1b      	ldrb	r3, [r3, #24]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006bb8:	460b      	mov	r3, r1
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	440b      	add	r3, r1
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	336c      	adds	r3, #108	; 0x6c
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bc8:	7e1b      	ldrb	r3, [r3, #24]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	490d      	ldr	r1, [pc, #52]	; (8006c04 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006bce:	4603      	mov	r3, r0
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	4403      	add	r3, r0
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	440b      	add	r3, r1
 8006bd8:	3370      	adds	r3, #112	; 0x70
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d00b      	beq.n	8006bf8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006be0:	4b07      	ldr	r3, [pc, #28]	; (8006c00 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006be2:	789b      	ldrb	r3, [r3, #2]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d107      	bne.n	8006bf8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006be8:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006bee:	f7fe fe39 	bl	8005864 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006bf2:	4b03      	ldr	r3, [pc, #12]	; (8006c00 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	2001a668 	.word	0x2001a668
 8006c04:	2001a800 	.word	0x2001a800

08006c08 <__libc_init_array>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4e0d      	ldr	r6, [pc, #52]	; (8006c40 <__libc_init_array+0x38>)
 8006c0c:	4c0d      	ldr	r4, [pc, #52]	; (8006c44 <__libc_init_array+0x3c>)
 8006c0e:	1ba4      	subs	r4, r4, r6
 8006c10:	10a4      	asrs	r4, r4, #2
 8006c12:	2500      	movs	r5, #0
 8006c14:	42a5      	cmp	r5, r4
 8006c16:	d109      	bne.n	8006c2c <__libc_init_array+0x24>
 8006c18:	4e0b      	ldr	r6, [pc, #44]	; (8006c48 <__libc_init_array+0x40>)
 8006c1a:	4c0c      	ldr	r4, [pc, #48]	; (8006c4c <__libc_init_array+0x44>)
 8006c1c:	f000 f83a 	bl	8006c94 <_init>
 8006c20:	1ba4      	subs	r4, r4, r6
 8006c22:	10a4      	asrs	r4, r4, #2
 8006c24:	2500      	movs	r5, #0
 8006c26:	42a5      	cmp	r5, r4
 8006c28:	d105      	bne.n	8006c36 <__libc_init_array+0x2e>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c30:	4798      	blx	r3
 8006c32:	3501      	adds	r5, #1
 8006c34:	e7ee      	b.n	8006c14 <__libc_init_array+0xc>
 8006c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c3a:	4798      	blx	r3
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7f2      	b.n	8006c26 <__libc_init_array+0x1e>
 8006c40:	08006dd8 	.word	0x08006dd8
 8006c44:	08006dd8 	.word	0x08006dd8
 8006c48:	08006dd8 	.word	0x08006dd8
 8006c4c:	08006ddc 	.word	0x08006ddc

08006c50 <memcmp>:
 8006c50:	b530      	push	{r4, r5, lr}
 8006c52:	2400      	movs	r4, #0
 8006c54:	42a2      	cmp	r2, r4
 8006c56:	d101      	bne.n	8006c5c <memcmp+0xc>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	e007      	b.n	8006c6c <memcmp+0x1c>
 8006c5c:	5d03      	ldrb	r3, [r0, r4]
 8006c5e:	3401      	adds	r4, #1
 8006c60:	190d      	adds	r5, r1, r4
 8006c62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006c66:	42ab      	cmp	r3, r5
 8006c68:	d0f4      	beq.n	8006c54 <memcmp+0x4>
 8006c6a:	1b58      	subs	r0, r3, r5
 8006c6c:	bd30      	pop	{r4, r5, pc}

08006c6e <memcpy>:
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	1e43      	subs	r3, r0, #1
 8006c72:	440a      	add	r2, r1
 8006c74:	4291      	cmp	r1, r2
 8006c76:	d100      	bne.n	8006c7a <memcpy+0xc>
 8006c78:	bd10      	pop	{r4, pc}
 8006c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c82:	e7f7      	b.n	8006c74 <memcpy+0x6>

08006c84 <memset>:
 8006c84:	4402      	add	r2, r0
 8006c86:	4603      	mov	r3, r0
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d100      	bne.n	8006c8e <memset+0xa>
 8006c8c:	4770      	bx	lr
 8006c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c92:	e7f9      	b.n	8006c88 <memset+0x4>

08006c94 <_init>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

08006ca0 <_fini>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	bf00      	nop
 8006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca6:	bc08      	pop	{r3}
 8006ca8:	469e      	mov	lr, r3
 8006caa:	4770      	bx	lr
