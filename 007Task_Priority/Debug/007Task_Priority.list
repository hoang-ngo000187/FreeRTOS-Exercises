
007Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019884  20000014  0800625c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019898  0800625c  00029898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180f2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee7  00000000  00000000  00038136  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003b020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003c328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022df0  00000000  00000000  0003d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f9aa  00000000  00000000  000602a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d599b  00000000  00000000  0006fc52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001455ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f98  00000000  00000000  00145668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006164 	.word	0x08006164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08006164 	.word	0x08006164

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200197f0 	.word	0x200197f0

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b972 	b.w	8000570 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14b      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4615      	mov	r5, r2
 80002b6:	d967      	bls.n	8000388 <__udivmoddi4+0xe4>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0720 	rsb	r7, r2, #32
 80002c2:	fa01 f302 	lsl.w	r3, r1, r2
 80002c6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ca:	4095      	lsls	r5, r2
 80002cc:	ea47 0803 	orr.w	r8, r7, r3
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002dc:	fa1f fc85 	uxth.w	ip, r5
 80002e0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e8:	fb07 f10c 	mul.w	r1, r7, ip
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18eb      	adds	r3, r5, r3
 80002f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f6:	f080 811b 	bcs.w	8000530 <__udivmoddi4+0x28c>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8118 	bls.w	8000530 <__udivmoddi4+0x28c>
 8000300:	3f02      	subs	r7, #2
 8000302:	442b      	add	r3, r5
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0fe 	udiv	r0, r3, lr
 800030c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fc0c 	mul.w	ip, r0, ip
 8000318:	45a4      	cmp	ip, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	192c      	adds	r4, r5, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x290>
 8000326:	45a4      	cmp	ip, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x290>
 800032c:	3802      	subs	r0, #2
 800032e:	442c      	add	r4, r5
 8000330:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000334:	eba4 040c 	sub.w	r4, r4, ip
 8000338:	2700      	movs	r7, #0
 800033a:	b11e      	cbz	r6, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c6 4300 	strd	r4, r3, [r6]
 8000344:	4639      	mov	r1, r7
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xbe>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80eb 	beq.w	800052a <__udivmoddi4+0x286>
 8000354:	2700      	movs	r7, #0
 8000356:	e9c6 0100 	strd	r0, r1, [r6]
 800035a:	4638      	mov	r0, r7
 800035c:	4639      	mov	r1, r7
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f783 	clz	r7, r3
 8000366:	2f00      	cmp	r7, #0
 8000368:	d147      	bne.n	80003fa <__udivmoddi4+0x156>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd0>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80fa 	bhi.w	8000568 <__udivmoddi4+0x2c4>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	4698      	mov	r8, r3
 800037e:	2e00      	cmp	r6, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa0>
 8000382:	e9c6 4800 	strd	r4, r8, [r6]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa0>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xe8>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 808f 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000396:	1b49      	subs	r1, r1, r5
 8000398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800039c:	fa1f f885 	uxth.w	r8, r5
 80003a0:	2701      	movs	r7, #1
 80003a2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a6:	0c23      	lsrs	r3, r4, #16
 80003a8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb08 f10c 	mul.w	r1, r8, ip
 80003b4:	4299      	cmp	r1, r3
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b8:	18eb      	adds	r3, r5, r3
 80003ba:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4299      	cmp	r1, r3
 80003c2:	f200 80cd 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003c6:	4684      	mov	ip, r0
 80003c8:	1a59      	subs	r1, r3, r1
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	45a0      	cmp	r8, r4
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x14c>
 80003e0:	192c      	adds	r4, r5, r4
 80003e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x14a>
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	f200 80b6 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003ee:	4618      	mov	r0, r3
 80003f0:	eba4 0408 	sub.w	r4, r4, r8
 80003f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f8:	e79f      	b.n	800033a <__udivmoddi4+0x96>
 80003fa:	f1c7 0c20 	rsb	ip, r7, #32
 80003fe:	40bb      	lsls	r3, r7
 8000400:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000404:	ea4e 0e03 	orr.w	lr, lr, r3
 8000408:	fa01 f407 	lsl.w	r4, r1, r7
 800040c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000410:	fa21 f30c 	lsr.w	r3, r1, ip
 8000414:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000418:	4325      	orrs	r5, r4
 800041a:	fbb3 f9f8 	udiv	r9, r3, r8
 800041e:	0c2c      	lsrs	r4, r5, #16
 8000420:	fb08 3319 	mls	r3, r8, r9, r3
 8000424:	fa1f fa8e 	uxth.w	sl, lr
 8000428:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800042c:	fb09 f40a 	mul.w	r4, r9, sl
 8000430:	429c      	cmp	r4, r3
 8000432:	fa02 f207 	lsl.w	r2, r2, r7
 8000436:	fa00 f107 	lsl.w	r1, r0, r7
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1e 0303 	adds.w	r3, lr, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	f080 8087 	bcs.w	8000556 <__udivmoddi4+0x2b2>
 8000448:	429c      	cmp	r4, r3
 800044a:	f240 8084 	bls.w	8000556 <__udivmoddi4+0x2b2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4473      	add	r3, lr
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	b2ad      	uxth	r5, r5
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000464:	fb00 fa0a 	mul.w	sl, r0, sl
 8000468:	45a2      	cmp	sl, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1e 0404 	adds.w	r4, lr, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d26b      	bcs.n	800054e <__udivmoddi4+0x2aa>
 8000476:	45a2      	cmp	sl, r4
 8000478:	d969      	bls.n	800054e <__udivmoddi4+0x2aa>
 800047a:	3802      	subs	r0, #2
 800047c:	4474      	add	r4, lr
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	eba4 040a 	sub.w	r4, r4, sl
 800048a:	454c      	cmp	r4, r9
 800048c:	46c2      	mov	sl, r8
 800048e:	464b      	mov	r3, r9
 8000490:	d354      	bcc.n	800053c <__udivmoddi4+0x298>
 8000492:	d051      	beq.n	8000538 <__udivmoddi4+0x294>
 8000494:	2e00      	cmp	r6, #0
 8000496:	d069      	beq.n	800056c <__udivmoddi4+0x2c8>
 8000498:	ebb1 050a 	subs.w	r5, r1, sl
 800049c:	eb64 0403 	sbc.w	r4, r4, r3
 80004a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a4:	40fd      	lsrs	r5, r7
 80004a6:	40fc      	lsrs	r4, r7
 80004a8:	ea4c 0505 	orr.w	r5, ip, r5
 80004ac:	e9c6 5400 	strd	r5, r4, [r6]
 80004b0:	2700      	movs	r7, #0
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0xa0>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f703 	lsr.w	r7, r0, r3
 80004bc:	4095      	lsls	r5, r2
 80004be:	fa01 f002 	lsl.w	r0, r1, r2
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ca:	4338      	orrs	r0, r7
 80004cc:	0c01      	lsrs	r1, r0, #16
 80004ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80004d2:	fa1f f885 	uxth.w	r8, r5
 80004d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb07 f308 	mul.w	r3, r7, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	fa04 f402 	lsl.w	r4, r4, r2
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x256>
 80004ea:	1869      	adds	r1, r5, r1
 80004ec:	f107 3cff 	add.w	ip, r7, #4294967295
 80004f0:	d22f      	bcs.n	8000552 <__udivmoddi4+0x2ae>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d92d      	bls.n	8000552 <__udivmoddi4+0x2ae>
 80004f6:	3f02      	subs	r7, #2
 80004f8:	4429      	add	r1, r5
 80004fa:	1acb      	subs	r3, r1, r3
 80004fc:	b281      	uxth	r1, r0
 80004fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000502:	fb0e 3310 	mls	r3, lr, r0, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb00 f308 	mul.w	r3, r0, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x27e>
 8000512:	1869      	adds	r1, r5, r1
 8000514:	f100 3cff 	add.w	ip, r0, #4294967295
 8000518:	d217      	bcs.n	800054a <__udivmoddi4+0x2a6>
 800051a:	428b      	cmp	r3, r1
 800051c:	d915      	bls.n	800054a <__udivmoddi4+0x2a6>
 800051e:	3802      	subs	r0, #2
 8000520:	4429      	add	r1, r5
 8000522:	1ac9      	subs	r1, r1, r3
 8000524:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000528:	e73b      	b.n	80003a2 <__udivmoddi4+0xfe>
 800052a:	4637      	mov	r7, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e709      	b.n	8000344 <__udivmoddi4+0xa0>
 8000530:	4607      	mov	r7, r0
 8000532:	e6e7      	b.n	8000304 <__udivmoddi4+0x60>
 8000534:	4618      	mov	r0, r3
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x8c>
 8000538:	4541      	cmp	r1, r8
 800053a:	d2ab      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 800053c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000540:	eb69 020e 	sbc.w	r2, r9, lr
 8000544:	3801      	subs	r0, #1
 8000546:	4613      	mov	r3, r2
 8000548:	e7a4      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054a:	4660      	mov	r0, ip
 800054c:	e7e9      	b.n	8000522 <__udivmoddi4+0x27e>
 800054e:	4618      	mov	r0, r3
 8000550:	e795      	b.n	800047e <__udivmoddi4+0x1da>
 8000552:	4667      	mov	r7, ip
 8000554:	e7d1      	b.n	80004fa <__udivmoddi4+0x256>
 8000556:	4681      	mov	r9, r0
 8000558:	e77c      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055a:	3802      	subs	r0, #2
 800055c:	442c      	add	r4, r5
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0x14c>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	442b      	add	r3, r5
 8000566:	e72f      	b.n	80003c8 <__udivmoddi4+0x124>
 8000568:	4638      	mov	r0, r7
 800056a:	e708      	b.n	800037e <__udivmoddi4+0xda>
 800056c:	4637      	mov	r7, r6
 800056e:	e6e9      	b.n	8000344 <__udivmoddi4+0xa0>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_Init+0x40>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <HAL_Init+0x40>)
 800057e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_Init+0x40>)
 800058a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_Init+0x40>)
 8000596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059c:	2003      	movs	r0, #3
 800059e:	f000 f8fa 	bl	8000796 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 fcae 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a8:	f001 fc84 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ac:	2300      	movs	r3, #0
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	2001976c 	.word	0x2001976c

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	2001976c 	.word	0x2001976c

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8f7      	bhi.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	db0b      	blt.n	80006ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	f003 021f 	and.w	r2, r3, #31
 80006b8:	4907      	ldr	r1, [pc, #28]	; (80006d8 <__NVIC_EnableIRQ+0x38>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	095b      	lsrs	r3, r3, #5
 80006c0:	2001      	movs	r0, #1
 80006c2:	fa00 f202 	lsl.w	r2, r0, r2
 80006c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff4c 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007be:	f7ff ff61 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68b9      	ldr	r1, [r7, #8]
 80007c8:	6978      	ldr	r0, [r7, #20]
 80007ca:	f7ff ffb1 	bl	8000730 <NVIC_EncodePriority>
 80007ce:	4602      	mov	r2, r0
 80007d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff80 	bl	80006dc <__NVIC_SetPriority>
}
 80007dc:	bf00      	nop
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff54 	bl	80006a0 <__NVIC_EnableIRQ>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	e16b      	b.n	8000af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800081c:	2201      	movs	r2, #1
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	429a      	cmp	r2, r3
 8000836:	f040 815a 	bne.w	8000aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d00b      	beq.n	800085a <HAL_GPIO_Init+0x5a>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d007      	beq.n	800085a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084e:	2b11      	cmp	r3, #17
 8000850:	d003      	beq.n	800085a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b12      	cmp	r3, #18
 8000858:	d130      	bne.n	80008bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	2203      	movs	r2, #3
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	4013      	ands	r3, r2
 8000870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	68da      	ldr	r2, [r3, #12]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	4313      	orrs	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4013      	ands	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	091b      	lsrs	r3, r3, #4
 80008a6:	f003 0201 	and.w	r2, r3, #1
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689a      	ldr	r2, [r3, #8]
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d003      	beq.n	80008fc <HAL_GPIO_Init+0xfc>
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b12      	cmp	r3, #18
 80008fa:	d123      	bne.n	8000944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	08da      	lsrs	r2, r3, #3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3208      	adds	r2, #8
 8000904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	220f      	movs	r2, #15
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	43db      	mvns	r3, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	08da      	lsrs	r2, r3, #3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3208      	adds	r2, #8
 800093e:	69b9      	ldr	r1, [r7, #24]
 8000940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0203 	and.w	r2, r3, #3
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 80b4 	beq.w	8000aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <HAL_GPIO_Init+0x308>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	4a5e      	ldr	r2, [pc, #376]	; (8000b08 <HAL_GPIO_Init+0x308>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6453      	str	r3, [r2, #68]	; 0x44
 8000996:	4b5c      	ldr	r3, [pc, #368]	; (8000b08 <HAL_GPIO_Init+0x308>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009a2:	4a5a      	ldr	r2, [pc, #360]	; (8000b0c <HAL_GPIO_Init+0x30c>)
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a51      	ldr	r2, [pc, #324]	; (8000b10 <HAL_GPIO_Init+0x310>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d02b      	beq.n	8000a26 <HAL_GPIO_Init+0x226>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x314>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d025      	beq.n	8000a22 <HAL_GPIO_Init+0x222>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <HAL_GPIO_Init+0x318>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d01f      	beq.n	8000a1e <HAL_GPIO_Init+0x21e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x31c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d019      	beq.n	8000a1a <HAL_GPIO_Init+0x21a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4d      	ldr	r2, [pc, #308]	; (8000b20 <HAL_GPIO_Init+0x320>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d013      	beq.n	8000a16 <HAL_GPIO_Init+0x216>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4c      	ldr	r2, [pc, #304]	; (8000b24 <HAL_GPIO_Init+0x324>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00d      	beq.n	8000a12 <HAL_GPIO_Init+0x212>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4b      	ldr	r2, [pc, #300]	; (8000b28 <HAL_GPIO_Init+0x328>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <HAL_GPIO_Init+0x20e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4a      	ldr	r2, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x32c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_GPIO_Init+0x20a>
 8000a06:	2307      	movs	r3, #7
 8000a08:	e00e      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	e00c      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00a      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e008      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a16:	2304      	movs	r3, #4
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x228>
 8000a26:	2300      	movs	r3, #0
 8000a28:	69fa      	ldr	r2, [r7, #28]
 8000a2a:	f002 0203 	and.w	r2, r2, #3
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a38:	4934      	ldr	r1, [pc, #208]	; (8000b0c <HAL_GPIO_Init+0x30c>)
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a46:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4013      	ands	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a94:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	69ba      	ldr	r2, [r7, #24]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <HAL_GPIO_Init+0x330>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	f67f ae90 	bls.w	800081c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000afc:	bf00      	nop
 8000afe:	3724      	adds	r7, #36	; 0x24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40021c00 	.word	0x40021c00
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b50:	e003      	b.n	8000b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	619a      	str	r2, [r3, #24]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	401a      	ands	r2, r3
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d104      	bne.n	8000b8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	041a      	lsls	r2, r3, #16
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f806 	bl	8000bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40013c00 	.word	0x40013c00

08000bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e25b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d075      	beq.n	8000cee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c02:	4ba3      	ldr	r3, [pc, #652]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d00c      	beq.n	8000c28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c0e:	4ba0      	ldr	r3, [pc, #640]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d112      	bne.n	8000c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c1a:	4b9d      	ldr	r3, [pc, #628]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c26:	d10b      	bne.n	8000c40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c28:	4b99      	ldr	r3, [pc, #612]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d05b      	beq.n	8000cec <HAL_RCC_OscConfig+0x108>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d157      	bne.n	8000cec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e236      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c48:	d106      	bne.n	8000c58 <HAL_RCC_OscConfig+0x74>
 8000c4a:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a90      	ldr	r2, [pc, #576]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e01d      	b.n	8000c94 <HAL_RCC_OscConfig+0xb0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x98>
 8000c62:	4b8b      	ldr	r3, [pc, #556]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a8a      	ldr	r2, [pc, #552]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a87      	ldr	r2, [pc, #540]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xb0>
 8000c7c:	4b84      	ldr	r3, [pc, #528]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a83      	ldr	r2, [pc, #524]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b81      	ldr	r3, [pc, #516]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a80      	ldr	r2, [pc, #512]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fca0 	bl	80005e0 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fc9c 	bl	80005e0 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1fb      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b76      	ldr	r3, [pc, #472]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xc0>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fc8c 	bl	80005e0 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fc88 	bl	80005e0 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1e7      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	4b6c      	ldr	r3, [pc, #432]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0xe8>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d063      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfa:	4b65      	ldr	r3, [pc, #404]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d06:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	4b5c      	ldr	r3, [pc, #368]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <HAL_RCC_OscConfig+0x152>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e1bb      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d36:	4b56      	ldr	r3, [pc, #344]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4952      	ldr	r1, [pc, #328]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	e03a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	4b4f      	ldr	r3, [pc, #316]	; (8000e94 <HAL_RCC_OscConfig+0x2b0>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fc41 	bl	80005e0 <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d62:	f7ff fc3d 	bl	80005e0 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e19c      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b46      	ldr	r3, [pc, #280]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b43      	ldr	r3, [pc, #268]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4940      	ldr	r1, [pc, #256]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_RCC_OscConfig+0x2b0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc20 	bl	80005e0 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc1c 	bl	80005e0 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e17b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d030      	beq.n	8000e30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d016      	beq.n	8000e04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_RCC_OscConfig+0x2b4>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc00 	bl	80005e0 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fbfc 	bl	80005e0 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e15b      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x200>
 8000e02:	e015      	b.n	8000e30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_RCC_OscConfig+0x2b4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fbe9 	bl	80005e0 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e12:	f7ff fbe5 	bl	80005e0 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e144      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80a0 	beq.w	8000f7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10f      	bne.n	8000e6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_RCC_OscConfig+0x2b8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d121      	bne.n	8000ebe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_RCC_OscConfig+0x2b8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_RCC_OscConfig+0x2b8>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e86:	f7ff fbab 	bl	80005e0 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e8c:	e011      	b.n	8000eb2 <HAL_RCC_OscConfig+0x2ce>
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	42470000 	.word	0x42470000
 8000e98:	42470e80 	.word	0x42470e80
 8000e9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea0:	f7ff fb9e 	bl	80005e0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d901      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e0fd      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb2:	4b81      	ldr	r3, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x4d4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f0      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d106      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
 8000ec6:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eca:	4a7c      	ldr	r2, [pc, #496]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed2:	e01c      	b.n	8000f0e <HAL_RCC_OscConfig+0x32a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d10c      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x312>
 8000edc:	4b77      	ldr	r3, [pc, #476]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee0:	4a76      	ldr	r2, [pc, #472]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee8:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eec:	4a73      	ldr	r2, [pc, #460]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef4:	e00b      	b.n	8000f0e <HAL_RCC_OscConfig+0x32a>
 8000ef6:	4b71      	ldr	r3, [pc, #452]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efa:	4a70      	ldr	r2, [pc, #448]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6713      	str	r3, [r2, #112]	; 0x70
 8000f02:	4b6e      	ldr	r3, [pc, #440]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f06:	4a6d      	ldr	r2, [pc, #436]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f08:	f023 0304 	bic.w	r3, r3, #4
 8000f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d015      	beq.n	8000f42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f16:	f7ff fb63 	bl	80005e0 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f1c:	e00a      	b.n	8000f34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fb5f 	bl	80005e0 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e0bc      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f34:	4b61      	ldr	r3, [pc, #388]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0ee      	beq.n	8000f1e <HAL_RCC_OscConfig+0x33a>
 8000f40:	e014      	b.n	8000f6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f42:	f7ff fb4d 	bl	80005e0 <HAL_GetTick>
 8000f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f48:	e00a      	b.n	8000f60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f4a:	f7ff fb49 	bl	80005e0 <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e0a6      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f60:	4b56      	ldr	r3, [pc, #344]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1ee      	bne.n	8000f4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d105      	bne.n	8000f7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f72:	4b52      	ldr	r3, [pc, #328]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8092 	beq.w	80010ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f88:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d05c      	beq.n	800104e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d141      	bne.n	8001020 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9c:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_RCC_OscConfig+0x4dc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fb1d 	bl	80005e0 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000faa:	f7ff fb19 	bl	80005e0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e078      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f0      	bne.n	8000faa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69da      	ldr	r2, [r3, #28]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	019b      	lsls	r3, r3, #6
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	085b      	lsrs	r3, r3, #1
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	041b      	lsls	r3, r3, #16
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fea:	061b      	lsls	r3, r3, #24
 8000fec:	4933      	ldr	r1, [pc, #204]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff2:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <HAL_RCC_OscConfig+0x4dc>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff faf2 	bl	80005e0 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001000:	f7ff faee 	bl	80005e0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e04d      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x41c>
 800101e:	e045      	b.n	80010ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_RCC_OscConfig+0x4dc>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fadb 	bl	80005e0 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fad7 	bl	80005e0 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e036      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x44a>
 800104c:	e02e      	b.n	80010ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e029      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_RCC_OscConfig+0x4d8>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	429a      	cmp	r2, r3
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001078:	429a      	cmp	r2, r3
 800107a:	d115      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001082:	4013      	ands	r3, r2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001088:	4293      	cmp	r3, r2
 800108a:	d10d      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001096:	429a      	cmp	r2, r3
 8001098:	d106      	bne.n	80010a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40007000 	.word	0x40007000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	42470060 	.word	0x42470060

080010c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0cc      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 030f 	and.w	r3, r3, #15
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d90c      	bls.n	8001100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4b65      	ldr	r3, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800113a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d044      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d119      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d003      	beq.n	8001182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117e:	2b03      	cmp	r3, #3
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b3f      	ldr	r3, [pc, #252]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e06f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e067      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f023 0203 	bic.w	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4934      	ldr	r1, [pc, #208]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fa14 	bl	80005e0 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fa10 	bl	80005e0 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e04f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d20c      	bcs.n	800120c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	4313      	orrs	r3, r2
 8001228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f821 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 800124e:	4601      	mov	r1, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	fa21 f303 	lsr.w	r3, r1, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fe4a 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00
 8001280:	40023800 	.word	0x40023800
 8001284:	08006214 	.word	0x08006214
 8001288:	20000008 	.word	0x20000008
 800128c:	20000000 	.word	0x20000000

08001290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012a6:	4b63      	ldr	r3, [pc, #396]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d007      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x32>
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d008      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0x38>
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80b4 	bne.w	8001424 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012be:	60bb      	str	r3, [r7, #8]
       break;
 80012c0:	e0b3      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012c4:	60bb      	str	r3, [r7, #8]
      break;
 80012c6:	e0b0      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012c8:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012d2:	4b58      	ldr	r3, [pc, #352]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d04a      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012de:	4b55      	ldr	r3, [pc, #340]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	f04f 0400 	mov.w	r4, #0
 80012e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	ea03 0501 	and.w	r5, r3, r1
 80012f4:	ea04 0602 	and.w	r6, r4, r2
 80012f8:	4629      	mov	r1, r5
 80012fa:	4632      	mov	r2, r6
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f04f 0400 	mov.w	r4, #0
 8001304:	0154      	lsls	r4, r2, #5
 8001306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800130a:	014b      	lsls	r3, r1, #5
 800130c:	4619      	mov	r1, r3
 800130e:	4622      	mov	r2, r4
 8001310:	1b49      	subs	r1, r1, r5
 8001312:	eb62 0206 	sbc.w	r2, r2, r6
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	f04f 0400 	mov.w	r4, #0
 800131e:	0194      	lsls	r4, r2, #6
 8001320:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001324:	018b      	lsls	r3, r1, #6
 8001326:	1a5b      	subs	r3, r3, r1
 8001328:	eb64 0402 	sbc.w	r4, r4, r2
 800132c:	f04f 0100 	mov.w	r1, #0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	00e2      	lsls	r2, r4, #3
 8001336:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800133a:	00d9      	lsls	r1, r3, #3
 800133c:	460b      	mov	r3, r1
 800133e:	4614      	mov	r4, r2
 8001340:	195b      	adds	r3, r3, r5
 8001342:	eb44 0406 	adc.w	r4, r4, r6
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	0262      	lsls	r2, r4, #9
 8001350:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001354:	0259      	lsls	r1, r3, #9
 8001356:	460b      	mov	r3, r1
 8001358:	4614      	mov	r4, r2
 800135a:	4618      	mov	r0, r3
 800135c:	4621      	mov	r1, r4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f04f 0400 	mov.w	r4, #0
 8001364:	461a      	mov	r2, r3
 8001366:	4623      	mov	r3, r4
 8001368:	f7fe ff84 	bl	8000274 <__aeabi_uldivmod>
 800136c:	4603      	mov	r3, r0
 800136e:	460c      	mov	r4, r1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e049      	b.n	8001408 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	f04f 0400 	mov.w	r4, #0
 800137e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	ea03 0501 	and.w	r5, r3, r1
 800138a:	ea04 0602 	and.w	r6, r4, r2
 800138e:	4629      	mov	r1, r5
 8001390:	4632      	mov	r2, r6
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f04f 0400 	mov.w	r4, #0
 800139a:	0154      	lsls	r4, r2, #5
 800139c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013a0:	014b      	lsls	r3, r1, #5
 80013a2:	4619      	mov	r1, r3
 80013a4:	4622      	mov	r2, r4
 80013a6:	1b49      	subs	r1, r1, r5
 80013a8:	eb62 0206 	sbc.w	r2, r2, r6
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	f04f 0400 	mov.w	r4, #0
 80013b4:	0194      	lsls	r4, r2, #6
 80013b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013ba:	018b      	lsls	r3, r1, #6
 80013bc:	1a5b      	subs	r3, r3, r1
 80013be:	eb64 0402 	sbc.w	r4, r4, r2
 80013c2:	f04f 0100 	mov.w	r1, #0
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	00e2      	lsls	r2, r4, #3
 80013cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013d0:	00d9      	lsls	r1, r3, #3
 80013d2:	460b      	mov	r3, r1
 80013d4:	4614      	mov	r4, r2
 80013d6:	195b      	adds	r3, r3, r5
 80013d8:	eb44 0406 	adc.w	r4, r4, r6
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	02a2      	lsls	r2, r4, #10
 80013e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013ea:	0299      	lsls	r1, r3, #10
 80013ec:	460b      	mov	r3, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	4621      	mov	r1, r4
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0400 	mov.w	r4, #0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4623      	mov	r3, r4
 80013fe:	f7fe ff39 	bl	8000274 <__aeabi_uldivmod>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	0c1b      	lsrs	r3, r3, #16
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	3301      	adds	r3, #1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	60bb      	str	r3, [r7, #8]
      break;
 8001422:	e002      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001426:	60bb      	str	r3, [r7, #8]
      break;
 8001428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142a:	68bb      	ldr	r3, [r7, #8]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	00f42400 	.word	0x00f42400
 800143c:	007a1200 	.word	0x007a1200

08001440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_RCC_GetHCLKFreq+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800145c:	f7ff fff0 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 8001460:	4601      	mov	r1, r0
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	0a9b      	lsrs	r3, r3, #10
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_RCC_GetPCLK1Freq+0x24>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	08006224 	.word	0x08006224

08001480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	220f      	movs	r2, #15
 800148e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0203 	and.w	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_GetClockConfig+0x5c>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_RCC_GetClockConfig+0x60>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 020f 	and.w	r2, r3, #15
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e01d      	b.n	8001532 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f815 	bl	800153a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3304      	adds	r3, #4
 8001520:	4619      	mov	r1, r3
 8001522:	4610      	mov	r0, r2
 8001524:	f000 f968 	bl	80017f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0201 	orr.w	r2, r2, #1
 8001564:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b06      	cmp	r3, #6
 8001576:	d007      	beq.n	8001588 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d122      	bne.n	80015f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d11b      	bne.n	80015f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f06f 0202 	mvn.w	r2, #2
 80015c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8ee 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 80015de:	e005      	b.n	80015ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f8e0 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f8f1 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d122      	bne.n	8001646 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b04      	cmp	r3, #4
 800160c:	d11b      	bne.n	8001646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f06f 0204 	mvn.w	r2, #4
 8001616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f8c4 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 8001632:	e005      	b.n	8001640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8b6 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8c7 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b08      	cmp	r3, #8
 8001652:	d122      	bne.n	800169a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b08      	cmp	r3, #8
 8001660:	d11b      	bne.n	800169a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f06f 0208 	mvn.w	r2, #8
 800166a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f89a 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 8001686:	e005      	b.n	8001694 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f88c 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f89d 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b10      	cmp	r3, #16
 80016a6:	d122      	bne.n	80016ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d11b      	bne.n	80016ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f06f 0210 	mvn.w	r2, #16
 80016be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2208      	movs	r2, #8
 80016c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f870 	bl	80017ba <HAL_TIM_IC_CaptureCallback>
 80016da:	e005      	b.n	80016e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f862 	bl	80017a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f873 	bl	80017ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d10e      	bne.n	800171a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f06f 0201 	mvn.w	r2, #1
 8001712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 fbb3 	bl	8001e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001724:	2b80      	cmp	r3, #128	; 0x80
 8001726:	d10e      	bne.n	8001746 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b80      	cmp	r3, #128	; 0x80
 8001734:	d107      	bne.n	8001746 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800173e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f903 	bl	800194c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001750:	2b40      	cmp	r3, #64	; 0x40
 8001752:	d10e      	bne.n	8001772 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b40      	cmp	r3, #64	; 0x40
 8001760:	d107      	bne.n	8001772 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800176a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f838 	bl	80017e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	2b20      	cmp	r3, #32
 800177e:	d10e      	bne.n	800179e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f003 0320 	and.w	r3, r3, #32
 800178a:	2b20      	cmp	r3, #32
 800178c:	d107      	bne.n	800179e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f06f 0220 	mvn.w	r2, #32
 8001796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8cd 	bl	8001938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <TIM_Base_SetConfig+0x114>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001816:	d00f      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <TIM_Base_SetConfig+0x118>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00b      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <TIM_Base_SetConfig+0x11c>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <TIM_Base_SetConfig+0x120>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d003      	beq.n	8001838 <TIM_Base_SetConfig+0x40>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3a      	ldr	r2, [pc, #232]	; (800191c <TIM_Base_SetConfig+0x124>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d108      	bne.n	800184a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a2f      	ldr	r2, [pc, #188]	; (800190c <TIM_Base_SetConfig+0x114>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d02b      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001858:	d027      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a2c      	ldr	r2, [pc, #176]	; (8001910 <TIM_Base_SetConfig+0x118>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d023      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <TIM_Base_SetConfig+0x11c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d01f      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a2a      	ldr	r2, [pc, #168]	; (8001918 <TIM_Base_SetConfig+0x120>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01b      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a29      	ldr	r2, [pc, #164]	; (800191c <TIM_Base_SetConfig+0x124>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d017      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a28      	ldr	r2, [pc, #160]	; (8001920 <TIM_Base_SetConfig+0x128>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <TIM_Base_SetConfig+0x12c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00f      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <TIM_Base_SetConfig+0x130>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00b      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <TIM_Base_SetConfig+0x134>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <TIM_Base_SetConfig+0x138>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d003      	beq.n	80018aa <TIM_Base_SetConfig+0xb2>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a23      	ldr	r2, [pc, #140]	; (8001934 <TIM_Base_SetConfig+0x13c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d108      	bne.n	80018bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <TIM_Base_SetConfig+0x114>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d003      	beq.n	80018f0 <TIM_Base_SetConfig+0xf8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <TIM_Base_SetConfig+0x124>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d103      	bne.n	80018f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	615a      	str	r2, [r3, #20]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40010000 	.word	0x40010000
 8001910:	40000400 	.word	0x40000400
 8001914:	40000800 	.word	0x40000800
 8001918:	40000c00 	.word	0x40000c00
 800191c:	40010400 	.word	0x40010400
 8001920:	40014000 	.word	0x40014000
 8001924:	40014400 	.word	0x40014400
 8001928:	40014800 	.word	0x40014800
 800192c:	40001800 	.word	0x40001800
 8001930:	40001c00 	.word	0x40001c00
 8001934:	40002000 	.word	0x40002000

08001938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f7fe fe05 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f83f 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 f8a7 	bl	8001ac0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2302      	movs	r3, #2
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	22c8      	movs	r2, #200	; 0xc8
 8001980:	4916      	ldr	r1, [pc, #88]	; (80019dc <main+0x7c>)
 8001982:	4817      	ldr	r0, [pc, #92]	; (80019e0 <main+0x80>)
 8001984:	f000 ff52 	bl	800282c <xTaskCreate>
 8001988:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d009      	beq.n	80019a4 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	e7fe      	b.n	80019a2 <main+0x42>

  status = xTaskCreate(task2_handler, "Task-2", 200, NULL, 3, &task2_handle);
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2303      	movs	r3, #3
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	22c8      	movs	r2, #200	; 0xc8
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <main+0x84>)
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <main+0x88>)
 80019b4:	f000 ff3a 	bl	800282c <xTaskCreate>
 80019b8:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d009      	beq.n	80019d4 <main+0x74>
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	f383 8811 	msr	BASEPRI, r3
 80019c8:	f3bf 8f6f 	isb	sy
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e7fe      	b.n	80019d2 <main+0x72>

  vTaskStartScheduler();
 80019d4:	f001 f9c8 	bl	8002d68 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <main+0x78>
 80019da:	bf00      	nop
 80019dc:	0800617c 	.word	0x0800617c
 80019e0:	08001e21 	.word	0x08001e21
 80019e4:	08006184 	.word	0x08006184
 80019e8:	08001e45 	.word	0x08001e45

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	; 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2230      	movs	r2, #48	; 0x30
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 fbaa 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <SystemClock_Config+0xcc>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <SystemClock_Config+0xd0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a21      	ldr	r2, [pc, #132]	; (8001abc <SystemClock_Config+0xd0>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <SystemClock_Config+0xd0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a50:	2310      	movs	r3, #16
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a54:	2302      	movs	r3, #2
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001a60:	2332      	movs	r3, #50	; 0x32
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a68:	2307      	movs	r3, #7
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f8b7 	bl	8000be4 <HAL_RCC_OscConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a7c:	f000 fa12 	bl	8001ea4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a80:	230f      	movs	r3, #15
 8001a82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a84:	2302      	movs	r3, #2
 8001a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001a8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb10 	bl	80010c4 <HAL_RCC_ClockConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aaa:	f000 f9fb 	bl	8001ea4 <Error_Handler>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3750      	adds	r7, #80	; 0x50
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4ba5      	ldr	r3, [pc, #660]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4aa4      	ldr	r2, [pc, #656]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4ba2      	ldr	r3, [pc, #648]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b9e      	ldr	r3, [pc, #632]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a9d      	ldr	r2, [pc, #628]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b9b      	ldr	r3, [pc, #620]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b97      	ldr	r3, [pc, #604]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a96      	ldr	r2, [pc, #600]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b94      	ldr	r3, [pc, #592]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b90      	ldr	r3, [pc, #576]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a8f      	ldr	r2, [pc, #572]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b8d      	ldr	r3, [pc, #564]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a88      	ldr	r2, [pc, #544]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	4b82      	ldr	r3, [pc, #520]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a81      	ldr	r2, [pc, #516]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b6c:	f043 0308 	orr.w	r3, r3, #8
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <MX_GPIO_Init+0x2b0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2108      	movs	r1, #8
 8001b82:	487c      	ldr	r0, [pc, #496]	; (8001d74 <MX_GPIO_Init+0x2b4>)
 8001b84:	f7fe ffd6 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	487a      	ldr	r0, [pc, #488]	; (8001d78 <MX_GPIO_Init+0x2b8>)
 8001b8e:	f7fe ffd1 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001b92:	2200      	movs	r2, #0
 8001b94:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b98:	4878      	ldr	r0, [pc, #480]	; (8001d7c <MX_GPIO_Init+0x2bc>)
 8001b9a:	f7fe ffcb 	bl	8000b34 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	486f      	ldr	r0, [pc, #444]	; (8001d74 <MX_GPIO_Init+0x2b4>)
 8001bb6:	f7fe fe23 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4869      	ldr	r0, [pc, #420]	; (8001d78 <MX_GPIO_Init+0x2b8>)
 8001bd2:	f7fe fe15 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be6:	2305      	movs	r3, #5
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4861      	ldr	r0, [pc, #388]	; (8001d78 <MX_GPIO_Init+0x2b8>)
 8001bf2:	f7fe fe05 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bfa:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <MX_GPIO_Init+0x2c0>)
 8001bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	4619      	mov	r1, r3
 8001c08:	485e      	ldr	r0, [pc, #376]	; (8001d84 <MX_GPIO_Init+0x2c4>)
 8001c0a:	f7fe fdf9 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c1e:	2306      	movs	r3, #6
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4856      	ldr	r0, [pc, #344]	; (8001d84 <MX_GPIO_Init+0x2c4>)
 8001c2a:	f7fe fde9 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c2e:	23e0      	movs	r3, #224	; 0xe0
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c3e:	2305      	movs	r3, #5
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	484e      	ldr	r0, [pc, #312]	; (8001d84 <MX_GPIO_Init+0x2c4>)
 8001c4a:	f7fe fdd9 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4849      	ldr	r0, [pc, #292]	; (8001d88 <MX_GPIO_Init+0x2c8>)
 8001c62:	f7fe fdcd 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	4841      	ldr	r0, [pc, #260]	; (8001d88 <MX_GPIO_Init+0x2c8>)
 8001c84:	f7fe fdbc 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001c88:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001c8c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4836      	ldr	r0, [pc, #216]	; (8001d7c <MX_GPIO_Init+0x2bc>)
 8001ca2:	f7fe fdad 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ca6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cb8:	2306      	movs	r3, #6
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	482d      	ldr	r0, [pc, #180]	; (8001d78 <MX_GPIO_Init+0x2b8>)
 8001cc4:	f7fe fd9c 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4829      	ldr	r0, [pc, #164]	; (8001d84 <MX_GPIO_Init+0x2c4>)
 8001cde:	f7fe fd8f 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001ce2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4821      	ldr	r0, [pc, #132]	; (8001d84 <MX_GPIO_Init+0x2c4>)
 8001d00:	f7fe fd7e 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d04:	2320      	movs	r3, #32
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4819      	ldr	r0, [pc, #100]	; (8001d7c <MX_GPIO_Init+0x2bc>)
 8001d18:	f7fe fd72 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d1c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d22:	2312      	movs	r3, #18
 8001d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4813      	ldr	r0, [pc, #76]	; (8001d88 <MX_GPIO_Init+0x2c8>)
 8001d3a:	f7fe fd61 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_GPIO_Init+0x2cc>)
 8001d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4808      	ldr	r0, [pc, #32]	; (8001d74 <MX_GPIO_Init+0x2b4>)
 8001d52:	f7fe fd55 	bl	8000800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2106      	movs	r1, #6
 8001d5a:	2006      	movs	r0, #6
 8001d5c:	f7fe fd26 	bl	80007ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d60:	2006      	movs	r0, #6
 8001d62:	f7fe fd3f 	bl	80007e4 <HAL_NVIC_EnableIRQ>

}
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	; 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	10210000 	.word	0x10210000
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	10120000 	.word	0x10120000

08001d90 <switch_priority>:

/* USER CODE BEGIN 4 */
void switch_priority(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8001d9a:	f002 fb0b 	bl	80043b4 <vPortEnterCritical>
	if(status_button){
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <switch_priority+0x84>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <switch_priority+0x20>
		status_button = 0;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <switch_priority+0x84>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8001db0:	f002 fb2e 	bl	8004410 <vPortExitCritical>

	if(switch_priority){
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d027      	beq.n	8001e0a <switch_priority+0x7a>
		t1 = xTaskGetHandle("Task-1");
 8001dba:	4817      	ldr	r0, [pc, #92]	; (8001e18 <switch_priority+0x88>)
 8001dbc:	f001 f9be 	bl	800313c <xTaskGetHandle>
 8001dc0:	6138      	str	r0, [r7, #16]
		t2 = xTaskGetHandle("Task-2");
 8001dc2:	4816      	ldr	r0, [pc, #88]	; (8001e1c <switch_priority+0x8c>)
 8001dc4:	f001 f9ba 	bl	800313c <xTaskGetHandle>
 8001dc8:	60f8      	str	r0, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8001dca:	6938      	ldr	r0, [r7, #16]
 8001dcc:	f000 fec6 	bl	8002b5c <uxTaskPriorityGet>
 8001dd0:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fec2 	bl	8002b5c <uxTaskPriorityGet>
 8001dd8:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8001dda:	f001 fe0f 	bl	80039fc <xTaskGetCurrentTaskHandle>
 8001dde:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d108      	bne.n	8001dfa <switch_priority+0x6a>
			vTaskPrioritySet(t1,p2);
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	6938      	ldr	r0, [r7, #16]
 8001dec:	f000 fed0 	bl	8002b90 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fecc 	bl	8002b90 <vTaskPrioritySet>
		}else{
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}
}
 8001df8:	e007      	b.n	8001e0a <switch_priority+0x7a>
			vTaskPrioritySet(t2,p1);
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fec7 	bl	8002b90 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	6938      	ldr	r0, [r7, #16]
 8001e06:	f000 fec3 	bl	8002b90 <vTaskPrioritySet>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000030 	.word	0x20000030
 8001e18:	0800617c 	.word	0x0800617c
 8001e1c:	08006184 	.word	0x08006184

08001e20 <task1_handler>:

static void task1_handler(void* parameters)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <task1_handler+0x20>)
 8001e2e:	f7fe fe9a 	bl	8000b66 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001e32:	2064      	movs	r0, #100	; 0x64
 8001e34:	f7fe fbe0 	bl	80005f8 <HAL_Delay>
		switch_priority();
 8001e38:	f7ff ffaa 	bl	8001d90 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8001e3c:	e7f4      	b.n	8001e28 <task1_handler+0x8>
 8001e3e:	bf00      	nop
 8001e40:	40020c00 	.word	0x40020c00

08001e44 <task2_handler>:
	}
}


static void task2_handler(void* parameters)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8001e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <task2_handler+0x20>)
 8001e52:	f7fe fe88 	bl	8000b66 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e5a:	f7fe fbcd 	bl	80005f8 <HAL_Delay>
		switch_priority();
 8001e5e:	f7ff ff97 	bl	8001d90 <switch_priority>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8001e62:	e7f3      	b.n	8001e4c <task2_handler+0x8>
 8001e64:	40020c00 	.word	0x40020c00

08001e68 <button_interrupt_handler>:
	}
}


void button_interrupt_handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	//traceISR_ENTER();
	status_button = 1;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <button_interrupt_handler+0x14>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
	//traceISR_EXIT();
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	20000030 	.word	0x20000030

08001e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e92:	f7fe fb91 	bl	80005b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40001000 	.word	0x40001000

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_MspInit+0x4c>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_MspInit+0x4c>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8001ef2:	f002 f9e5 	bl	80042c0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001f14:	2200      	movs	r2, #0
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2036      	movs	r0, #54	; 0x36
 8001f1a:	f7fe fc47 	bl	80007ac <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001f1e:	2036      	movs	r0, #54	; 0x36
 8001f20:	f7fe fc60 	bl	80007e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_InitTick+0xa4>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_InitTick+0xa4>)
 8001f2e:	f043 0310 	orr.w	r3, r3, #16
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_InitTick+0xa4>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f40:	f107 0210 	add.w	r2, r7, #16
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fa98 	bl	8001480 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f50:	f7ff fa82 	bl	8001458 <HAL_RCC_GetPCLK1Freq>
 8001f54:	4603      	mov	r3, r0
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <HAL_InitTick+0xa8>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0c9b      	lsrs	r3, r3, #18
 8001f64:	3b01      	subs	r3, #1
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_InitTick+0xb0>)
 8001f6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f88:	4809      	ldr	r0, [pc, #36]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f8a:	f7ff faab 	bl	80014e4 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d104      	bne.n	8001f9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f94:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <HAL_InitTick+0xac>)
 8001f96:	f7ff fada 	bl	800154e <HAL_TIM_Base_Start_IT>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3730      	adds	r7, #48	; 0x30
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	431bde83 	.word	0x431bde83
 8001fb0:	20019770 	.word	0x20019770
 8001fb4:	40001000 	.word	0x40001000

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8001ff0:	f7ff ff3a 	bl	8001e68 <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f7fe fdd1 	bl	8000b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //HAL_GPIO_EXTI_IRQHandler(B1_Pin);
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIM6_DAC_IRQHandler+0x10>)
 8002006:	f7ff fac6 	bl	8001596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20019770 	.word	0x20019770

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <SystemInit+0x28>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	4a07      	ldr	r2, [pc, #28]	; (800203c <SystemInit+0x28>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <SystemInit+0x28>)
 800202a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800202e:	609a      	str	r2, [r3, #8]
#endif
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002078 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002044:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002046:	e003      	b.n	8002050 <LoopCopyDataInit>

08002048 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800204a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800204c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800204e:	3104      	adds	r1, #4

08002050 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002050:	480b      	ldr	r0, [pc, #44]	; (8002080 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002054:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002056:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002058:	d3f6      	bcc.n	8002048 <CopyDataInit>
  ldr  r2, =_sbss
 800205a:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800205c:	e002      	b.n	8002064 <LoopFillZerobss>

0800205e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800205e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002060:	f842 3b04 	str.w	r3, [r2], #4

08002064 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002066:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002068:	d3f9      	bcc.n	800205e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800206a:	f7ff ffd3 	bl	8002014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206e:	f004 f833 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7ff fc75 	bl	8001960 <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002078:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800207c:	08006248 	.word	0x08006248
  ldr  r0, =_sdata
 8002080:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002084:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8002088:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800208c:	20019898 	.word	0x20019898

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>

08002092 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0208 	add.w	r2, r3, #8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f04f 32ff 	mov.w	r2, #4294967295
 80020aa:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f103 0208 	add.w	r2, r3, #8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f103 0208 	add.w	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002102:	d103      	bne.n	800210c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e00c      	b.n	8002126 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3308      	adds	r3, #8
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	e002      	b.n	800211a <vListInsert+0x2e>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	d2f6      	bcs.n	8002114 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6852      	ldr	r2, [r2, #4]
 800217e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d103      	bne.n	8002192 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021be:	2301      	movs	r3, #1
 80021c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <xQueueGenericReset+0x2c>
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e7fe      	b.n	80021de <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d063      	beq.n	80022ae <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d05f      	beq.n	80022ae <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2000      	movs	r0, #0
 80021f8:	fba2 1203 	umull	r1, r2, r2, r3
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	f04f 0400 	mov.w	r4, #0
 8002204:	0013      	movs	r3, r2
 8002206:	2400      	movs	r4, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d000      	beq.n	800220e <xQueueGenericReset+0x5a>
 800220c:	2001      	movs	r0, #1
 800220e:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d14c      	bne.n	80022ae <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002214:	f002 f8ce 	bl	80043b4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	441a      	add	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2200      	movs	r2, #0
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	3b01      	subs	r3, #1
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	441a      	add	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	22ff      	movs	r2, #255	; 0xff
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d114      	bne.n	8002294 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01a      	beq.n	80022a8 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	3310      	adds	r3, #16
 8002276:	4618      	mov	r0, r3
 8002278:	f001 f9b2 	bl	80035e0 <xTaskRemoveFromEventList>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <xQueueGenericReset+0x124>)
 8002284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	e009      	b.n	80022a8 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3310      	adds	r3, #16
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fefa 	bl	8002092 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	3324      	adds	r3, #36	; 0x24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fef5 	bl	8002092 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022a8:	f002 f8b2 	bl	8004410 <vPortExitCritical>
 80022ac:	e001      	b.n	80022b2 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <xQueueGenericReset+0x118>
 80022b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	e7fe      	b.n	80022ca <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022cc:	697b      	ldr	r3, [r7, #20]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	371c      	adds	r7, #28
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b08b      	sub	sp, #44	; 0x2c
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d034      	beq.n	800235e <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022f4:	2000      	movs	r0, #0
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	fba2 1203 	umull	r1, r2, r2, r3
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	f04f 0400 	mov.w	r4, #0
 8002306:	0013      	movs	r3, r2
 8002308:	2400      	movs	r4, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d000      	beq.n	8002310 <xQueueGenericCreate+0x34>
 800230e:	2001      	movs	r0, #1
 8002310:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d123      	bne.n	800235e <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800231e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002322:	d81c      	bhi.n	800235e <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	fb02 f303 	mul.w	r3, r2, r3
 800232c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	3350      	adds	r3, #80	; 0x50
 8002332:	4618      	mov	r0, r3
 8002334:	f002 f920 	bl	8004578 <pvPortMalloc>
 8002338:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d01b      	beq.n	8002378 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3350      	adds	r3, #80	; 0x50
 8002348:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f813 	bl	8002382 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800235c:	e00c      	b.n	8002378 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <xQueueGenericCreate+0x9c>
 8002364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e7fe      	b.n	8002376 <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002378:	69fb      	ldr	r3, [r7, #28]
    }
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e002      	b.n	80023a4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023b0:	2101      	movs	r1, #1
 80023b2:	69b8      	ldr	r0, [r7, #24]
 80023b4:	f7ff fefe 	bl	80021b4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	68f9      	ldr	r1, [r7, #12]
 80023c6:	2073      	movs	r0, #115	; 0x73
 80023c8:	f002 ffd6 	bl	8005378 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b08f      	sub	sp, #60	; 0x3c
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <xQueueReceive+0x2e>
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	e7fe      	b.n	8002400 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <xQueueReceive+0x3c>
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <xQueueReceive+0x40>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <xQueueReceive+0x42>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <xQueueReceive+0x5a>
 800241a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	e7fe      	b.n	800242c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800242e:	f001 faf5 	bl	8003a1c <xTaskGetSchedulerState>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <xQueueReceive+0x6a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <xQueueReceive+0x6e>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <xQueueReceive+0x70>
 8002442:	2300      	movs	r3, #0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <xQueueReceive+0x88>
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	e7fe      	b.n	800245a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800245c:	f001 ffaa 	bl	80043b4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	2b00      	cmp	r3, #0
 800246a:	d031      	beq.n	80024d0 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002470:	f000 f8c4 	bl	80025fc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fce6 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 800247c:	4604      	mov	r4, r0
 800247e:	2000      	movs	r0, #0
 8002480:	f003 fce2 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 8002484:	4601      	mov	r1, r0
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	2301      	movs	r3, #1
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	4613      	mov	r3, r2
 800248e:	460a      	mov	r2, r1
 8002490:	4621      	mov	r1, r4
 8002492:	205c      	movs	r0, #92	; 0x5c
 8002494:	f002 ffe6 	bl	8005464 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00f      	beq.n	80024c8 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	3310      	adds	r3, #16
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 f897 	bl	80035e0 <xTaskRemoveFromEventList>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d007      	beq.n	80024c8 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024b8:	4b4f      	ldr	r3, [pc, #316]	; (80025f8 <xQueueReceive+0x224>)
 80024ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024c8:	f001 ffa2 	bl	8004410 <vPortExitCritical>
                return pdPASS;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e08e      	b.n	80025ee <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024d6:	f001 ff9b 	bl	8004410 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	4618      	mov	r0, r3
 80024de:	f003 fcb3 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 80024e2:	4604      	mov	r4, r0
 80024e4:	2000      	movs	r0, #0
 80024e6:	f003 fcaf 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 80024ea:	4601      	mov	r1, r0
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	2301      	movs	r3, #1
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	460a      	mov	r2, r1
 80024f6:	4621      	mov	r1, r4
 80024f8:	205c      	movs	r0, #92	; 0x5c
 80024fa:	f002 ffb3 	bl	8005464 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024fe:	2300      	movs	r3, #0
 8002500:	e075      	b.n	80025ee <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	4618      	mov	r0, r3
 800250e:	f001 f93f 	bl	8003790 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002512:	2301      	movs	r3, #1
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002516:	f001 ff7b 	bl	8004410 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800251a:	f000 fc85 	bl	8002e28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800251e:	f001 ff49 	bl	80043b4 <vPortEnterCritical>
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002528:	b25b      	sxtb	r3, r3
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d103      	bne.n	8002538 <xQueueReceive+0x164>
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800253e:	b25b      	sxtb	r3, r3
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d103      	bne.n	800254e <xQueueReceive+0x17a>
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800254e:	f001 ff5f 	bl	8004410 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002552:	1d3a      	adds	r2, r7, #4
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f001 f92e 	bl	80037bc <xTaskCheckForTimeOut>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d124      	bne.n	80025b0 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002568:	f000 f8c0 	bl	80026ec <prvIsQueueEmpty>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002574:	3324      	adds	r3, #36	; 0x24
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 ffc4 	bl	8003508 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002582:	f000 f861 	bl	8002648 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002586:	f000 fc5d 	bl	8002e44 <xTaskResumeAll>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f af65 	bne.w	800245c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <xQueueReceive+0x224>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	e75b      	b.n	800245c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a6:	f000 f84f 	bl	8002648 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025aa:	f000 fc4b 	bl	8002e44 <xTaskResumeAll>
 80025ae:	e755      	b.n	800245c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f849 	bl	8002648 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025b6:	f000 fc45 	bl	8002e44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025bc:	f000 f896 	bl	80026ec <prvIsQueueEmpty>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f43f af4a 	beq.w	800245c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fc3c 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 80025d0:	4604      	mov	r4, r0
 80025d2:	2000      	movs	r0, #0
 80025d4:	f003 fc38 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 80025d8:	4601      	mov	r1, r0
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	2301      	movs	r3, #1
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	460a      	mov	r2, r1
 80025e4:	4621      	mov	r1, r4
 80025e6:	205c      	movs	r0, #92	; 0x5c
 80025e8:	f002 ff3c 	bl	8005464 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025ec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3734      	adds	r7, #52	; 0x34
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	e000ed04 	.word	0xe000ed04

080025fc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	441a      	add	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	429a      	cmp	r2, r3
 8002626:	d303      	bcc.n	8002630 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68d9      	ldr	r1, [r3, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	461a      	mov	r2, r3
 800263a:	6838      	ldr	r0, [r7, #0]
 800263c:	f003 fd7f 	bl	800613e <memcpy>
    }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002650:	f001 feb0 	bl	80043b4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800265a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800265c:	e011      	b.n	8002682 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b00      	cmp	r3, #0
 8002664:	d012      	beq.n	800268c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3324      	adds	r3, #36	; 0x24
 800266a:	4618      	mov	r0, r3
 800266c:	f000 ffb8 	bl	80035e0 <xTaskRemoveFromEventList>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002676:	f001 f905 	bl	8003884 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	3b01      	subs	r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	dce9      	bgt.n	800265e <prvUnlockQueue+0x16>
 800268a:	e000      	b.n	800268e <prvUnlockQueue+0x46>
                        break;
 800268c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	22ff      	movs	r2, #255	; 0xff
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002696:	f001 febb 	bl	8004410 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800269a:	f001 fe8b 	bl	80043b4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026a4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026a6:	e011      	b.n	80026cc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3310      	adds	r3, #16
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 ff93 	bl	80035e0 <xTaskRemoveFromEventList>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026c0:	f001 f8e0 	bl	8003884 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026c4:	7bbb      	ldrb	r3, [r7, #14]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	dce9      	bgt.n	80026a8 <prvUnlockQueue+0x60>
 80026d4:	e000      	b.n	80026d8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026d6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	22ff      	movs	r2, #255	; 0xff
 80026dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026e0:	f001 fe96 	bl	8004410 <vPortExitCritical>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026f4:	f001 fe5e 	bl	80043b4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002700:	2301      	movs	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e001      	b.n	800270a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800270a:	f001 fe81 	bl	8004410 <vPortExitCritical>

    return xReturn;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <vQueueAddToRegistry+0x24>
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	e7fe      	b.n	800273a <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e01e      	b.n	800278a <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <vQueueAddToRegistry+0xa8>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d105      	bne.n	8002768 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <vQueueAddToRegistry+0xa8>)
 8002762:	4413      	add	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
                    break;
 8002766:	e013      	b.n	8002790 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <vQueueAddToRegistry+0x6c>
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <vQueueAddToRegistry+0xa8>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <vQueueAddToRegistry+0xa8>)
 8002780:	4413      	add	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b07      	cmp	r3, #7
 800278e:	d9dd      	bls.n	800274c <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00f      	beq.n	80027b6 <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fb4f 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 80027aa:	4601      	mov	r1, r0
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	2071      	movs	r0, #113	; 0x71
 80027b2:	f002 fd87 	bl	80052c4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200197b0 	.word	0x200197b0

080027c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027d4:	f001 fdee 	bl	80043b4 <vPortEnterCritical>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d103      	bne.n	80027ee <vQueueWaitForMessageRestricted+0x2a>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d103      	bne.n	8002804 <vQueueWaitForMessageRestricted+0x40>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002804:	f001 fe04 	bl	8004410 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3324      	adds	r3, #36	; 0x24
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fe99 	bl	8003550 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff12 	bl	8002648 <prvUnlockQueue>
    }
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af04      	add	r7, sp, #16
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fe99 	bl	8004578 <pvPortMalloc>
 8002846:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00e      	beq.n	800286c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800284e:	2058      	movs	r0, #88	; 0x58
 8002850:	f001 fe92 	bl	8004578 <pvPortMalloc>
 8002854:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	e005      	b.n	8002870 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f001 ff63 	bl	8004730 <vPortFree>
 800286a:	e001      	b.n	8002870 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	2300      	movs	r3, #0
 800287a:	9303      	str	r3, [sp, #12]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f80e 	bl	80028ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002892:	69f8      	ldr	r0, [r7, #28]
 8002894:	f000 f8ae 	bl	80029f4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002898:	2301      	movs	r3, #1
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e002      	b.n	80028a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028a4:	69bb      	ldr	r3, [r7, #24]
    }
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b088      	sub	sp, #32
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	461a      	mov	r2, r3
 80028c6:	21a5      	movs	r1, #165	; 0xa5
 80028c8:	f003 fc44 	bl	8006154 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028d6:	3b01      	subs	r3, #1
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <prvInitialiseNewTask+0x56>
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e7fe      	b.n	8002902 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01f      	beq.n	800294a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e012      	b.n	8002936 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	7819      	ldrb	r1, [r3, #0]
 8002918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	3334      	adds	r3, #52	; 0x34
 8002920:	460a      	mov	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	3301      	adds	r3, #1
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b09      	cmp	r3, #9
 800293a:	d9e9      	bls.n	8002910 <prvInitialiseNewTask+0x62>
 800293c:	e000      	b.n	8002940 <prvInitialiseNewTask+0x92>
            {
                break;
 800293e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002948:	e003      	b.n	8002952 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2b04      	cmp	r3, #4
 8002956:	d909      	bls.n	800296c <prvInitialiseNewTask+0xbe>
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e7fe      	b.n	800296a <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	2b04      	cmp	r3, #4
 8002970:	d901      	bls.n	8002976 <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002972:	2304      	movs	r3, #4
 8002974:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002980:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	2200      	movs	r2, #0
 8002986:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	3304      	adds	r3, #4
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fba0 	bl	80020d2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	3318      	adds	r3, #24
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fb9b 	bl	80020d2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	f1c3 0205 	rsb	r2, r3, #5
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	3350      	adds	r3, #80	; 0x50
 80029b6:	2204      	movs	r2, #4
 80029b8:	2100      	movs	r1, #0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fbca 	bl	8006154 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	3354      	adds	r3, #84	; 0x54
 80029c4:	2201      	movs	r2, #1
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f003 fbc3 	bl	8006154 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	68f9      	ldr	r1, [r7, #12]
 80029d2:	69b8      	ldr	r0, [r7, #24]
 80029d4:	f001 fb4c 	bl	8004070 <pxPortInitialiseStack>
 80029d8:	4602      	mov	r2, r0
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029ea:	bf00      	nop
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029fc:	f001 fcda 	bl	80043b4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a00:	4b4f      	ldr	r3, [pc, #316]	; (8002b40 <prvAddNewTaskToReadyList+0x14c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a4e      	ldr	r2, [pc, #312]	; (8002b40 <prvAddNewTaskToReadyList+0x14c>)
 8002a08:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <prvAddNewTaskToReadyList+0x150>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002a12:	4a4c      	ldr	r2, [pc, #304]	; (8002b44 <prvAddNewTaskToReadyList+0x150>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a18:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <prvAddNewTaskToReadyList+0x14c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d110      	bne.n	8002a42 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a20:	f000 ff54 	bl	80038cc <prvInitialiseTaskLists>
 8002a24:	e00d      	b.n	8002a42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a26:	4b48      	ldr	r3, [pc, #288]	; (8002b48 <prvAddNewTaskToReadyList+0x154>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a2e:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <prvAddNewTaskToReadyList+0x150>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d802      	bhi.n	8002a42 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a3c:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <prvAddNewTaskToReadyList+0x150>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a42:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <prvAddNewTaskToReadyList+0x158>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <prvAddNewTaskToReadyList+0x158>)
 8002a4a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <prvAddNewTaskToReadyList+0x158>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <prvAddNewTaskToReadyList+0x94>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f003 f8cd 	bl	8005bfc <SEGGER_SYSVIEW_OnTaskCreate>
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	461d      	mov	r5, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461c      	mov	r4, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	1ae3      	subs	r3, r4, r3
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	462b      	mov	r3, r5
 8002a84:	f001 ff70 	bl	8004968 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 f93a 	bl	8005d04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a94:	2201      	movs	r2, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <prvAddNewTaskToReadyList+0x15c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	4a2c      	ldr	r2, [pc, #176]	; (8002b50 <prvAddNewTaskToReadyList+0x15c>)
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa6:	492b      	ldr	r1, [pc, #172]	; (8002b54 <prvAddNewTaskToReadyList+0x160>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	3204      	adds	r2, #4
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <prvAddNewTaskToReadyList+0x160>)
 8002ae6:	441a      	add	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	615a      	str	r2, [r3, #20]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af0:	4918      	ldr	r1, [pc, #96]	; (8002b54 <prvAddNewTaskToReadyList+0x160>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	4814      	ldr	r0, [pc, #80]	; (8002b54 <prvAddNewTaskToReadyList+0x160>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4403      	add	r3, r0
 8002b0c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b0e:	f001 fc7f 	bl	8004410 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <prvAddNewTaskToReadyList+0x154>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00e      	beq.n	8002b38 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <prvAddNewTaskToReadyList+0x150>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <prvAddNewTaskToReadyList+0x164>)
 8002b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b40:	2000010c 	.word	0x2000010c
 8002b44:	20000034 	.word	0x20000034
 8002b48:	20000118 	.word	0x20000118
 8002b4c:	20000128 	.word	0x20000128
 8002b50:	20000114 	.word	0x20000114
 8002b54:	20000038 	.word	0x20000038
 8002b58:	e000ed04 	.word	0xe000ed04

08002b5c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002b64:	f001 fc26 	bl	80043b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <uxTaskPriorityGet+0x18>
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <uxTaskPriorityGet+0x30>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	e000      	b.n	8002b76 <uxTaskPriorityGet+0x1a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002b7e:	f001 fc47 	bl	8004410 <vPortExitCritical>

        return uxReturn;
 8002b82:	68bb      	ldr	r3, [r7, #8]
    }
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000034 	.word	0x20000034

08002b90 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	; 0x28
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d909      	bls.n	8002bb8 <vTaskPrioritySet+0x28>
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	e7fe      	b.n	8002bb6 <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d901      	bls.n	8002bc2 <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002bc2:	f001 fbf7 	bl	80043b4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <vTaskPrioritySet+0x42>
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <vTaskPrioritySet+0x1c8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	e000      	b.n	8002bd4 <vTaskPrioritySet+0x44>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 f935 	bl	8005e48 <SEGGER_SYSVIEW_ShrinkId>
 8002bde:	4603      	mov	r3, r0
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	4619      	mov	r1, r3
 8002be4:	2028      	movs	r0, #40	; 0x28
 8002be6:	f002 fb6d 	bl	80052c4 <SEGGER_SYSVIEW_RecordU32x2>
 8002bea:	69b8      	ldr	r0, [r7, #24]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	f001 ff1a 	bl	8004a38 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	f000 809c 	beq.w	8002d4c <vTaskPrioritySet+0x1bc>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d90d      	bls.n	8002c38 <vTaskPrioritySet+0xa8>
                {
                    if( pxTCB != pxCurrentTCB )
 8002c1c:	4b4e      	ldr	r3, [pc, #312]	; (8002d58 <vTaskPrioritySet+0x1c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00f      	beq.n	8002c46 <vTaskPrioritySet+0xb6>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002c26:	4b4c      	ldr	r3, [pc, #304]	; (8002d58 <vTaskPrioritySet+0x1c8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d309      	bcc.n	8002c46 <vTaskPrioritySet+0xb6>
                        {
                            xYieldRequired = pdTRUE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e006      	b.n	8002c46 <vTaskPrioritySet+0xb6>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002c38:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <vTaskPrioritySet+0x1c8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d101      	bne.n	8002c46 <vTaskPrioritySet+0xb6>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d102      	bne.n	8002c5e <vTaskPrioritySet+0xce>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db04      	blt.n	8002c76 <vTaskPrioritySet+0xe6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f1c3 0205 	rsb	r2, r3, #5
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	6959      	ldr	r1, [r3, #20]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <vTaskPrioritySet+0x1cc>)
 8002c86:	4413      	add	r3, r2
 8002c88:	4299      	cmp	r1, r3
 8002c8a:	d154      	bne.n	8002d36 <vTaskPrioritySet+0x1a6>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa64 	bl	800215e <uxListRemove>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <vTaskPrioritySet+0x120>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <vTaskPrioritySet+0x1d0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4013      	ands	r3, r2
 8002cac:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <vTaskPrioritySet+0x1d0>)
 8002cae:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f003 f826 	bl	8005d04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <vTaskPrioritySet+0x1d0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <vTaskPrioritySet+0x1d0>)
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cce:	4923      	ldr	r1, [pc, #140]	; (8002d5c <vTaskPrioritySet+0x1cc>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3304      	adds	r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	3204      	adds	r2, #4
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <vTaskPrioritySet+0x1cc>)
 8002d0e:	441a      	add	r2, r3
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	4910      	ldr	r1, [pc, #64]	; (8002d5c <vTaskPrioritySet+0x1cc>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <vTaskPrioritySet+0x1cc>)
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4403      	add	r3, r0
 8002d34:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <vTaskPrioritySet+0x1bc>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <vTaskPrioritySet+0x1d4>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002d4c:	f001 fb60 	bl	8004410 <vPortExitCritical>
    }
 8002d50:	bf00      	nop
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000034 	.word	0x20000034
 8002d5c:	20000038 	.word	0x20000038
 8002d60:	20000114 	.word	0x20000114
 8002d64:	e000ed04 	.word	0xe000ed04

08002d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d6e:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <vTaskStartScheduler+0xa0>)
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2282      	movs	r2, #130	; 0x82
 8002d7a:	4924      	ldr	r1, [pc, #144]	; (8002e0c <vTaskStartScheduler+0xa4>)
 8002d7c:	4824      	ldr	r0, [pc, #144]	; (8002e10 <vTaskStartScheduler+0xa8>)
 8002d7e:	f7ff fd55 	bl	800282c <xTaskCreate>
 8002d82:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002d8a:	f000 fef1 	bl	8003b70 <xTimerCreateTimerTask>
 8002d8e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d123      	bne.n	8002dde <vTaskStartScheduler+0x76>
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <vTaskStartScheduler+0xac>)
 8002daa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dae:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <vTaskStartScheduler+0xb0>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <vTaskStartScheduler+0xb4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <vTaskStartScheduler+0xb8>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <vTaskStartScheduler+0xa0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d102      	bne.n	8002dce <vTaskStartScheduler+0x66>
 8002dc8:	f002 fefc 	bl	8005bc4 <SEGGER_SYSVIEW_OnIdle>
 8002dcc:	e004      	b.n	8002dd8 <vTaskStartScheduler+0x70>
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <vTaskStartScheduler+0xb8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 ff54 	bl	8005c80 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002dd8:	f001 f9d4 	bl	8004184 <xPortStartScheduler>
 8002ddc:	e00d      	b.n	8002dfa <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d109      	bne.n	8002dfa <vTaskStartScheduler+0x92>
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	e7fe      	b.n	8002df8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <vTaskStartScheduler+0xbc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000130 	.word	0x20000130
 8002e0c:	0800618c 	.word	0x0800618c
 8002e10:	0800389d 	.word	0x0800389d
 8002e14:	2000012c 	.word	0x2000012c
 8002e18:	20000118 	.word	0x20000118
 8002e1c:	20000110 	.word	0x20000110
 8002e20:	20000034 	.word	0x20000034
 8002e24:	2000000c 	.word	0x2000000c

08002e28 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <vTaskSuspendAll+0x18>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <vTaskSuspendAll+0x18>)
 8002e34:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	20000134 	.word	0x20000134

08002e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e52:	4b72      	ldr	r3, [pc, #456]	; (800301c <xTaskResumeAll+0x1d8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <xTaskResumeAll+0x2a>
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	e7fe      	b.n	8002e6c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e6e:	f001 faa1 	bl	80043b4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e72:	4b6a      	ldr	r3, [pc, #424]	; (800301c <xTaskResumeAll+0x1d8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a68      	ldr	r2, [pc, #416]	; (800301c <xTaskResumeAll+0x1d8>)
 8002e7a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7c:	4b67      	ldr	r3, [pc, #412]	; (800301c <xTaskResumeAll+0x1d8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 80c4 	bne.w	800300e <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e86:	4b66      	ldr	r3, [pc, #408]	; (8003020 <xTaskResumeAll+0x1dc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80bf 	beq.w	800300e <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e90:	e08e      	b.n	8002fb0 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e92:	4b64      	ldr	r3, [pc, #400]	; (8003024 <xTaskResumeAll+0x1e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	6a12      	ldr	r2, [r2, #32]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69d2      	ldr	r2, [r2, #28]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3318      	adds	r3, #24
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d103      	bne.n	8002ec8 <xTaskResumeAll+0x84>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	6892      	ldr	r2, [r2, #8]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d103      	bne.n	8002f06 <xTaskResumeAll+0xc2>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fef3 	bl	8005d04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	2201      	movs	r2, #1
 8002f24:	409a      	lsls	r2, r3
 8002f26:	4b40      	ldr	r3, [pc, #256]	; (8003028 <xTaskResumeAll+0x1e4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	4a3e      	ldr	r2, [pc, #248]	; (8003028 <xTaskResumeAll+0x1e4>)
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	493d      	ldr	r1, [pc, #244]	; (800302c <xTaskResumeAll+0x1e8>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3304      	adds	r3, #4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	3204      	adds	r2, #4
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	1d1a      	adds	r2, r3, #4
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4a2e      	ldr	r2, [pc, #184]	; (800302c <xTaskResumeAll+0x1e8>)
 8002f74:	441a      	add	r2, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	615a      	str	r2, [r3, #20]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	492b      	ldr	r1, [pc, #172]	; (800302c <xTaskResumeAll+0x1e8>)
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c59      	adds	r1, r3, #1
 8002f8e:	4827      	ldr	r0, [pc, #156]	; (800302c <xTaskResumeAll+0x1e8>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4403      	add	r3, r0
 8002f9a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	4b23      	ldr	r3, [pc, #140]	; (8003030 <xTaskResumeAll+0x1ec>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d302      	bcc.n	8002fb0 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <xTaskResumeAll+0x1f0>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb0:	4b1c      	ldr	r3, [pc, #112]	; (8003024 <xTaskResumeAll+0x1e0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af6c 	bne.w	8002e92 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fc0:	f000 fd00 	bl	80039c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <xTaskResumeAll+0x1f4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fd0:	f000 f918 	bl	8003204 <xTaskIncrementTick>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <xTaskResumeAll+0x1f0>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f1      	bne.n	8002fd0 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <xTaskResumeAll+0x1f4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <xTaskResumeAll+0x1f0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <xTaskResumeAll+0x1f8>)
 8003000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800300e:	f001 f9ff 	bl	8004410 <vPortExitCritical>

    return xAlreadyYielded;
 8003012:	69bb      	ldr	r3, [r7, #24]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3720      	adds	r7, #32
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000134 	.word	0x20000134
 8003020:	2000010c 	.word	0x2000010c
 8003024:	200000cc 	.word	0x200000cc
 8003028:	20000114 	.word	0x20000114
 800302c:	20000038 	.word	0x20000038
 8003030:	20000034 	.word	0x20000034
 8003034:	20000120 	.word	0x20000120
 8003038:	2000011c 	.word	0x2000011c
 800303c:	e000ed04 	.word	0xe000ed04

08003040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <xTaskGetTickCount+0x1c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000110 	.word	0x20000110

08003060 <prvSearchForNameWithinSingleList>:

#if ( INCLUDE_xTaskGetHandle == 1 )

    static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
                                                     const char pcNameToQuery[] )
    {
 8003060:	b480      	push	{r7}
 8003062:	b08b      	sub	sp, #44	; 0x2c
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
        TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
        char cNextChar;
        BaseType_t xBreakLoop;

        /* This function is called with the scheduler suspended. */

        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d05b      	beq.n	800312e <prvSearchForNameWithinSingleList+0xce>
        {
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	3308      	adds	r3, #8
 800308c:	429a      	cmp	r2, r3
 800308e:	d104      	bne.n	800309a <prvSearchForNameWithinSingleList+0x3a>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	617b      	str	r3, [r7, #20]

            do
            {
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	3308      	adds	r3, #8
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d104      	bne.n	80030c6 <prvSearchForNameWithinSingleList+0x66>
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60fb      	str	r3, [r7, #12]

                /* Check each character in the name looking for a match or
                 * mismatch. */
                xBreakLoop = pdFALSE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]

                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
 80030d6:	e01c      	b.n	8003112 <prvSearchForNameWithinSingleList+0xb2>
                {
                    cNextChar = pxNextTCB->pcTaskName[ x ];
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	4413      	add	r3, r2
 80030de:	3334      	adds	r3, #52	; 0x34
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	72fb      	strb	r3, [r7, #11]

                    if( cNextChar != pcNameToQuery[ x ] )
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	4413      	add	r3, r2
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	7afa      	ldrb	r2, [r7, #11]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d002      	beq.n	80030f8 <prvSearchForNameWithinSingleList+0x98>
                    {
                        /* Characters didn't match. */
                        xBreakLoop = pdTRUE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e006      	b.n	8003106 <prvSearchForNameWithinSingleList+0xa6>
                    }
                    else if( cNextChar == ( char ) 0x00 )
 80030f8:	7afb      	ldrb	r3, [r7, #11]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <prvSearchForNameWithinSingleList+0xa6>
                    {
                        /* Both strings terminated, a match must have been
                         * found. */
                        pxReturn = pxNextTCB;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
                        xBreakLoop = pdTRUE;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    if( xBreakLoop != pdFALSE )
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <prvSearchForNameWithinSingleList+0xba>
                for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	3301      	adds	r3, #1
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	2b09      	cmp	r3, #9
 8003116:	d9df      	bls.n	80030d8 <prvSearchForNameWithinSingleList+0x78>
 8003118:	e000      	b.n	800311c <prvSearchForNameWithinSingleList+0xbc>
                    {
                        break;
 800311a:	bf00      	nop
                    }
                }

                if( pxReturn != NULL )
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d104      	bne.n	800312c <prvSearchForNameWithinSingleList+0xcc>
                {
                    /* The handle has been found. */
                    break;
                }
            } while( pxNextTCB != pxFirstTCB );
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	429a      	cmp	r2, r3
 8003128:	d1bb      	bne.n	80030a2 <prvSearchForNameWithinSingleList+0x42>
 800312a:	e000      	b.n	800312e <prvSearchForNameWithinSingleList+0xce>
                    break;
 800312c:	bf00      	nop
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return pxReturn;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003130:	4618      	mov	r0, r3
 8003132:	372c      	adds	r7, #44	; 0x2c
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

    TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
        UBaseType_t uxQueue = configMAX_PRIORITIES;
 8003144:	2305      	movs	r3, #5
 8003146:	617b      	str	r3, [r7, #20]
        TCB_t * pxTCB;

        /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
        configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd f88b 	bl	8000264 <strlen>
 800314e:	4603      	mov	r3, r0
 8003150:	2b09      	cmp	r3, #9
 8003152:	d909      	bls.n	8003168 <xTaskGetHandle+0x2c>
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e7fe      	b.n	8003166 <xTaskGetHandle+0x2a>

        vTaskSuspendAll();
 8003168:	f7ff fe5e 	bl	8002e28 <vTaskSuspendAll>
        {
            /* Search the ready lists. */
            do
            {
                uxQueue--;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	3b01      	subs	r3, #1
 8003170:	617b      	str	r3, [r7, #20]
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <xTaskGetHandle+0xb4>)
 800317e:	4413      	add	r3, r2
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff6c 	bl	8003060 <prvSearchForNameWithinSingleList>
 8003188:	6138      	str	r0, [r7, #16]

                if( pxTCB != NULL )
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <xTaskGetHandle+0x5c>
                {
                    /* Found the handle. */
                    break;
                }
            } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ea      	bne.n	800316c <xTaskGetHandle+0x30>
 8003196:	e000      	b.n	800319a <xTaskGetHandle+0x5e>
                    break;
 8003198:	bf00      	nop

            /* Search the delayed lists. */
            if( pxTCB == NULL )
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <xTaskGetHandle+0x72>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <xTaskGetHandle+0xb8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ff5a 	bl	8003060 <prvSearchForNameWithinSingleList>
 80031ac:	6138      	str	r0, [r7, #16]
            }

            if( pxTCB == NULL )
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d106      	bne.n	80031c2 <xTaskGetHandle+0x86>
            {
                pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <xTaskGetHandle+0xbc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff50 	bl	8003060 <prvSearchForNameWithinSingleList>
 80031c0:	6138      	str	r0, [r7, #16]
            }

            #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    if( pxTCB == NULL )
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <xTaskGetHandle+0x96>
                    {
                        /* Search the suspended list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	480c      	ldr	r0, [pc, #48]	; (80031fc <xTaskGetHandle+0xc0>)
 80031cc:	f7ff ff48 	bl	8003060 <prvSearchForNameWithinSingleList>
 80031d0:	6138      	str	r0, [r7, #16]
                }
            #endif

            #if ( INCLUDE_vTaskDelete == 1 )
                {
                    if( pxTCB == NULL )
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <xTaskGetHandle+0xa6>
                    {
                        /* Search the deleted list. */
                        pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4809      	ldr	r0, [pc, #36]	; (8003200 <xTaskGetHandle+0xc4>)
 80031dc:	f7ff ff40 	bl	8003060 <prvSearchForNameWithinSingleList>
 80031e0:	6138      	str	r0, [r7, #16]
                    }
                }
            #endif
        }
        ( void ) xTaskResumeAll();
 80031e2:	f7ff fe2f 	bl	8002e44 <xTaskResumeAll>

        return pxTCB;
 80031e6:	693b      	ldr	r3, [r7, #16]
    }
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000038 	.word	0x20000038
 80031f4:	200000c4 	.word	0x200000c4
 80031f8:	200000c8 	.word	0x200000c8
 80031fc:	200000f8 	.word	0x200000f8
 8003200:	200000e0 	.word	0x200000e0

08003204 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800320e:	4b7f      	ldr	r3, [pc, #508]	; (800340c <xTaskIncrementTick+0x208>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 80ef 	bne.w	80033f6 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003218:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <xTaskIncrementTick+0x20c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003220:	4a7b      	ldr	r2, [pc, #492]	; (8003410 <xTaskIncrementTick+0x20c>)
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11f      	bne.n	800326c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800322c:	4b79      	ldr	r3, [pc, #484]	; (8003414 <xTaskIncrementTick+0x210>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <xTaskIncrementTick+0x46>
 8003236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	607b      	str	r3, [r7, #4]
 8003248:	e7fe      	b.n	8003248 <xTaskIncrementTick+0x44>
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <xTaskIncrementTick+0x210>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	4b71      	ldr	r3, [pc, #452]	; (8003418 <xTaskIncrementTick+0x214>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6f      	ldr	r2, [pc, #444]	; (8003414 <xTaskIncrementTick+0x210>)
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4a6f      	ldr	r2, [pc, #444]	; (8003418 <xTaskIncrementTick+0x214>)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b6f      	ldr	r3, [pc, #444]	; (800341c <xTaskIncrementTick+0x218>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	4a6d      	ldr	r2, [pc, #436]	; (800341c <xTaskIncrementTick+0x218>)
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	f000 fbac 	bl	80039c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800326c:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <xTaskIncrementTick+0x21c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a3a      	ldr	r2, [r7, #32]
 8003272:	429a      	cmp	r2, r3
 8003274:	f0c0 80aa 	bcc.w	80033cc <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <xTaskIncrementTick+0x210>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <xTaskIncrementTick+0x21c>)
 8003284:	f04f 32ff 	mov.w	r2, #4294967295
 8003288:	601a      	str	r2, [r3, #0]
                    break;
 800328a:	e09f      	b.n	80033cc <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328c:	4b61      	ldr	r3, [pc, #388]	; (8003414 <xTaskIncrementTick+0x210>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d203      	bcs.n	80032ac <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032a4:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <xTaskIncrementTick+0x21c>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80032aa:	e08f      	b.n	80033cc <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3304      	adds	r3, #4
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d103      	bne.n	80032da <xTaskIncrementTick+0xd6>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2200      	movs	r2, #0
 80032de:	615a      	str	r2, [r3, #20]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1e5a      	subs	r2, r3, #1
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d01e      	beq.n	8003330 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	6a12      	ldr	r2, [r2, #32]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	69d2      	ldr	r2, [r2, #28]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	3318      	adds	r3, #24
 8003314:	429a      	cmp	r2, r3
 8003316:	d103      	bne.n	8003320 <xTaskIncrementTick+0x11c>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2200      	movs	r2, #0
 8003324:	629a      	str	r2, [r3, #40]	; 0x28
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1e5a      	subs	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4618      	mov	r0, r3
 8003334:	f002 fce6 	bl	8005d04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	4b38      	ldr	r3, [pc, #224]	; (8003424 <xTaskIncrementTick+0x220>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	4a37      	ldr	r2, [pc, #220]	; (8003424 <xTaskIncrementTick+0x220>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	4936      	ldr	r1, [pc, #216]	; (8003428 <xTaskIncrementTick+0x224>)
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3304      	adds	r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60bb      	str	r3, [r7, #8]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	3204      	adds	r2, #4
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a26      	ldr	r2, [pc, #152]	; (8003428 <xTaskIncrementTick+0x224>)
 800338e:	441a      	add	r2, r3
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	615a      	str	r2, [r3, #20]
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4923      	ldr	r1, [pc, #140]	; (8003428 <xTaskIncrementTick+0x224>)
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c59      	adds	r1, r3, #1
 80033a8:	481f      	ldr	r0, [pc, #124]	; (8003428 <xTaskIncrementTick+0x224>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ba:	4b1c      	ldr	r3, [pc, #112]	; (800342c <xTaskIncrementTick+0x228>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	f4ff af59 	bcc.w	8003278 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ca:	e755      	b.n	8003278 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <xTaskIncrementTick+0x228>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d2:	4915      	ldr	r1, [pc, #84]	; (8003428 <xTaskIncrementTick+0x224>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d901      	bls.n	80033e8 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <xTaskIncrementTick+0x22c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e004      	b.n	8003400 <xTaskIncrementTick+0x1fc>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <xTaskIncrementTick+0x230>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <xTaskIncrementTick+0x230>)
 80033fe:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003402:	4618      	mov	r0, r3
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000134 	.word	0x20000134
 8003410:	20000110 	.word	0x20000110
 8003414:	200000c4 	.word	0x200000c4
 8003418:	200000c8 	.word	0x200000c8
 800341c:	20000124 	.word	0x20000124
 8003420:	2000012c 	.word	0x2000012c
 8003424:	20000114 	.word	0x20000114
 8003428:	20000038 	.word	0x20000038
 800342c:	20000034 	.word	0x20000034
 8003430:	20000120 	.word	0x20000120
 8003434:	2000011c 	.word	0x2000011c

08003438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <vTaskSwitchContext+0xb8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <vTaskSwitchContext+0xbc>)
 8003448:	2201      	movs	r2, #1
 800344a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800344c:	e04c      	b.n	80034e8 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <vTaskSwitchContext+0xbc>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003454:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <vTaskSwitchContext+0xc0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	f1c3 031f 	rsb	r3, r3, #31
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	4924      	ldr	r1, [pc, #144]	; (80034fc <vTaskSwitchContext+0xc4>)
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <vTaskSwitchContext+0x5a>
        __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e7fe      	b.n	8003490 <vTaskSwitchContext+0x58>
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <vTaskSwitchContext+0xc4>)
 800349e:	4413      	add	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	3308      	adds	r3, #8
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d104      	bne.n	80034c2 <vTaskSwitchContext+0x8a>
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a0d      	ldr	r2, [pc, #52]	; (8003500 <vTaskSwitchContext+0xc8>)
 80034ca:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <vTaskSwitchContext+0xc8>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <vTaskSwitchContext+0xcc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d102      	bne.n	80034de <vTaskSwitchContext+0xa6>
 80034d8:	f002 fb74 	bl	8005bc4 <SEGGER_SYSVIEW_OnIdle>
}
 80034dc:	e004      	b.n	80034e8 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <vTaskSwitchContext+0xc8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 fbcc 	bl	8005c80 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000134 	.word	0x20000134
 80034f4:	20000120 	.word	0x20000120
 80034f8:	20000114 	.word	0x20000114
 80034fc:	20000038 	.word	0x20000038
 8003500:	20000034 	.word	0x20000034
 8003504:	20000130 	.word	0x20000130

08003508 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <vTaskPlaceOnEventList+0x24>
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e7fe      	b.n	800352a <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <vTaskPlaceOnEventList+0x44>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3318      	adds	r3, #24
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7fe fdd9 	bl	80020ec <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800353a:	2101      	movs	r1, #1
 800353c:	6838      	ldr	r0, [r7, #0]
 800353e:	f000 fa8b 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000034 	.word	0x20000034

08003550 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <vTaskPlaceOnEventListRestricted+0x26>
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e7fe      	b.n	8003574 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	61da      	str	r2, [r3, #28]
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6892      	ldr	r2, [r2, #8]
 800358c:	621a      	str	r2, [r3, #32]
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <vTaskPlaceOnEventListRestricted+0x8c>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	3218      	adds	r2, #24
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <vTaskPlaceOnEventListRestricted+0x8c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f103 0218 	add.w	r2, r3, #24
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <vTaskPlaceOnEventListRestricted+0x8c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035c4:	2024      	movs	r0, #36	; 0x24
 80035c6:	f001 fe23 	bl	8005210 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	68b8      	ldr	r0, [r7, #8]
 80035ce:	f000 fa43 	bl	8003a58 <prvAddCurrentTaskToDelayedList>
    }
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000034 	.word	0x20000034

080035e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <xTaskRemoveFromEventList+0x2a>
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e7fe      	b.n	8003608 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	6a12      	ldr	r2, [r2, #32]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	69d2      	ldr	r2, [r2, #28]
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	3318      	adds	r3, #24
 800362c:	429a      	cmp	r2, r3
 800362e:	d103      	bne.n	8003638 <xTaskRemoveFromEventList+0x58>
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	6a1a      	ldr	r2, [r3, #32]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2200      	movs	r2, #0
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1e5a      	subs	r2, r3, #1
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <xTaskRemoveFromEventList+0x198>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d162      	bne.n	8003716 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	68d2      	ldr	r2, [r2, #12]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	6892      	ldr	r2, [r2, #8]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	3304      	adds	r3, #4
 8003672:	429a      	cmp	r2, r3
 8003674:	d103      	bne.n	800367e <xTaskRemoveFromEventList+0x9e>
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2200      	movs	r2, #0
 8003682:	615a      	str	r2, [r3, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	4618      	mov	r0, r3
 8003692:	f002 fb37 	bl	8005d04 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	2201      	movs	r2, #1
 800369c:	409a      	lsls	r2, r3
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <xTaskRemoveFromEventList+0x19c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	4a35      	ldr	r2, [pc, #212]	; (800377c <xTaskRemoveFromEventList+0x19c>)
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4934      	ldr	r1, [pc, #208]	; (8003780 <xTaskRemoveFromEventList+0x1a0>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3304      	adds	r3, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	3204      	adds	r2, #4
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a25      	ldr	r2, [pc, #148]	; (8003780 <xTaskRemoveFromEventList+0x1a0>)
 80036ec:	441a      	add	r2, r3
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	615a      	str	r2, [r3, #20]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	4922      	ldr	r1, [pc, #136]	; (8003780 <xTaskRemoveFromEventList+0x1a0>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	481e      	ldr	r0, [pc, #120]	; (8003780 <xTaskRemoveFromEventList+0x1a0>)
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4403      	add	r3, r0
 8003712:	6019      	str	r1, [r3, #0]
 8003714:	e01b      	b.n	800374e <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <xTaskRemoveFromEventList+0x1a4>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	61da      	str	r2, [r3, #28]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	621a      	str	r2, [r3, #32]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	3218      	adds	r2, #24
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f103 0218 	add.w	r2, r3, #24
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	4a10      	ldr	r2, [pc, #64]	; (8003784 <xTaskRemoveFromEventList+0x1a4>)
 8003742:	629a      	str	r2, [r3, #40]	; 0x28
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <xTaskRemoveFromEventList+0x1a4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a0e      	ldr	r2, [pc, #56]	; (8003784 <xTaskRemoveFromEventList+0x1a4>)
 800374c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <xTaskRemoveFromEventList+0x1a8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	429a      	cmp	r2, r3
 800375a:	d905      	bls.n	8003768 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <xTaskRemoveFromEventList+0x1ac>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e001      	b.n	800376c <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800376e:	4618      	mov	r0, r3
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000134 	.word	0x20000134
 800377c:	20000114 	.word	0x20000114
 8003780:	20000038 	.word	0x20000038
 8003784:	200000cc 	.word	0x200000cc
 8003788:	20000034 	.word	0x20000034
 800378c:	20000120 	.word	0x20000120

08003790 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <vTaskInternalSetTimeOutState+0x24>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <vTaskInternalSetTimeOutState+0x28>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	20000124 	.word	0x20000124
 80037b8:	20000110 	.word	0x20000110

080037bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <xTaskCheckForTimeOut+0x24>
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e7fe      	b.n	80037de <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <xTaskCheckForTimeOut+0x3e>
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e7fe      	b.n	80037f8 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80037fa:	f000 fddb 	bl	80043b4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037fe:	4b1f      	ldr	r3, [pc, #124]	; (800387c <xTaskCheckForTimeOut+0xc0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d102      	bne.n	800381e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e026      	b.n	800386c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <xTaskCheckForTimeOut+0xc4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d00a      	beq.n	8003840 <xTaskCheckForTimeOut+0x84>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	429a      	cmp	r2, r3
 8003832:	d305      	bcc.n	8003840 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003834:	2301      	movs	r3, #1
 8003836:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e015      	b.n	800386c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	429a      	cmp	r2, r3
 8003848:	d20b      	bcs.n	8003862 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ff9a 	bl	8003790 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800385c:	2300      	movs	r3, #0
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e004      	b.n	800386c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800386c:	f000 fdd0 	bl	8004410 <vPortExitCritical>

    return xReturn;
 8003870:	69fb      	ldr	r3, [r7, #28]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000110 	.word	0x20000110
 8003880:	20000124 	.word	0x20000124

08003884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <vTaskMissedYield+0x14>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000120 	.word	0x20000120

0800389c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038a4:	f000 f852 	bl	800394c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <prvIdleTask+0x28>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d9f9      	bls.n	80038a4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <prvIdleTask+0x2c>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038c0:	e7f0      	b.n	80038a4 <prvIdleTask+0x8>
 80038c2:	bf00      	nop
 80038c4:	20000038 	.word	0x20000038
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038d2:	2300      	movs	r3, #0
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	e00c      	b.n	80038f2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <prvInitialiseTaskLists+0x60>)
 80038e4:	4413      	add	r3, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe fbd3 	bl	8002092 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3301      	adds	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d9ef      	bls.n	80038d8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038f8:	480d      	ldr	r0, [pc, #52]	; (8003930 <prvInitialiseTaskLists+0x64>)
 80038fa:	f7fe fbca 	bl	8002092 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038fe:	480d      	ldr	r0, [pc, #52]	; (8003934 <prvInitialiseTaskLists+0x68>)
 8003900:	f7fe fbc7 	bl	8002092 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003904:	480c      	ldr	r0, [pc, #48]	; (8003938 <prvInitialiseTaskLists+0x6c>)
 8003906:	f7fe fbc4 	bl	8002092 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800390a:	480c      	ldr	r0, [pc, #48]	; (800393c <prvInitialiseTaskLists+0x70>)
 800390c:	f7fe fbc1 	bl	8002092 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003910:	480b      	ldr	r0, [pc, #44]	; (8003940 <prvInitialiseTaskLists+0x74>)
 8003912:	f7fe fbbe 	bl	8002092 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <prvInitialiseTaskLists+0x78>)
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <prvInitialiseTaskLists+0x64>)
 800391a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <prvInitialiseTaskLists+0x7c>)
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <prvInitialiseTaskLists+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000038 	.word	0x20000038
 8003930:	2000009c 	.word	0x2000009c
 8003934:	200000b0 	.word	0x200000b0
 8003938:	200000cc 	.word	0x200000cc
 800393c:	200000e0 	.word	0x200000e0
 8003940:	200000f8 	.word	0x200000f8
 8003944:	200000c4 	.word	0x200000c4
 8003948:	200000c8 	.word	0x200000c8

0800394c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003952:	e019      	b.n	8003988 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003954:	f000 fd2e 	bl	80043b4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <prvCheckTasksWaitingTermination+0x4c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fbfa 	bl	800215e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <prvCheckTasksWaitingTermination+0x50>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <prvCheckTasksWaitingTermination+0x50>)
 8003972:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvCheckTasksWaitingTermination+0x54>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3b01      	subs	r3, #1
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <prvCheckTasksWaitingTermination+0x54>)
 800397c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800397e:	f000 fd47 	bl	8004410 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f80e 	bl	80039a4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <prvCheckTasksWaitingTermination+0x54>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e1      	bne.n	8003954 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200000e0 	.word	0x200000e0
 800399c:	2000010c 	.word	0x2000010c
 80039a0:	200000f4 	.word	0x200000f4

080039a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 febd 	bl	8004730 <vPortFree>
                vPortFree( pxTCB );
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 feba 	bl	8004730 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c8:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <prvResetNextTaskUnblockTime+0x30>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d104      	bne.n	80039dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <prvResetNextTaskUnblockTime+0x34>)
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039da:	e005      	b.n	80039e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <prvResetNextTaskUnblockTime+0x30>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <prvResetNextTaskUnblockTime+0x34>)
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200000c4 	.word	0x200000c4
 80039f8:	2000012c 	.word	0x2000012c

080039fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <xTaskGetCurrentTaskHandle+0x1c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	607b      	str	r3, [r7, #4]

        return xReturn;
 8003a08:	687b      	ldr	r3, [r7, #4]
    }
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000034 	.word	0x20000034

08003a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <xTaskGetSchedulerState+0x34>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e008      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <xTaskGetSchedulerState+0x38>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e001      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a42:	687b      	ldr	r3, [r7, #4]
    }
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000118 	.word	0x20000118
 8003a54:	20000134 	.word	0x20000134

08003a58 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a62:	4b3c      	ldr	r3, [pc, #240]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a68:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fb75 	bl	800215e <uxListRemove>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	2201      	movs	r2, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43da      	mvns	r2, r3
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x104>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <prvAddCurrentTaskToDelayedList+0x104>)
 8003a90:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d124      	bne.n	8003ae4 <prvAddCurrentTaskToDelayedList+0x8c>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d021      	beq.n	8003ae4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa0:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <prvAddCurrentTaskToDelayedList+0x108>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	60da      	str	r2, [r3, #12]
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	3204      	adds	r2, #4
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ad4:	615a      	str	r2, [r3, #20]
 8003ad6:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <prvAddCurrentTaskToDelayedList+0x108>)
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ae2:	e032      	b.n	8003b4a <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d20f      	bcs.n	8003b1c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2104      	movs	r1, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 f940 	bl	8005d88 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b08:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3304      	adds	r3, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe fae9 	bl	80020ec <vListInsert>
}
 8003b1a:	e016      	b.n	8003b4a <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2104      	movs	r1, #4
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 f930 	bl	8005d88 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <prvAddCurrentTaskToDelayedList+0x110>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvAddCurrentTaskToDelayedList+0x100>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f7fe fad9 	bl	80020ec <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x114>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d202      	bcs.n	8003b4a <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b44:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <prvAddCurrentTaskToDelayedList+0x114>)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6013      	str	r3, [r2, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000110 	.word	0x20000110
 8003b58:	20000034 	.word	0x20000034
 8003b5c:	20000114 	.word	0x20000114
 8003b60:	200000f8 	.word	0x200000f8
 8003b64:	200000c8 	.word	0x200000c8
 8003b68:	200000c4 	.word	0x200000c4
 8003b6c:	2000012c 	.word	0x2000012c

08003b70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b7a:	f000 fa43 	bl	8004004 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <xTimerCreateTimerTask+0x54>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <xTimerCreateTimerTask+0x58>)
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b94:	490d      	ldr	r1, [pc, #52]	; (8003bcc <xTimerCreateTimerTask+0x5c>)
 8003b96:	480e      	ldr	r0, [pc, #56]	; (8003bd0 <xTimerCreateTimerTask+0x60>)
 8003b98:	f7fe fe48 	bl	800282c <xTaskCreate>
 8003b9c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <xTimerCreateTimerTask+0x48>
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	e7fe      	b.n	8003bb6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003bb8:	687b      	ldr	r3, [r7, #4]
    }
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000168 	.word	0x20000168
 8003bc8:	2000016c 	.word	0x2000016c
 8003bcc:	08006194 	.word	0x08006194
 8003bd0:	08003c75 	.word	0x08003c75

08003bd4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003be0:	e008      	b.n	8003bf4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4413      	add	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	18d1      	adds	r1, r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f8db 	bl	8003dbc <prvInsertTimerInActiveList>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ea      	bne.n	8003be2 <prvReloadTimer+0xe>
        }
    }
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <prvProcessExpiredTimer+0x5c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe fa96 	bl	800215e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ffc5 	bl	8003bd4 <prvReloadTimer>
 8003c4a:	e008      	b.n	8003c5e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	4798      	blx	r3
    }
 8003c66:	bf00      	nop
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000160 	.word	0x20000160

08003c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f857 	bl	8003d34 <prvGetNextExpireTime>
 8003c86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f803 	bl	8003c98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c92:	f000 f8d5 	bl	8003e40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c96:	e7f1      	b.n	8003c7c <prvTimerTask+0x8>

08003c98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ca2:	f7ff f8c1 	bl	8002e28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ca6:	f107 0308 	add.w	r3, r7, #8
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f866 	bl	8003d7c <prvSampleTimeNow>
 8003cb0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d130      	bne.n	8003d1a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <prvProcessTimerOrBlockTask+0x3c>
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d806      	bhi.n	8003cd4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003cc6:	f7ff f8bd 	bl	8002e44 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ffa1 	bl	8003c14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003cd2:	e024      	b.n	8003d1e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d008      	beq.n	8003cec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cda:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <prvProcessTimerOrBlockTask+0x90>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <prvProcessTimerOrBlockTask+0x50>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <prvProcessTimerOrBlockTask+0x52>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <prvProcessTimerOrBlockTask+0x94>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fe fd63 	bl	80027c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003cfe:	f7ff f8a1 	bl	8002e44 <xTaskResumeAll>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <prvProcessTimerOrBlockTask+0x98>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
    }
 8003d18:	e001      	b.n	8003d1e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d1a:	f7ff f893 	bl	8002e44 <xTaskResumeAll>
    }
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000164 	.word	0x20000164
 8003d2c:	20000168 	.word	0x20000168
 8003d30:	e000ed04 	.word	0xe000ed04

08003d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <prvGetNextExpireTime+0x44>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <prvGetNextExpireTime+0x16>
 8003d46:	2201      	movs	r2, #1
 8003d48:	e000      	b.n	8003d4c <prvGetNextExpireTime+0x18>
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <prvGetNextExpireTime+0x44>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e001      	b.n	8003d68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d68:	68fb      	ldr	r3, [r7, #12]
    }
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000160 	.word	0x20000160

08003d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d84:	f7ff f95c 	bl	8003040 <xTaskGetTickCount>
 8003d88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <prvSampleTimeNow+0x3c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d205      	bcs.n	8003da0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d94:	f000 f910 	bl	8003fb8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e002      	b.n	8003da6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003da6:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <prvSampleTimeNow+0x3c>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003dac:	68fb      	ldr	r3, [r7, #12]
    }
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000170 	.word	0x20000170

08003dbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d812      	bhi.n	8003e08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	1ad2      	subs	r2, r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d302      	bcc.n	8003df6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	e01b      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <prvInsertTimerInActiveList+0x7c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7fe f973 	bl	80020ec <vListInsert>
 8003e06:	e012      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d206      	bcs.n	8003e1e <prvInsertTimerInActiveList+0x62>
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e007      	b.n	8003e2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <prvInsertTimerInActiveList+0x80>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7fe f95f 	bl	80020ec <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e2e:	697b      	ldr	r3, [r7, #20]
    }
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000164 	.word	0x20000164
 8003e3c:	20000160 	.word	0x20000160

08003e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e46:	e0a5      	b.n	8003f94 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f2c0 80a1 	blt.w	8003f92 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe f97c 	bl	800215e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff87 	bl	8003d7c <prvSampleTimeNow>
 8003e6e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	f200 808d 	bhi.w	8003f94 <prvProcessReceivedCommands+0x154>
 8003e7a:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <prvProcessReceivedCommands+0x40>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ea5 	.word	0x08003ea5
 8003e88:	08003f0d 	.word	0x08003f0d
 8003e8c:	08003f21 	.word	0x08003f21
 8003e90:	08003f69 	.word	0x08003f69
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003ea5 	.word	0x08003ea5
 8003e9c:	08003f0d 	.word	0x08003f0d
 8003ea0:	08003f21 	.word	0x08003f21
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	18d1      	adds	r1, r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	69f8      	ldr	r0, [r7, #28]
 8003ec4:	f7ff ff7a 	bl	8003dbc <prvInsertTimerInActiveList>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d062      	beq.n	8003f94 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	69f8      	ldr	r0, [r7, #28]
 8003eea:	f7ff fe73 	bl	8003bd4 <prvReloadTimer>
 8003eee:	e008      	b.n	8003f02 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	69f8      	ldr	r0, [r7, #28]
 8003f08:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f0a:	e043      	b.n	8003f94 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003f1e:	e039      	b.n	8003f94 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <prvProcessReceivedCommands+0x114>
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e7fe      	b.n	8003f52 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	18d1      	adds	r1, r2, r3
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	69f8      	ldr	r0, [r7, #28]
 8003f62:	f7ff ff2b 	bl	8003dbc <prvInsertTimerInActiveList>
                        break;
 8003f66:	e015      	b.n	8003f94 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8003f76:	69f8      	ldr	r0, [r7, #28]
 8003f78:	f000 fbda 	bl	8004730 <vPortFree>
 8003f7c:	e00a      	b.n	8003f94 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f90:	e000      	b.n	8003f94 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f92:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <prvProcessReceivedCommands+0x174>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f107 0108 	add.w	r1, r7, #8
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fe fa18 	bl	80023d4 <xQueueReceive>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f47f af4e 	bne.w	8003e48 <prvProcessReceivedCommands+0x8>
        }
    }
 8003fac:	bf00      	nop
 8003fae:	3720      	adds	r7, #32
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000168 	.word	0x20000168

08003fb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fbe:	e009      	b.n	8003fd4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <prvSwitchTimerLists+0x44>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fca:	f04f 31ff 	mov.w	r1, #4294967295
 8003fce:	6838      	ldr	r0, [r7, #0]
 8003fd0:	f7ff fe20 	bl	8003c14 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <prvSwitchTimerLists+0x44>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <prvSwitchTimerLists+0x44>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <prvSwitchTimerLists+0x48>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <prvSwitchTimerLists+0x44>)
 8003fea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <prvSwitchTimerLists+0x48>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6013      	str	r3, [r2, #0]
    }
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000160 	.word	0x20000160
 8004000:	20000164 	.word	0x20000164

08004004 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004008:	f000 f9d4 	bl	80043b4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <prvCheckForValidListAndQueue+0x54>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11d      	bne.n	8004050 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004014:	4811      	ldr	r0, [pc, #68]	; (800405c <prvCheckForValidListAndQueue+0x58>)
 8004016:	f7fe f83c 	bl	8002092 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800401a:	4811      	ldr	r0, [pc, #68]	; (8004060 <prvCheckForValidListAndQueue+0x5c>)
 800401c:	f7fe f839 	bl	8002092 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004020:	4b10      	ldr	r3, [pc, #64]	; (8004064 <prvCheckForValidListAndQueue+0x60>)
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <prvCheckForValidListAndQueue+0x58>)
 8004024:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004026:	4b10      	ldr	r3, [pc, #64]	; (8004068 <prvCheckForValidListAndQueue+0x64>)
 8004028:	4a0d      	ldr	r2, [pc, #52]	; (8004060 <prvCheckForValidListAndQueue+0x5c>)
 800402a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800402c:	2200      	movs	r2, #0
 800402e:	210c      	movs	r1, #12
 8004030:	200a      	movs	r0, #10
 8004032:	f7fe f953 	bl	80022dc <xQueueGenericCreate>
 8004036:	4602      	mov	r2, r0
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <prvCheckForValidListAndQueue+0x54>)
 800403a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <prvCheckForValidListAndQueue+0x54>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <prvCheckForValidListAndQueue+0x54>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4908      	ldr	r1, [pc, #32]	; (800406c <prvCheckForValidListAndQueue+0x68>)
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fb64 	bl	8002718 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004050:	f000 f9de 	bl	8004410 <vPortExitCritical>
    }
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000168 	.word	0x20000168
 800405c:	20000138 	.word	0x20000138
 8004060:	2000014c 	.word	0x2000014c
 8004064:	20000160 	.word	0x20000160
 8004068:	20000164 	.word	0x20000164
 800406c:	0800619c 	.word	0x0800619c

08004070 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3b04      	subs	r3, #4
 8004080:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004088:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b04      	subs	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0201 	bic.w	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	3b04      	subs	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <pxPortInitialiseStack+0x64>)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	3b14      	subs	r3, #20
 80040aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3b04      	subs	r3, #4
 80040b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f06f 0202 	mvn.w	r2, #2
 80040be:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b20      	subs	r3, #32
 80040c4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040c6:	68fb      	ldr	r3, [r7, #12]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	080040d9 	.word	0x080040d9

080040d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <prvTaskExitError+0x50>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d009      	beq.n	8004100 <prvTaskExitError+0x28>
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	e7fe      	b.n	80040fe <prvTaskExitError+0x26>
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004112:	bf00      	nop
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0fc      	beq.n	8004114 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000010 	.word	0x20000010
 800412c:	00000000 	.word	0x00000000

08004130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <pxCurrentTCBConst2>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	f380 8809 	msr	PSP, r0
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8811 	msr	BASEPRI, r0
 800414a:	4770      	bx	lr
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst2>:
 8004150:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <prvPortStartFirstTask+0x24>)
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	6800      	ldr	r0, [r0, #0]
 800415e:	f380 8808 	msr	MSP, r0
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8814 	msr	CONTROL, r0
 800416a:	b662      	cpsie	i
 800416c:	b661      	cpsie	f
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	df00      	svc	0
 8004178:	bf00      	nop
 800417a:	0000      	.short	0x0000
 800417c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop

08004184 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800418a:	4b44      	ldr	r3, [pc, #272]	; (800429c <xPortStartScheduler+0x118>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a44      	ldr	r2, [pc, #272]	; (80042a0 <xPortStartScheduler+0x11c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d109      	bne.n	80041a8 <xPortStartScheduler+0x24>
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	e7fe      	b.n	80041a6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041a8:	4b3c      	ldr	r3, [pc, #240]	; (800429c <xPortStartScheduler+0x118>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3d      	ldr	r2, [pc, #244]	; (80042a4 <xPortStartScheduler+0x120>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d109      	bne.n	80041c6 <xPortStartScheduler+0x42>
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e7fe      	b.n	80041c4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <xPortStartScheduler+0x124>)
 80041c8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b30      	ldr	r3, [pc, #192]	; (80042ac <xPortStartScheduler+0x128>)
 80041ec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ee:	4b30      	ldr	r3, [pc, #192]	; (80042b0 <xPortStartScheduler+0x12c>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041f4:	e009      	b.n	800420a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80041f6:	4b2e      	ldr	r3, [pc, #184]	; (80042b0 <xPortStartScheduler+0x12c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a2c      	ldr	r2, [pc, #176]	; (80042b0 <xPortStartScheduler+0x12c>)
 80041fe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	b2db      	uxtb	r3, r3
 8004208:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d0ef      	beq.n	80041f6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <xPortStartScheduler+0x12c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f1c3 0307 	rsb	r3, r3, #7
 800421e:	2b04      	cmp	r3, #4
 8004220:	d009      	beq.n	8004236 <xPortStartScheduler+0xb2>
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	e7fe      	b.n	8004234 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <xPortStartScheduler+0x12c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <xPortStartScheduler+0x12c>)
 800423e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <xPortStartScheduler+0x12c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004248:	4a19      	ldr	r2, [pc, #100]	; (80042b0 <xPortStartScheduler+0x12c>)
 800424a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004254:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <xPortStartScheduler+0x130>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a16      	ldr	r2, [pc, #88]	; (80042b4 <xPortStartScheduler+0x130>)
 800425a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800425e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004260:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <xPortStartScheduler+0x130>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a13      	ldr	r2, [pc, #76]	; (80042b4 <xPortStartScheduler+0x130>)
 8004266:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800426a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800426c:	f000 f954 	bl	8004518 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004270:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <xPortStartScheduler+0x134>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004276:	f000 f973 	bl	8004560 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <xPortStartScheduler+0x138>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <xPortStartScheduler+0x138>)
 8004280:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004284:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004286:	f7ff ff67 	bl	8004158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800428a:	f7ff f8d5 	bl	8003438 <vTaskSwitchContext>
    prvTaskExitError();
 800428e:	f7ff ff23 	bl	80040d8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	e000ed00 	.word	0xe000ed00
 80042a0:	410fc271 	.word	0x410fc271
 80042a4:	410fc270 	.word	0x410fc270
 80042a8:	e000e400 	.word	0xe000e400
 80042ac:	20000174 	.word	0x20000174
 80042b0:	20000178 	.word	0x20000178
 80042b4:	e000ed20 	.word	0xe000ed20
 80042b8:	20000010 	.word	0x20000010
 80042bc:	e000ef34 	.word	0xe000ef34

080042c0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042c6:	4b35      	ldr	r3, [pc, #212]	; (800439c <vInitPrioGroupValue+0xdc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <vInitPrioGroupValue+0xe0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d109      	bne.n	80042e4 <vInitPrioGroupValue+0x24>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	e7fe      	b.n	80042e2 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <vInitPrioGroupValue+0xdc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <vInitPrioGroupValue+0xe4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d109      	bne.n	8004302 <vInitPrioGroupValue+0x42>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e7fe      	b.n	8004300 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <vInitPrioGroupValue+0xe8>)
 8004304:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <vInitPrioGroupValue+0xec>)
 8004328:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800432a:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 800432c:	2207      	movs	r2, #7
 800432e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004330:	e009      	b.n	8004346 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8004332:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3b01      	subs	r3, #1
 8004338:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 800433a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b80      	cmp	r3, #128	; 0x80
 8004350:	d0ef      	beq.n	8004332 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004352:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1c3 0307 	rsb	r3, r3, #7
 800435a:	2b04      	cmp	r3, #4
 800435c:	d009      	beq.n	8004372 <vInitPrioGroupValue+0xb2>
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	e7fe      	b.n	8004370 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 800437a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800437c:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004384:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <vInitPrioGroupValue+0xf0>)
 8004386:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004390:	bf00      	nop
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000ed00 	.word	0xe000ed00
 80043a0:	410fc271 	.word	0x410fc271
 80043a4:	410fc270 	.word	0x410fc270
 80043a8:	e000e400 	.word	0xe000e400
 80043ac:	20000174 	.word	0x20000174
 80043b0:	20000178 	.word	0x20000178

080043b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <vPortEnterCritical+0x54>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <vPortEnterCritical+0x54>)
 80043d4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <vPortEnterCritical+0x54>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10e      	bne.n	80043fc <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <vPortEnterCritical+0x58>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d009      	beq.n	80043fc <vPortEnterCritical+0x48>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	e7fe      	b.n	80043fa <vPortEnterCritical+0x46>
    }
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	20000010 	.word	0x20000010
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <vPortExitCritical+0x4c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <vPortExitCritical+0x22>
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	e7fe      	b.n	8004430 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <vPortExitCritical+0x4c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3b01      	subs	r3, #1
 8004438:	4a08      	ldr	r2, [pc, #32]	; (800445c <vPortExitCritical+0x4c>)
 800443a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <vPortExitCritical+0x4c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <vPortExitCritical+0x3e>
 8004444:	2300      	movs	r3, #0
 8004446:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000010 	.word	0x20000010

08004460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004460:	f3ef 8009 	mrs	r0, PSP
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <pxCurrentTCBConst>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	f01e 0f10 	tst.w	lr, #16
 8004470:	bf08      	it	eq
 8004472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	6010      	str	r0, [r2, #0]
 800447c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004484:	f380 8811 	msr	BASEPRI, r0
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f7fe ffd2 	bl	8003438 <vTaskSwitchContext>
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f380 8811 	msr	BASEPRI, r0
 800449c:	bc09      	pop	{r0, r3}
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	6808      	ldr	r0, [r1, #0]
 80044a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044a6:	f01e 0f10 	tst.w	lr, #16
 80044aa:	bf08      	it	eq
 80044ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044b0:	f380 8809 	msr	PSP, r0
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst>:
 80044c0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop

080044c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
        __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80044e0:	f001 faf6 	bl	8005ad0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044e4:	f7fe fe8e 	bl	8003204 <xTaskIncrementTick>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80044ee:	f001 fb4d 	bl	8005b8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <SysTick_Handler+0x4c>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	e001      	b.n	8004500 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80044fc:	f001 fb2a 	bl	8005b54 <SEGGER_SYSVIEW_RecordExitISR>
 8004500:	2300      	movs	r3, #0
 8004502:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <vPortSetupTimerInterrupt+0x34>)
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <vPortSetupTimerInterrupt+0x38>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <vPortSetupTimerInterrupt+0x3c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <vPortSetupTimerInterrupt+0x40>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	4a09      	ldr	r2, [pc, #36]	; (800455c <vPortSetupTimerInterrupt+0x44>)
 8004536:	3b01      	subs	r3, #1
 8004538:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453a:	4b04      	ldr	r3, [pc, #16]	; (800454c <vPortSetupTimerInterrupt+0x34>)
 800453c:	2207      	movs	r2, #7
 800453e:	601a      	str	r2, [r3, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	e000e010 	.word	0xe000e010
 8004550:	e000e018 	.word	0xe000e018
 8004554:	20000008 	.word	0x20000008
 8004558:	10624dd3 	.word	0x10624dd3
 800455c:	e000e014 	.word	0xe000e014

08004560 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004560:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004570 <vPortEnableVFP+0x10>
 8004564:	6801      	ldr	r1, [r0, #0]
 8004566:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800456a:	6001      	str	r1, [r0, #0]
 800456c:	4770      	bx	lr
 800456e:	0000      	.short	0x0000
 8004570:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004584:	f7fe fc50 	bl	8002e28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004588:	4b63      	ldr	r3, [pc, #396]	; (8004718 <pvPortMalloc+0x1a0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004590:	f000 f92e 	bl	80047f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004594:	4b61      	ldr	r3, [pc, #388]	; (800471c <pvPortMalloc+0x1a4>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4013      	ands	r3, r2
 800459c:	2b00      	cmp	r3, #0
 800459e:	f040 80a5 	bne.w	80046ec <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02c      	beq.n	8004602 <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045a8:	2208      	movs	r2, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d226      	bcs.n	8004602 <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80045b4:	2208      	movs	r2, #8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	3308      	adds	r3, #8
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d213      	bcs.n	80045fc <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	3308      	adds	r3, #8
 80045dc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00f      	beq.n	8004608 <pvPortMalloc+0x90>
        __asm volatile
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e7fe      	b.n	80045fa <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004600:	e002      	b.n	8004608 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	e000      	b.n	800460a <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004608:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d06d      	beq.n	80046ec <pvPortMalloc+0x174>
 8004610:	4b43      	ldr	r3, [pc, #268]	; (8004720 <pvPortMalloc+0x1a8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d868      	bhi.n	80046ec <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800461a:	4b42      	ldr	r3, [pc, #264]	; (8004724 <pvPortMalloc+0x1ac>)
 800461c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <pvPortMalloc+0x1ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004624:	e004      	b.n	8004630 <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d903      	bls.n	8004642 <pvPortMalloc+0xca>
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f1      	bne.n	8004626 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004642:	4b35      	ldr	r3, [pc, #212]	; (8004718 <pvPortMalloc+0x1a0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	429a      	cmp	r2, r3
 800464a:	d04f      	beq.n	80046ec <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2208      	movs	r2, #8
 8004652:	4413      	add	r3, r2
 8004654:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	1ad2      	subs	r2, r2, r3
 8004666:	2308      	movs	r3, #8
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	429a      	cmp	r2, r3
 800466c:	d91e      	bls.n	80046ac <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	2b00      	cmp	r3, #0
 800467e:	d009      	beq.n	8004694 <pvPortMalloc+0x11c>
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e7fe      	b.n	8004692 <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046a6:	69b8      	ldr	r0, [r7, #24]
 80046a8:	f000 f904 	bl	80048b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046ac:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <pvPortMalloc+0x1a8>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	4a1a      	ldr	r2, [pc, #104]	; (8004720 <pvPortMalloc+0x1a8>)
 80046b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046ba:	4b19      	ldr	r3, [pc, #100]	; (8004720 <pvPortMalloc+0x1a8>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b1a      	ldr	r3, [pc, #104]	; (8004728 <pvPortMalloc+0x1b0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d203      	bcs.n	80046ce <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046c6:	4b16      	ldr	r3, [pc, #88]	; (8004720 <pvPortMalloc+0x1a8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a17      	ldr	r2, [pc, #92]	; (8004728 <pvPortMalloc+0x1b0>)
 80046cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <pvPortMalloc+0x1a4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <pvPortMalloc+0x1b4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3301      	adds	r3, #1
 80046e8:	4a10      	ldr	r2, [pc, #64]	; (800472c <pvPortMalloc+0x1b4>)
 80046ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046ec:	f7fe fbaa 	bl	8002e44 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <pvPortMalloc+0x196>
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e7fe      	b.n	800470c <pvPortMalloc+0x194>
    return pvReturn;
 800470e:	69fb      	ldr	r3, [r7, #28]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20019184 	.word	0x20019184
 800471c:	20019198 	.word	0x20019198
 8004720:	20019188 	.word	0x20019188
 8004724:	2001917c 	.word	0x2001917c
 8004728:	2001918c 	.word	0x2001918c
 800472c:	20019190 	.word	0x20019190

08004730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04b      	beq.n	80047da <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004742:	2308      	movs	r3, #8
 8004744:	425b      	negs	r3, r3
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <vPortFree+0xb4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <vPortFree+0x42>
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e7fe      	b.n	8004770 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <vPortFree+0x5e>
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	e7fe      	b.n	800478c <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <vPortFree+0xb4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11a      	bne.n	80047da <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <vPortFree+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	401a      	ands	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047b4:	f7fe fb38 	bl	8002e28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <vPortFree+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4413      	add	r3, r2
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <vPortFree+0xb8>)
 80047c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047c6:	6938      	ldr	r0, [r7, #16]
 80047c8:	f000 f874 	bl	80048b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <vPortFree+0xbc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a06      	ldr	r2, [pc, #24]	; (80047ec <vPortFree+0xbc>)
 80047d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80047d6:	f7fe fb35 	bl	8002e44 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80047da:	bf00      	nop
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20019198 	.word	0x20019198
 80047e8:	20019188 	.word	0x20019188
 80047ec:	20019194 	.word	0x20019194

080047f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047f6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80047fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80047fc:	4b27      	ldr	r3, [pc, #156]	; (800489c <prvHeapInit+0xac>)
 80047fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00c      	beq.n	8004824 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3307      	adds	r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	4a1f      	ldr	r2, [pc, #124]	; (800489c <prvHeapInit+0xac>)
 8004820:	4413      	add	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004828:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <prvHeapInit+0xb0>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <prvHeapInit+0xb0>)
 8004830:	2200      	movs	r2, #0
 8004832:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4413      	add	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800483c:	2208      	movs	r2, #8
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0307 	bic.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a15      	ldr	r2, [pc, #84]	; (80048a4 <prvHeapInit+0xb4>)
 8004850:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <prvHeapInit+0xb4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <prvHeapInit+0xb4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <prvHeapInit+0xb4>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <prvHeapInit+0xb8>)
 800487e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a09      	ldr	r2, [pc, #36]	; (80048ac <prvHeapInit+0xbc>)
 8004886:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <prvHeapInit+0xc0>)
 800488a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800488e:	601a      	str	r2, [r3, #0]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	2000017c 	.word	0x2000017c
 80048a0:	2001917c 	.word	0x2001917c
 80048a4:	20019184 	.word	0x20019184
 80048a8:	2001918c 	.word	0x2001918c
 80048ac:	20019188 	.word	0x20019188
 80048b0:	20019198 	.word	0x20019198

080048b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <prvInsertBlockIntoFreeList+0xac>)
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e002      	b.n	80048c8 <prvInsertBlockIntoFreeList+0x14>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d8f7      	bhi.n	80048c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	4413      	add	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d108      	bne.n	80048f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	441a      	add	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	441a      	add	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d118      	bne.n	800493c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <prvInsertBlockIntoFreeList+0xb0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d00d      	beq.n	8004932 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e008      	b.n	8004944 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvInsertBlockIntoFreeList+0xb0>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e003      	b.n	8004944 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d002      	beq.n	8004952 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	2001917c 	.word	0x2001917c
 8004964:	20019184 	.word	0x20019184

08004968 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004976:	2205      	movs	r2, #5
 8004978:	492b      	ldr	r1, [pc, #172]	; (8004a28 <SYSVIEW_AddTask+0xc0>)
 800497a:	68b8      	ldr	r0, [r7, #8]
 800497c:	f001 fbd0 	bl	8006120 <memcmp>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d04b      	beq.n	8004a1e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004986:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b07      	cmp	r3, #7
 800498c:	d903      	bls.n	8004996 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800498e:	4828      	ldr	r0, [pc, #160]	; (8004a30 <SYSVIEW_AddTask+0xc8>)
 8004990:	f001 fb46 	bl	8006020 <SEGGER_SYSVIEW_Warn>
    return;
 8004994:	e044      	b.n	8004a20 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004996:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4926      	ldr	r1, [pc, #152]	; (8004a34 <SYSVIEW_AddTask+0xcc>)
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4921      	ldr	r1, [pc, #132]	; (8004a34 <SYSVIEW_AddTask+0xcc>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	3304      	adds	r3, #4
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	491b      	ldr	r1, [pc, #108]	; (8004a34 <SYSVIEW_AddTask+0xcc>)
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3308      	adds	r3, #8
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4916      	ldr	r1, [pc, #88]	; (8004a34 <SYSVIEW_AddTask+0xcc>)
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	330c      	adds	r3, #12
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80049ec:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	4910      	ldr	r1, [pc, #64]	; (8004a34 <SYSVIEW_AddTask+0xcc>)
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3310      	adds	r3, #16
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <SYSVIEW_AddTask+0xc4>)
 8004a0a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f87e 	bl	8004b18 <SYSVIEW_SendTaskInfo>
 8004a1c:	e000      	b.n	8004a20 <SYSVIEW_AddTask+0xb8>
    return;
 8004a1e:	bf00      	nop

}
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	080061a4 	.word	0x080061a4
 8004a2c:	2001923c 	.word	0x2001923c
 8004a30:	080061ac 	.word	0x080061ac
 8004a34:	2001919c 	.word	0x2001919c

08004a38 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af02      	add	r7, sp, #8
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a46:	2205      	movs	r2, #5
 8004a48:	4930      	ldr	r1, [pc, #192]	; (8004b0c <SYSVIEW_UpdateTask+0xd4>)
 8004a4a:	68b8      	ldr	r0, [r7, #8]
 8004a4c:	f001 fb68 	bl	8006120 <memcmp>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d056      	beq.n	8004b04 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e00d      	b.n	8004a78 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8004a5c:	492c      	ldr	r1, [pc, #176]	; (8004b10 <SYSVIEW_UpdateTask+0xd8>)
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d008      	beq.n	8004a84 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	3301      	adds	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <SYSVIEW_UpdateTask+0xdc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3ec      	bcc.n	8004a5c <SYSVIEW_UpdateTask+0x24>
 8004a82:	e000      	b.n	8004a86 <SYSVIEW_UpdateTask+0x4e>
      break;
 8004a84:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8004a86:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <SYSVIEW_UpdateTask+0xdc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d230      	bcs.n	8004af2 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004a90:	491f      	ldr	r1, [pc, #124]	; (8004b10 <SYSVIEW_UpdateTask+0xd8>)
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004aa4:	491a      	ldr	r1, [pc, #104]	; (8004b10 <SYSVIEW_UpdateTask+0xd8>)
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004ab8:	4915      	ldr	r1, [pc, #84]	; (8004b10 <SYSVIEW_UpdateTask+0xd8>)
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004acc:	4910      	ldr	r1, [pc, #64]	; (8004b10 <SYSVIEW_UpdateTask+0xd8>)
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	3310      	adds	r3, #16
 8004adc:	6a3a      	ldr	r2, [r7, #32]
 8004ade:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f814 	bl	8004b18 <SYSVIEW_SendTaskInfo>
 8004af0:	e009      	b.n	8004b06 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff ff33 	bl	8004968 <SYSVIEW_AddTask>
 8004b02:	e000      	b.n	8004b06 <SYSVIEW_UpdateTask+0xce>
    return;
 8004b04:	bf00      	nop
  }
}
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	080061a4 	.word	0x080061a4
 8004b10:	2001919c 	.word	0x2001919c
 8004b14:	2001923c 	.word	0x2001923c

08004b18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b26:	f107 0314 	add.w	r3, r7, #20
 8004b2a:	2214      	movs	r2, #20
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fb10 	bl	8006154 <memset>
  TaskInfo.TaskID     = TaskID;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004b48:	f107 0314 	add.w	r3, r7, #20
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fe97 	bl	8005880 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004b52:	bf00      	nop
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <USART2_IRQHandler+0x80>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d011      	beq.n	8004b96 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <USART2_IRQHandler+0x84>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 030b 	and.w	r3, r3, #11
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d108      	bne.n	8004b96 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <USART2_IRQHandler+0x88>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <USART2_IRQHandler+0x88>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	79fa      	ldrb	r2, [r7, #7]
 8004b92:	4610      	mov	r0, r2
 8004b94:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01a      	beq.n	8004bd6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ba0:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <USART2_IRQHandler+0x8c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <USART2_IRQHandler+0x8c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	1dfa      	adds	r2, r7, #7
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4798      	blx	r3
 8004bb2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <USART2_IRQHandler+0x90>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0b      	ldr	r2, [pc, #44]	; (8004bec <USART2_IRQHandler+0x90>)
 8004bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e006      	b.n	8004bd6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <USART2_IRQHandler+0x80>)
 8004bca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004bcc:	79fa      	ldrb	r2, [r7, #7]
 8004bce:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <USART2_IRQHandler+0x84>)
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e000      	b.n	8004bd6 <USART2_IRQHandler+0x7a>
      return;
 8004bd4:	bf00      	nop
    }
  }
}
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40004400 	.word	0x40004400
 8004be0:	40004404 	.word	0x40004404
 8004be4:	20019240 	.word	0x20019240
 8004be8:	20019244 	.word	0x20019244
 8004bec:	4000440c 	.word	0x4000440c

08004bf0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	4000440c 	.word	0x4000440c

08004c10 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <_DoInit+0x98>)
 8004c18:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2203      	movs	r2, #3
 8004c24:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <_DoInit+0x9c>)
 8004c2a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <_DoInit+0xa0>)
 8004c30:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c38:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a17      	ldr	r2, [pc, #92]	; (8004cac <_DoInit+0x9c>)
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <_DoInit+0xa4>)
 8004c56:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3307      	adds	r3, #7
 8004c74:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <_DoInit+0xa8>)
 8004c76:	6810      	ldr	r0, [r2, #0]
 8004c78:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c7a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <_DoInit+0xac>)
 8004c82:	6810      	ldr	r0, [r2, #0]
 8004c84:	6018      	str	r0, [r3, #0]
 8004c86:	8891      	ldrh	r1, [r2, #4]
 8004c88:	7992      	ldrb	r2, [r2, #6]
 8004c8a:	8099      	strh	r1, [r3, #4]
 8004c8c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c8e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c98:	f3bf 8f5f 	dmb	sy
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	200197f0 	.word	0x200197f0
 8004cac:	080061fc 	.word	0x080061fc
 8004cb0:	20019248 	.word	0x20019248
 8004cb4:	20019648 	.word	0x20019648
 8004cb8:	08006208 	.word	0x08006208
 8004cbc:	0800620c 	.word	0x0800620c

08004cc0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08c      	sub	sp, #48	; 0x30
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004ccc:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004cce:	623b      	str	r3, [r7, #32]
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <SEGGER_RTT_ReadNoLock+0x1e>
 8004cda:	f7ff ff99 	bl	8004c10 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	3360      	adds	r3, #96	; 0x60
 8004cea:	4a37      	ldr	r2, [pc, #220]	; (8004dc8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004cec:	4413      	add	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d92b      	bls.n	8004d64 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	bf28      	it	cs
 8004d1e:	4613      	movcs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	4413      	add	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	6939      	ldr	r1, [r7, #16]
 8004d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d32:	f001 fa04 	bl	800613e <memcpy>
    NumBytesRead += NumBytesRem;
 8004d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	4413      	add	r3, r2
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d101      	bne.n	8004d64 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	bf28      	it	cs
 8004d74:	4613      	movcs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d019      	beq.n	8004db2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	4413      	add	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	6939      	ldr	r1, [r7, #16]
 8004d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8e:	f001 f9d6 	bl	800613e <memcpy>
    NumBytesRead += NumBytesRem;
 8004d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dbc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3730      	adds	r7, #48	; 0x30
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	200197f0 	.word	0x200197f0

08004dcc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004ddc:	e002      	b.n	8004de4 <_EncodeStr+0x18>
    Len++;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	3301      	adds	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4413      	add	r3, r2
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f6      	bne.n	8004dde <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d901      	bls.n	8004dfc <_EncodeStr+0x30>
    Len = Limit;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2bfe      	cmp	r3, #254	; 0xfe
 8004e00:	d806      	bhi.n	8004e10 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	60fa      	str	r2, [r7, #12]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	e011      	b.n	8004e34 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	60fa      	str	r2, [r7, #12]
 8004e16:	22ff      	movs	r2, #255	; 0xff
 8004e18:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	60fa      	str	r2, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	0a19      	lsrs	r1, r3, #8
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	60fa      	str	r2, [r7, #12]
 8004e30:	b2ca      	uxtb	r2, r1
 8004e32:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004e38:	e00a      	b.n	8004e50 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	1c53      	adds	r3, r2, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1c59      	adds	r1, r3, #1
 8004e44:	60f9      	str	r1, [r7, #12]
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	701a      	strb	r2, [r3, #0]
    n++;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d3f0      	bcc.n	8004e3a <_EncodeStr+0x6e>
  }
  return pPayload;
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004e86:	4b33      	ldr	r3, [pc, #204]	; (8004f54 <_HandleIncomingPacket+0xd4>)
 8004e88:	7e1b      	ldrb	r3, [r3, #24]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	1cfb      	adds	r3, r7, #3
 8004e8e:	2201      	movs	r2, #1
 8004e90:	4619      	mov	r1, r3
 8004e92:	f7ff ff15 	bl	8004cc0 <SEGGER_RTT_ReadNoLock>
 8004e96:	4603      	mov	r3, r0
 8004e98:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dd4d      	ble.n	8004f3c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d022      	beq.n	8004eec <_HandleIncomingPacket+0x6c>
 8004ea6:	2b05      	cmp	r3, #5
 8004ea8:	dc0b      	bgt.n	8004ec2 <_HandleIncomingPacket+0x42>
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d015      	beq.n	8004eda <_HandleIncomingPacket+0x5a>
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	dc02      	bgt.n	8004eb8 <_HandleIncomingPacket+0x38>
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d00e      	beq.n	8004ed4 <_HandleIncomingPacket+0x54>
 8004eb6:	e034      	b.n	8004f22 <_HandleIncomingPacket+0xa2>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d011      	beq.n	8004ee0 <_HandleIncomingPacket+0x60>
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d012      	beq.n	8004ee6 <_HandleIncomingPacket+0x66>
 8004ec0:	e02f      	b.n	8004f22 <_HandleIncomingPacket+0xa2>
 8004ec2:	2b07      	cmp	r3, #7
 8004ec4:	d018      	beq.n	8004ef8 <_HandleIncomingPacket+0x78>
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	db13      	blt.n	8004ef2 <_HandleIncomingPacket+0x72>
 8004eca:	2b7f      	cmp	r3, #127	; 0x7f
 8004ecc:	d038      	beq.n	8004f40 <_HandleIncomingPacket+0xc0>
 8004ece:	2b80      	cmp	r3, #128	; 0x80
 8004ed0:	d015      	beq.n	8004efe <_HandleIncomingPacket+0x7e>
 8004ed2:	e026      	b.n	8004f22 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004ed4:	f000 fb58 	bl	8005588 <SEGGER_SYSVIEW_Start>
      break;
 8004ed8:	e037      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004eda:	f000 fc11 	bl	8005700 <SEGGER_SYSVIEW_Stop>
      break;
 8004ede:	e034      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004ee0:	f000 fdc6 	bl	8005a70 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ee4:	e031      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ee6:	f000 fdaf 	bl	8005a48 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004eea:	e02e      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004eec:	f000 fc2e 	bl	800574c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ef0:	e02b      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004ef2:	f001 f857 	bl	8005fa4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ef6:	e028      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ef8:	f001 f836 	bl	8005f68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004efc:	e025      	b.n	8004f4a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004efe:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <_HandleIncomingPacket+0xd4>)
 8004f00:	7e1b      	ldrb	r3, [r3, #24]
 8004f02:	4618      	mov	r0, r3
 8004f04:	1cfb      	adds	r3, r7, #3
 8004f06:	2201      	movs	r2, #1
 8004f08:	4619      	mov	r1, r3
 8004f0a:	f7ff fed9 	bl	8004cc0 <SEGGER_RTT_ReadNoLock>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	dd15      	ble.n	8004f44 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 ffa4 	bl	8005e68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004f20:	e010      	b.n	8004f44 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	da0e      	bge.n	8004f48 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <_HandleIncomingPacket+0xd4>)
 8004f2c:	7e1b      	ldrb	r3, [r3, #24]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	1cfb      	adds	r3, r7, #3
 8004f32:	2201      	movs	r2, #1
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7ff fec3 	bl	8004cc0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004f3a:	e005      	b.n	8004f48 <_HandleIncomingPacket+0xc8>
    }
  }
 8004f3c:	bf00      	nop
 8004f3e:	e004      	b.n	8004f4a <_HandleIncomingPacket+0xca>
      break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <_HandleIncomingPacket+0xca>
      break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <_HandleIncomingPacket+0xca>
      break;
 8004f48:	bf00      	nop
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20019658 	.word	0x20019658

08004f58 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004f5e:	2301      	movs	r3, #1
 8004f60:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	3301      	adds	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f6c:	4b32      	ldr	r3, [pc, #200]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f72:	e00b      	b.n	8004f8c <_TrySendOverflowPacket+0x34>
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	1c59      	adds	r1, r3, #1
 8004f7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	09db      	lsrs	r3, r3, #7
 8004f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f90:	d8f0      	bhi.n	8004f74 <_TrySendOverflowPacket+0x1c>
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fa2:	4b26      	ldr	r3, [pc, #152]	; (800503c <_TrySendOverflowPacket+0xe4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	e00b      	b.n	8004fd4 <_TrySendOverflowPacket+0x7c>
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	6279      	str	r1, [r7, #36]	; 0x24
 8004fc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	09db      	lsrs	r3, r3, #7
 8004fd2:	623b      	str	r3, [r7, #32]
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd8:	d8f0      	bhi.n	8004fbc <_TrySendOverflowPacket+0x64>
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	627a      	str	r2, [r7, #36]	; 0x24
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004fea:	4b13      	ldr	r3, [pc, #76]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f7fb f8e8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005000:	4603      	mov	r3, r0
 8005002:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005004:	f7ff fdf4 	bl	8004bf0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005014:	4b08      	ldr	r3, [pc, #32]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	3b01      	subs	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e004      	b.n	800502c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	3301      	adds	r3, #1
 8005028:	4a03      	ldr	r2, [pc, #12]	; (8005038 <_TrySendOverflowPacket+0xe0>)
 800502a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800502c:	693b      	ldr	r3, [r7, #16]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3730      	adds	r7, #48	; 0x30
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20019658 	.word	0x20019658
 800503c:	e0001004 	.word	0xe0001004

08005040 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b08a      	sub	sp, #40	; 0x28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800504c:	4b6d      	ldr	r3, [pc, #436]	; (8005204 <_SendPacket+0x1c4>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d010      	beq.n	8005076 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005054:	4b6b      	ldr	r3, [pc, #428]	; (8005204 <_SendPacket+0x1c4>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80a5 	beq.w	80051a8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800505e:	4b69      	ldr	r3, [pc, #420]	; (8005204 <_SendPacket+0x1c4>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d109      	bne.n	800507a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005066:	f7ff ff77 	bl	8004f58 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800506a:	4b66      	ldr	r3, [pc, #408]	; (8005204 <_SendPacket+0x1c4>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	f040 809c 	bne.w	80051ac <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005074:	e001      	b.n	800507a <_SendPacket+0x3a>
    goto Send;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <_SendPacket+0x3c>
Send:
 800507a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b1f      	cmp	r3, #31
 8005080:	d809      	bhi.n	8005096 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005082:	4b60      	ldr	r3, [pc, #384]	; (8005204 <_SendPacket+0x1c4>)
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 808d 	bne.w	80051b0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b17      	cmp	r3, #23
 800509a:	d807      	bhi.n	80050ac <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	701a      	strb	r2, [r3, #0]
 80050aa:	e03d      	b.n	8005128 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b7f      	cmp	r3, #127	; 0x7f
 80050b8:	d912      	bls.n	80050e0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	09da      	lsrs	r2, r3, #7
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	3a01      	subs	r2, #1
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e006      	b.n	80050ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b7f      	cmp	r3, #127	; 0x7f
 80050f2:	d912      	bls.n	800511a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	09da      	lsrs	r2, r3, #7
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	3a01      	subs	r2, #1
 800510c:	60fa      	str	r2, [r7, #12]
 800510e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005112:	b2da      	uxtb	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	e006      	b.n	8005128 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3b01      	subs	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005128:	4b37      	ldr	r3, [pc, #220]	; (8005208 <_SendPacket+0x1c8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800512e:	4b35      	ldr	r3, [pc, #212]	; (8005204 <_SendPacket+0x1c4>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	623b      	str	r3, [r7, #32]
 8005140:	e00b      	b.n	800515a <_SendPacket+0x11a>
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	6279      	str	r1, [r7, #36]	; 0x24
 800514c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	09db      	lsrs	r3, r3, #7
 8005158:	623b      	str	r3, [r7, #32]
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	2b7f      	cmp	r3, #127	; 0x7f
 800515e:	d8f0      	bhi.n	8005142 <_SendPacket+0x102>
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	627a      	str	r2, [r7, #36]	; 0x24
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005170:	4b24      	ldr	r3, [pc, #144]	; (8005204 <_SendPacket+0x1c4>)
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	4618      	mov	r0, r3
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	461a      	mov	r2, r3
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	f7fb f826 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005184:	4603      	mov	r3, r0
 8005186:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005188:	f7ff fd32 	bl	8004bf0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <_SendPacket+0x1c4>)
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	60d3      	str	r3, [r2, #12]
 8005198:	e00b      	b.n	80051b2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800519a:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <_SendPacket+0x1c4>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <_SendPacket+0x1c4>)
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e004      	b.n	80051b2 <_SendPacket+0x172>
    goto SendDone;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <_SendPacket+0x172>
      goto SendDone;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <_SendPacket+0x172>
      goto SendDone;
 80051b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <_SendPacket+0x1c4>)
 80051b4:	7e1b      	ldrb	r3, [r3, #24]
 80051b6:	4619      	mov	r1, r3
 80051b8:	4a14      	ldr	r2, [pc, #80]	; (800520c <_SendPacket+0x1cc>)
 80051ba:	460b      	mov	r3, r1
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	440b      	add	r3, r1
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4413      	add	r3, r2
 80051c4:	336c      	adds	r3, #108	; 0x6c
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <_SendPacket+0x1c4>)
 80051ca:	7e1b      	ldrb	r3, [r3, #24]
 80051cc:	4618      	mov	r0, r3
 80051ce:	490f      	ldr	r1, [pc, #60]	; (800520c <_SendPacket+0x1cc>)
 80051d0:	4603      	mov	r3, r0
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4403      	add	r3, r0
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	440b      	add	r3, r1
 80051da:	3370      	adds	r3, #112	; 0x70
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d00b      	beq.n	80051fa <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <_SendPacket+0x1c4>)
 80051e4:	789b      	ldrb	r3, [r3, #2]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d107      	bne.n	80051fa <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <_SendPacket+0x1c4>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80051f0:	f7ff fe46 	bl	8004e80 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <_SendPacket+0x1c4>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80051fa:	bf00      	nop
 80051fc:	3728      	adds	r7, #40	; 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	20019658 	.word	0x20019658
 8005208:	e0001004 	.word	0xe0001004
 800520c:	200197f0 	.word	0x200197f0

08005210 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005218:	f3ef 8311 	mrs	r3, BASEPRI
 800521c:	f04f 0120 	mov.w	r1, #32
 8005220:	f381 8811 	msr	BASEPRI, r1
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4808      	ldr	r0, [pc, #32]	; (8005248 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005228:	f7ff fe1d 	bl	8004e66 <_PreparePacket>
 800522c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68b8      	ldr	r0, [r7, #8]
 8005234:	f7ff ff04 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f383 8811 	msr	BASEPRI, r3
}
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20019688 	.word	0x20019688

0800524c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005256:	f3ef 8311 	mrs	r3, BASEPRI
 800525a:	f04f 0120 	mov.w	r1, #32
 800525e:	f381 8811 	msr	BASEPRI, r1
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	4816      	ldr	r0, [pc, #88]	; (80052c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005266:	f7ff fdfe 	bl	8004e66 <_PreparePacket>
 800526a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e00b      	b.n	8005292 <SEGGER_SYSVIEW_RecordU32+0x46>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	1c59      	adds	r1, r3, #1
 8005282:	61f9      	str	r1, [r7, #28]
 8005284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	09db      	lsrs	r3, r3, #7
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b7f      	cmp	r3, #127	; 0x7f
 8005296:	d8f0      	bhi.n	800527a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	61fa      	str	r2, [r7, #28]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	6938      	ldr	r0, [r7, #16]
 80052ae:	f7ff fec7 	bl	8005040 <_SendPacket>
  RECORD_END();
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f383 8811 	msr	BASEPRI, r3
}
 80052b8:	bf00      	nop
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20019688 	.word	0x20019688

080052c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08c      	sub	sp, #48	; 0x30
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052d0:	f3ef 8311 	mrs	r3, BASEPRI
 80052d4:	f04f 0120 	mov.w	r1, #32
 80052d8:	f381 8811 	msr	BASEPRI, r1
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	4825      	ldr	r0, [pc, #148]	; (8005374 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80052e0:	f7ff fdc1 	bl	8004e66 <_PreparePacket>
 80052e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f2:	e00b      	b.n	800530c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b7f      	cmp	r3, #127	; 0x7f
 8005310:	d8f0      	bhi.n	80052f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	e00b      	b.n	8005344 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	6279      	str	r1, [r7, #36]	; 0x24
 8005336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	09db      	lsrs	r3, r3, #7
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	2b7f      	cmp	r3, #127	; 0x7f
 8005348:	d8f0      	bhi.n	800532c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	627a      	str	r2, [r7, #36]	; 0x24
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	69b8      	ldr	r0, [r7, #24]
 8005360:	f7ff fe6e 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f383 8811 	msr	BASEPRI, r3
}
 800536a:	bf00      	nop
 800536c:	3730      	adds	r7, #48	; 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20019688 	.word	0x20019688

08005378 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	; 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005386:	f3ef 8311 	mrs	r3, BASEPRI
 800538a:	f04f 0120 	mov.w	r1, #32
 800538e:	f381 8811 	msr	BASEPRI, r1
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	4832      	ldr	r0, [pc, #200]	; (8005460 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005396:	f7ff fd66 	bl	8004e66 <_PreparePacket>
 800539a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
 80053a8:	e00b      	b.n	80053c2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	1c59      	adds	r1, r3, #1
 80053b2:	6379      	str	r1, [r7, #52]	; 0x34
 80053b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	09db      	lsrs	r3, r3, #7
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b7f      	cmp	r3, #127	; 0x7f
 80053c6:	d8f0      	bhi.n	80053aa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80053c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	637a      	str	r2, [r7, #52]	; 0x34
 80053ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e0:	e00b      	b.n	80053fa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	1c59      	adds	r1, r3, #1
 80053ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	09db      	lsrs	r3, r3, #7
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	2b7f      	cmp	r3, #127	; 0x7f
 80053fe:	d8f0      	bhi.n	80053e2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	e00b      	b.n	8005432 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	1c59      	adds	r1, r3, #1
 8005422:	6279      	str	r1, [r7, #36]	; 0x24
 8005424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	623b      	str	r3, [r7, #32]
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	2b7f      	cmp	r3, #127	; 0x7f
 8005436:	d8f0      	bhi.n	800541a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	627a      	str	r2, [r7, #36]	; 0x24
 800543e:	6a3a      	ldr	r2, [r7, #32]
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	6979      	ldr	r1, [r7, #20]
 800544c:	69b8      	ldr	r0, [r7, #24]
 800544e:	f7ff fdf7 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f383 8811 	msr	BASEPRI, r3
}
 8005458:	bf00      	nop
 800545a:	3738      	adds	r7, #56	; 0x38
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20019688 	.word	0x20019688

08005464 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b090      	sub	sp, #64	; 0x40
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005472:	f3ef 8311 	mrs	r3, BASEPRI
 8005476:	f04f 0120 	mov.w	r1, #32
 800547a:	f381 8811 	msr	BASEPRI, r1
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	4840      	ldr	r0, [pc, #256]	; (8005584 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005482:	f7ff fcf0 	bl	8004e66 <_PreparePacket>
 8005486:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
 8005494:	e00b      	b.n	80054ae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	b2da      	uxtb	r2, r3
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	1c59      	adds	r1, r3, #1
 800549e:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	09db      	lsrs	r3, r3, #7
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	2b7f      	cmp	r3, #127	; 0x7f
 80054b2:	d8f0      	bhi.n	8005496 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80054b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	633b      	str	r3, [r7, #48]	; 0x30
 80054cc:	e00b      	b.n	80054e6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	6379      	str	r1, [r7, #52]	; 0x34
 80054d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	09db      	lsrs	r3, r3, #7
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ea:	d8f0      	bhi.n	80054ce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	637a      	str	r2, [r7, #52]	; 0x34
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
 8005504:	e00b      	b.n	800551e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	1c59      	adds	r1, r3, #1
 800550e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	09db      	lsrs	r3, r3, #7
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	2b7f      	cmp	r3, #127	; 0x7f
 8005522:	d8f0      	bhi.n	8005506 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800552a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
 8005538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	e00b      	b.n	8005556 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1c59      	adds	r1, r3, #1
 8005546:	6279      	str	r1, [r7, #36]	; 0x24
 8005548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	09db      	lsrs	r3, r3, #7
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	2b7f      	cmp	r3, #127	; 0x7f
 800555a:	d8f0      	bhi.n	800553e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	627a      	str	r2, [r7, #36]	; 0x24
 8005562:	6a3a      	ldr	r2, [r7, #32]
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	6979      	ldr	r1, [r7, #20]
 8005570:	69b8      	ldr	r0, [r7, #24]
 8005572:	f7ff fd65 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f383 8811 	msr	BASEPRI, r3
}
 800557c:	bf00      	nop
 800557e:	3740      	adds	r7, #64	; 0x40
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20019688 	.word	0x20019688

08005588 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	; 0x30
 800558c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800558e:	4b59      	ldr	r3, [pc, #356]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005590:	2201      	movs	r2, #1
 8005592:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005594:	f3ef 8311 	mrs	r3, BASEPRI
 8005598:	f04f 0120 	mov.w	r1, #32
 800559c:	f381 8811 	msr	BASEPRI, r1
 80055a0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80055a2:	4b54      	ldr	r3, [pc, #336]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	220a      	movs	r2, #10
 80055a8:	4953      	ldr	r1, [pc, #332]	; (80056f8 <SEGGER_SYSVIEW_Start+0x170>)
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fa fe10 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80055b6:	f7ff fb1b 	bl	8004bf0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80055ba:	200a      	movs	r0, #10
 80055bc:	f7ff fe28 	bl	8005210 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80055c0:	f3ef 8311 	mrs	r3, BASEPRI
 80055c4:	f04f 0120 	mov.w	r1, #32
 80055c8:	f381 8811 	msr	BASEPRI, r1
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	484b      	ldr	r0, [pc, #300]	; (80056fc <SEGGER_SYSVIEW_Start+0x174>)
 80055d0:	f7ff fc49 	bl	8004e66 <_PreparePacket>
 80055d4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055de:	4b45      	ldr	r3, [pc, #276]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	e00b      	b.n	80055fe <SEGGER_SYSVIEW_Start+0x76>
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	1c59      	adds	r1, r3, #1
 80055ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	09db      	lsrs	r3, r3, #7
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	2b7f      	cmp	r3, #127	; 0x7f
 8005602:	d8f0      	bhi.n	80055e6 <SEGGER_SYSVIEW_Start+0x5e>
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800560a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	4b36      	ldr	r3, [pc, #216]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	e00b      	b.n	8005638 <SEGGER_SYSVIEW_Start+0xb0>
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	6279      	str	r1, [r7, #36]	; 0x24
 800562a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	2b7f      	cmp	r3, #127	; 0x7f
 800563c:	d8f0      	bhi.n	8005620 <SEGGER_SYSVIEW_Start+0x98>
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	627a      	str	r2, [r7, #36]	; 0x24
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	61fb      	str	r3, [r7, #28]
 8005652:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	e00b      	b.n	8005672 <SEGGER_SYSVIEW_Start+0xea>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	1c59      	adds	r1, r3, #1
 8005662:	61f9      	str	r1, [r7, #28]
 8005664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	09db      	lsrs	r3, r3, #7
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b7f      	cmp	r3, #127	; 0x7f
 8005676:	d8f0      	bhi.n	800565a <SEGGER_SYSVIEW_Start+0xd2>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	61fa      	str	r2, [r7, #28]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	2300      	movs	r3, #0
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e00b      	b.n	80056aa <SEGGER_SYSVIEW_Start+0x122>
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	6179      	str	r1, [r7, #20]
 800569c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	09db      	lsrs	r3, r3, #7
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b7f      	cmp	r3, #127	; 0x7f
 80056ae:	d8f0      	bhi.n	8005692 <SEGGER_SYSVIEW_Start+0x10a>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	617a      	str	r2, [r7, #20]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80056c0:	2218      	movs	r2, #24
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fcbb 	bl	8005040 <_SendPacket>
      RECORD_END();
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80056d8:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <SEGGER_SYSVIEW_Start+0x16c>)
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80056de:	f000 f9c7 	bl	8005a70 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80056e2:	f000 f9b1 	bl	8005a48 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80056e6:	f000 fc5d 	bl	8005fa4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80056ea:	bf00      	nop
 80056ec:	3730      	adds	r7, #48	; 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20019658 	.word	0x20019658
 80056f8:	0800622c 	.word	0x0800622c
 80056fc:	20019688 	.word	0x20019688

08005700 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005706:	f3ef 8311 	mrs	r3, BASEPRI
 800570a:	f04f 0120 	mov.w	r1, #32
 800570e:	f381 8811 	msr	BASEPRI, r1
 8005712:	607b      	str	r3, [r7, #4]
 8005714:	480b      	ldr	r0, [pc, #44]	; (8005744 <SEGGER_SYSVIEW_Stop+0x44>)
 8005716:	f7ff fba6 	bl	8004e66 <_PreparePacket>
 800571a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800571c:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <SEGGER_SYSVIEW_Stop+0x48>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005724:	220b      	movs	r2, #11
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6838      	ldr	r0, [r7, #0]
 800572a:	f7ff fc89 	bl	8005040 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <SEGGER_SYSVIEW_Stop+0x48>)
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f383 8811 	msr	BASEPRI, r3
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20019688 	.word	0x20019688
 8005748:	20019658 	.word	0x20019658

0800574c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b08c      	sub	sp, #48	; 0x30
 8005750:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005752:	f3ef 8311 	mrs	r3, BASEPRI
 8005756:	f04f 0120 	mov.w	r1, #32
 800575a:	f381 8811 	msr	BASEPRI, r1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	4845      	ldr	r0, [pc, #276]	; (8005878 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005762:	f7ff fb80 	bl	8004e66 <_PreparePacket>
 8005766:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005770:	4b42      	ldr	r3, [pc, #264]	; (800587c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	62bb      	str	r3, [r7, #40]	; 0x28
 8005776:	e00b      	b.n	8005790 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	b2da      	uxtb	r2, r3
 800577c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577e:	1c59      	adds	r1, r3, #1
 8005780:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	09db      	lsrs	r3, r3, #7
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b7f      	cmp	r3, #127	; 0x7f
 8005794:	d8f0      	bhi.n	8005778 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800579c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	e00b      	b.n	80057ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1c59      	adds	r1, r3, #1
 80057ba:	6279      	str	r1, [r7, #36]	; 0x24
 80057bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	09db      	lsrs	r3, r3, #7
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	2b7f      	cmp	r3, #127	; 0x7f
 80057ce:	d8f0      	bhi.n	80057b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	627a      	str	r2, [r7, #36]	; 0x24
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	4b25      	ldr	r3, [pc, #148]	; (800587c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e00b      	b.n	8005804 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	1c59      	adds	r1, r3, #1
 80057f4:	61f9      	str	r1, [r7, #28]
 80057f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	09db      	lsrs	r3, r3, #7
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b7f      	cmp	r3, #127	; 0x7f
 8005808:	d8f0      	bhi.n	80057ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	61fa      	str	r2, [r7, #28]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e00b      	b.n	800583c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	6179      	str	r1, [r7, #20]
 800582e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	09db      	lsrs	r3, r3, #7
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b7f      	cmp	r3, #127	; 0x7f
 8005840:	d8f0      	bhi.n	8005824 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	617a      	str	r2, [r7, #20]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005852:	2218      	movs	r2, #24
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	68b8      	ldr	r0, [r7, #8]
 8005858:	f7ff fbf2 	bl	8005040 <_SendPacket>
  RECORD_END();
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800586a:	4b04      	ldr	r3, [pc, #16]	; (800587c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	4798      	blx	r3
  }
}
 8005870:	bf00      	nop
 8005872:	3730      	adds	r7, #48	; 0x30
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20019688 	.word	0x20019688
 800587c:	20019658 	.word	0x20019658

08005880 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b092      	sub	sp, #72	; 0x48
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005888:	f3ef 8311 	mrs	r3, BASEPRI
 800588c:	f04f 0120 	mov.w	r1, #32
 8005890:	f381 8811 	msr	BASEPRI, r1
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	486a      	ldr	r0, [pc, #424]	; (8005a40 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005898:	f7ff fae5 	bl	8004e66 <_PreparePacket>
 800589c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b66      	ldr	r3, [pc, #408]	; (8005a44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	643b      	str	r3, [r7, #64]	; 0x40
 80058b2:	e00b      	b.n	80058cc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80058b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	6479      	str	r1, [r7, #68]	; 0x44
 80058be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
 80058cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ce:	2b7f      	cmp	r3, #127	; 0x7f
 80058d0:	d8f0      	bhi.n	80058b4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80058d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	647a      	str	r2, [r7, #68]	; 0x44
 80058d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ec:	e00b      	b.n	8005906 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80058f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	09db      	lsrs	r3, r3, #7
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	2b7f      	cmp	r3, #127	; 0x7f
 800590a:	d8f0      	bhi.n	80058ee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800590c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	4619      	mov	r1, r3
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fa51 	bl	8004dcc <_EncodeStr>
 800592a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800592c:	2209      	movs	r2, #9
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	6938      	ldr	r0, [r7, #16]
 8005932:	f7ff fb85 	bl	8005040 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b40      	ldr	r3, [pc, #256]	; (8005a44 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
 800594a:	e00b      	b.n	8005964 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	b2da      	uxtb	r2, r3
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	1c59      	adds	r1, r3, #1
 8005954:	6379      	str	r1, [r7, #52]	; 0x34
 8005956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	09db      	lsrs	r3, r3, #7
 8005962:	633b      	str	r3, [r7, #48]	; 0x30
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2b7f      	cmp	r3, #127	; 0x7f
 8005968:	d8f0      	bhi.n	800594c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	637a      	str	r2, [r7, #52]	; 0x34
 8005970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
 8005984:	e00b      	b.n	800599e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	b2da      	uxtb	r2, r3
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	1c59      	adds	r1, r3, #1
 800598e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005990:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	09db      	lsrs	r3, r3, #7
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	2b7f      	cmp	r3, #127	; 0x7f
 80059a2:	d8f0      	bhi.n	8005986 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	e00b      	b.n	80059d8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	1c59      	adds	r1, r3, #1
 80059c8:	6279      	str	r1, [r7, #36]	; 0x24
 80059ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	09db      	lsrs	r3, r3, #7
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	2b7f      	cmp	r3, #127	; 0x7f
 80059dc:	d8f0      	bhi.n	80059c0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	627a      	str	r2, [r7, #36]	; 0x24
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	e00b      	b.n	8005a10 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	1c59      	adds	r1, r3, #1
 8005a00:	61f9      	str	r1, [r7, #28]
 8005a02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	09db      	lsrs	r3, r3, #7
 8005a0e:	61bb      	str	r3, [r7, #24]
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b7f      	cmp	r3, #127	; 0x7f
 8005a14:	d8f0      	bhi.n	80059f8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	61fa      	str	r2, [r7, #28]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005a26:	2215      	movs	r2, #21
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	6938      	ldr	r0, [r7, #16]
 8005a2c:	f7ff fb08 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f383 8811 	msr	BASEPRI, r3
}
 8005a36:	bf00      	nop
 8005a38:	3748      	adds	r7, #72	; 0x48
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20019688 	.word	0x20019688
 8005a44:	20019658 	.word	0x20019658

08005a48 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005a5e:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4798      	blx	r3
  }
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20019658 	.word	0x20019658

08005a70 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005a70:	b590      	push	{r4, r7, lr}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d019      	beq.n	8005ab2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d014      	beq.n	8005ab2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005a88:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4798      	blx	r3
 8005a90:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005a94:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005a96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	f04f 0400 	mov.w	r4, #0
 8005aa2:	0013      	movs	r3, r2
 8005aa4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	4601      	mov	r1, r0
 8005aaa:	200d      	movs	r0, #13
 8005aac:	f7ff fc0a 	bl	80052c4 <SEGGER_SYSVIEW_RecordU32x2>
 8005ab0:	e005      	b.n	8005abe <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	200c      	movs	r0, #12
 8005aba:	f7ff fbc7 	bl	800524c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20019658 	.word	0x20019658
 8005acc:	e0001004 	.word	0xe0001004

08005ad0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ad6:	f3ef 8311 	mrs	r3, BASEPRI
 8005ada:	f04f 0120 	mov.w	r1, #32
 8005ade:	f381 8811 	msr	BASEPRI, r1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	4819      	ldr	r0, [pc, #100]	; (8005b4c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005ae6:	f7ff f9be 	bl	8004e66 <_PreparePacket>
 8005aea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005af0:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e00b      	b.n	8005b1c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	1c59      	adds	r1, r3, #1
 8005b0c:	6179      	str	r1, [r7, #20]
 8005b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	09db      	lsrs	r3, r3, #7
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b20:	d8f0      	bhi.n	8005b04 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	617a      	str	r2, [r7, #20]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005b32:	2202      	movs	r2, #2
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	68b8      	ldr	r0, [r7, #8]
 8005b38:	f7ff fa82 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f383 8811 	msr	BASEPRI, r3
}
 8005b42:	bf00      	nop
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20019688 	.word	0x20019688
 8005b50:	e000ed04 	.word	0xe000ed04

08005b54 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b5e:	f04f 0120 	mov.w	r1, #32
 8005b62:	f381 8811 	msr	BASEPRI, r1
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	4807      	ldr	r0, [pc, #28]	; (8005b88 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005b6a:	f7ff f97c 	bl	8004e66 <_PreparePacket>
 8005b6e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005b70:	2203      	movs	r2, #3
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6838      	ldr	r0, [r7, #0]
 8005b76:	f7ff fa63 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f383 8811 	msr	BASEPRI, r3
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20019688 	.word	0x20019688

08005b8c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b92:	f3ef 8311 	mrs	r3, BASEPRI
 8005b96:	f04f 0120 	mov.w	r1, #32
 8005b9a:	f381 8811 	msr	BASEPRI, r1
 8005b9e:	607b      	str	r3, [r7, #4]
 8005ba0:	4807      	ldr	r0, [pc, #28]	; (8005bc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005ba2:	f7ff f960 	bl	8004e66 <_PreparePacket>
 8005ba6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005ba8:	2212      	movs	r2, #18
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f7ff fa47 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f383 8811 	msr	BASEPRI, r3
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20019688 	.word	0x20019688

08005bc4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005bca:	f3ef 8311 	mrs	r3, BASEPRI
 8005bce:	f04f 0120 	mov.w	r1, #32
 8005bd2:	f381 8811 	msr	BASEPRI, r1
 8005bd6:	607b      	str	r3, [r7, #4]
 8005bd8:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005bda:	f7ff f944 	bl	8004e66 <_PreparePacket>
 8005bde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005be0:	2211      	movs	r2, #17
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6838      	ldr	r0, [r7, #0]
 8005be6:	f7ff fa2b 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f383 8811 	msr	BASEPRI, r3
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20019688 	.word	0x20019688

08005bfc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c04:	f3ef 8311 	mrs	r3, BASEPRI
 8005c08:	f04f 0120 	mov.w	r1, #32
 8005c0c:	f381 8811 	msr	BASEPRI, r1
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	4819      	ldr	r0, [pc, #100]	; (8005c78 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005c14:	f7ff f927 	bl	8004e66 <_PreparePacket>
 8005c18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	e00b      	b.n	8005c4a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	61f9      	str	r1, [r7, #28]
 8005c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	09db      	lsrs	r3, r3, #7
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4e:	d8f0      	bhi.n	8005c32 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	61fa      	str	r2, [r7, #28]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005c60:	2208      	movs	r2, #8
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	6938      	ldr	r0, [r7, #16]
 8005c66:	f7ff f9eb 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f383 8811 	msr	BASEPRI, r3
}
 8005c70:	bf00      	nop
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20019688 	.word	0x20019688
 8005c7c:	20019658 	.word	0x20019658

08005c80 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c88:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8c:	f04f 0120 	mov.w	r1, #32
 8005c90:	f381 8811 	msr	BASEPRI, r1
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	4819      	ldr	r0, [pc, #100]	; (8005cfc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005c98:	f7ff f8e5 	bl	8004e66 <_PreparePacket>
 8005c9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ca2:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e00b      	b.n	8005cce <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	1c59      	adds	r1, r3, #1
 8005cbe:	61f9      	str	r1, [r7, #28]
 8005cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	09db      	lsrs	r3, r3, #7
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd2:	d8f0      	bhi.n	8005cb6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	61fa      	str	r2, [r7, #28]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005ce4:	2204      	movs	r2, #4
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	6938      	ldr	r0, [r7, #16]
 8005cea:	f7ff f9a9 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f383 8811 	msr	BASEPRI, r3
}
 8005cf4:	bf00      	nop
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20019688 	.word	0x20019688
 8005d00:	20019658 	.word	0x20019658

08005d04 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d10:	f04f 0120 	mov.w	r1, #32
 8005d14:	f381 8811 	msr	BASEPRI, r1
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	4819      	ldr	r0, [pc, #100]	; (8005d80 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005d1c:	f7ff f8a3 	bl	8004e66 <_PreparePacket>
 8005d20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005d26:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e00b      	b.n	8005d52 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	1c59      	adds	r1, r3, #1
 8005d42:	61f9      	str	r1, [r7, #28]
 8005d44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	09db      	lsrs	r3, r3, #7
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	2b7f      	cmp	r3, #127	; 0x7f
 8005d56:	d8f0      	bhi.n	8005d3a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	61fa      	str	r2, [r7, #28]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	b2d2      	uxtb	r2, r2
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005d68:	2206      	movs	r2, #6
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	6938      	ldr	r0, [r7, #16]
 8005d6e:	f7ff f967 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f383 8811 	msr	BASEPRI, r3
}
 8005d78:	bf00      	nop
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20019688 	.word	0x20019688
 8005d84:	20019658 	.word	0x20019658

08005d88 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d92:	f3ef 8311 	mrs	r3, BASEPRI
 8005d96:	f04f 0120 	mov.w	r1, #32
 8005d9a:	f381 8811 	msr	BASEPRI, r1
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	4827      	ldr	r0, [pc, #156]	; (8005e40 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005da2:	f7ff f860 	bl	8004e66 <_PreparePacket>
 8005da6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	e00b      	b.n	8005dd8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	6279      	str	r1, [r7, #36]	; 0x24
 8005dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	09db      	lsrs	r3, r3, #7
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b7f      	cmp	r3, #127	; 0x7f
 8005ddc:	d8f0      	bhi.n	8005dc0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	1c5a      	adds	r2, r3, #1
 8005de2:	627a      	str	r2, [r7, #36]	; 0x24
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e00b      	b.n	8005e10 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	61f9      	str	r1, [r7, #28]
 8005e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b7f      	cmp	r3, #127	; 0x7f
 8005e14:	d8f0      	bhi.n	8005df8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	61fa      	str	r2, [r7, #28]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005e26:	2207      	movs	r2, #7
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	6938      	ldr	r0, [r7, #16]
 8005e2c:	f7ff f908 	bl	8005040 <_SendPacket>
  RECORD_END();
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f383 8811 	msr	BASEPRI, r3
}
 8005e36:	bf00      	nop
 8005e38:	3728      	adds	r7, #40	; 0x28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20019688 	.word	0x20019688
 8005e44:	20019658 	.word	0x20019658

08005e48 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005e50:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	1ad3      	subs	r3, r2, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20019658 	.word	0x20019658

08005e68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d06d      	beq.n	8005f56 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005e7a:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005e80:	2300      	movs	r3, #0
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e84:	e008      	b.n	8005e98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	3301      	adds	r3, #1
 8005e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d3f2      	bcc.n	8005e86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005ea0:	e000      	b.n	8005ea4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005ea2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d055      	beq.n	8005f56 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8005eae:	f04f 0120 	mov.w	r1, #32
 8005eb2:	f381 8811 	msr	BASEPRI, r1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	482a      	ldr	r0, [pc, #168]	; (8005f64 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005eba:	f7fe ffd4 	bl	8004e66 <_PreparePacket>
 8005ebe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	623b      	str	r3, [r7, #32]
 8005ecc:	e00b      	b.n	8005ee6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eea:	d8f0      	bhi.n	8005ece <SEGGER_SYSVIEW_SendModule+0x66>
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ef2:	6a3a      	ldr	r2, [r7, #32]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e00b      	b.n	8005f20 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	61f9      	str	r1, [r7, #28]
 8005f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	09db      	lsrs	r3, r3, #7
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	2b7f      	cmp	r3, #127	; 0x7f
 8005f24:	d8f0      	bhi.n	8005f08 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	61fa      	str	r2, [r7, #28]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f7fe ff44 	bl	8004dcc <_EncodeStr>
 8005f44:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005f46:	2216      	movs	r2, #22
 8005f48:	68f9      	ldr	r1, [r7, #12]
 8005f4a:	6938      	ldr	r0, [r7, #16]
 8005f4c:	f7ff f878 	bl	8005040 <_SendPacket>
      RECORD_END();
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005f56:	bf00      	nop
 8005f58:	3730      	adds	r7, #48	; 0x30
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20019680 	.word	0x20019680
 8005f64:	20019688 	.word	0x20019688

08005f68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00f      	beq.n	8005f96 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f2      	bne.n	8005f7c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20019680 	.word	0x20019680

08005fa4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005faa:	f3ef 8311 	mrs	r3, BASEPRI
 8005fae:	f04f 0120 	mov.w	r1, #32
 8005fb2:	f381 8811 	msr	BASEPRI, r1
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	4817      	ldr	r0, [pc, #92]	; (8006018 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005fba:	f7fe ff54 	bl	8004e66 <_PreparePacket>
 8005fbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	e00b      	b.n	8005fe8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	6179      	str	r1, [r7, #20]
 8005fda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	09db      	lsrs	r3, r3, #7
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b7f      	cmp	r3, #127	; 0x7f
 8005fec:	d8f0      	bhi.n	8005fd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	617a      	str	r2, [r7, #20]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ffe:	221b      	movs	r2, #27
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	68b8      	ldr	r0, [r7, #8]
 8006004:	f7ff f81c 	bl	8005040 <_SendPacket>
  RECORD_END();
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f383 8811 	msr	BASEPRI, r3
}
 800600e:	bf00      	nop
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20019688 	.word	0x20019688
 800601c:	20019684 	.word	0x20019684

08006020 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006028:	f3ef 8311 	mrs	r3, BASEPRI
 800602c:	f04f 0120 	mov.w	r1, #32
 8006030:	f381 8811 	msr	BASEPRI, r1
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	4827      	ldr	r0, [pc, #156]	; (80060d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006038:	f7fe ff15 	bl	8004e66 <_PreparePacket>
 800603c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800603e:	2280      	movs	r2, #128	; 0x80
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7fe fec2 	bl	8004dcc <_EncodeStr>
 8006048:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
 800604e:	2301      	movs	r3, #1
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	e00b      	b.n	800606c <SEGGER_SYSVIEW_Warn+0x4c>
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	6279      	str	r1, [r7, #36]	; 0x24
 800605e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	09db      	lsrs	r3, r3, #7
 800606a:	623b      	str	r3, [r7, #32]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b7f      	cmp	r3, #127	; 0x7f
 8006070:	d8f0      	bhi.n	8006054 <SEGGER_SYSVIEW_Warn+0x34>
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	627a      	str	r2, [r7, #36]	; 0x24
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	e00b      	b.n	80060a4 <SEGGER_SYSVIEW_Warn+0x84>
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	61f9      	str	r1, [r7, #28]
 8006096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	09db      	lsrs	r3, r3, #7
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	2b7f      	cmp	r3, #127	; 0x7f
 80060a8:	d8f0      	bhi.n	800608c <SEGGER_SYSVIEW_Warn+0x6c>
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	61fa      	str	r2, [r7, #28]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060ba:	221a      	movs	r2, #26
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f7fe ffbe 	bl	8005040 <_SendPacket>
  RECORD_END();
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f383 8811 	msr	BASEPRI, r3
}
 80060ca:	bf00      	nop
 80060cc:	3728      	adds	r7, #40	; 0x28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20019688 	.word	0x20019688

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	4e0d      	ldr	r6, [pc, #52]	; (8006110 <__libc_init_array+0x38>)
 80060dc:	4c0d      	ldr	r4, [pc, #52]	; (8006114 <__libc_init_array+0x3c>)
 80060de:	1ba4      	subs	r4, r4, r6
 80060e0:	10a4      	asrs	r4, r4, #2
 80060e2:	2500      	movs	r5, #0
 80060e4:	42a5      	cmp	r5, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	4e0b      	ldr	r6, [pc, #44]	; (8006118 <__libc_init_array+0x40>)
 80060ea:	4c0c      	ldr	r4, [pc, #48]	; (800611c <__libc_init_array+0x44>)
 80060ec:	f000 f83a 	bl	8006164 <_init>
 80060f0:	1ba4      	subs	r4, r4, r6
 80060f2:	10a4      	asrs	r4, r4, #2
 80060f4:	2500      	movs	r5, #0
 80060f6:	42a5      	cmp	r5, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006100:	4798      	blx	r3
 8006102:	3501      	adds	r5, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800610a:	4798      	blx	r3
 800610c:	3501      	adds	r5, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	08006240 	.word	0x08006240
 8006114:	08006240 	.word	0x08006240
 8006118:	08006240 	.word	0x08006240
 800611c:	08006244 	.word	0x08006244

08006120 <memcmp>:
 8006120:	b530      	push	{r4, r5, lr}
 8006122:	2400      	movs	r4, #0
 8006124:	42a2      	cmp	r2, r4
 8006126:	d101      	bne.n	800612c <memcmp+0xc>
 8006128:	2000      	movs	r0, #0
 800612a:	e007      	b.n	800613c <memcmp+0x1c>
 800612c:	5d03      	ldrb	r3, [r0, r4]
 800612e:	3401      	adds	r4, #1
 8006130:	190d      	adds	r5, r1, r4
 8006132:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006136:	42ab      	cmp	r3, r5
 8006138:	d0f4      	beq.n	8006124 <memcmp+0x4>
 800613a:	1b58      	subs	r0, r3, r5
 800613c:	bd30      	pop	{r4, r5, pc}

0800613e <memcpy>:
 800613e:	b510      	push	{r4, lr}
 8006140:	1e43      	subs	r3, r0, #1
 8006142:	440a      	add	r2, r1
 8006144:	4291      	cmp	r1, r2
 8006146:	d100      	bne.n	800614a <memcpy+0xc>
 8006148:	bd10      	pop	{r4, pc}
 800614a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800614e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006152:	e7f7      	b.n	8006144 <memcpy+0x6>

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
