
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007300  08007300  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007308  08007308  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001a890  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a8ac  2001a8ac  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013e89  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000315f  00000000  00000000  00033f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001350  00000000  00000000  00037078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ed4  00000000  00000000  000383c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002315c  00000000  00000000  0003929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000162e6  00000000  00000000  0005c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d78b0  00000000  00000000  000726de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005094  00000000  00000000  00149f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d2  00000000  00000000  0014f024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800715c 	.word	0x0800715c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800715c 	.word	0x0800715c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192d8 	.word	0x200192d8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fba3 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f86d 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8d5 	bl	800071c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000572:	482d      	ldr	r0, [pc, #180]	; (8000628 <main+0xc8>)
 8000574:	f004 fb4c 	bl	8004c10 <SEGGER_UART_init>
  // CYCLCNT enable
  DWT_CTRL |= (1 << 0);
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <main+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a2b      	ldr	r2, [pc, #172]	; (800062c <main+0xcc>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000584:	f004 f96e 	bl	8004864 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	; 0xc8
 8000596:	4926      	ldr	r1, [pc, #152]	; (8000630 <main+0xd0>)
 8000598:	4826      	ldr	r0, [pc, #152]	; (8000634 <main+0xd4>)
 800059a:	f002 f9a1 	bl	80028e0 <xTaskCreate>
 800059e:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	491b      	ldr	r1, [pc, #108]	; (8000638 <main+0xd8>)
 80005cc:	481b      	ldr	r0, [pc, #108]	; (800063c <main+0xdc>)
 80005ce:	f002 f987 	bl	80028e0 <xTaskCreate>
 80005d2:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x90>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	617b      	str	r3, [r7, #20]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	4910      	ldr	r1, [pc, #64]	; (8000640 <main+0xe0>)
 80005fe:	4811      	ldr	r0, [pc, #68]	; (8000644 <main+0xe4>)
 8000600:	f002 f96e 	bl	80028e0 <xTaskCreate>
 8000604:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0xc2>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	613b      	str	r3, [r7, #16]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0xc0>

  // Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000622:	f002 fb79 	bl	8002d18 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000626:	e7fe      	b.n	8000626 <main+0xc6>
 8000628:	0007a120 	.word	0x0007a120
 800062c:	e0001000 	.word	0xe0001000
 8000630:	08007174 	.word	0x08007174
 8000634:	080009d9 	.word	0x080009d9
 8000638:	08007184 	.word	0x08007184
 800063c:	08000a49 	.word	0x08000a49
 8000640:	08007194 	.word	0x08007194
 8000644:	08000a11 	.word	0x08000a11

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f006 fd46 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b28      	ldr	r3, [pc, #160]	; (8000714 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a27      	ldr	r2, [pc, #156]	; (8000714 <SystemClock_Config+0xcc>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xcc>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	; (8000718 <SystemClock_Config+0xd0>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <SystemClock_Config+0xd0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	; 0xa8
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c4:	2307      	movs	r3, #7
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fde3 	bl	8001298 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f9e4 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f844 	bl	8001788 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000706:	f000 f9cd 	bl	8000aa4 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
 8000736:	4ba2      	ldr	r3, [pc, #648]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4aa1      	ldr	r2, [pc, #644]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800073c:	f043 0310 	orr.w	r3, r3, #16
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b9f      	ldr	r3, [pc, #636]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0310 	and.w	r3, r3, #16
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
 8000752:	4b9b      	ldr	r3, [pc, #620]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a9a      	ldr	r2, [pc, #616]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b98      	ldr	r3, [pc, #608]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b94      	ldr	r3, [pc, #592]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a93      	ldr	r2, [pc, #588]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b91      	ldr	r3, [pc, #580]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b8d      	ldr	r3, [pc, #564]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a8c      	ldr	r2, [pc, #560]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b8a      	ldr	r3, [pc, #552]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b86      	ldr	r3, [pc, #536]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a85      	ldr	r2, [pc, #532]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b83      	ldr	r3, [pc, #524]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b7f      	ldr	r3, [pc, #508]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a7e      	ldr	r2, [pc, #504]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b7c      	ldr	r3, [pc, #496]	; (80009c0 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	4879      	ldr	r0, [pc, #484]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 80007e0:	f000 fd26 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2101      	movs	r1, #1
 80007e8:	4877      	ldr	r0, [pc, #476]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 80007ea:	f000 fd21 	bl	8001230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ee:	2200      	movs	r2, #0
 80007f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007f4:	4875      	ldr	r0, [pc, #468]	; (80009cc <MX_GPIO_Init+0x2b0>)
 80007f6:	f000 fd1b 	bl	8001230 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007fa:	2308      	movs	r3, #8
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	486c      	ldr	r0, [pc, #432]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 8000812:	f000 fb71 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	4866      	ldr	r0, [pc, #408]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 800082e:	f000 fb63 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000842:	2305      	movs	r3, #5
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	485e      	ldr	r0, [pc, #376]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 800084e:	f000 fb53 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000856:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	485a      	ldr	r0, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 8000868:	f000 fb46 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800086c:	2310      	movs	r3, #16
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800087c:	2306      	movs	r3, #6
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4852      	ldr	r0, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 8000888:	f000 fb36 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800088c:	23e0      	movs	r3, #224	; 0xe0
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089c:	2305      	movs	r3, #5
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	484a      	ldr	r0, [pc, #296]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 80008a8:	f000 fb26 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ac:	2304      	movs	r3, #4
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4845      	ldr	r0, [pc, #276]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 80008c0:	f000 fb1a 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483c      	ldr	r0, [pc, #240]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 80008e2:	f000 fb09 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <MX_GPIO_Init+0x2b0>)
 8000900:	f000 fafa 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000904:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000916:	2306      	movs	r3, #6
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4829      	ldr	r0, [pc, #164]	; (80009c8 <MX_GPIO_Init+0x2ac>)
 8000922:	f000 fae9 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4825      	ldr	r0, [pc, #148]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 800093c:	f000 fadc 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000940:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000952:	230a      	movs	r3, #10
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481c      	ldr	r0, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x2b4>)
 800095e:	f000 facb 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_GPIO_Init+0x2b0>)
 8000976:	f000 fabf 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800097a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000980:	2312      	movs	r3, #18
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098c:	2304      	movs	r3, #4
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <MX_GPIO_Init+0x2b8>)
 8000998:	f000 faae 	bl	8000ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099c:	2302      	movs	r3, #2
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0x2a8>)
 80009b2:	f000 faa1 	bl	8000ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	3730      	adds	r7, #48	; 0x30
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  TickType_t last_wakeup_time;
  last_wakeup_time = xTaskGetTickCount();
 80009e0:	f002 fb0a 	bl	8002ff8 <xTaskGetTickCount>
 80009e4:	4603      	mov	r3, r0
 80009e6:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	SEGGER_SYSVIEW_PrintfTarget("Toggle green LED");
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <led_green_handler+0x30>)
 80009ea:	f006 facf 	bl	8006f8c <SEGGER_SYSVIEW_PrintfTarget>
    HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <led_green_handler+0x34>)
 80009f4:	f000 fc35 	bl	8001262 <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 f907 	bl	8002c14 <xTaskDelayUntil>
	SEGGER_SYSVIEW_PrintfTarget("Toggle green LED");
 8000a06:	e7ef      	b.n	80009e8 <led_green_handler+0x10>
 8000a08:	080071a4 	.word	0x080071a4
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <led_orange_handler>:
  }
}

static void led_orange_handler(void* parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  TickType_t last_wakeup_time;
  last_wakeup_time = xTaskGetTickCount();
 8000a18:	f002 faee 	bl	8002ff8 <xTaskGetTickCount>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	SEGGER_SYSVIEW_PrintfTarget("Toggle orange LED");
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <led_orange_handler+0x30>)
 8000a22:	f006 fab3 	bl	8006f8c <SEGGER_SYSVIEW_PrintfTarget>
    HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <led_orange_handler+0x34>)
 8000a2c:	f000 fc19 	bl	8001262 <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 f8eb 	bl	8002c14 <xTaskDelayUntil>
	SEGGER_SYSVIEW_PrintfTarget("Toggle orange LED");
 8000a3e:	e7ef      	b.n	8000a20 <led_orange_handler+0x10>
 8000a40:	080071b8 	.word	0x080071b8
 8000a44:	40020c00 	.word	0x40020c00

08000a48 <led_red_handler>:
  }
}

static void led_red_handler(void* parameters)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  TickType_t last_wakeup_time;
  last_wakeup_time = xTaskGetTickCount();
 8000a50:	f002 fad2 	bl	8002ff8 <xTaskGetTickCount>
 8000a54:	4603      	mov	r3, r0
 8000a56:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	SEGGER_SYSVIEW_PrintfTarget("Toggle red LED");
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <led_red_handler+0x30>)
 8000a5a:	f006 fa97 	bl	8006f8c <SEGGER_SYSVIEW_PrintfTarget>
    HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <led_red_handler+0x34>)
 8000a64:	f000 fbfd 	bl	8001262 <HAL_GPIO_TogglePin>
    vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 f8cf 	bl	8002c14 <xTaskDelayUntil>
	SEGGER_SYSVIEW_PrintfTarget("Toggle red LED");
 8000a76:	e7ef      	b.n	8000a58 <led_red_handler+0x10>
 8000a78:	080071cc 	.word	0x080071cc
 8000a7c:	40020c00 	.word	0x40020c00

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 f92f 	bl	8000cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40001000 	.word	0x40001000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aee:	f003 fb03 	bl	80040f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b33      	ldr	r3, [pc, #204]	; (8000be4 <HAL_InitTick+0xe4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a32      	ldr	r2, [pc, #200]	; (8000be4 <HAL_InitTick+0xe4>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f832 	bl	8001ba0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f817 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f813 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 8000b52:	4603      	mov	r3, r0
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_InitTick+0xe8>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	3b01      	subs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_InitTick+0xec>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_InitTick+0xf0>)
 8000b6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_InitTick+0xec>)
 8000b6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b74:	4a1d      	ldr	r2, [pc, #116]	; (8000bec <HAL_InitTick+0xec>)
 8000b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_InitTick+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_InitTick+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b8c:	4817      	ldr	r0, [pc, #92]	; (8000bec <HAL_InitTick+0xec>)
 8000b8e:	f001 f839 	bl	8001c04 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d11b      	bne.n	8000bd8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba0:	4812      	ldr	r0, [pc, #72]	; (8000bec <HAL_InitTick+0xec>)
 8000ba2:	f001 f889 	bl	8001cb8 <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d111      	bne.n	8000bd8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb4:	2036      	movs	r0, #54	; 0x36
 8000bb6:	f000 f991 	bl	8000edc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d808      	bhi.n	8000bd2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2036      	movs	r0, #54	; 0x36
 8000bc6:	f000 f96d 	bl	8000ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_InitTick+0xf4>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e002      	b.n	8000bd8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3738      	adds	r7, #56	; 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	40001000 	.word	0x40001000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f001 f8b5 	bl	8001d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000038 	.word	0x20000038

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f006 fa35 	bl	80070f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fc67 	bl	8000560 <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ca0:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 8000ca4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ca8:	2001a8ac 	.word	0x2001a8ac

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f8d8 	bl	8000e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f7ff ff0e 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fee4 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000080 	.word	0x20000080

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000080 	.word	0x20000080

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff4c 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb6:	f7ff ff61 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	6978      	ldr	r0, [r7, #20]
 8000ec2:	f7ff ffb1 	bl	8000e28 <NVIC_EncodePriority>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff80 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000ed4:	bf00      	nop
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff54 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
 8000f12:	e16b      	b.n	80011ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	f040 815a 	bne.w	80011e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d005      	beq.n	8000f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d017      	beq.n	8000fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d123      	bne.n	800103c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	08da      	lsrs	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3208      	adds	r2, #8
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	220f      	movs	r2, #15
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	69b9      	ldr	r1, [r7, #24]
 8001038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0203 	and.w	r2, r3, #3
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 80b4 	beq.w	80011e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a5f      	ldr	r2, [pc, #380]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a5b      	ldr	r2, [pc, #364]	; (8001208 <HAL_GPIO_Init+0x310>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x226>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a51      	ldr	r2, [pc, #324]	; (8001210 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x222>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x21e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x330>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20a>
 80010fe:	2307      	movs	r3, #7
 8001100:	e00e      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001102:	2308      	movs	r3, #8
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001106:	2306      	movs	r3, #6
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x228>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x228>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x310>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <HAL_GPIO_Init+0x334>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a32      	ldr	r2, [pc, #200]	; (800122c <HAL_GPIO_Init+0x334>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_GPIO_Init+0x334>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <HAL_GPIO_Init+0x334>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <HAL_GPIO_Init+0x334>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1d      	ldr	r2, [pc, #116]	; (800122c <HAL_GPIO_Init+0x334>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_GPIO_Init+0x334>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <HAL_GPIO_Init+0x334>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae90 	bls.w	8000f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40021c00 	.word	0x40021c00
 800122c:	40013c00 	.word	0x40013c00

08001230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
 800123c:	4613      	mov	r3, r2
 800123e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	787b      	ldrb	r3, [r7, #1]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001246:	887a      	ldrh	r2, [r7, #2]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800124c:	e003      	b.n	8001256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	041a      	lsls	r2, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	619a      	str	r2, [r3, #24]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4013      	ands	r3, r2
 800127a:	041a      	lsls	r2, r3, #16
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43d9      	mvns	r1, r3
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	400b      	ands	r3, r1
 8001284:	431a      	orrs	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e267      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012b6:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d112      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ce:	4b82      	ldr	r3, [pc, #520]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012da:	d10b      	bne.n	80012f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b7e      	ldr	r3, [pc, #504]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d05b      	beq.n	80013a0 <HAL_RCC_OscConfig+0x108>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d157      	bne.n	80013a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e242      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d106      	bne.n	800130c <HAL_RCC_OscConfig+0x74>
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a75      	ldr	r2, [pc, #468]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0x98>
 8001316:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6f      	ldr	r2, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6d      	ldr	r3, [pc, #436]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6c      	ldr	r2, [pc, #432]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xb0>
 8001330:	4b69      	ldr	r3, [pc, #420]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a68      	ldr	r2, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a65      	ldr	r2, [pc, #404]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fce4 	bl	8000d1c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fce0 	bl	8000d1c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e207      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xc0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcd0 	bl	8000d1c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fccc 	bl	8000d1c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1f3      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b51      	ldr	r3, [pc, #324]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0xe8>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b47      	ldr	r3, [pc, #284]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c7      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4937      	ldr	r1, [pc, #220]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b34      	ldr	r3, [pc, #208]	; (80014dc <HAL_RCC_OscConfig+0x244>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fc85 	bl	8000d1c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fc81 	bl	8000d1c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a8      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4925      	ldr	r1, [pc, #148]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_RCC_OscConfig+0x244>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fc64 	bl	8000d1c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc60 	bl	8000d1c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e187      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d036      	beq.n	80014f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d016      	beq.n	80014b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_RCC_OscConfig+0x248>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001490:	f7ff fc44 	bl	8000d1c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fc40 	bl	8000d1c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e167      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_RCC_OscConfig+0x240>)
 80014ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x200>
 80014b6:	e01b      	b.n	80014f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_RCC_OscConfig+0x248>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fc2d 	bl	8000d1c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	e00e      	b.n	80014e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c6:	f7ff fc29 	bl	8000d1c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d907      	bls.n	80014e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e150      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
 80014d8:	40023800 	.word	0x40023800
 80014dc:	42470000 	.word	0x42470000
 80014e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b88      	ldr	r3, [pc, #544]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1ea      	bne.n	80014c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8097 	beq.w	800162c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b81      	ldr	r3, [pc, #516]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b7d      	ldr	r3, [pc, #500]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a7c      	ldr	r2, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152a:	2301      	movs	r3, #1
 800152c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152e:	4b77      	ldr	r3, [pc, #476]	; (800170c <HAL_RCC_OscConfig+0x474>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153a:	4b74      	ldr	r3, [pc, #464]	; (800170c <HAL_RCC_OscConfig+0x474>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a73      	ldr	r2, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x474>)
 8001540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001546:	f7ff fbe9 	bl	8000d1c <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154e:	f7ff fbe5 	bl	8000d1c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e10c      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	4b6a      	ldr	r3, [pc, #424]	; (800170c <HAL_RCC_OscConfig+0x474>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d106      	bne.n	8001582 <HAL_RCC_OscConfig+0x2ea>
 8001574:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a63      	ldr	r2, [pc, #396]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x324>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x30c>
 800158a:	4b5f      	ldr	r3, [pc, #380]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158e:	4a5e      	ldr	r2, [pc, #376]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6713      	str	r3, [r2, #112]	; 0x70
 8001596:	4b5c      	ldr	r3, [pc, #368]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	4a5b      	ldr	r2, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6713      	str	r3, [r2, #112]	; 0x70
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0x324>
 80015a4:	4b58      	ldr	r3, [pc, #352]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a57      	ldr	r2, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	4b55      	ldr	r3, [pc, #340]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a54      	ldr	r2, [pc, #336]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fbaa 	bl	8000d1c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015cc:	f7ff fba6 	bl	8000d1c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e0cb      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0ee      	beq.n	80015cc <HAL_RCC_OscConfig+0x334>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb94 	bl	8000d1c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb90 	bl	8000d1c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0b5      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ee      	bne.n	80015f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d105      	bne.n	800162c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a38      	ldr	r2, [pc, #224]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a1 	beq.w	8001778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d05c      	beq.n	80016fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d141      	bne.n	80016ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_RCC_OscConfig+0x478>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fb64 	bl	8000d1c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fb60 	bl	8000d1c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e087      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	3b01      	subs	r3, #1
 8001690:	041b      	lsls	r3, r3, #16
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	061b      	lsls	r3, r3, #24
 800169a:	491b      	ldr	r1, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x478>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fb39 	bl	8000d1c <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ae:	f7ff fb35 	bl	8000d1c <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e05c      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x416>
 80016cc:	e054      	b.n	8001778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_RCC_OscConfig+0x478>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fb22 	bl	8000d1c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016dc:	f7ff fb1e 	bl	8000d1c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e045      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_RCC_OscConfig+0x470>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x444>
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e038      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000
 8001710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_RCC_OscConfig+0x4ec>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d028      	beq.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d121      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d11a      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800174a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800174c:	4293      	cmp	r3, r2
 800174e:	d111      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	3b01      	subs	r3, #1
 800175e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d107      	bne.n	8001774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0cc      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d90c      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0b8      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	494d      	ldr	r1, [pc, #308]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d044      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d107      	bne.n	8001836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d119      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e07f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d003      	beq.n	8001846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001842:	2b03      	cmp	r3, #3
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e067      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4934      	ldr	r1, [pc, #208]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7ff fa50 	bl	8000d1c <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff fa4c 	bl	8000d1c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d20c      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e032      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4916      	ldr	r1, [pc, #88]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190e:	f000 f821 	bl	8001954 <HAL_RCC_GetSysClockFreq>
 8001912:	4602      	mov	r2, r0
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	490a      	ldr	r1, [pc, #40]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	5ccb      	ldrb	r3, [r1, r3]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f8e6 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00
 8001944:	40023800 	.word	0x40023800
 8001948:	080072c0 	.word	0x080072c0
 800194c:	20000000 	.word	0x20000000
 8001950:	20000004 	.word	0x20000004

08001954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001958:	b094      	sub	sp, #80	; 0x50
 800195a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
 8001960:	2300      	movs	r3, #0
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001964:	2300      	movs	r3, #0
 8001966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800196c:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b08      	cmp	r3, #8
 8001976:	d00d      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x40>
 8001978:	2b08      	cmp	r3, #8
 800197a:	f200 80e1 	bhi.w	8001b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x34>
 8001982:	2b04      	cmp	r3, #4
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x3a>
 8001986:	e0db      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800198c:	e0db      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800198e:	4b73      	ldr	r3, [pc, #460]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001992:	e0d8      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800199c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199e:	4b6d      	ldr	r3, [pc, #436]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d063      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	2200      	movs	r2, #0
 80019b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
 80019c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019c6:	4622      	mov	r2, r4
 80019c8:	462b      	mov	r3, r5
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	0159      	lsls	r1, r3, #5
 80019d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d8:	0150      	lsls	r0, r2, #5
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4621      	mov	r1, r4
 80019e0:	1a51      	subs	r1, r2, r1
 80019e2:	6139      	str	r1, [r7, #16]
 80019e4:	4629      	mov	r1, r5
 80019e6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f8:	4659      	mov	r1, fp
 80019fa:	018b      	lsls	r3, r1, #6
 80019fc:	4651      	mov	r1, sl
 80019fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a02:	4651      	mov	r1, sl
 8001a04:	018a      	lsls	r2, r1, #6
 8001a06:	4651      	mov	r1, sl
 8001a08:	ebb2 0801 	subs.w	r8, r2, r1
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a26:	4690      	mov	r8, r2
 8001a28:	4699      	mov	r9, r3
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	eb18 0303 	adds.w	r3, r8, r3
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	462b      	mov	r3, r5
 8001a34:	eb49 0303 	adc.w	r3, r9, r3
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a46:	4629      	mov	r1, r5
 8001a48:	024b      	lsls	r3, r1, #9
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a50:	4621      	mov	r1, r4
 8001a52:	024a      	lsls	r2, r1, #9
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a64:	f7fe fbfe 	bl	8000264 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a70:	e058      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	2300      	movs	r3, #0
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a8c:	4642      	mov	r2, r8
 8001a8e:	464b      	mov	r3, r9
 8001a90:	f04f 0000 	mov.w	r0, #0
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	0159      	lsls	r1, r3, #5
 8001a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a9e:	0150      	lsls	r0, r2, #5
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4641      	mov	r1, r8
 8001aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aaa:	4649      	mov	r1, r9
 8001aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	00eb      	lsls	r3, r5, #3
 8001ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ada:	00e2      	lsls	r2, r4, #3
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
 8001ae0:	4643      	mov	r3, r8
 8001ae2:	18e3      	adds	r3, r4, r3
 8001ae4:	603b      	str	r3, [r7, #0]
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	eb45 0303 	adc.w	r3, r5, r3
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001afa:	4629      	mov	r1, r5
 8001afc:	028b      	lsls	r3, r1, #10
 8001afe:	4621      	mov	r1, r4
 8001b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b04:	4621      	mov	r1, r4
 8001b06:	028a      	lsls	r2, r1, #10
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	61fa      	str	r2, [r7, #28]
 8001b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b18:	f7fe fba4 	bl	8000264 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	0c1b      	lsrs	r3, r3, #16
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3750      	adds	r7, #80	; 0x50
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	00f42400 	.word	0x00f42400
 8001b5c:	007a1200 	.word	0x007a1200

08001b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b7c:	f7ff fff0 	bl	8001b60 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0a9b      	lsrs	r3, r3, #10
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	080072d0 	.word	0x080072d0

08001ba0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCC_GetClockConfig+0x60>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0207 	and.w	r2, r3, #7
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e041      	b.n	8001c9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f839 	bl	8001ca2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f000 f9d8 	bl	8001ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d001      	beq.n	8001cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e04e      	b.n	8001d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d022      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d01d      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00e      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	; (8001d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d111      	bne.n	8001d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d010      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5a:	e007      	b.n	8001d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000800 	.word	0x40000800
 8001d88:	40000c00 	.word	0x40000c00
 8001d8c:	40010400 	.word	0x40010400
 8001d90:	40014000 	.word	0x40014000
 8001d94:	40001800 	.word	0x40001800

08001d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d11b      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0202 	mvn.w	r2, #2
 8001dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8ee 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8e0 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f8f1 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0204 	mvn.w	r2, #4
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8c4 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8b6 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8c7 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0208 	mvn.w	r2, #8
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2204      	movs	r2, #4
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f89a 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f88c 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f89d 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0210 	mvn.w	r2, #16
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f870 	bl	8001fbc <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f862 	bl	8001fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f873 	bl	8001fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10e      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0201 	mvn.w	r2, #1
 8001f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fdb2 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b80      	cmp	r3, #128	; 0x80
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f34:	2b80      	cmp	r3, #128	; 0x80
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f902 	bl	800214c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	2b40      	cmp	r3, #64	; 0x40
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f838 	bl	8001fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0320 	and.w	r3, r3, #32
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0220 	mvn.w	r2, #32
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8cc 	bl	8002138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a40      	ldr	r2, [pc, #256]	; (800210c <TIM_Base_SetConfig+0x114>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d013      	beq.n	8002038 <TIM_Base_SetConfig+0x40>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002016:	d00f      	beq.n	8002038 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3d      	ldr	r2, [pc, #244]	; (8002110 <TIM_Base_SetConfig+0x118>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00b      	beq.n	8002038 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3c      	ldr	r2, [pc, #240]	; (8002114 <TIM_Base_SetConfig+0x11c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <TIM_Base_SetConfig+0x120>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3a      	ldr	r2, [pc, #232]	; (800211c <TIM_Base_SetConfig+0x124>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d108      	bne.n	800204a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2f      	ldr	r2, [pc, #188]	; (800210c <TIM_Base_SetConfig+0x114>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02b      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002058:	d027      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <TIM_Base_SetConfig+0x118>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d023      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2b      	ldr	r2, [pc, #172]	; (8002114 <TIM_Base_SetConfig+0x11c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <TIM_Base_SetConfig+0x120>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01b      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a29      	ldr	r2, [pc, #164]	; (800211c <TIM_Base_SetConfig+0x124>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d017      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <TIM_Base_SetConfig+0x128>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <TIM_Base_SetConfig+0x12c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00f      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a26      	ldr	r2, [pc, #152]	; (8002128 <TIM_Base_SetConfig+0x130>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00b      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <TIM_Base_SetConfig+0x134>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a24      	ldr	r2, [pc, #144]	; (8002130 <TIM_Base_SetConfig+0x138>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d003      	beq.n	80020aa <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a23      	ldr	r2, [pc, #140]	; (8002134 <TIM_Base_SetConfig+0x13c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d108      	bne.n	80020bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <TIM_Base_SetConfig+0x114>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d003      	beq.n	80020f0 <TIM_Base_SetConfig+0xf8>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <TIM_Base_SetConfig+0x124>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d103      	bne.n	80020f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	615a      	str	r2, [r3, #20]
}
 80020fe:	bf00      	nop
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40010000 	.word	0x40010000
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40010400 	.word	0x40010400
 8002120:	40014000 	.word	0x40014000
 8002124:	40014400 	.word	0x40014400
 8002128:	40014800 	.word	0x40014800
 800212c:	40001800 	.word	0x40001800
 8002130:	40001c00 	.word	0x40001c00
 8002134:	40002000 	.word	0x40002000

08002138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0208 	add.w	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f103 0208 	add.w	r2, r3, #8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d103      	bne.n	80021da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e00c      	b.n	80021f4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3308      	adds	r3, #8
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e002      	b.n	80021e8 <vListInsert+0x2e>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d2f6      	bcs.n	80021e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6852      	ldr	r2, [r2, #4]
 800224c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	d103      	bne.n	8002260 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800228a:	2301      	movs	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <xQueueGenericReset+0x2e>
        __asm volatile
 8002298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229c:	f383 8811 	msr	BASEPRI, r3
 80022a0:	f3bf 8f6f 	isb	sy
 80022a4:	f3bf 8f4f 	dsb	sy
 80022a8:	60fb      	str	r3, [r7, #12]
    }
 80022aa:	bf00      	nop
 80022ac:	e7fe      	b.n	80022ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05d      	beq.n	8002370 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d059      	beq.n	8002370 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c4:	2100      	movs	r1, #0
 80022c6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <xQueueGenericReset+0x50>
 80022ce:	2101      	movs	r1, #1
 80022d0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d14c      	bne.n	8002370 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80022d6:	f001 ff8d 	bl	80041f4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	6939      	ldr	r1, [r7, #16]
 80022e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	441a      	add	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2200      	movs	r2, #0
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	3b01      	subs	r3, #1
 8002308:	6939      	ldr	r1, [r7, #16]
 800230a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	441a      	add	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d114      	bne.n	8002356 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01a      	beq.n	800236a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	3310      	adds	r3, #16
 8002338:	4618      	mov	r0, r3
 800233a:	f001 f86f 	bl	800341c <xTaskRemoveFromEventList>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <xQueueGenericReset+0x11c>)
 8002346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	e009      	b.n	800236a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff00 	bl	8002160 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	3324      	adds	r3, #36	; 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fefb 	bl	8002160 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800236a:	f001 ff73 	bl	8004254 <vPortExitCritical>
 800236e:	e001      	b.n	8002374 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <xQueueGenericReset+0x110>
        __asm volatile
 800237a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237e:	f383 8811 	msr	BASEPRI, r3
 8002382:	f3bf 8f6f 	isb	sy
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	60bb      	str	r3, [r7, #8]
    }
 800238c:	bf00      	nop
 800238e:	e7fe      	b.n	800238e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002390:	697b      	ldr	r3, [r7, #20]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000ed04 	.word	0xe000ed04

080023a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02e      	beq.n	8002416 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023b8:	2100      	movs	r1, #0
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	fba3 2302 	umull	r2, r3, r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d000      	beq.n	80023c8 <xQueueGenericCreate+0x28>
 80023c6:	2101      	movs	r1, #1
 80023c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d123      	bne.n	8002416 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023d6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023da:	d81c      	bhi.n	8002416 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3350      	adds	r3, #80	; 0x50
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 f82e 	bl	800444c <pvPortMalloc>
 80023f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3350      	adds	r3, #80	; 0x50
 8002400:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	4613      	mov	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f814 	bl	800243c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002414:	e00d      	b.n	8002432 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericCreate+0x92>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	613b      	str	r3, [r7, #16]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002432:	69fb      	ldr	r3, [r7, #28]
    }
 8002434:	4618      	mov	r0, r3
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e002      	b.n	800245e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800246a:	2101      	movs	r1, #1
 800246c:	69b8      	ldr	r0, [r7, #24]
 800246e:	f7ff ff07 	bl	8002280 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	68f9      	ldr	r1, [r7, #12]
 8002480:	2073      	movs	r0, #115	; 0x73
 8002482:	f003 ff09 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08f      	sub	sp, #60	; 0x3c
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <xQueueReceive+0x30>
        __asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	623b      	str	r3, [r7, #32]
    }
 80024bc:	bf00      	nop
 80024be:	e7fe      	b.n	80024be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <xQueueReceive+0x3e>
 80024c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <xQueueReceive+0x42>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueReceive+0x44>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueReceive+0x5e>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	61fb      	str	r3, [r7, #28]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ee:	f001 f9a7 	bl	8003840 <xTaskGetSchedulerState>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <xQueueReceive+0x6e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <xQueueReceive+0x72>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueReceive+0x74>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueReceive+0x8e>
        __asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	61bb      	str	r3, [r7, #24]
    }
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800251e:	f001 fe69 	bl	80041f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d02f      	beq.n	800258e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002532:	f000 f8bd 	bl	80026b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	4618      	mov	r0, r3
 800253a:	f004 fc3b 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 800253e:	4604      	mov	r4, r0
 8002540:	2000      	movs	r0, #0
 8002542:	f004 fc37 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 8002546:	4602      	mov	r2, r0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2101      	movs	r1, #1
 800254c:	9100      	str	r1, [sp, #0]
 800254e:	4621      	mov	r1, r4
 8002550:	205c      	movs	r0, #92	; 0x5c
 8002552:	f003 ff17 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1e5a      	subs	r2, r3, #1
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	3310      	adds	r3, #16
 800256a:	4618      	mov	r0, r3
 800256c:	f000 ff56 	bl	800341c <xTaskRemoveFromEventList>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002576:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <xQueueReceive+0x21c>)
 8002578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f3bf 8f4f 	dsb	sy
 8002582:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002586:	f001 fe65 	bl	8004254 <vPortExitCritical>
                return pdPASS;
 800258a:	2301      	movs	r3, #1
 800258c:	e08a      	b.n	80026a4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d113      	bne.n	80025bc <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002594:	f001 fe5e 	bl	8004254 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	4618      	mov	r0, r3
 800259c:	f004 fc0a 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 80025a0:	4604      	mov	r4, r0
 80025a2:	2000      	movs	r0, #0
 80025a4:	f004 fc06 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2101      	movs	r1, #1
 80025ae:	9100      	str	r1, [sp, #0]
 80025b0:	4621      	mov	r1, r4
 80025b2:	205c      	movs	r0, #92	; 0x5c
 80025b4:	f003 fee6 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e073      	b.n	80026a4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025c2:	f107 0310 	add.w	r3, r7, #16
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 f800 	bl	80035cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025d0:	f001 fe40 	bl	8004254 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025d4:	f000 fc02 	bl	8002ddc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025d8:	f001 fe0c 	bl	80041f4 <vPortEnterCritical>
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <xQueueReceive+0x162>
 80025ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d103      	bne.n	8002608 <xQueueReceive+0x178>
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002608:	f001 fe24 	bl	8004254 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800260c:	1d3a      	adds	r2, r7, #4
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 ffef 	bl	80035f8 <xTaskCheckForTimeOut>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d124      	bne.n	800266a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002622:	f000 f8bd 	bl	80027a0 <prvIsQueueEmpty>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d018      	beq.n	800265e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	3324      	adds	r3, #36	; 0x24
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f000 fe85 	bl	8003344 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800263a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800263c:	f000 f85e 	bl	80026fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002640:	f000 fbda 	bl	8002df8 <xTaskResumeAll>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	f47f af69 	bne.w	800251e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <xQueueReceive+0x21c>)
 800264e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	e75f      	b.n	800251e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800265e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002660:	f000 f84c 	bl	80026fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002664:	f000 fbc8 	bl	8002df8 <xTaskResumeAll>
 8002668:	e759      	b.n	800251e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800266a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800266c:	f000 f846 	bl	80026fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002670:	f000 fbc2 	bl	8002df8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002676:	f000 f893 	bl	80027a0 <prvIsQueueEmpty>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	f43f af4e 	beq.w	800251e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	4618      	mov	r0, r3
 8002686:	f004 fb95 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 800268a:	4604      	mov	r4, r0
 800268c:	2000      	movs	r0, #0
 800268e:	f004 fb91 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2101      	movs	r1, #1
 8002698:	9100      	str	r1, [sp, #0]
 800269a:	4621      	mov	r1, r4
 800269c:	205c      	movs	r0, #92	; 0x5c
 800269e:	f003 fe71 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80026a2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3734      	adds	r7, #52	; 0x34
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	e000ed04 	.word	0xe000ed04

080026b0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d018      	beq.n	80026f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	441a      	add	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d303      	bcc.n	80026e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68d9      	ldr	r1, [r3, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	461a      	mov	r2, r3
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f004 fd26 	bl	8007140 <memcpy>
    }
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002704:	f001 fd76 	bl	80041f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800270e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002710:	e011      	b.n	8002736 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3324      	adds	r3, #36	; 0x24
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fe7c 	bl	800341c <xTaskRemoveFromEventList>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800272a:	f000 ffcb 	bl	80036c4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	3b01      	subs	r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	dce9      	bgt.n	8002712 <prvUnlockQueue+0x16>
 800273e:	e000      	b.n	8002742 <prvUnlockQueue+0x46>
                        break;
 8002740:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800274a:	f001 fd83 	bl	8004254 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800274e:	f001 fd51 	bl	80041f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002758:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800275a:	e011      	b.n	8002780 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3310      	adds	r3, #16
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fe57 	bl	800341c <xTaskRemoveFromEventList>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002774:	f000 ffa6 	bl	80036c4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002778:	7bbb      	ldrb	r3, [r7, #14]
 800277a:	3b01      	subs	r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002784:	2b00      	cmp	r3, #0
 8002786:	dce9      	bgt.n	800275c <prvUnlockQueue+0x60>
 8002788:	e000      	b.n	800278c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800278a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	22ff      	movs	r2, #255	; 0xff
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002794:	f001 fd5e 	bl	8004254 <vPortExitCritical>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027a8:	f001 fd24 	bl	80041f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e001      	b.n	80027be <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027be:	f001 fd49 	bl	8004254 <vPortExitCritical>

    return xReturn;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <vQueueAddToRegistry+0x26>
        __asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	60fb      	str	r3, [r7, #12]
    }
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d024      	beq.n	8002846 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e01e      	b.n	8002840 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <vQueueAddToRegistry+0xa8>)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	4413      	add	r3, r2
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d105      	bne.n	800281e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <vQueueAddToRegistry+0xa8>)
 8002818:	4413      	add	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
                    break;
 800281c:	e013      	b.n	8002846 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <vQueueAddToRegistry+0x6e>
 8002824:	4a13      	ldr	r2, [pc, #76]	; (8002874 <vQueueAddToRegistry+0xa8>)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <vQueueAddToRegistry+0xa8>)
 8002836:	4413      	add	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b07      	cmp	r3, #7
 8002844:	d9dd      	bls.n	8002802 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00f      	beq.n	800286c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4618      	mov	r0, r3
 800285c:	f004 faaa 	bl	8006db4 <SEGGER_SYSVIEW_ShrinkId>
 8002860:	4601      	mov	r1, r0
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	2071      	movs	r0, #113	; 0x71
 8002868:	f003 fcbc 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000084 	.word	0x20000084

08002878 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002888:	f001 fcb4 	bl	80041f4 <vPortEnterCritical>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <vQueueWaitForMessageRestricted+0x2a>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d103      	bne.n	80028b8 <vQueueWaitForMessageRestricted+0x40>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b8:	f001 fccc 	bl	8004254 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fd5d 	bl	800338c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff12 	bl	80026fc <prvUnlockQueue>
    }
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af04      	add	r7, sp, #16
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 fda9 	bl	800444c <pvPortMalloc>
 80028fa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00e      	beq.n	8002920 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002902:	2058      	movs	r0, #88	; 0x58
 8002904:	f001 fda2 	bl	800444c <pvPortMalloc>
 8002908:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
 8002916:	e005      	b.n	8002924 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002918:	6978      	ldr	r0, [r7, #20]
 800291a:	f001 fe77 	bl	800460c <vPortFree>
 800291e:	e001      	b.n	8002924 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d013      	beq.n	8002952 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	2300      	movs	r3, #0
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f80e 	bl	8002962 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002946:	69f8      	ldr	r0, [r7, #28]
 8002948:	f000 f8b0 	bl	8002aac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800294c:	2301      	movs	r3, #1
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e002      	b.n	8002958 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002958:	69bb      	ldr	r3, [r7, #24]
    }
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b088      	sub	sp, #32
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	461a      	mov	r2, r3
 800297a:	21a5      	movs	r1, #165	; 0xa5
 800297c:	f004 fbb4 	bl	80070e8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800298a:	3b01      	subs	r3, #1
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f023 0307 	bic.w	r3, r3, #7
 8002998:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <prvInitialiseNewTask+0x58>
        __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	617b      	str	r3, [r7, #20]
    }
 80029b6:	bf00      	nop
 80029b8:	e7fe      	b.n	80029b8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01f      	beq.n	8002a00 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
 80029c4:	e012      	b.n	80029ec <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	7819      	ldrb	r1, [r3, #0]
 80029ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	3334      	adds	r3, #52	; 0x34
 80029d6:	460a      	mov	r2, r1
 80029d8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d006      	beq.n	80029f4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b09      	cmp	r3, #9
 80029f0:	d9e9      	bls.n	80029c6 <prvInitialiseNewTask+0x64>
 80029f2:	e000      	b.n	80029f6 <prvInitialiseNewTask+0x94>
            {
                break;
 80029f4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029fe:	e003      	b.n	8002a08 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d90a      	bls.n	8002a24 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	613b      	str	r3, [r7, #16]
    }
 8002a20:	bf00      	nop
 8002a22:	e7fe      	b.n	8002a22 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d901      	bls.n	8002a2e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a38:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	3304      	adds	r3, #4
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fbab 	bl	80021a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fba6 	bl	80021a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a58:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	f1c3 0205 	rsb	r2, r3, #5
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6c:	3350      	adds	r3, #80	; 0x50
 8002a6e:	2204      	movs	r2, #4
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 fb38 	bl	80070e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	3354      	adds	r3, #84	; 0x54
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 fb31 	bl	80070e8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	69b8      	ldr	r0, [r7, #24]
 8002a8c:	f001 fa06 	bl	8003e9c <pxPortInitialiseStack>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aa2:	bf00      	nop
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002aac:	b5b0      	push	{r4, r5, r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ab4:	f001 fb9e 	bl	80041f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <prvAddNewTaskToReadyList+0x14c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a4e      	ldr	r2, [pc, #312]	; (8002bf8 <prvAddNewTaskToReadyList+0x14c>)
 8002ac0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ac2:	4b4e      	ldr	r3, [pc, #312]	; (8002bfc <prvAddNewTaskToReadyList+0x150>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002aca:	4a4c      	ldr	r2, [pc, #304]	; (8002bfc <prvAddNewTaskToReadyList+0x150>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ad0:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <prvAddNewTaskToReadyList+0x14c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d110      	bne.n	8002afa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ad8:	f000 fe18 	bl	800370c <prvInitialiseTaskLists>
 8002adc:	e00d      	b.n	8002afa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ade:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <prvAddNewTaskToReadyList+0x154>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <prvAddNewTaskToReadyList+0x150>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d802      	bhi.n	8002afa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002af4:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <prvAddNewTaskToReadyList+0x150>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <prvAddNewTaskToReadyList+0x158>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <prvAddNewTaskToReadyList+0x158>)
 8002b02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <prvAddNewTaskToReadyList+0x158>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <prvAddNewTaskToReadyList+0x94>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f004 f827 	bl	8006b68 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461c      	mov	r4, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	1ae3      	subs	r3, r4, r3
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	462b      	mov	r3, r5
 8002b3c:	f001 ff34 	bl	80049a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 f894 	bl	8006c70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <prvAddNewTaskToReadyList+0x15c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	4a2c      	ldr	r2, [pc, #176]	; (8002c08 <prvAddNewTaskToReadyList+0x15c>)
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	492b      	ldr	r1, [pc, #172]	; (8002c0c <prvAddNewTaskToReadyList+0x160>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	3204      	adds	r2, #4
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <prvAddNewTaskToReadyList+0x160>)
 8002b9e:	441a      	add	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	615a      	str	r2, [r3, #20]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	4918      	ldr	r1, [pc, #96]	; (8002c0c <prvAddNewTaskToReadyList+0x160>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c59      	adds	r1, r3, #1
 8002bb8:	4814      	ldr	r0, [pc, #80]	; (8002c0c <prvAddNewTaskToReadyList+0x160>)
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4403      	add	r3, r0
 8002bc4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bc6:	f001 fb45 	bl	8004254 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <prvAddNewTaskToReadyList+0x154>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00e      	beq.n	8002bf0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <prvAddNewTaskToReadyList+0x150>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <prvAddNewTaskToReadyList+0x164>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf8:	2000019c 	.word	0x2000019c
 8002bfc:	200000c4 	.word	0x200000c4
 8002c00:	200001a8 	.word	0x200001a8
 8002c04:	200001b8 	.word	0x200001b8
 8002c08:	200001a4 	.word	0x200001a4
 8002c0c:	200000c8 	.word	0x200000c8
 8002c10:	e000ed04 	.word	0xe000ed04

08002c14 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xTaskDelayUntil+0x2a>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	617b      	str	r3, [r7, #20]
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xTaskDelayUntil+0x46>
        __asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	613b      	str	r3, [r7, #16]
    }
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002c5a:	4b2c      	ldr	r3, [pc, #176]	; (8002d0c <xTaskDelayUntil+0xf8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <xTaskDelayUntil+0x64>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	60fb      	str	r3, [r7, #12]
    }
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002c78:	f000 f8b0 	bl	8002ddc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <xTaskDelayUntil+0xfc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a3a      	ldr	r2, [r7, #32]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d20b      	bcs.n	8002cae <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d211      	bcs.n	8002cc4 <xTaskDelayUntil+0xb0>
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d90d      	bls.n	8002cc4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cac:	e00a      	b.n	8002cc4 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69fa      	ldr	r2, [r7, #28]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d303      	bcc.n	8002cc0 <xTaskDelayUntil+0xac>
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d901      	bls.n	8002cc4 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002cd0:	2024      	movs	r0, #36	; 0x24
 8002cd2:	f003 fa2d 	bl	8006130 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fdcc 	bl	800387c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002ce4:	f000 f888 	bl	8002df8 <xTaskResumeAll>
 8002ce8:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <xTaskDelayUntil+0x100>)
 8002cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002d02:	4618      	mov	r0, r3
 8002d04:	3728      	adds	r7, #40	; 0x28
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200001c4 	.word	0x200001c4
 8002d10:	200001a0 	.word	0x200001a0
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <vTaskStartScheduler+0xa4>)
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	2282      	movs	r2, #130	; 0x82
 8002d2a:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <vTaskStartScheduler+0xa8>)
 8002d2c:	4825      	ldr	r0, [pc, #148]	; (8002dc4 <vTaskStartScheduler+0xac>)
 8002d2e:	f7ff fdd7 	bl	80028e0 <xTaskCreate>
 8002d32:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d102      	bne.n	8002d40 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002d3a:	f000 fe2b 	bl	8003994 <xTimerCreateTimerTask>
 8002d3e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d124      	bne.n	8002d90 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	60bb      	str	r3, [r7, #8]
    }
 8002d58:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <vTaskStartScheduler+0xb0>)
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <vTaskStartScheduler+0xb4>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <vTaskStartScheduler+0xb8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <vTaskStartScheduler+0xbc>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <vTaskStartScheduler+0xa4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d102      	bne.n	8002d80 <vTaskStartScheduler+0x68>
 8002d7a:	f003 fed9 	bl	8006b30 <SEGGER_SYSVIEW_OnIdle>
 8002d7e:	e004      	b.n	8002d8a <vTaskStartScheduler+0x72>
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <vTaskStartScheduler+0xbc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 ff31 	bl	8006bec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002d8a:	f001 f913 	bl	8003fb4 <xPortStartScheduler>
 8002d8e:	e00e      	b.n	8002dae <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d10a      	bne.n	8002dae <vTaskStartScheduler+0x96>
        __asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	607b      	str	r3, [r7, #4]
    }
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <vTaskStartScheduler+0xc0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200001c0 	.word	0x200001c0
 8002dc0:	080071dc 	.word	0x080071dc
 8002dc4:	080036dd 	.word	0x080036dd
 8002dc8:	200001bc 	.word	0x200001bc
 8002dcc:	200001a8 	.word	0x200001a8
 8002dd0:	200001a0 	.word	0x200001a0
 8002dd4:	200000c4 	.word	0x200000c4
 8002dd8:	2000000c 	.word	0x2000000c

08002ddc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002de0:	4b04      	ldr	r3, [pc, #16]	; (8002df4 <vTaskSuspendAll+0x18>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	4a03      	ldr	r2, [pc, #12]	; (8002df4 <vTaskSuspendAll+0x18>)
 8002de8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	200001c4 	.word	0x200001c4

08002df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <xTaskResumeAll+0x1dc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <xTaskResumeAll+0x2c>
        __asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	607b      	str	r3, [r7, #4]
    }
 8002e20:	bf00      	nop
 8002e22:	e7fe      	b.n	8002e22 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e24:	f001 f9e6 	bl	80041f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e28:	4b6a      	ldr	r3, [pc, #424]	; (8002fd4 <xTaskResumeAll+0x1dc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	4a69      	ldr	r2, [pc, #420]	; (8002fd4 <xTaskResumeAll+0x1dc>)
 8002e30:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e32:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <xTaskResumeAll+0x1dc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 80c4 	bne.w	8002fc4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e3c:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <xTaskResumeAll+0x1e0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80bf 	beq.w	8002fc4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e46:	e08e      	b.n	8002f66 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e48:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <xTaskResumeAll+0x1e4>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	6a12      	ldr	r2, [r2, #32]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	69d2      	ldr	r2, [r2, #28]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3318      	adds	r3, #24
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d103      	bne.n	8002e7e <xTaskResumeAll+0x86>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	68d2      	ldr	r2, [r2, #12]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	6892      	ldr	r2, [r2, #8]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d103      	bne.n	8002ebc <xTaskResumeAll+0xc4>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fece 	bl	8006c70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2201      	movs	r2, #1
 8002eda:	409a      	lsls	r2, r3
 8002edc:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <xTaskResumeAll+0x1e8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <xTaskResumeAll+0x1e8>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eea:	493e      	ldr	r1, [pc, #248]	; (8002fe4 <xTaskResumeAll+0x1ec>)
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	3204      	adds	r2, #4
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	1d1a      	adds	r2, r3, #4
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <xTaskResumeAll+0x1ec>)
 8002f2a:	441a      	add	r2, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	615a      	str	r2, [r3, #20]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	492b      	ldr	r1, [pc, #172]	; (8002fe4 <xTaskResumeAll+0x1ec>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1c59      	adds	r1, r3, #1
 8002f44:	4827      	ldr	r0, [pc, #156]	; (8002fe4 <xTaskResumeAll+0x1ec>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4403      	add	r3, r0
 8002f50:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <xTaskResumeAll+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d302      	bcc.n	8002f66 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f60:	4b22      	ldr	r3, [pc, #136]	; (8002fec <xTaskResumeAll+0x1f4>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <xTaskResumeAll+0x1e4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f47f af6c 	bne.w	8002e48 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f76:	f000 fc47 	bl	8003808 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <xTaskResumeAll+0x1f8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f86:	f000 f859 	bl	800303c <xTaskIncrementTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <xTaskResumeAll+0x1f4>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f1      	bne.n	8002f86 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <xTaskResumeAll+0x1f8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <xTaskResumeAll+0x1f4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <xTaskResumeAll+0x1fc>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fc4:	f001 f946 	bl	8004254 <vPortExitCritical>

    return xAlreadyYielded;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200001c4 	.word	0x200001c4
 8002fd8:	2000019c 	.word	0x2000019c
 8002fdc:	2000015c 	.word	0x2000015c
 8002fe0:	200001a4 	.word	0x200001a4
 8002fe4:	200000c8 	.word	0x200000c8
 8002fe8:	200000c4 	.word	0x200000c4
 8002fec:	200001b0 	.word	0x200001b0
 8002ff0:	200001ac 	.word	0x200001ac
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <xTaskGetTickCount+0x1c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003004:	687b      	ldr	r3, [r7, #4]
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	200001a0 	.word	0x200001a0

08003018 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800301e:	f001 f9d5 	bl	80043cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <xTaskGetTickCountFromISR+0x20>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800302c:	683b      	ldr	r3, [r7, #0]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200001a0 	.word	0x200001a0

0800303c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003046:	4b7f      	ldr	r3, [pc, #508]	; (8003244 <xTaskIncrementTick+0x208>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80f0 	bne.w	8003230 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003050:	4b7d      	ldr	r3, [pc, #500]	; (8003248 <xTaskIncrementTick+0x20c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003058:	4a7b      	ldr	r2, [pc, #492]	; (8003248 <xTaskIncrementTick+0x20c>)
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d120      	bne.n	80030a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <xTaskIncrementTick+0x210>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <xTaskIncrementTick+0x48>
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
    }
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <xTaskIncrementTick+0x46>
 8003084:	4b71      	ldr	r3, [pc, #452]	; (800324c <xTaskIncrementTick+0x210>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	4b71      	ldr	r3, [pc, #452]	; (8003250 <xTaskIncrementTick+0x214>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	; (800324c <xTaskIncrementTick+0x210>)
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4a6f      	ldr	r2, [pc, #444]	; (8003250 <xTaskIncrementTick+0x214>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b6e      	ldr	r3, [pc, #440]	; (8003254 <xTaskIncrementTick+0x218>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a6d      	ldr	r2, [pc, #436]	; (8003254 <xTaskIncrementTick+0x218>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	f000 fbb1 	bl	8003808 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030a6:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <xTaskIncrementTick+0x21c>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f0c0 80aa 	bcc.w	8003206 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b2:	4b66      	ldr	r3, [pc, #408]	; (800324c <xTaskIncrementTick+0x210>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030bc:	4b66      	ldr	r3, [pc, #408]	; (8003258 <xTaskIncrementTick+0x21c>)
 80030be:	f04f 32ff 	mov.w	r2, #4294967295
 80030c2:	601a      	str	r2, [r3, #0]
                    break;
 80030c4:	e09f      	b.n	8003206 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c6:	4b61      	ldr	r3, [pc, #388]	; (800324c <xTaskIncrementTick+0x210>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d203      	bcs.n	80030e6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030de:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <xTaskIncrementTick+0x21c>)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030e4:	e08f      	b.n	8003206 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	68d2      	ldr	r2, [r2, #12]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	3304      	adds	r3, #4
 8003108:	429a      	cmp	r2, r3
 800310a:	d103      	bne.n	8003114 <xTaskIncrementTick+0xd8>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2200      	movs	r2, #0
 8003118:	615a      	str	r2, [r3, #20]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1e5a      	subs	r2, r3, #1
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01e      	beq.n	800316a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	6a12      	ldr	r2, [r2, #32]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	69d2      	ldr	r2, [r2, #28]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3318      	adds	r3, #24
 800314e:	429a      	cmp	r2, r3
 8003150:	d103      	bne.n	800315a <xTaskIncrementTick+0x11e>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fd7f 	bl	8006c70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	2201      	movs	r2, #1
 8003178:	409a      	lsls	r2, r3
 800317a:	4b38      	ldr	r3, [pc, #224]	; (800325c <xTaskIncrementTick+0x220>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	4a36      	ldr	r2, [pc, #216]	; (800325c <xTaskIncrementTick+0x220>)
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	4935      	ldr	r1, [pc, #212]	; (8003260 <xTaskIncrementTick+0x224>)
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3304      	adds	r3, #4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	3204      	adds	r2, #4
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	1d1a      	adds	r2, r3, #4
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4a26      	ldr	r2, [pc, #152]	; (8003260 <xTaskIncrementTick+0x224>)
 80031c8:	441a      	add	r2, r3
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	615a      	str	r2, [r3, #20]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	4923      	ldr	r1, [pc, #140]	; (8003260 <xTaskIncrementTick+0x224>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1c59      	adds	r1, r3, #1
 80031e2:	481f      	ldr	r0, [pc, #124]	; (8003260 <xTaskIncrementTick+0x224>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4403      	add	r3, r0
 80031ee:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <xTaskIncrementTick+0x228>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	f4ff af59 	bcc.w	80030b2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003200:	2301      	movs	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003204:	e755      	b.n	80030b2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003206:	4b17      	ldr	r3, [pc, #92]	; (8003264 <xTaskIncrementTick+0x228>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4914      	ldr	r1, [pc, #80]	; (8003260 <xTaskIncrementTick+0x224>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d901      	bls.n	8003222 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 800321e:	2301      	movs	r3, #1
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <xTaskIncrementTick+0x22c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 800322a:	2301      	movs	r3, #1
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e004      	b.n	800323a <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <xTaskIncrementTick+0x230>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	4a0d      	ldr	r2, [pc, #52]	; (800326c <xTaskIncrementTick+0x230>)
 8003238:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200001c4 	.word	0x200001c4
 8003248:	200001a0 	.word	0x200001a0
 800324c:	20000154 	.word	0x20000154
 8003250:	20000158 	.word	0x20000158
 8003254:	200001b4 	.word	0x200001b4
 8003258:	200001bc 	.word	0x200001bc
 800325c:	200001a4 	.word	0x200001a4
 8003260:	200000c8 	.word	0x200000c8
 8003264:	200000c4 	.word	0x200000c4
 8003268:	200001b0 	.word	0x200001b0
 800326c:	200001ac 	.word	0x200001ac

08003270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <vTaskSwitchContext+0xbc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <vTaskSwitchContext+0xc0>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003284:	e04d      	b.n	8003322 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <vTaskSwitchContext+0xc0>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <vTaskSwitchContext+0xc4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800329a:	7afb      	ldrb	r3, [r7, #11]
 800329c:	f1c3 031f 	rsb	r3, r3, #31
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4925      	ldr	r1, [pc, #148]	; (8003338 <vTaskSwitchContext+0xc8>)
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <vTaskSwitchContext+0x5c>
        __asm volatile
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	607b      	str	r3, [r7, #4]
    }
 80032c8:	bf00      	nop
 80032ca:	e7fe      	b.n	80032ca <vTaskSwitchContext+0x5a>
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a18      	ldr	r2, [pc, #96]	; (8003338 <vTaskSwitchContext+0xc8>)
 80032d8:	4413      	add	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3308      	adds	r3, #8
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d104      	bne.n	80032fc <vTaskSwitchContext+0x8c>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	4a0e      	ldr	r2, [pc, #56]	; (800333c <vTaskSwitchContext+0xcc>)
 8003304:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <vTaskSwitchContext+0xcc>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <vTaskSwitchContext+0xd0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <vTaskSwitchContext+0xa8>
 8003312:	f003 fc0d 	bl	8006b30 <SEGGER_SYSVIEW_OnIdle>
}
 8003316:	e004      	b.n	8003322 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <vTaskSwitchContext+0xcc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 fc65 	bl	8006bec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200001c4 	.word	0x200001c4
 8003330:	200001b0 	.word	0x200001b0
 8003334:	200001a4 	.word	0x200001a4
 8003338:	200000c8 	.word	0x200000c8
 800333c:	200000c4 	.word	0x200000c4
 8003340:	200001c0 	.word	0x200001c0

08003344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60fb      	str	r3, [r7, #12]
    }
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <vTaskPlaceOnEventList+0x44>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3318      	adds	r3, #24
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe ff21 	bl	80021ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003378:	2101      	movs	r1, #1
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	f000 fa7e 	bl	800387c <prvAddCurrentTaskToDelayedList>
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200000c4 	.word	0x200000c4

0800338c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	613b      	str	r3, [r7, #16]
    }
 80033b0:	bf00      	nop
 80033b2:	e7fe      	b.n	80033b2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	61da      	str	r2, [r3, #28]
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	6892      	ldr	r2, [r2, #8]
 80033ca:	621a      	str	r2, [r3, #32]
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	3218      	adds	r2, #24
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f103 0218 	add.w	r2, r3, #24
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <vTaskPlaceOnEventListRestricted+0x8c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003402:	2024      	movs	r0, #36	; 0x24
 8003404:	f002 fe94 	bl	8006130 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	68b8      	ldr	r0, [r7, #8]
 800340c:	f000 fa36 	bl	800387c <prvAddCurrentTaskToDelayedList>
    }
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200000c4 	.word	0x200000c4

0800341c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	60fb      	str	r3, [r7, #12]
    }
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	6a12      	ldr	r2, [r2, #32]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	69d2      	ldr	r2, [r2, #28]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	3318      	adds	r3, #24
 800346a:	429a      	cmp	r2, r3
 800346c:	d103      	bne.n	8003476 <xTaskRemoveFromEventList+0x5a>
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	2200      	movs	r2, #0
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003486:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <xTaskRemoveFromEventList+0x198>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d162      	bne.n	8003554 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	6a3a      	ldr	r2, [r7, #32]
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	6892      	ldr	r2, [r2, #8]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	3304      	adds	r3, #4
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d103      	bne.n	80034bc <xTaskRemoveFromEventList+0xa0>
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	2200      	movs	r2, #0
 80034c0:	615a      	str	r2, [r3, #20]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 fbce 	bl	8006c70 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <xTaskRemoveFromEventList+0x19c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	4a35      	ldr	r2, [pc, #212]	; (80035b8 <xTaskRemoveFromEventList+0x19c>)
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ea:	4934      	ldr	r1, [pc, #208]	; (80035bc <xTaskRemoveFromEventList+0x1a0>)
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3304      	adds	r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	3204      	adds	r2, #4
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	1d1a      	adds	r2, r3, #4
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a24      	ldr	r2, [pc, #144]	; (80035bc <xTaskRemoveFromEventList+0x1a0>)
 800352a:	441a      	add	r2, r3
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	615a      	str	r2, [r3, #20]
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4921      	ldr	r1, [pc, #132]	; (80035bc <xTaskRemoveFromEventList+0x1a0>)
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1c59      	adds	r1, r3, #1
 8003544:	481d      	ldr	r0, [pc, #116]	; (80035bc <xTaskRemoveFromEventList+0x1a0>)
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4403      	add	r3, r0
 8003550:	6019      	str	r1, [r3, #0]
 8003552:	e01b      	b.n	800358c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <xTaskRemoveFromEventList+0x1a4>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	61da      	str	r2, [r3, #28]
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	621a      	str	r2, [r3, #32]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	3218      	adds	r2, #24
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f103 0218 	add.w	r2, r3, #24
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <xTaskRemoveFromEventList+0x1a4>)
 8003580:	629a      	str	r2, [r3, #40]	; 0x28
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <xTaskRemoveFromEventList+0x1a4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <xTaskRemoveFromEventList+0x1a4>)
 800358a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <xTaskRemoveFromEventList+0x1a8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	429a      	cmp	r2, r3
 8003598:	d905      	bls.n	80035a6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800359a:	2301      	movs	r3, #1
 800359c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <xTaskRemoveFromEventList+0x1ac>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	e001      	b.n	80035aa <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	200001c4 	.word	0x200001c4
 80035b8:	200001a4 	.word	0x200001a4
 80035bc:	200000c8 	.word	0x200000c8
 80035c0:	2000015c 	.word	0x2000015c
 80035c4:	200000c4 	.word	0x200000c4
 80035c8:	200001b0 	.word	0x200001b0

080035cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <vTaskInternalSetTimeOutState+0x24>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035dc:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <vTaskInternalSetTimeOutState+0x28>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	200001b4 	.word	0x200001b4
 80035f4:	200001a0 	.word	0x200001a0

080035f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	613b      	str	r3, [r7, #16]
    }
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	60fb      	str	r3, [r7, #12]
    }
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800363a:	f000 fddb 	bl	80041f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <xTaskCheckForTimeOut+0xc4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d102      	bne.n	800365e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e026      	b.n	80036ac <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <xTaskCheckForTimeOut+0xc8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d00a      	beq.n	8003680 <xTaskCheckForTimeOut+0x88>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	429a      	cmp	r2, r3
 8003672:	d305      	bcc.n	8003680 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e015      	b.n	80036ac <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	429a      	cmp	r2, r3
 8003688:	d20b      	bcs.n	80036a2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad2      	subs	r2, r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff ff98 	bl	80035cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	e004      	b.n	80036ac <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036ac:	f000 fdd2 	bl	8004254 <vPortExitCritical>

    return xReturn;
 80036b0:	69fb      	ldr	r3, [r7, #28]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200001a0 	.word	0x200001a0
 80036c0:	200001b4 	.word	0x200001b4

080036c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <vTaskMissedYield+0x14>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	200001b0 	.word	0x200001b0

080036dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036e4:	f000 f852 	bl	800378c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <prvIdleTask+0x28>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d9f9      	bls.n	80036e4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <prvIdleTask+0x2c>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003700:	e7f0      	b.n	80036e4 <prvIdleTask+0x8>
 8003702:	bf00      	nop
 8003704:	200000c8 	.word	0x200000c8
 8003708:	e000ed04 	.word	0xe000ed04

0800370c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	e00c      	b.n	8003732 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <prvInitialiseTaskLists+0x60>)
 8003724:	4413      	add	r3, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fd1a 	bl	8002160 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3301      	adds	r3, #1
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d9ef      	bls.n	8003718 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003738:	480d      	ldr	r0, [pc, #52]	; (8003770 <prvInitialiseTaskLists+0x64>)
 800373a:	f7fe fd11 	bl	8002160 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800373e:	480d      	ldr	r0, [pc, #52]	; (8003774 <prvInitialiseTaskLists+0x68>)
 8003740:	f7fe fd0e 	bl	8002160 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003744:	480c      	ldr	r0, [pc, #48]	; (8003778 <prvInitialiseTaskLists+0x6c>)
 8003746:	f7fe fd0b 	bl	8002160 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800374a:	480c      	ldr	r0, [pc, #48]	; (800377c <prvInitialiseTaskLists+0x70>)
 800374c:	f7fe fd08 	bl	8002160 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003750:	480b      	ldr	r0, [pc, #44]	; (8003780 <prvInitialiseTaskLists+0x74>)
 8003752:	f7fe fd05 	bl	8002160 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <prvInitialiseTaskLists+0x78>)
 8003758:	4a05      	ldr	r2, [pc, #20]	; (8003770 <prvInitialiseTaskLists+0x64>)
 800375a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <prvInitialiseTaskLists+0x7c>)
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <prvInitialiseTaskLists+0x68>)
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200000c8 	.word	0x200000c8
 8003770:	2000012c 	.word	0x2000012c
 8003774:	20000140 	.word	0x20000140
 8003778:	2000015c 	.word	0x2000015c
 800377c:	20000170 	.word	0x20000170
 8003780:	20000188 	.word	0x20000188
 8003784:	20000154 	.word	0x20000154
 8003788:	20000158 	.word	0x20000158

0800378c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003792:	e019      	b.n	80037c8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003794:	f000 fd2e 	bl	80041f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003798:	4b10      	ldr	r3, [pc, #64]	; (80037dc <prvCheckTasksWaitingTermination+0x50>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe fd41 	bl	800222c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <prvCheckTasksWaitingTermination+0x54>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <prvCheckTasksWaitingTermination+0x54>)
 80037b2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <prvCheckTasksWaitingTermination+0x58>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <prvCheckTasksWaitingTermination+0x58>)
 80037bc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80037be:	f000 fd49 	bl	8004254 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f810 	bl	80037e8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <prvCheckTasksWaitingTermination+0x58>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e1      	bne.n	8003794 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000170 	.word	0x20000170
 80037e0:	2000019c 	.word	0x2000019c
 80037e4:	20000184 	.word	0x20000184

080037e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 ff09 	bl	800460c <vPortFree>
                vPortFree( pxTCB );
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 ff06 	bl	800460c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <prvResetNextTaskUnblockTime+0x30>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <prvResetNextTaskUnblockTime+0x34>)
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800381e:	e005      	b.n	800382c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <prvResetNextTaskUnblockTime+0x30>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <prvResetNextTaskUnblockTime+0x34>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000154 	.word	0x20000154
 800383c:	200001bc 	.word	0x200001bc

08003840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003846:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <xTaskGetSchedulerState+0x34>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800384e:	2301      	movs	r3, #1
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	e008      	b.n	8003866 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <xTaskGetSchedulerState+0x38>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800385c:	2302      	movs	r3, #2
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	e001      	b.n	8003866 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003866:	687b      	ldr	r3, [r7, #4]
    }
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	200001a8 	.word	0x200001a8
 8003878:	200001c4 	.word	0x200001c4

0800387c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003886:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800388c:	4b3b      	ldr	r3, [pc, #236]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3304      	adds	r3, #4
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fcca 	bl	800222c <uxListRemove>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800389e:	4b37      	ldr	r3, [pc, #220]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	2201      	movs	r2, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43da      	mvns	r2, r3
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <prvAddCurrentTaskToDelayedList+0x104>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4013      	ands	r3, r2
 80038b2:	4a33      	ldr	r2, [pc, #204]	; (8003980 <prvAddCurrentTaskToDelayedList+0x104>)
 80038b4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d124      	bne.n	8003908 <prvAddCurrentTaskToDelayedList+0x8c>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d021      	beq.n	8003908 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c4:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <prvAddCurrentTaskToDelayedList+0x108>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	3204      	adds	r2, #4
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	1d1a      	adds	r2, r3, #4
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a23      	ldr	r2, [pc, #140]	; (8003984 <prvAddCurrentTaskToDelayedList+0x108>)
 80038f8:	615a      	str	r2, [r3, #20]
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <prvAddCurrentTaskToDelayedList+0x108>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3301      	adds	r3, #1
 8003900:	4a20      	ldr	r2, [pc, #128]	; (8003984 <prvAddCurrentTaskToDelayedList+0x108>)
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003906:	e032      	b.n	800396e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003910:	4b1a      	ldr	r3, [pc, #104]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	429a      	cmp	r2, r3
 800391e:	d20f      	bcs.n	8003940 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003920:	4b16      	ldr	r3, [pc, #88]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2104      	movs	r1, #4
 8003926:	4618      	mov	r0, r3
 8003928:	f003 f9e4 	bl	8006cf4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <prvAddCurrentTaskToDelayedList+0x10c>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fe fc3e 	bl	80021ba <vListInsert>
}
 800393e:	e016      	b.n	800396e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003940:	4b0e      	ldr	r3, [pc, #56]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2104      	movs	r1, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f003 f9d4 	bl	8006cf4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <prvAddCurrentTaskToDelayedList+0x110>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <prvAddCurrentTaskToDelayedList+0x100>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3304      	adds	r3, #4
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7fe fc2e 	bl	80021ba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <prvAddCurrentTaskToDelayedList+0x114>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	429a      	cmp	r2, r3
 8003966:	d202      	bcs.n	800396e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003968:	4a09      	ldr	r2, [pc, #36]	; (8003990 <prvAddCurrentTaskToDelayedList+0x114>)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6013      	str	r3, [r2, #0]
}
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200001a0 	.word	0x200001a0
 800397c:	200000c4 	.word	0x200000c4
 8003980:	200001a4 	.word	0x200001a4
 8003984:	20000188 	.word	0x20000188
 8003988:	20000158 	.word	0x20000158
 800398c:	20000154 	.word	0x20000154
 8003990:	200001bc 	.word	0x200001bc

08003994 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800399e:	f000 fa47 	bl	8003e30 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <xTimerCreateTimerTask+0x54>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <xTimerCreateTimerTask+0x58>)
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	2302      	movs	r3, #2
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039b8:	490d      	ldr	r1, [pc, #52]	; (80039f0 <xTimerCreateTimerTask+0x5c>)
 80039ba:	480e      	ldr	r0, [pc, #56]	; (80039f4 <xTimerCreateTimerTask+0x60>)
 80039bc:	f7fe ff90 	bl	80028e0 <xTaskCreate>
 80039c0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	603b      	str	r3, [r7, #0]
    }
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039de:	687b      	ldr	r3, [r7, #4]
    }
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200001f8 	.word	0x200001f8
 80039ec:	200001fc 	.word	0x200001fc
 80039f0:	080071e4 	.word	0x080071e4
 80039f4:	08003a9d 	.word	0x08003a9d

080039f8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a04:	e008      	b.n	8003a18 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	18d1      	adds	r1, r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f8dd 	bl	8003be4 <prvInsertTimerInActiveList>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ea      	bne.n	8003a06 <prvReloadTimer+0xe>
        }
    }
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <prvProcessExpiredTimer+0x5c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe fbe9 	bl	800222c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f7ff ffc3 	bl	80039f8 <prvReloadTimer>
 8003a72:	e008      	b.n	8003a86 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	4798      	blx	r3
    }
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	200001f0 	.word	0x200001f0

08003a9c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003aa4:	f107 0308 	add.w	r3, r7, #8
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 f857 	bl	8003b5c <prvGetNextExpireTime>
 8003aae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f803 	bl	8003ac0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003aba:	f000 f8d5 	bl	8003c68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003abe:	e7f1      	b.n	8003aa4 <prvTimerTask+0x8>

08003ac0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003aca:	f7ff f987 	bl	8002ddc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f866 	bl	8003ba4 <prvSampleTimeNow>
 8003ad8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d130      	bne.n	8003b42 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <prvProcessTimerOrBlockTask+0x3c>
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d806      	bhi.n	8003afc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003aee:	f7ff f983 	bl	8002df8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003af2:	68f9      	ldr	r1, [r7, #12]
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ffa1 	bl	8003a3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003afa:	e024      	b.n	8003b46 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d008      	beq.n	8003b14 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <prvProcessTimerOrBlockTask+0x90>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <prvProcessTimerOrBlockTask+0x50>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <prvProcessTimerOrBlockTask+0x52>
 8003b10:	2300      	movs	r3, #0
 8003b12:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <prvProcessTimerOrBlockTask+0x94>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f7fe fea9 	bl	8002878 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003b26:	f7ff f967 	bl	8002df8 <xTaskResumeAll>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <prvProcessTimerOrBlockTask+0x98>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
    }
 8003b40:	e001      	b.n	8003b46 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b42:	f7ff f959 	bl	8002df8 <xTaskResumeAll>
    }
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200001f4 	.word	0x200001f4
 8003b54:	200001f8 	.word	0x200001f8
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <prvGetNextExpireTime+0x44>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <prvGetNextExpireTime+0x16>
 8003b6e:	2201      	movs	r2, #1
 8003b70:	e000      	b.n	8003b74 <prvGetNextExpireTime+0x18>
 8003b72:	2200      	movs	r2, #0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <prvGetNextExpireTime+0x44>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	e001      	b.n	8003b90 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b90:	68fb      	ldr	r3, [r7, #12]
    }
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	200001f0 	.word	0x200001f0

08003ba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003bac:	f7ff fa24 	bl	8002ff8 <xTaskGetTickCount>
 8003bb0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <prvSampleTimeNow+0x3c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d205      	bcs.n	8003bc8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003bbc:	f000 f912 	bl	8003de4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e002      	b.n	8003bce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003bce:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <prvSampleTimeNow+0x3c>)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    }
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000200 	.word	0x20000200

08003be4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d812      	bhi.n	8003c30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad2      	subs	r2, r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e01b      	b.n	8003c56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <prvInsertTimerInActiveList+0x7c>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f7fe fac6 	bl	80021ba <vListInsert>
 8003c2e:	e012      	b.n	8003c56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d206      	bcs.n	8003c46 <prvInsertTimerInActiveList+0x62>
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d302      	bcc.n	8003c46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e007      	b.n	8003c56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <prvInsertTimerInActiveList+0x80>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7fe fab2 	bl	80021ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c56:	697b      	ldr	r3, [r7, #20]
    }
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	200001f4 	.word	0x200001f4
 8003c64:	200001f0 	.word	0x200001f0

08003c68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c6e:	e0a6      	b.n	8003dbe <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f2c0 80a3 	blt.w	8003dbe <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe facf 	bl	800222c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c8e:	1d3b      	adds	r3, r7, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff ff87 	bl	8003ba4 <prvSampleTimeNow>
 8003c96:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	f200 808d 	bhi.w	8003dbc <prvProcessReceivedCommands+0x154>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <prvProcessReceivedCommands+0x40>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ccd 	.word	0x08003ccd
 8003cb0:	08003d35 	.word	0x08003d35
 8003cb4:	08003d49 	.word	0x08003d49
 8003cb8:	08003d93 	.word	0x08003d93
 8003cbc:	08003ccd 	.word	0x08003ccd
 8003cc0:	08003ccd 	.word	0x08003ccd
 8003cc4:	08003d35 	.word	0x08003d35
 8003cc8:	08003d49 	.word	0x08003d49
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	18d1      	adds	r1, r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	69f8      	ldr	r0, [r7, #28]
 8003cec:	f7ff ff7a 	bl	8003be4 <prvInsertTimerInActiveList>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d063      	beq.n	8003dbe <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d009      	beq.n	8003d18 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	69f8      	ldr	r0, [r7, #28]
 8003d12:	f7ff fe71 	bl	80039f8 <prvReloadTimer>
 8003d16:	e008      	b.n	8003d2a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d1e:	f023 0301 	bic.w	r3, r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	69f8      	ldr	r0, [r7, #28]
 8003d30:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003d32:	e044      	b.n	8003dbe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d46:	e03a      	b.n	8003dbe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	617b      	str	r3, [r7, #20]
    }
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	18d1      	adds	r1, r2, r3
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	69f8      	ldr	r0, [r7, #28]
 8003d8c:	f7ff ff2a 	bl	8003be4 <prvInsertTimerInActiveList>
                        break;
 8003d90:	e015      	b.n	8003dbe <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d103      	bne.n	8003da8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003da0:	69f8      	ldr	r0, [r7, #28]
 8003da2:	f000 fc33 	bl	800460c <vPortFree>
 8003da6:	e00a      	b.n	8003dbe <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003dba:	e000      	b.n	8003dbe <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003dbc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <prvProcessReceivedCommands+0x178>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f107 0108 	add.w	r1, r7, #8
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fe fb61 	bl	8002490 <xQueueReceive>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f af4d 	bne.w	8003c70 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	200001f8 	.word	0x200001f8

08003de4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dea:	e009      	b.n	8003e00 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <prvSwitchTimerLists+0x44>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003df6:	f04f 31ff 	mov.w	r1, #4294967295
 8003dfa:	6838      	ldr	r0, [r7, #0]
 8003dfc:	f7ff fe1e 	bl	8003a3c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <prvSwitchTimerLists+0x44>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003e0a:	4b07      	ldr	r3, [pc, #28]	; (8003e28 <prvSwitchTimerLists+0x44>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <prvSwitchTimerLists+0x48>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <prvSwitchTimerLists+0x44>)
 8003e16:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003e18:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <prvSwitchTimerLists+0x48>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6013      	str	r3, [r2, #0]
    }
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200001f0 	.word	0x200001f0
 8003e2c:	200001f4 	.word	0x200001f4

08003e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e34:	f000 f9de 	bl	80041f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d11d      	bne.n	8003e7c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e40:	4811      	ldr	r0, [pc, #68]	; (8003e88 <prvCheckForValidListAndQueue+0x58>)
 8003e42:	f7fe f98d 	bl	8002160 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e46:	4811      	ldr	r0, [pc, #68]	; (8003e8c <prvCheckForValidListAndQueue+0x5c>)
 8003e48:	f7fe f98a 	bl	8002160 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e4c:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <prvCheckForValidListAndQueue+0x60>)
 8003e4e:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <prvCheckForValidListAndQueue+0x58>)
 8003e50:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <prvCheckForValidListAndQueue+0x64>)
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <prvCheckForValidListAndQueue+0x5c>)
 8003e56:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e58:	2200      	movs	r2, #0
 8003e5a:	210c      	movs	r1, #12
 8003e5c:	200a      	movs	r0, #10
 8003e5e:	f7fe fa9f 	bl	80023a0 <xQueueGenericCreate>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e66:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <prvCheckForValidListAndQueue+0x54>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4908      	ldr	r1, [pc, #32]	; (8003e98 <prvCheckForValidListAndQueue+0x68>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fca8 	bl	80027cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e7c:	f000 f9ea 	bl	8004254 <vPortExitCritical>
    }
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	200001f8 	.word	0x200001f8
 8003e88:	200001c8 	.word	0x200001c8
 8003e8c:	200001dc 	.word	0x200001dc
 8003e90:	200001f0 	.word	0x200001f0
 8003e94:	200001f4 	.word	0x200001f4
 8003e98:	080071ec 	.word	0x080071ec

08003e9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b04      	subs	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b04      	subs	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ecc:	4a0c      	ldr	r2, [pc, #48]	; (8003f00 <pxPortInitialiseStack+0x64>)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3b14      	subs	r3, #20
 8003ed6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f06f 0202 	mvn.w	r2, #2
 8003eea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b20      	subs	r3, #32
 8003ef0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	08003f05 	.word	0x08003f05

08003f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <prvTaskExitError+0x54>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d00a      	beq.n	8003f2e <prvTaskExitError+0x2a>
        __asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1c:	f383 8811 	msr	BASEPRI, r3
 8003f20:	f3bf 8f6f 	isb	sy
 8003f24:	f3bf 8f4f 	dsb	sy
 8003f28:	60fb      	str	r3, [r7, #12]
    }
 8003f2a:	bf00      	nop
 8003f2c:	e7fe      	b.n	8003f2c <prvTaskExitError+0x28>
        __asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	60bb      	str	r3, [r7, #8]
    }
 8003f40:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f42:	bf00      	nop
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0fc      	beq.n	8003f44 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000010 	.word	0x20000010
 8003f5c:	00000000 	.word	0x00000000

08003f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <pxCurrentTCBConst2>)
 8003f62:	6819      	ldr	r1, [r3, #0]
 8003f64:	6808      	ldr	r0, [r1, #0]
 8003f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	f380 8809 	msr	PSP, r0
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8811 	msr	BASEPRI, r0
 8003f7a:	4770      	bx	lr
 8003f7c:	f3af 8000 	nop.w

08003f80 <pxCurrentTCBConst2>:
 8003f80:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop

08003f88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f88:	4808      	ldr	r0, [pc, #32]	; (8003fac <prvPortStartFirstTask+0x24>)
 8003f8a:	6800      	ldr	r0, [r0, #0]
 8003f8c:	6800      	ldr	r0, [r0, #0]
 8003f8e:	f380 8808 	msr	MSP, r0
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f380 8814 	msr	CONTROL, r0
 8003f9a:	b662      	cpsie	i
 8003f9c:	b661      	cpsie	f
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	df00      	svc	0
 8003fa8:	bf00      	nop
 8003faa:	0000      	.short	0x0000
 8003fac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop

08003fb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fba:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <xPortStartScheduler+0x120>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <xPortStartScheduler+0x124>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10a      	bne.n	8003fda <xPortStartScheduler+0x26>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	613b      	str	r3, [r7, #16]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <xPortStartScheduler+0x120>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a3f      	ldr	r2, [pc, #252]	; (80040dc <xPortStartScheduler+0x128>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10a      	bne.n	8003ffa <xPortStartScheduler+0x46>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ffa:	4b39      	ldr	r3, [pc, #228]	; (80040e0 <xPortStartScheduler+0x12c>)
 8003ffc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800401c:	b2da      	uxtb	r2, r3
 800401e:	4b31      	ldr	r3, [pc, #196]	; (80040e4 <xPortStartScheduler+0x130>)
 8004020:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004022:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <xPortStartScheduler+0x134>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004028:	e009      	b.n	800403e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <xPortStartScheduler+0x134>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3b01      	subs	r3, #1
 8004030:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <xPortStartScheduler+0x134>)
 8004032:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d0ef      	beq.n	800402a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <xPortStartScheduler+0x134>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	d00a      	beq.n	800406c <xPortStartScheduler+0xb8>
        __asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	60bb      	str	r3, [r7, #8]
    }
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <xPortStartScheduler+0x134>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <xPortStartScheduler+0x134>)
 8004074:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <xPortStartScheduler+0x134>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800407e:	4a1a      	ldr	r2, [pc, #104]	; (80040e8 <xPortStartScheduler+0x134>)
 8004080:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <xPortStartScheduler+0x138>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <xPortStartScheduler+0x138>)
 8004090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004094:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <xPortStartScheduler+0x138>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a14      	ldr	r2, [pc, #80]	; (80040ec <xPortStartScheduler+0x138>)
 800409c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040a2:	f000 f963 	bl	800436c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <xPortStartScheduler+0x13c>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80040ac:	f000 f982 	bl	80043b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <xPortStartScheduler+0x140>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <xPortStartScheduler+0x140>)
 80040b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040bc:	f7ff ff64 	bl	8003f88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040c0:	f7ff f8d6 	bl	8003270 <vTaskSwitchContext>
    prvTaskExitError();
 80040c4:	f7ff ff1e 	bl	8003f04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	e000ed00 	.word	0xe000ed00
 80040d8:	410fc271 	.word	0x410fc271
 80040dc:	410fc270 	.word	0x410fc270
 80040e0:	e000e400 	.word	0xe000e400
 80040e4:	20000204 	.word	0x20000204
 80040e8:	20000208 	.word	0x20000208
 80040ec:	e000ed20 	.word	0xe000ed20
 80040f0:	20000010 	.word	0x20000010
 80040f4:	e000ef34 	.word	0xe000ef34

080040f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <vInitPrioGroupValue+0xe4>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a37      	ldr	r2, [pc, #220]	; (80041e0 <vInitPrioGroupValue+0xe8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10a      	bne.n	800411e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	613b      	str	r3, [r7, #16]
    }
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800411e:	4b2f      	ldr	r3, [pc, #188]	; (80041dc <vInitPrioGroupValue+0xe4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <vInitPrioGroupValue+0xec>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d10a      	bne.n	800413e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
    }
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <vInitPrioGroupValue+0xf0>)
 8004140:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	22ff      	movs	r2, #255	; 0xff
 800414e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <vInitPrioGroupValue+0xf4>)
 8004164:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004168:	2207      	movs	r2, #7
 800416a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416c:	e009      	b.n	8004182 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800416e:	4b20      	ldr	r3, [pc, #128]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3b01      	subs	r3, #1
 8004174:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004176:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	b2db      	uxtb	r3, r3
 8004180:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d0ef      	beq.n	800416e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1c3 0307 	rsb	r3, r3, #7
 8004196:	2b04      	cmp	r3, #4
 8004198:	d00a      	beq.n	80041b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	60bb      	str	r3, [r7, #8]
    }
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	4a0e      	ldr	r2, [pc, #56]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041c2:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <vInitPrioGroupValue+0xf8>)
 80041c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000ed00 	.word	0xe000ed00
 80041e0:	410fc271 	.word	0x410fc271
 80041e4:	410fc270 	.word	0x410fc270
 80041e8:	e000e400 	.word	0xe000e400
 80041ec:	20000204 	.word	0x20000204
 80041f0:	20000208 	.word	0x20000208

080041f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
        __asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	607b      	str	r3, [r7, #4]
    }
 800420c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <vPortEnterCritical+0x58>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <vPortEnterCritical+0x58>)
 8004216:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <vPortEnterCritical+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10f      	bne.n	8004240 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <vPortEnterCritical+0x5c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <vPortEnterCritical+0x4c>
        __asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	603b      	str	r3, [r7, #0]
    }
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <vPortEnterCritical+0x4a>
    }
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000010 	.word	0x20000010
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <vPortExitCritical+0x50>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <vPortExitCritical+0x24>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	607b      	str	r3, [r7, #4]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <vPortExitCritical+0x50>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a09      	ldr	r2, [pc, #36]	; (80042a4 <vPortExitCritical+0x50>)
 8004280:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <vPortExitCritical+0x50>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <vPortExitCritical+0x42>
 800428a:	2300      	movs	r3, #0
 800428c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004294:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000010 	.word	0x20000010
	...

080042b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80042b0:	f3ef 8009 	mrs	r0, PSP
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <pxCurrentTCBConst>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f01e 0f10 	tst.w	lr, #16
 80042c0:	bf08      	it	eq
 80042c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	6010      	str	r0, [r2, #0]
 80042cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042d4:	f380 8811 	msr	BASEPRI, r0
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f7fe ffc6 	bl	8003270 <vTaskSwitchContext>
 80042e4:	f04f 0000 	mov.w	r0, #0
 80042e8:	f380 8811 	msr	BASEPRI, r0
 80042ec:	bc09      	pop	{r0, r3}
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f6:	f01e 0f10 	tst.w	lr, #16
 80042fa:	bf08      	it	eq
 80042fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004300:	f380 8809 	msr	PSP, r0
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst>:
 8004310:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
        __asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
    }
 8004330:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004332:	f002 fb83 	bl	8006a3c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004336:	f7fe fe81 	bl	800303c <xTaskIncrementTick>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004340:	f002 fbda 	bl	8006af8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004344:	4b08      	ldr	r3, [pc, #32]	; (8004368 <SysTick_Handler+0x50>)
 8004346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e001      	b.n	8004352 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800434e:	f002 fbb7 	bl	8006ac0 <SEGGER_SYSVIEW_RecordExitISR>
 8004352:	2300      	movs	r3, #0
 8004354:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f383 8811 	msr	BASEPRI, r3
    }
 800435c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <vPortSetupTimerInterrupt+0x38>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <vPortSetupTimerInterrupt+0x3c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <vPortSetupTimerInterrupt+0x40>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <vPortSetupTimerInterrupt+0x44>)
 800438a:	3b01      	subs	r3, #1
 800438c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010
 80043a4:	e000e018 	.word	0xe000e018
 80043a8:	20000000 	.word	0x20000000
 80043ac:	10624dd3 	.word	0x10624dd3
 80043b0:	e000e014 	.word	0xe000e014

080043b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80043b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043c4 <vPortEnableVFP+0x10>
 80043b8:	6801      	ldr	r1, [r0, #0]
 80043ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043be:	6001      	str	r1, [r0, #0]
 80043c0:	4770      	bx	lr
 80043c2:	0000      	.short	0x0000
 80043c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop

080043cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80043d2:	f3ef 8305 	mrs	r3, IPSR
 80043d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d914      	bls.n	8004408 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043de:	4a17      	ldr	r2, [pc, #92]	; (800443c <vPortValidateInterruptPriority+0x70>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4413      	add	r3, r2
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <vPortValidateInterruptPriority+0x74>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	7afa      	ldrb	r2, [r7, #11]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d20a      	bcs.n	8004408 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	607b      	str	r3, [r7, #4]
    }
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004408:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <vPortValidateInterruptPriority+0x78>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <vPortValidateInterruptPriority+0x7c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d90a      	bls.n	800442e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	603b      	str	r3, [r7, #0]
    }
 800442a:	bf00      	nop
 800442c:	e7fe      	b.n	800442c <vPortValidateInterruptPriority+0x60>
    }
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	e000e3f0 	.word	0xe000e3f0
 8004440:	20000204 	.word	0x20000204
 8004444:	e000ed0c 	.word	0xe000ed0c
 8004448:	20000208 	.word	0x20000208

0800444c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004458:	f7fe fcc0 	bl	8002ddc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800445c:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <pvPortMalloc+0x1a8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004464:	f000 f934 	bl	80046d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004468:	4b63      	ldr	r3, [pc, #396]	; (80045f8 <pvPortMalloc+0x1ac>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 80a7 	bne.w	80045c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02d      	beq.n	80044d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800447c:	2208      	movs	r2, #8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d227      	bcs.n	80044d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004488:	2208      	movs	r2, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	2b00      	cmp	r3, #0
 8004498:	d021      	beq.n	80044de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f023 0307 	bic.w	r3, r3, #7
 80044a0:	3308      	adds	r3, #8
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d214      	bcs.n	80044d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	3308      	adds	r3, #8
 80044b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <pvPortMalloc+0x92>
        __asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	617b      	str	r3, [r7, #20]
    }
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044d6:	e002      	b.n	80044de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e000      	b.n	80044e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06e      	beq.n	80045c4 <pvPortMalloc+0x178>
 80044e6:	4b45      	ldr	r3, [pc, #276]	; (80045fc <pvPortMalloc+0x1b0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d869      	bhi.n	80045c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <pvPortMalloc+0x1b4>)
 80044f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80044f4:	4b42      	ldr	r3, [pc, #264]	; (8004600 <pvPortMalloc+0x1b4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044fa:	e004      	b.n	8004506 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d903      	bls.n	8004518 <pvPortMalloc+0xcc>
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f1      	bne.n	80044fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <pvPortMalloc+0x1a8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	429a      	cmp	r2, r3
 8004520:	d050      	beq.n	80045c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2208      	movs	r2, #8
 8004528:	4413      	add	r3, r2
 800452a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	1ad2      	subs	r2, r2, r3
 800453c:	2308      	movs	r3, #8
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	429a      	cmp	r2, r3
 8004542:	d91f      	bls.n	8004584 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4413      	add	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <pvPortMalloc+0x120>
        __asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	613b      	str	r3, [r7, #16]
    }
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	1ad2      	subs	r2, r2, r3
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800457e:	69b8      	ldr	r0, [r7, #24]
 8004580:	f000 f908 	bl	8004794 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <pvPortMalloc+0x1b0>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	4a1b      	ldr	r2, [pc, #108]	; (80045fc <pvPortMalloc+0x1b0>)
 8004590:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004592:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <pvPortMalloc+0x1b0>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <pvPortMalloc+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d203      	bcs.n	80045a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800459e:	4b17      	ldr	r3, [pc, #92]	; (80045fc <pvPortMalloc+0x1b0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <pvPortMalloc+0x1b8>)
 80045a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <pvPortMalloc+0x1ac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <pvPortMalloc+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	4a11      	ldr	r2, [pc, #68]	; (8004608 <pvPortMalloc+0x1bc>)
 80045c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80045c4:	f7fe fc18 	bl	8002df8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <pvPortMalloc+0x19c>
        __asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	60fb      	str	r3, [r7, #12]
    }
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80045e8:	69fb      	ldr	r3, [r7, #28]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3728      	adds	r7, #40	; 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20019214 	.word	0x20019214
 80045f8:	20019228 	.word	0x20019228
 80045fc:	20019218 	.word	0x20019218
 8004600:	2001920c 	.word	0x2001920c
 8004604:	2001921c 	.word	0x2001921c
 8004608:	20019220 	.word	0x20019220

0800460c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d04d      	beq.n	80046ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800461e:	2308      	movs	r3, #8
 8004620:	425b      	negs	r3, r3
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <vPortFree+0xb8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4013      	ands	r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <vPortFree+0x44>
        __asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	60fb      	str	r3, [r7, #12]
    }
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <vPortFree+0x62>
        __asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	60bb      	str	r3, [r7, #8]
    }
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <vPortFree+0xb8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01e      	beq.n	80046ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d11a      	bne.n	80046ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <vPortFree+0xb8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	43db      	mvns	r3, r3
 800468e:	401a      	ands	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004694:	f7fe fba2 	bl	8002ddc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <vPortFree+0xbc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <vPortFree+0xbc>)
 80046a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046a6:	6938      	ldr	r0, [r7, #16]
 80046a8:	f000 f874 	bl	8004794 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <vPortFree+0xc0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3301      	adds	r3, #1
 80046b2:	4a06      	ldr	r2, [pc, #24]	; (80046cc <vPortFree+0xc0>)
 80046b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80046b6:	f7fe fb9f 	bl	8002df8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80046ba:	bf00      	nop
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20019228 	.word	0x20019228
 80046c8:	20019218 	.word	0x20019218
 80046cc:	20019224 	.word	0x20019224

080046d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046d6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80046da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <prvHeapInit+0xac>)
 80046de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00c      	beq.n	8004704 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3307      	adds	r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0307 	bic.w	r3, r3, #7
 80046f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <prvHeapInit+0xac>)
 8004700:	4413      	add	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004708:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <prvHeapInit+0xb0>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800470e:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <prvHeapInit+0xb0>)
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4413      	add	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800471c:	2208      	movs	r2, #8
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a15      	ldr	r2, [pc, #84]	; (8004784 <prvHeapInit+0xb4>)
 8004730:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <prvHeapInit+0xb4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <prvHeapInit+0xb4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <prvHeapInit+0xb4>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <prvHeapInit+0xb8>)
 800475e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a09      	ldr	r2, [pc, #36]	; (800478c <prvHeapInit+0xbc>)
 8004766:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004768:	4b09      	ldr	r3, [pc, #36]	; (8004790 <prvHeapInit+0xc0>)
 800476a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800476e:	601a      	str	r2, [r3, #0]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	2000020c 	.word	0x2000020c
 8004780:	2001920c 	.word	0x2001920c
 8004784:	20019214 	.word	0x20019214
 8004788:	2001921c 	.word	0x2001921c
 800478c:	20019218 	.word	0x20019218
 8004790:	20019228 	.word	0x20019228

08004794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <prvInsertBlockIntoFreeList+0xac>)
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e002      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x14>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d8f7      	bhi.n	80047a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	4413      	add	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d108      	bne.n	80047d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	441a      	add	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	441a      	add	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d118      	bne.n	800481c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <prvInsertBlockIntoFreeList+0xb0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d00d      	beq.n	8004812 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	441a      	add	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e008      	b.n	8004824 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <prvInsertBlockIntoFreeList+0xb0>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e003      	b.n	8004824 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	d002      	beq.n	8004832 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	2001920c 	.word	0x2001920c
 8004844:	20019214 	.word	0x20019214

08004848 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800484c:	4803      	ldr	r0, [pc, #12]	; (800485c <_cbSendSystemDesc+0x14>)
 800484e:	f002 f89f 	bl	8006990 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004852:	4803      	ldr	r0, [pc, #12]	; (8004860 <_cbSendSystemDesc+0x18>)
 8004854:	f002 f89c 	bl	8006990 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004858:	bf00      	nop
 800485a:	bd80      	pop	{r7, pc}
 800485c:	080071f4 	.word	0x080071f4
 8004860:	08007238 	.word	0x08007238

08004864 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <SEGGER_SYSVIEW_Conf+0x20>)
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <SEGGER_SYSVIEW_Conf+0x20>)
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <SEGGER_SYSVIEW_Conf+0x24>)
 8004872:	4a06      	ldr	r2, [pc, #24]	; (800488c <SEGGER_SYSVIEW_Conf+0x28>)
 8004874:	f001 fc08 	bl	8006088 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004878:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800487c:	f001 fc48 	bl	8006110 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004880:	bf00      	nop
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000000 	.word	0x20000000
 8004888:	08004849 	.word	0x08004849
 800488c:	080072d8 	.word	0x080072d8

08004890 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004892:	b085      	sub	sp, #20
 8004894:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	e033      	b.n	8004904 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800489c:	491e      	ldr	r1, [pc, #120]	; (8004918 <_cbSendTaskList+0x88>)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	6818      	ldr	r0, [r3, #0]
 80048ac:	491a      	ldr	r1, [pc, #104]	; (8004918 <_cbSendTaskList+0x88>)
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	3304      	adds	r3, #4
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	4c16      	ldr	r4, [pc, #88]	; (8004918 <_cbSendTaskList+0x88>)
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4423      	add	r3, r4
 80048cc:	3308      	adds	r3, #8
 80048ce:	681c      	ldr	r4, [r3, #0]
 80048d0:	4d11      	ldr	r5, [pc, #68]	; (8004918 <_cbSendTaskList+0x88>)
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	442b      	add	r3, r5
 80048de:	330c      	adds	r3, #12
 80048e0:	681d      	ldr	r5, [r3, #0]
 80048e2:	4e0d      	ldr	r6, [pc, #52]	; (8004918 <_cbSendTaskList+0x88>)
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4433      	add	r3, r6
 80048f0:	3310      	adds	r3, #16
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	462b      	mov	r3, r5
 80048f8:	4622      	mov	r2, r4
 80048fa:	f000 f8bd 	bl	8004a78 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3301      	adds	r3, #1
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_cbSendTaskList+0x8c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3c6      	bcc.n	800489c <_cbSendTaskList+0xc>
  }
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004918:	2001922c 	.word	0x2001922c
 800491c:	200192cc 	.word	0x200192cc

08004920 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004928:	f7fe fb76 	bl	8003018 <xTaskGetTickCountFromISR>
 800492c:	4603      	mov	r3, r0
 800492e:	2200      	movs	r2, #0
 8004930:	469a      	mov	sl, r3
 8004932:	4693      	mov	fp, r2
 8004934:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004938:	e9d7 0100 	ldrd	r0, r1, [r7]
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	f04f 0a00 	mov.w	sl, #0
 8004944:	f04f 0b00 	mov.w	fp, #0
 8004948:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800494c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004950:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004954:	4652      	mov	r2, sl
 8004956:	465b      	mov	r3, fp
 8004958:	1a14      	subs	r4, r2, r0
 800495a:	eb63 0501 	sbc.w	r5, r3, r1
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	00ab      	lsls	r3, r5, #2
 8004968:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800496c:	00a2      	lsls	r2, r4, #2
 800496e:	4614      	mov	r4, r2
 8004970:	461d      	mov	r5, r3
 8004972:	eb14 0800 	adds.w	r8, r4, r0
 8004976:	eb45 0901 	adc.w	r9, r5, r1
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800498a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498e:	4690      	mov	r8, r2
 8004990:	4699      	mov	r9, r3
 8004992:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004996:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080049a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80049b6:	2205      	movs	r2, #5
 80049b8:	492b      	ldr	r1, [pc, #172]	; (8004a68 <SYSVIEW_AddTask+0xc0>)
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f002 fb84 	bl	80070c8 <memcmp>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d04b      	beq.n	8004a5e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	d903      	bls.n	80049d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80049ce:	4828      	ldr	r0, [pc, #160]	; (8004a70 <SYSVIEW_AddTask+0xc8>)
 80049d0:	f002 faf0 	bl	8006fb4 <SEGGER_SYSVIEW_Warn>
    return;
 80049d4:	e044      	b.n	8004a60 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80049d6:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4926      	ldr	r1, [pc, #152]	; (8004a74 <SYSVIEW_AddTask+0xcc>)
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4921      	ldr	r1, [pc, #132]	; (8004a74 <SYSVIEW_AddTask+0xcc>)
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	3304      	adds	r3, #4
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a00:	4b1a      	ldr	r3, [pc, #104]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	491b      	ldr	r1, [pc, #108]	; (8004a74 <SYSVIEW_AddTask+0xcc>)
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3308      	adds	r3, #8
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4916      	ldr	r1, [pc, #88]	; (8004a74 <SYSVIEW_AddTask+0xcc>)
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	330c      	adds	r3, #12
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4910      	ldr	r1, [pc, #64]	; (8004a74 <SYSVIEW_AddTask+0xcc>)
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3310      	adds	r3, #16
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	4a08      	ldr	r2, [pc, #32]	; (8004a6c <SYSVIEW_AddTask+0xc4>)
 8004a4a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f80e 	bl	8004a78 <SYSVIEW_SendTaskInfo>
 8004a5c:	e000      	b.n	8004a60 <SYSVIEW_AddTask+0xb8>
    return;
 8004a5e:	bf00      	nop

}
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	08007248 	.word	0x08007248
 8004a6c:	200192cc 	.word	0x200192cc
 8004a70:	08007250 	.word	0x08007250
 8004a74:	2001922c 	.word	0x2001922c

08004a78 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	; 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	2214      	movs	r2, #20
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f002 fb2a 	bl	80070e8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	4618      	mov	r0, r3
 8004aae:	f001 fe77 	bl	80067a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ab2:	bf00      	nop
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <__NVIC_EnableIRQ>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db0b      	blt.n	8004ae6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	f003 021f 	and.w	r2, r3, #31
 8004ad4:	4907      	ldr	r1, [pc, #28]	; (8004af4 <__NVIC_EnableIRQ+0x38>)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2001      	movs	r0, #1
 8004ade:	fa00 f202 	lsl.w	r2, r0, r2
 8004ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	e000e100 	.word	0xe000e100

08004af8 <__NVIC_SetPriority>:
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db0a      	blt.n	8004b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	490c      	ldr	r1, [pc, #48]	; (8004b44 <__NVIC_SetPriority+0x4c>)
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	0112      	lsls	r2, r2, #4
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b20:	e00a      	b.n	8004b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4908      	ldr	r1, [pc, #32]	; (8004b48 <__NVIC_SetPriority+0x50>)
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3b04      	subs	r3, #4
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	440b      	add	r3, r1
 8004b36:	761a      	strb	r2, [r3, #24]
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000e100 	.word	0xe000e100
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004b52:	f002 fa8b 	bl	800706c <SEGGER_SYSVIEW_IsStarted>
 8004b56:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004b5e:	f001 fca3 	bl	80064a8 <SEGGER_SYSVIEW_Start>
  }
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <_cbOnUARTRx+0x3c>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d806      	bhi.n	8004b8c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004b7e:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <_cbOnUARTRx+0x3c>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <_cbOnUARTRx+0x3c>)
 8004b88:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004b8a:	e009      	b.n	8004ba0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004b8c:	f7ff ffde 	bl	8004b4c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <_cbOnUARTRx+0x3c>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4618      	mov	r0, r3
 8004b96:	1dfb      	adds	r3, r7, #7
 8004b98:	2201      	movs	r2, #1
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f000 fb9a 	bl	80052d4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004ba0:	bf00      	nop
}
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000014 	.word	0x20000014

08004bac <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <_cbOnUARTTx+0x5c>)
 8004bb6:	785b      	ldrb	r3, [r3, #1]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d80f      	bhi.n	8004bdc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <_cbOnUARTTx+0x5c>)
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <_cbOnUARTTx+0x60>)
 8004bc4:	5c9a      	ldrb	r2, [r3, r2]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <_cbOnUARTTx+0x5c>)
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <_cbOnUARTTx+0x5c>)
 8004bd4:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004bda:	e00f      	b.n	8004bfc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <_cbOnUARTTx+0x5c>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fa19 	bl	800501c <SEGGER_RTT_ReadUpBufferNoLock>
 8004bea:	4603      	mov	r3, r0
 8004bec:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	da02      	bge.n	8004bfa <_cbOnUARTTx+0x4e>
    r = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e000      	b.n	8004bfc <_cbOnUARTTx+0x50>
  }
Done:
 8004bfa:	bf00      	nop
  return r;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000014 	.word	0x20000014
 8004c0c:	080072e0 	.word	0x080072e0

08004c10 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <SEGGER_UART_init+0x1c>)
 8004c1a:	4905      	ldr	r1, [pc, #20]	; (8004c30 <SEGGER_UART_init+0x20>)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f863 	bl	8004ce8 <HIF_UART_Init>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	08004b6d 	.word	0x08004b6d
 8004c30:	08004bad 	.word	0x08004bad

08004c34 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004c3a:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <USART2_IRQHandler+0x80>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d011      	beq.n	8004c6e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <USART2_IRQHandler+0x84>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 030b 	and.w	r3, r3, #11
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d108      	bne.n	8004c6e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004c5c:	4b17      	ldr	r3, [pc, #92]	; (8004cbc <USART2_IRQHandler+0x88>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004c64:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <USART2_IRQHandler+0x88>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	79fa      	ldrb	r2, [r7, #7]
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01a      	beq.n	8004cae <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <USART2_IRQHandler+0x8c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d015      	beq.n	8004cac <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <USART2_IRQHandler+0x8c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1dfa      	adds	r2, r7, #7
 8004c86:	4610      	mov	r0, r2
 8004c88:	4798      	blx	r3
 8004c8a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <USART2_IRQHandler+0x90>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <USART2_IRQHandler+0x90>)
 8004c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e006      	b.n	8004cae <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <USART2_IRQHandler+0x80>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004ca4:	79fa      	ldrb	r2, [r7, #7]
 8004ca6:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <USART2_IRQHandler+0x84>)
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e000      	b.n	8004cae <USART2_IRQHandler+0x7a>
      return;
 8004cac:	bf00      	nop
    }
  }
}
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004404 	.word	0x40004404
 8004cbc:	200192d0 	.word	0x200192d0
 8004cc0:	200192d4 	.word	0x200192d4
 8004cc4:	4000440c 	.word	0x4000440c

08004cc8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd6:	6013      	str	r3, [r2, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	4000440c 	.word	0x4000440c

08004ce8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004cf4:	4b2e      	ldr	r3, [pc, #184]	; (8004db0 <HIF_UART_Init+0xc8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <HIF_UART_Init+0xc8>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004d00:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HIF_UART_Init+0xcc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <HIF_UART_Init+0xcc>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004d0c:	4b2a      	ldr	r3, [pc, #168]	; (8004db8 <HIF_UART_Init+0xd0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d18:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004d20:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004d22:	4a25      	ldr	r2, [pc, #148]	; (8004db8 <HIF_UART_Init+0xd0>)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HIF_UART_Init+0xd4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d34:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004d3c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HIF_UART_Init+0xd4>)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004d44:	4b1e      	ldr	r3, [pc, #120]	; (8004dc0 <HIF_UART_Init+0xd8>)
 8004d46:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004d4a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HIF_UART_Init+0xdc>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HIF_UART_Init+0xe0>)
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004d5e:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <HIF_UART_Init+0xe4>)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	085b      	lsrs	r3, r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d76:	d302      	bcc.n	8004d7e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004d78:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004d7c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d004      	beq.n	8004d8e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	4a11      	ldr	r2, [pc, #68]	; (8004dd0 <HIF_UART_Init+0xe8>)
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004d8e:	4a11      	ldr	r2, [pc, #68]	; (8004dd4 <HIF_UART_Init+0xec>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004d94:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <HIF_UART_Init+0xf0>)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004d9a:	2106      	movs	r1, #6
 8004d9c:	2026      	movs	r0, #38	; 0x26
 8004d9e:	f7ff feab 	bl	8004af8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004da2:	2026      	movs	r0, #38	; 0x26
 8004da4:	f7ff fe8a 	bl	8004abc <__NVIC_EnableIRQ>
}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023840 	.word	0x40023840
 8004db4:	40023830 	.word	0x40023830
 8004db8:	40020020 	.word	0x40020020
 8004dbc:	40020000 	.word	0x40020000
 8004dc0:	4000440c 	.word	0x4000440c
 8004dc4:	40004410 	.word	0x40004410
 8004dc8:	40004414 	.word	0x40004414
 8004dcc:	0501bd00 	.word	0x0501bd00
 8004dd0:	40004408 	.word	0x40004408
 8004dd4:	200192d0 	.word	0x200192d0
 8004dd8:	200192d4 	.word	0x200192d4

08004ddc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <_DoInit+0x98>)
 8004de4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2203      	movs	r2, #3
 8004dea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2203      	movs	r2, #3
 8004df0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <_DoInit+0x9c>)
 8004df6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <_DoInit+0xa0>)
 8004dfc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e04:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <_DoInit+0x9c>)
 8004e1c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <_DoInit+0xa4>)
 8004e22:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2210      	movs	r2, #16
 8004e28:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3307      	adds	r3, #7
 8004e40:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <_DoInit+0xa8>)
 8004e42:	6810      	ldr	r0, [r2, #0]
 8004e44:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e46:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <_DoInit+0xac>)
 8004e4e:	6810      	ldr	r0, [r2, #0]
 8004e50:	6018      	str	r0, [r3, #0]
 8004e52:	8891      	ldrh	r1, [r2, #4]
 8004e54:	7992      	ldrb	r2, [r2, #6]
 8004e56:	8099      	strh	r1, [r3, #4]
 8004e58:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e5a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004e64:	f3bf 8f5f 	dmb	sy
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	200192d8 	.word	0x200192d8
 8004e78:	080072a0 	.word	0x080072a0
 8004e7c:	20019380 	.word	0x20019380
 8004e80:	20019780 	.word	0x20019780
 8004e84:	080072ac 	.word	0x080072ac
 8004e88:	080072b0 	.word	0x080072b0

08004e8c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	; 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d905      	bls.n	8004ebc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	e007      	b.n	8004ecc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	1acb      	subs	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bf28      	it	cs
 8004eda:	4613      	movcs	r3, r2
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	bf28      	it	cs
 8004ee6:	4613      	movcs	r3, r2
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	6978      	ldr	r0, [r7, #20]
 8004efa:	f002 f921 	bl	8007140 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004efe:	6a3a      	ldr	r2, [r7, #32]
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	4413      	add	r3, r2
 8004f04:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	4413      	add	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	4413      	add	r3, r2
 8004f1c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d101      	bne.n	8004f2c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f2c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1b2      	bne.n	8004ea2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3728      	adds	r7, #40	; 0x28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b088      	sub	sp, #32
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d911      	bls.n	8004f8e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f002 f8e1 	bl	8007140 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f7e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f8c:	e01f      	b.n	8004fce <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	6938      	ldr	r0, [r7, #16]
 8004fa2:	f002 f8cd 	bl	8007140 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4413      	add	r3, r2
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	6938      	ldr	r0, [r7, #16]
 8004fc0:	f002 f8be 	bl	8007140 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fc4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	60da      	str	r2, [r3, #12]
}
 8004fce:	bf00      	nop
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d808      	bhi.n	8005004 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad2      	subs	r2, r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3b01      	subs	r3, #1
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e004      	b.n	800500e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800500e:	697b      	ldr	r3, [r7, #20]
}
 8005010:	4618      	mov	r0, r3
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b08c      	sub	sp, #48	; 0x30
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005028:	4b3e      	ldr	r3, [pc, #248]	; (8005124 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800502a:	623b      	str	r3, [r7, #32]
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005036:	f7ff fed1 	bl	8004ddc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	4613      	mov	r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	4413      	add	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4a37      	ldr	r2, [pc, #220]	; (8005124 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005048:	4413      	add	r3, r2
 800504a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	429a      	cmp	r2, r3
 8005066:	d92b      	bls.n	80050c0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4293      	cmp	r3, r2
 8005078:	bf28      	it	cs
 800507a:	4613      	movcs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	4413      	add	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	6939      	ldr	r1, [r7, #16]
 800508c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508e:	f002 f857 	bl	8007140 <memcpy>
    NumBytesRead += NumBytesRem;
 8005092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d101      	bne.n	80050c0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4293      	cmp	r3, r2
 80050ce:	bf28      	it	cs
 80050d0:	4613      	movcs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d019      	beq.n	800510e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	4413      	add	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	6939      	ldr	r1, [r7, #16]
 80050e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ea:	f002 f829 	bl	8007140 <memcpy>
    NumBytesRead += NumBytesRem;
 80050ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4413      	add	r3, r2
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4413      	add	r3, r2
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4413      	add	r3, r2
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005118:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800511c:	4618      	mov	r0, r3
 800511e:	3730      	adds	r7, #48	; 0x30
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	200192d8 	.word	0x200192d8

08005128 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	; 0x30
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005134:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <SEGGER_RTT_ReadNoLock+0x108>)
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <SEGGER_RTT_ReadNoLock+0x1e>
 8005142:	f7ff fe4b 	bl	8004ddc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	3360      	adds	r3, #96	; 0x60
 8005152:	4a37      	ldr	r2, [pc, #220]	; (8005230 <SEGGER_RTT_ReadNoLock+0x108>)
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005168:	2300      	movs	r3, #0
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800516c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	429a      	cmp	r2, r3
 8005172:	d92b      	bls.n	80051cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4293      	cmp	r3, r2
 8005184:	bf28      	it	cs
 8005186:	4613      	movcs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	4413      	add	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	6939      	ldr	r1, [r7, #16]
 8005198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800519a:	f001 ffd1 	bl	8007140 <memcpy>
    NumBytesRead += NumBytesRem;
 800519e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4413      	add	r3, r2
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4413      	add	r3, r2
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	4413      	add	r3, r2
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d101      	bne.n	80051cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80051c8:	2300      	movs	r3, #0
 80051ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4293      	cmp	r3, r2
 80051da:	bf28      	it	cs
 80051dc:	4613      	movcs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d019      	beq.n	800521a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	4413      	add	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051f6:	f001 ffa3 	bl	8007140 <memcpy>
    NumBytesRead += NumBytesRem;
 80051fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	4413      	add	r3, r2
 8005200:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005224:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005228:	4618      	mov	r0, r3
 800522a:	3730      	adds	r7, #48	; 0x30
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200192d8 	.word	0x200192d8

08005234 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	3360      	adds	r3, #96	; 0x60
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005252:	4413      	add	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d029      	beq.n	80052b2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800525e:	2b02      	cmp	r3, #2
 8005260:	d82e      	bhi.n	80052c0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005266:	2b01      	cmp	r3, #1
 8005268:	d013      	beq.n	8005292 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800526a:	e029      	b.n	80052c0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800526c:	6978      	ldr	r0, [r7, #20]
 800526e:	f7ff feb2 	bl	8004fd6 <_GetAvailWriteSpace>
 8005272:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d202      	bcs.n	8005282 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005280:	e021      	b.n	80052c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f7ff fe5b 	bl	8004f46 <_WriteNoCheck>
    break;
 8005290:	e019      	b.n	80052c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005292:	6978      	ldr	r0, [r7, #20]
 8005294:	f7ff fe9f 	bl	8004fd6 <_GetAvailWriteSpace>
 8005298:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4293      	cmp	r3, r2
 80052a0:	bf28      	it	cs
 80052a2:	4613      	movcs	r3, r2
 80052a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff fe4b 	bl	8004f46 <_WriteNoCheck>
    break;
 80052b0:	e009      	b.n	80052c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	69b9      	ldr	r1, [r7, #24]
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff fde8 	bl	8004e8c <_WriteBlocking>
 80052bc:	61f8      	str	r0, [r7, #28]
    break;
 80052be:	e002      	b.n	80052c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61fb      	str	r3, [r7, #28]
    break;
 80052c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80052c6:	69fb      	ldr	r3, [r7, #28]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200192d8 	.word	0x200192d8

080052d4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80052ee:	f7ff fd75 	bl	8004ddc <_DoInit>
  SEGGER_RTT_LOCK();
 80052f2:	f3ef 8311 	mrs	r3, BASEPRI
 80052f6:	f04f 0120 	mov.w	r1, #32
 80052fa:	f381 8811 	msr	BASEPRI, r1
 80052fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff95 	bl	8005234 <SEGGER_RTT_WriteDownBufferNoLock>
 800530a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005312:	697b      	ldr	r3, [r7, #20]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200192d8 	.word	0x200192d8

08005320 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800532e:	4b3d      	ldr	r3, [pc, #244]	; (8005424 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <SEGGER_RTT_AllocUpBuffer+0x20>
 800533c:	f7ff fd4e 	bl	8004ddc <_DoInit>
  SEGGER_RTT_LOCK();
 8005340:	f3ef 8311 	mrs	r3, BASEPRI
 8005344:	f04f 0120 	mov.w	r1, #32
 8005348:	f381 8811 	msr	BASEPRI, r1
 800534c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800534e:	4b35      	ldr	r3, [pc, #212]	; (8005424 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005350:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005356:	6939      	ldr	r1, [r7, #16]
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	4613      	mov	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3304      	adds	r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d008      	beq.n	8005380 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3301      	adds	r3, #1
 8005372:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	429a      	cmp	r2, r3
 800537c:	dbeb      	blt.n	8005356 <SEGGER_RTT_AllocUpBuffer+0x36>
 800537e:	e000      	b.n	8005382 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005380:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	da3f      	bge.n	800540c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800538c:	6939      	ldr	r1, [r7, #16]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	440b      	add	r3, r1
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053a0:	6939      	ldr	r1, [r7, #16]
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	440b      	add	r3, r1
 80053b0:	3304      	adds	r3, #4
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	4613      	mov	r3, r2
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	3320      	adds	r3, #32
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80053ca:	6939      	ldr	r1, [r7, #16]
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	4613      	mov	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	4413      	add	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	440b      	add	r3, r1
 80053d8:	3328      	adds	r3, #40	; 0x28
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80053de:	6939      	ldr	r1, [r7, #16]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	4613      	mov	r3, r2
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	4413      	add	r3, r2
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	3324      	adds	r3, #36	; 0x24
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80053f2:	6939      	ldr	r1, [r7, #16]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	332c      	adds	r3, #44	; 0x2c
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005406:	f3bf 8f5f 	dmb	sy
 800540a:	e002      	b.n	8005412 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800540c:	f04f 33ff 	mov.w	r3, #4294967295
 8005410:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005418:	69fb      	ldr	r3, [r7, #28]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200192d8 	.word	0x200192d8

08005428 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005436:	4b33      	ldr	r3, [pc, #204]	; (8005504 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005444:	f7ff fcca 	bl	8004ddc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005448:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800544a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	461a      	mov	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4293      	cmp	r3, r2
 8005456:	d24d      	bcs.n	80054f4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005458:	f3ef 8311 	mrs	r3, BASEPRI
 800545c:	f04f 0120 	mov.w	r1, #32
 8005460:	f381 8811 	msr	BASEPRI, r1
 8005464:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d031      	beq.n	80054d0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 800546c:	6979      	ldr	r1, [r7, #20]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	3360      	adds	r3, #96	; 0x60
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	3364      	adds	r3, #100	; 0x64
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005494:	6979      	ldr	r1, [r7, #20]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	3368      	adds	r3, #104	; 0x68
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80054a8:	6979      	ldr	r1, [r7, #20]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	440b      	add	r3, r1
 80054b6:	3370      	adds	r3, #112	; 0x70
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80054bc:	6979      	ldr	r1, [r7, #20]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	440b      	add	r3, r1
 80054ca:	336c      	adds	r3, #108	; 0x6c
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80054d0:	6979      	ldr	r1, [r7, #20]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4413      	add	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	3374      	adds	r3, #116	; 0x74
 80054e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e002      	b.n	80054fa <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295
 80054f8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80054fa:	69fb      	ldr	r3, [r7, #28]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200192d8 	.word	0x200192d8

08005508 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005518:	e002      	b.n	8005520 <_EncodeStr+0x18>
    Len++;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3301      	adds	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	4413      	add	r3, r2
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f6      	bne.n	800551a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d901      	bls.n	8005538 <_EncodeStr+0x30>
    Len = Limit;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2bfe      	cmp	r3, #254	; 0xfe
 800553c:	d806      	bhi.n	800554c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	60fa      	str	r2, [r7, #12]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e011      	b.n	8005570 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	60fa      	str	r2, [r7, #12]
 8005552:	22ff      	movs	r2, #255	; 0xff
 8005554:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	0a19      	lsrs	r1, r3, #8
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	60fa      	str	r2, [r7, #12]
 800556c:	b2ca      	uxtb	r2, r1
 800556e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005574:	e00a      	b.n	800558c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	1c53      	adds	r3, r2, #1
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1c59      	adds	r1, r3, #1
 8005580:	60f9      	str	r1, [r7, #12]
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	701a      	strb	r2, [r3, #0]
    n++;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3301      	adds	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	429a      	cmp	r2, r3
 8005592:	d3f0      	bcc.n	8005576 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005594:	68fb      	ldr	r3, [r7, #12]
}
 8005596:	4618      	mov	r0, r3
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3304      	adds	r3, #4
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055c2:	4b35      	ldr	r3, [pc, #212]	; (8005698 <_HandleIncomingPacket+0xdc>)
 80055c4:	7e1b      	ldrb	r3, [r3, #24]
 80055c6:	4618      	mov	r0, r3
 80055c8:	1cfb      	adds	r3, r7, #3
 80055ca:	2201      	movs	r2, #1
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7ff fdab 	bl	8005128 <SEGGER_RTT_ReadNoLock>
 80055d2:	4603      	mov	r3, r0
 80055d4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dd59      	ble.n	8005690 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	2b80      	cmp	r3, #128	; 0x80
 80055e0:	d032      	beq.n	8005648 <_HandleIncomingPacket+0x8c>
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	dc42      	bgt.n	800566c <_HandleIncomingPacket+0xb0>
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	dc16      	bgt.n	8005618 <_HandleIncomingPacket+0x5c>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	dd3e      	ble.n	800566c <_HandleIncomingPacket+0xb0>
 80055ee:	3b01      	subs	r3, #1
 80055f0:	2b06      	cmp	r3, #6
 80055f2:	d83b      	bhi.n	800566c <_HandleIncomingPacket+0xb0>
 80055f4:	a201      	add	r2, pc, #4	; (adr r2, 80055fc <_HandleIncomingPacket+0x40>)
 80055f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fa:	bf00      	nop
 80055fc:	0800561f 	.word	0x0800561f
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562b 	.word	0x0800562b
 8005608:	08005631 	.word	0x08005631
 800560c:	08005637 	.word	0x08005637
 8005610:	0800563d 	.word	0x0800563d
 8005614:	08005643 	.word	0x08005643
 8005618:	2b7f      	cmp	r3, #127	; 0x7f
 800561a:	d034      	beq.n	8005686 <_HandleIncomingPacket+0xca>
 800561c:	e026      	b.n	800566c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800561e:	f000 ff43 	bl	80064a8 <SEGGER_SYSVIEW_Start>
      break;
 8005622:	e035      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005624:	f000 fffc 	bl	8006620 <SEGGER_SYSVIEW_Stop>
      break;
 8005628:	e032      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800562a:	f001 f9d5 	bl	80069d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800562e:	e02f      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005630:	f001 f99a 	bl	8006968 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005634:	e02c      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005636:	f001 f819 	bl	800666c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800563a:	e029      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800563c:	f001 fc68 	bl	8006f10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005640:	e026      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005642:	f001 fc47 	bl	8006ed4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005646:	e023      	b.n	8005690 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005648:	4b13      	ldr	r3, [pc, #76]	; (8005698 <_HandleIncomingPacket+0xdc>)
 800564a:	7e1b      	ldrb	r3, [r3, #24]
 800564c:	4618      	mov	r0, r3
 800564e:	1cfb      	adds	r3, r7, #3
 8005650:	2201      	movs	r2, #1
 8005652:	4619      	mov	r1, r3
 8005654:	f7ff fd68 	bl	8005128 <SEGGER_RTT_ReadNoLock>
 8005658:	4603      	mov	r3, r0
 800565a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	dd13      	ble.n	800568a <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fbb5 	bl	8006dd4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800566a:	e00e      	b.n	800568a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	b25b      	sxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	da0c      	bge.n	800568e <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005674:	4b08      	ldr	r3, [pc, #32]	; (8005698 <_HandleIncomingPacket+0xdc>)
 8005676:	7e1b      	ldrb	r3, [r3, #24]
 8005678:	4618      	mov	r0, r3
 800567a:	1cfb      	adds	r3, r7, #3
 800567c:	2201      	movs	r2, #1
 800567e:	4619      	mov	r1, r3
 8005680:	f7ff fd52 	bl	8005128 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005684:	e003      	b.n	800568e <_HandleIncomingPacket+0xd2>
      break;
 8005686:	bf00      	nop
 8005688:	e002      	b.n	8005690 <_HandleIncomingPacket+0xd4>
      break;
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <_HandleIncomingPacket+0xd4>
      break;
 800568e:	bf00      	nop
    }
  }
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	2001a798 	.word	0x2001a798

0800569c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056a2:	2301      	movs	r3, #1
 80056a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b0:	4b32      	ldr	r3, [pc, #200]	; (800577c <_TrySendOverflowPacket+0xe0>)
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056b6:	e00b      	b.n	80056d0 <_TrySendOverflowPacket+0x34>
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <_TrySendOverflowPacket+0x1c>
 80056d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <_TrySendOverflowPacket+0xe4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056ec:	4b23      	ldr	r3, [pc, #140]	; (800577c <_TrySendOverflowPacket+0xe0>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	e00b      	b.n	8005718 <_TrySendOverflowPacket+0x7c>
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1c59      	adds	r1, r3, #1
 8005708:	6279      	str	r1, [r7, #36]	; 0x24
 800570a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800570e:	b2d2      	uxtb	r2, r2
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	09db      	lsrs	r3, r3, #7
 8005716:	623b      	str	r3, [r7, #32]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	2b7f      	cmp	r3, #127	; 0x7f
 800571c:	d8f0      	bhi.n	8005700 <_TrySendOverflowPacket+0x64>
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	627a      	str	r2, [r7, #36]	; 0x24
 8005724:	6a3a      	ldr	r2, [r7, #32]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <_TrySendOverflowPacket+0xe0>)
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	4618      	mov	r0, r3
 8005734:	1d3b      	adds	r3, r7, #4
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	461a      	mov	r2, r3
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	4619      	mov	r1, r3
 8005740:	f7fa fd46 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005744:	4603      	mov	r3, r0
 8005746:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005748:	f7ff fabe 	bl	8004cc8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005752:	4a0a      	ldr	r2, [pc, #40]	; (800577c <_TrySendOverflowPacket+0xe0>)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005758:	4b08      	ldr	r3, [pc, #32]	; (800577c <_TrySendOverflowPacket+0xe0>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	3b01      	subs	r3, #1
 800575e:	b2da      	uxtb	r2, r3
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <_TrySendOverflowPacket+0xe0>)
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e004      	b.n	8005770 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <_TrySendOverflowPacket+0xe0>)
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	3301      	adds	r3, #1
 800576c:	4a03      	ldr	r2, [pc, #12]	; (800577c <_TrySendOverflowPacket+0xe0>)
 800576e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005770:	693b      	ldr	r3, [r7, #16]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3730      	adds	r7, #48	; 0x30
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	2001a798 	.word	0x2001a798
 8005780:	e0001004 	.word	0xe0001004

08005784 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005790:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <_SendPacket+0x1c4>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d010      	beq.n	80057ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005798:	4b6b      	ldr	r3, [pc, #428]	; (8005948 <_SendPacket+0x1c4>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a5 	beq.w	80058ec <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057a2:	4b69      	ldr	r3, [pc, #420]	; (8005948 <_SendPacket+0x1c4>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d109      	bne.n	80057be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057aa:	f7ff ff77 	bl	800569c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057ae:	4b66      	ldr	r3, [pc, #408]	; (8005948 <_SendPacket+0x1c4>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	f040 809c 	bne.w	80058f0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80057b8:	e001      	b.n	80057be <_SendPacket+0x3a>
    goto Send;
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <_SendPacket+0x3c>
Send:
 80057be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b1f      	cmp	r3, #31
 80057c4:	d809      	bhi.n	80057da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057c6:	4b60      	ldr	r3, [pc, #384]	; (8005948 <_SendPacket+0x1c4>)
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f040 808d 	bne.w	80058f4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b17      	cmp	r3, #23
 80057de:	d807      	bhi.n	80057f0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3b01      	subs	r3, #1
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e03d      	b.n	800586c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b7f      	cmp	r3, #127	; 0x7f
 80057fc:	d912      	bls.n	8005824 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	09da      	lsrs	r2, r3, #7
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b01      	subs	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	3a01      	subs	r2, #1
 8005816:	60fa      	str	r2, [r7, #12]
 8005818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e006      	b.n	8005832 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3b01      	subs	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b7f      	cmp	r3, #127	; 0x7f
 8005836:	d912      	bls.n	800585e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	09da      	lsrs	r2, r3, #7
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3b01      	subs	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	3a01      	subs	r2, #1
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e006      	b.n	800586c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b01      	subs	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800586c:	4b37      	ldr	r3, [pc, #220]	; (800594c <_SendPacket+0x1c8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005872:	4b35      	ldr	r3, [pc, #212]	; (8005948 <_SendPacket+0x1c4>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	e00b      	b.n	800589e <_SendPacket+0x11a>
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1c59      	adds	r1, r3, #1
 800588e:	6279      	str	r1, [r7, #36]	; 0x24
 8005890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	09db      	lsrs	r3, r3, #7
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b7f      	cmp	r3, #127	; 0x7f
 80058a2:	d8f0      	bhi.n	8005886 <_SendPacket+0x102>
 80058a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	627a      	str	r2, [r7, #36]	; 0x24
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <_SendPacket+0x1c4>)
 80058b6:	785b      	ldrb	r3, [r3, #1]
 80058b8:	4618      	mov	r0, r3
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	68f9      	ldr	r1, [r7, #12]
 80058c4:	f7fa fc84 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058c8:	4603      	mov	r3, r0
 80058ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058cc:	f7ff f9fc 	bl	8004cc8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058d6:	4a1c      	ldr	r2, [pc, #112]	; (8005948 <_SendPacket+0x1c4>)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	60d3      	str	r3, [r2, #12]
 80058dc:	e00b      	b.n	80058f6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <_SendPacket+0x1c4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b18      	ldr	r3, [pc, #96]	; (8005948 <_SendPacket+0x1c4>)
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e004      	b.n	80058f6 <_SendPacket+0x172>
    goto SendDone;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <_SendPacket+0x172>
      goto SendDone;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <_SendPacket+0x172>
      goto SendDone;
 80058f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <_SendPacket+0x1c4>)
 80058f8:	7e1b      	ldrb	r3, [r3, #24]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4a14      	ldr	r2, [pc, #80]	; (8005950 <_SendPacket+0x1cc>)
 80058fe:	460b      	mov	r3, r1
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	440b      	add	r3, r1
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	336c      	adds	r3, #108	; 0x6c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <_SendPacket+0x1c4>)
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	4618      	mov	r0, r3
 8005912:	490f      	ldr	r1, [pc, #60]	; (8005950 <_SendPacket+0x1cc>)
 8005914:	4603      	mov	r3, r0
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4403      	add	r3, r0
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	3370      	adds	r3, #112	; 0x70
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d00b      	beq.n	800593e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005926:	4b08      	ldr	r3, [pc, #32]	; (8005948 <_SendPacket+0x1c4>)
 8005928:	789b      	ldrb	r3, [r3, #2]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800592e:	4b06      	ldr	r3, [pc, #24]	; (8005948 <_SendPacket+0x1c4>)
 8005930:	2201      	movs	r2, #1
 8005932:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005934:	f7ff fe42 	bl	80055bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <_SendPacket+0x1c4>)
 800593a:	2200      	movs	r2, #0
 800593c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	2001a798 	.word	0x2001a798
 800594c:	e0001004 	.word	0xe0001004
 8005950:	200192d8 	.word	0x200192d8

08005954 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3301      	adds	r3, #1
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d80a      	bhi.n	8005984 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	1c59      	adds	r1, r3, #1
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6051      	str	r1, [r2, #4]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d15a      	bne.n	8005a42 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	e00b      	b.n	80059c6 <_StoreChar+0x72>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	6279      	str	r1, [r7, #36]	; 0x24
 80059b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ca:	d8f0      	bhi.n	80059ae <_StoreChar+0x5a>
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	627a      	str	r2, [r7, #36]	; 0x24
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e00b      	b.n	80059fe <_StoreChar+0xaa>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	61f9      	str	r1, [r7, #28]
 80059f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	09db      	lsrs	r3, r3, #7
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b7f      	cmp	r3, #127	; 0x7f
 8005a02:	d8f0      	bhi.n	80059e6 <_StoreChar+0x92>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	221a      	movs	r2, #26
 8005a1a:	6939      	ldr	r1, [r7, #16]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff feb1 	bl	8005784 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fdbb 	bl	80055a2 <_PreparePacket>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]
  }
}
 8005a42:	bf00      	nop
 8005a44:	3728      	adds	r7, #40	; 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a66:	e007      	b.n	8005a78 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	623b      	str	r3, [r7, #32]
    Width++;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d2f3      	bcs.n	8005a68 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d901      	bls.n	8005a8c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11f      	bne.n	8005ad6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01c      	beq.n	8005ad6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d005      	beq.n	8005ab2 <_PrintUnsigned+0x66>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <_PrintUnsigned+0x66>
        c = '0';
 8005aac:	2330      	movs	r3, #48	; 0x30
 8005aae:	76fb      	strb	r3, [r7, #27]
 8005ab0:	e001      	b.n	8005ab6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab6:	e007      	b.n	8005ac8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	3b01      	subs	r3, #1
 8005abc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005abe:	7efb      	ldrb	r3, [r7, #27]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff46 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <_PrintUnsigned+0x8a>
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3f0      	bcc.n	8005ab8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d903      	bls.n	8005ae4 <_PrintUnsigned+0x98>
      NumDigits--;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	e009      	b.n	8005af8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d200      	bcs.n	8005af8 <_PrintUnsigned+0xac>
        break;
 8005af6:	e005      	b.n	8005b04 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	fb02 f303 	mul.w	r3, r2, r3
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b02:	e7e8      	b.n	8005ad6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b12:	fb02 f303 	mul.w	r3, r2, r3
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b1c:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <_PrintUnsigned+0x128>)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4413      	add	r3, r2
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	4619      	mov	r1, r3
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f7ff ff14 	bl	8005954 <_StoreChar>
    Digit /= Base;
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e3      	bne.n	8005b04 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d011      	beq.n	8005b6a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00e      	beq.n	8005b6a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b4c:	e006      	b.n	8005b5c <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	3b01      	subs	r3, #1
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b54:	2120      	movs	r1, #32
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f7ff fefc 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <_PrintUnsigned+0x11e>
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3f1      	bcc.n	8005b4e <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	3728      	adds	r7, #40	; 0x28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	080072f0 	.word	0x080072f0

08005b78 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bfb8      	it	lt
 8005b8c:	425b      	neglt	r3, r3
 8005b8e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b94:	e007      	b.n	8005ba6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b9e:	613b      	str	r3, [r7, #16]
    Width++;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	daf3      	bge.n	8005b96 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d901      	bls.n	8005bba <_PrintInt+0x42>
    Width = NumDigits;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <_PrintInt+0x5e>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	db04      	blt.n	8005bd0 <_PrintInt+0x58>
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <_PrintInt+0x5e>
    FieldWidth--;
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <_PrintInt+0x6e>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <_PrintInt+0x9c>
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d111      	bne.n	8005c14 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bf6:	e006      	b.n	8005c06 <_PrintInt+0x8e>
        FieldWidth--;
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005bfe:	2120      	movs	r1, #32
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fea7 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <_PrintInt+0x9c>
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3f1      	bcc.n	8005bf8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da07      	bge.n	8005c2a <_PrintInt+0xb2>
    v = -v;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c20:	212d      	movs	r1, #45	; 0x2d
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fe96 	bl	8005954 <_StoreChar>
 8005c28:	e008      	b.n	8005c3c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c34:	212b      	movs	r1, #43	; 0x2b
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff fe8c 	bl	8005954 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d019      	beq.n	8005c7a <_PrintInt+0x102>
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d114      	bne.n	8005c7a <_PrintInt+0x102>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d111      	bne.n	8005c7a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00e      	beq.n	8005c7a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c5c:	e006      	b.n	8005c6c <_PrintInt+0xf4>
        FieldWidth--;
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c64:	2130      	movs	r1, #48	; 0x30
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe74 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <_PrintInt+0x102>
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3f1      	bcc.n	8005c5e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fedf 	bl	8005a4c <_PrintUnsigned>
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b098      	sub	sp, #96	; 0x60
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca8:	f04f 0120 	mov.w	r1, #32
 8005cac:	f381 8811 	msr	BASEPRI, r1
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb2:	48b7      	ldr	r0, [pc, #732]	; (8005f90 <_VPrintTarget+0x2f8>)
 8005cb4:	f7ff fc75 	bl	80055a2 <_PreparePacket>
 8005cb8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cba:	4bb5      	ldr	r3, [pc, #724]	; (8005f90 <_VPrintTarget+0x2f8>)
 8005cbc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005cde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8183 	beq.w	8005fee <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cec:	2b25      	cmp	r3, #37	; 0x25
 8005cee:	f040 8170 	bne.w	8005fd2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d06:	3b23      	subs	r3, #35	; 0x23
 8005d08:	2b0d      	cmp	r3, #13
 8005d0a:	d83f      	bhi.n	8005d8c <_VPrintTarget+0xf4>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <_VPrintTarget+0x7c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d8d 	.word	0x08005d8d
 8005d1c:	08005d8d 	.word	0x08005d8d
 8005d20:	08005d8d 	.word	0x08005d8d
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005d8d 	.word	0x08005d8d
 8005d30:	08005d8d 	.word	0x08005d8d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d8d 	.word	0x08005d8d
 8005d44:	08005d8d 	.word	0x08005d8d
 8005d48:	08005d5d 	.word	0x08005d5d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3301      	adds	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e01a      	b.n	8005d92 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e012      	b.n	8005d92 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e00a      	b.n	8005d92 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7e:	f043 0308 	orr.w	r3, r3, #8
 8005d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e002      	b.n	8005d92 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d90:	bf00      	nop
        }
      } while (v);
 8005d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1b0      	bne.n	8005cfa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da8:	2b2f      	cmp	r3, #47	; 0x2f
 8005daa:	d912      	bls.n	8005dd2 <_VPrintTarget+0x13a>
 8005dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005db0:	2b39      	cmp	r3, #57	; 0x39
 8005db2:	d80e      	bhi.n	8005dd2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b30      	subs	r3, #48	; 0x30
 8005dce:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005dd0:	e7e4      	b.n	8005d9c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005dde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de2:	2b2e      	cmp	r3, #46	; 0x2e
 8005de4:	d11d      	bne.n	8005e22 <_VPrintTarget+0x18a>
        sFormat++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005df4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dfa:	d912      	bls.n	8005e22 <_VPrintTarget+0x18a>
 8005dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e00:	2b39      	cmp	r3, #57	; 0x39
 8005e02:	d80e      	bhi.n	8005e22 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	461a      	mov	r2, r3
 8005e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3b30      	subs	r3, #48	; 0x30
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e20:	e7e4      	b.n	8005dec <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e2e:	2b6c      	cmp	r3, #108	; 0x6c
 8005e30:	d003      	beq.n	8005e3a <_VPrintTarget+0x1a2>
 8005e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e36:	2b68      	cmp	r3, #104	; 0x68
 8005e38:	d107      	bne.n	8005e4a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e48:	e7ef      	b.n	8005e2a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4e:	2b25      	cmp	r3, #37	; 0x25
 8005e50:	f000 80b3 	beq.w	8005fba <_VPrintTarget+0x322>
 8005e54:	2b25      	cmp	r3, #37	; 0x25
 8005e56:	f2c0 80b7 	blt.w	8005fc8 <_VPrintTarget+0x330>
 8005e5a:	2b78      	cmp	r3, #120	; 0x78
 8005e5c:	f300 80b4 	bgt.w	8005fc8 <_VPrintTarget+0x330>
 8005e60:	2b58      	cmp	r3, #88	; 0x58
 8005e62:	f2c0 80b1 	blt.w	8005fc8 <_VPrintTarget+0x330>
 8005e66:	3b58      	subs	r3, #88	; 0x58
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	f200 80ad 	bhi.w	8005fc8 <_VPrintTarget+0x330>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <_VPrintTarget+0x1dc>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005f6b 	.word	0x08005f6b
 8005e78:	08005fc9 	.word	0x08005fc9
 8005e7c:	08005fc9 	.word	0x08005fc9
 8005e80:	08005fc9 	.word	0x08005fc9
 8005e84:	08005fc9 	.word	0x08005fc9
 8005e88:	08005fc9 	.word	0x08005fc9
 8005e8c:	08005fc9 	.word	0x08005fc9
 8005e90:	08005fc9 	.word	0x08005fc9
 8005e94:	08005fc9 	.word	0x08005fc9
 8005e98:	08005fc9 	.word	0x08005fc9
 8005e9c:	08005fc9 	.word	0x08005fc9
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f1f 	.word	0x08005f1f
 8005ea8:	08005fc9 	.word	0x08005fc9
 8005eac:	08005fc9 	.word	0x08005fc9
 8005eb0:	08005fc9 	.word	0x08005fc9
 8005eb4:	08005fc9 	.word	0x08005fc9
 8005eb8:	08005fc9 	.word	0x08005fc9
 8005ebc:	08005fc9 	.word	0x08005fc9
 8005ec0:	08005fc9 	.word	0x08005fc9
 8005ec4:	08005fc9 	.word	0x08005fc9
 8005ec8:	08005fc9 	.word	0x08005fc9
 8005ecc:	08005fc9 	.word	0x08005fc9
 8005ed0:	08005fc9 	.word	0x08005fc9
 8005ed4:	08005f95 	.word	0x08005f95
 8005ed8:	08005fc9 	.word	0x08005fc9
 8005edc:	08005fc9 	.word	0x08005fc9
 8005ee0:	08005fc9 	.word	0x08005fc9
 8005ee4:	08005fc9 	.word	0x08005fc9
 8005ee8:	08005f45 	.word	0x08005f45
 8005eec:	08005fc9 	.word	0x08005fc9
 8005ef0:	08005fc9 	.word	0x08005fc9
 8005ef4:	08005f6b 	.word	0x08005f6b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1d19      	adds	r1, r3, #4
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005f0c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fd1c 	bl	8005954 <_StoreChar>
        break;
 8005f1c:	e055      	b.n	8005fca <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	1d19      	adds	r1, r3, #4
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6011      	str	r1, [r2, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f2c:	f107 0014 	add.w	r0, r7, #20
 8005f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	220a      	movs	r2, #10
 8005f3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f3e:	f7ff fe1b 	bl	8005b78 <_PrintInt>
        break;
 8005f42:	e042      	b.n	8005fca <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	1d19      	adds	r1, r3, #4
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f54:	f107 0014 	add.w	r0, r7, #20
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f62:	220a      	movs	r2, #10
 8005f64:	f7ff fd72 	bl	8005a4c <_PrintUnsigned>
        break;
 8005f68:	e02f      	b.n	8005fca <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	1d19      	adds	r1, r3, #4
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6011      	str	r1, [r2, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f7a:	f107 0014 	add.w	r0, r7, #20
 8005f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f88:	2210      	movs	r2, #16
 8005f8a:	f7ff fd5f 	bl	8005a4c <_PrintUnsigned>
        break;
 8005f8e:	e01c      	b.n	8005fca <_VPrintTarget+0x332>
 8005f90:	2001a7c8 	.word	0x2001a7c8
      case 'p':
        v = va_arg(*pParamList, int);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1d19      	adds	r1, r3, #4
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fa4:	f107 0014 	add.w	r0, r7, #20
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	2308      	movs	r3, #8
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	f7ff fd4a 	bl	8005a4c <_PrintUnsigned>
        break;
 8005fb8:	e007      	b.n	8005fca <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005fba:	f107 0314 	add.w	r3, r7, #20
 8005fbe:	2125      	movs	r1, #37	; 0x25
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fcc7 	bl	8005954 <_StoreChar>
        break;
 8005fc6:	e000      	b.n	8005fca <_VPrintTarget+0x332>
      default:
        break;
 8005fc8:	bf00      	nop
      }
      sFormat++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e007      	b.n	8005fe2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005fd2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fcb9 	bl	8005954 <_StoreChar>
    }
  } while (*sFormat);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f47f ae72 	bne.w	8005cd0 <_VPrintTarget+0x38>
 8005fec:	e000      	b.n	8005ff0 <_VPrintTarget+0x358>
      break;
 8005fee:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d041      	beq.n	800607a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	643b      	str	r3, [r7, #64]	; 0x40
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006006:	e00b      	b.n	8006020 <_VPrintTarget+0x388>
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	b2da      	uxtb	r2, r3
 800600c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	6439      	str	r1, [r7, #64]	; 0x40
 8006012:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	09db      	lsrs	r3, r3, #7
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006022:	2b7f      	cmp	r3, #127	; 0x7f
 8006024:	d8f0      	bhi.n	8006008 <_VPrintTarget+0x370>
 8006026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	643a      	str	r2, [r7, #64]	; 0x40
 800602c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006034:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	63bb      	str	r3, [r7, #56]	; 0x38
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
 800603e:	e00b      	b.n	8006058 <_VPrintTarget+0x3c0>
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	63b9      	str	r1, [r7, #56]	; 0x38
 800604a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	2b7f      	cmp	r3, #127	; 0x7f
 800605c:	d8f0      	bhi.n	8006040 <_VPrintTarget+0x3a8>
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	63ba      	str	r2, [r7, #56]	; 0x38
 8006064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	221a      	movs	r2, #26
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fb85 	bl	8005784 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006080:	bf00      	nop
 8006082:	3758      	adds	r7, #88	; 0x58
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006096:	2300      	movs	r3, #0
 8006098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800609c:	4917      	ldr	r1, [pc, #92]	; (80060fc <SEGGER_SYSVIEW_Init+0x74>)
 800609e:	4818      	ldr	r0, [pc, #96]	; (8006100 <SEGGER_SYSVIEW_Init+0x78>)
 80060a0:	f7ff f93e 	bl	8005320 <SEGGER_RTT_AllocUpBuffer>
 80060a4:	4603      	mov	r3, r0
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060aa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060ac:	4b15      	ldr	r3, [pc, #84]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ae:	785a      	ldrb	r2, [r3, #1]
 80060b0:	4b14      	ldr	r3, [pc, #80]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060b4:	4b13      	ldr	r3, [pc, #76]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b6:	7e1b      	ldrb	r3, [r3, #24]
 80060b8:	4618      	mov	r0, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2308      	movs	r3, #8
 80060c0:	4a11      	ldr	r2, [pc, #68]	; (8006108 <SEGGER_SYSVIEW_Init+0x80>)
 80060c2:	490f      	ldr	r1, [pc, #60]	; (8006100 <SEGGER_SYSVIEW_Init+0x78>)
 80060c4:	f7ff f9b0 	bl	8005428 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <SEGGER_SYSVIEW_Init+0x84>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a0c      	ldr	r2, [pc, #48]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80060d6:	4a0b      	ldr	r2, [pc, #44]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80060e2:	4a08      	ldr	r2, [pc, #32]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80060e8:	4a06      	ldr	r2, [pc, #24]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20019790 	.word	0x20019790
 8006100:	080072b8 	.word	0x080072b8
 8006104:	2001a798 	.word	0x2001a798
 8006108:	2001a790 	.word	0x2001a790
 800610c:	e0001004 	.word	0xe0001004

08006110 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6113      	str	r3, [r2, #16]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2001a798 	.word	0x2001a798

08006130 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006138:	f3ef 8311 	mrs	r3, BASEPRI
 800613c:	f04f 0120 	mov.w	r1, #32
 8006140:	f381 8811 	msr	BASEPRI, r1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4808      	ldr	r0, [pc, #32]	; (8006168 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006148:	f7ff fa2b 	bl	80055a2 <_PreparePacket>
 800614c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	68b8      	ldr	r0, [r7, #8]
 8006154:	f7ff fb16 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f383 8811 	msr	BASEPRI, r3
}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2001a7c8 	.word	0x2001a7c8

0800616c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006176:	f3ef 8311 	mrs	r3, BASEPRI
 800617a:	f04f 0120 	mov.w	r1, #32
 800617e:	f381 8811 	msr	BASEPRI, r1
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	4816      	ldr	r0, [pc, #88]	; (80061e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006186:	f7ff fa0c 	bl	80055a2 <_PreparePacket>
 800618a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	61f9      	str	r1, [r7, #28]
 80061a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	61fa      	str	r2, [r7, #28]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6938      	ldr	r0, [r7, #16]
 80061ce:	f7ff fad9 	bl	8005784 <_SendPacket>
  RECORD_END();
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f383 8811 	msr	BASEPRI, r3
}
 80061d8:	bf00      	nop
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	2001a7c8 	.word	0x2001a7c8

080061e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	; 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f0:	f3ef 8311 	mrs	r3, BASEPRI
 80061f4:	f04f 0120 	mov.w	r1, #32
 80061f8:	f381 8811 	msr	BASEPRI, r1
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	4825      	ldr	r0, [pc, #148]	; (8006294 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006200:	f7ff f9cf 	bl	80055a2 <_PreparePacket>
 8006204:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
 8006212:	e00b      	b.n	800622c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800621e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	62bb      	str	r3, [r7, #40]	; 0x28
 800622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d8f0      	bhi.n	8006214 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006240:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	6279      	str	r1, [r7, #36]	; 0x24
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	623b      	str	r3, [r7, #32]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	627a      	str	r2, [r7, #36]	; 0x24
 8006270:	6a3a      	ldr	r2, [r7, #32]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6979      	ldr	r1, [r7, #20]
 800627e:	69b8      	ldr	r0, [r7, #24]
 8006280:	f7ff fa80 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f383 8811 	msr	BASEPRI, r3
}
 800628a:	bf00      	nop
 800628c:	3730      	adds	r7, #48	; 0x30
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	2001a7c8 	.word	0x2001a7c8

08006298 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	; 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062a6:	f3ef 8311 	mrs	r3, BASEPRI
 80062aa:	f04f 0120 	mov.w	r1, #32
 80062ae:	f381 8811 	msr	BASEPRI, r1
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	4832      	ldr	r0, [pc, #200]	; (8006380 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062b6:	f7ff f974 	bl	80055a2 <_PreparePacket>
 80062ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
 80062c8:	e00b      	b.n	80062e2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d0:	1c59      	adds	r1, r3, #1
 80062d2:	6379      	str	r1, [r7, #52]	; 0x34
 80062d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	09db      	lsrs	r3, r3, #7
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	2b7f      	cmp	r3, #127	; 0x7f
 80062e6:	d8f0      	bhi.n	80062ca <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80062e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	637a      	str	r2, [r7, #52]	; 0x34
 80062ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	62bb      	str	r3, [r7, #40]	; 0x28
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	623b      	str	r3, [r7, #32]
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	6279      	str	r1, [r7, #36]	; 0x24
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	623b      	str	r3, [r7, #32]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	627a      	str	r2, [r7, #36]	; 0x24
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	69b8      	ldr	r0, [r7, #24]
 800636e:	f7ff fa09 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f383 8811 	msr	BASEPRI, r3
}
 8006378:	bf00      	nop
 800637a:	3738      	adds	r7, #56	; 0x38
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2001a7c8 	.word	0x2001a7c8

08006384 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b090      	sub	sp, #64	; 0x40
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006392:	f3ef 8311 	mrs	r3, BASEPRI
 8006396:	f04f 0120 	mov.w	r1, #32
 800639a:	f381 8811 	msr	BASEPRI, r1
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	4840      	ldr	r0, [pc, #256]	; (80064a4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063a2:	f7ff f8fe 	bl	80055a2 <_PreparePacket>
 80063a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b4:	e00b      	b.n	80063ce <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063bc:	1c59      	adds	r1, r3, #1
 80063be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	2b7f      	cmp	r3, #127	; 0x7f
 80063d2:	d8f0      	bhi.n	80063b6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80063d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	637b      	str	r3, [r7, #52]	; 0x34
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	633b      	str	r3, [r7, #48]	; 0x30
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	6379      	str	r1, [r7, #52]	; 0x34
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800640c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	637a      	str	r2, [r7, #52]	; 0x34
 8006412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	2b7f      	cmp	r3, #127	; 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800644a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
 8006458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	e00b      	b.n	8006476 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	1c59      	adds	r1, r3, #1
 8006466:	6279      	str	r1, [r7, #36]	; 0x24
 8006468:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	09db      	lsrs	r3, r3, #7
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2b7f      	cmp	r3, #127	; 0x7f
 800647a:	d8f0      	bhi.n	800645e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	627a      	str	r2, [r7, #36]	; 0x24
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	69b8      	ldr	r0, [r7, #24]
 8006492:	f7ff f977 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f383 8811 	msr	BASEPRI, r3
}
 800649c:	bf00      	nop
 800649e:	3740      	adds	r7, #64	; 0x40
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	2001a7c8 	.word	0x2001a7c8

080064a8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064ae:	4b59      	ldr	r3, [pc, #356]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064b4:	f3ef 8311 	mrs	r3, BASEPRI
 80064b8:	f04f 0120 	mov.w	r1, #32
 80064bc:	f381 8811 	msr	BASEPRI, r1
 80064c0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064c2:	4b54      	ldr	r3, [pc, #336]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	220a      	movs	r2, #10
 80064c8:	4953      	ldr	r1, [pc, #332]	; (8006618 <SEGGER_SYSVIEW_Start+0x170>)
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7f9 fe80 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80064d6:	f7fe fbf7 	bl	8004cc8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80064da:	200a      	movs	r0, #10
 80064dc:	f7ff fe28 	bl	8006130 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064e0:	f3ef 8311 	mrs	r3, BASEPRI
 80064e4:	f04f 0120 	mov.w	r1, #32
 80064e8:	f381 8811 	msr	BASEPRI, r1
 80064ec:	60bb      	str	r3, [r7, #8]
 80064ee:	484b      	ldr	r0, [pc, #300]	; (800661c <SEGGER_SYSVIEW_Start+0x174>)
 80064f0:	f7ff f857 	bl	80055a2 <_PreparePacket>
 80064f4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064fe:	4b45      	ldr	r3, [pc, #276]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	62bb      	str	r3, [r7, #40]	; 0x28
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_Start+0x76>
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_Start+0x5e>
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800652a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	627b      	str	r3, [r7, #36]	; 0x24
 8006538:	4b36      	ldr	r3, [pc, #216]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_Start+0xb0>
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	6279      	str	r1, [r7, #36]	; 0x24
 800654a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b7f      	cmp	r3, #127	; 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_Start+0x98>
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	627a      	str	r2, [r7, #36]	; 0x24
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	4b28      	ldr	r3, [pc, #160]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	61bb      	str	r3, [r7, #24]
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_Start+0xea>
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	61f9      	str	r1, [r7, #28]
 8006584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b7f      	cmp	r3, #127	; 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_Start+0xd2>
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	2300      	movs	r3, #0
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	e00b      	b.n	80065ca <SEGGER_SYSVIEW_Start+0x122>
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	6179      	str	r1, [r7, #20]
 80065bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	09db      	lsrs	r3, r3, #7
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b7f      	cmp	r3, #127	; 0x7f
 80065ce:	d8f0      	bhi.n	80065b2 <SEGGER_SYSVIEW_Start+0x10a>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	617a      	str	r2, [r7, #20]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065e0:	2218      	movs	r2, #24
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff f8cd 	bl	8005784 <_SendPacket>
      RECORD_END();
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80065fe:	f000 f9eb 	bl	80069d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006602:	f000 f9b1 	bl	8006968 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006606:	f000 fc83 	bl	8006f10 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800660a:	bf00      	nop
 800660c:	3730      	adds	r7, #48	; 0x30
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	2001a798 	.word	0x2001a798
 8006618:	080072e4 	.word	0x080072e4
 800661c:	2001a7c8 	.word	0x2001a7c8

08006620 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006626:	f3ef 8311 	mrs	r3, BASEPRI
 800662a:	f04f 0120 	mov.w	r1, #32
 800662e:	f381 8811 	msr	BASEPRI, r1
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	480b      	ldr	r0, [pc, #44]	; (8006664 <SEGGER_SYSVIEW_Stop+0x44>)
 8006636:	f7fe ffb4 	bl	80055a2 <_PreparePacket>
 800663a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <SEGGER_SYSVIEW_Stop+0x48>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006644:	220b      	movs	r2, #11
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6838      	ldr	r0, [r7, #0]
 800664a:	f7ff f89b 	bl	8005784 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <SEGGER_SYSVIEW_Stop+0x48>)
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f383 8811 	msr	BASEPRI, r3
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	2001a7c8 	.word	0x2001a7c8
 8006668:	2001a798 	.word	0x2001a798

0800666c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b08c      	sub	sp, #48	; 0x30
 8006670:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006672:	f3ef 8311 	mrs	r3, BASEPRI
 8006676:	f04f 0120 	mov.w	r1, #32
 800667a:	f381 8811 	msr	BASEPRI, r1
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	4845      	ldr	r0, [pc, #276]	; (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006682:	f7fe ff8e 	bl	80055a2 <_PreparePacket>
 8006686:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006690:	4b42      	ldr	r3, [pc, #264]	; (800679c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
 8006696:	e00b      	b.n	80066b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	b2da      	uxtb	r2, r3
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	09db      	lsrs	r3, r3, #7
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	2b7f      	cmp	r3, #127	; 0x7f
 80066b4:	d8f0      	bhi.n	8006698 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ca:	4b34      	ldr	r3, [pc, #208]	; (800679c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	623b      	str	r3, [r7, #32]
 80066d0:	e00b      	b.n	80066ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	6279      	str	r1, [r7, #36]	; 0x24
 80066dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	09db      	lsrs	r3, r3, #7
 80066e8:	623b      	str	r3, [r7, #32]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	2b7f      	cmp	r3, #127	; 0x7f
 80066ee:	d8f0      	bhi.n	80066d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	627a      	str	r2, [r7, #36]	; 0x24
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	4b25      	ldr	r3, [pc, #148]	; (800679c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e00b      	b.n	8006724 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	61f9      	str	r1, [r7, #28]
 8006716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	61bb      	str	r3, [r7, #24]
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	2b7f      	cmp	r3, #127	; 0x7f
 8006728:	d8f0      	bhi.n	800670c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	61fa      	str	r2, [r7, #28]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	e00b      	b.n	800675c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	6179      	str	r1, [r7, #20]
 800674e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d8f0      	bhi.n	8006744 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	617a      	str	r2, [r7, #20]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006772:	2218      	movs	r2, #24
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f7ff f804 	bl	8005784 <_SendPacket>
  RECORD_END();
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800678a:	4b04      	ldr	r3, [pc, #16]	; (800679c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	4798      	blx	r3
  }
}
 8006790:	bf00      	nop
 8006792:	3730      	adds	r7, #48	; 0x30
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	2001a7c8 	.word	0x2001a7c8
 800679c:	2001a798 	.word	0x2001a798

080067a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b092      	sub	sp, #72	; 0x48
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067a8:	f3ef 8311 	mrs	r3, BASEPRI
 80067ac:	f04f 0120 	mov.w	r1, #32
 80067b0:	f381 8811 	msr	BASEPRI, r1
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	486a      	ldr	r0, [pc, #424]	; (8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067b8:	f7fe fef3 	bl	80055a2 <_PreparePacket>
 80067bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	647b      	str	r3, [r7, #68]	; 0x44
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	4b66      	ldr	r3, [pc, #408]	; (8006964 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	643b      	str	r3, [r7, #64]	; 0x40
 80067d2:	e00b      	b.n	80067ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067da:	1c59      	adds	r1, r3, #1
 80067dc:	6479      	str	r1, [r7, #68]	; 0x44
 80067de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e8:	09db      	lsrs	r3, r3, #7
 80067ea:	643b      	str	r3, [r7, #64]	; 0x40
 80067ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ee:	2b7f      	cmp	r3, #127	; 0x7f
 80067f0:	d8f0      	bhi.n	80067d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80067f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	647a      	str	r2, [r7, #68]	; 0x44
 80067f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006800:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	63bb      	str	r3, [r7, #56]	; 0x38
 800680c:	e00b      	b.n	8006826 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	b2da      	uxtb	r2, r3
 8006812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006814:	1c59      	adds	r1, r3, #1
 8006816:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006822:	09db      	lsrs	r3, r3, #7
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b7f      	cmp	r3, #127	; 0x7f
 800682a:	d8f0      	bhi.n	800680e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	1c5a      	adds	r2, r3, #1
 8006830:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006832:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7fe fe5f 	bl	8005508 <_EncodeStr>
 800684a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800684c:	2209      	movs	r2, #9
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	6938      	ldr	r0, [r7, #16]
 8006852:	f7fe ff97 	bl	8005784 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b40      	ldr	r3, [pc, #256]	; (8006964 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	633b      	str	r3, [r7, #48]	; 0x30
 800686a:	e00b      	b.n	8006884 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	b2da      	uxtb	r2, r3
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	1c59      	adds	r1, r3, #1
 8006874:	6379      	str	r1, [r7, #52]	; 0x34
 8006876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	09db      	lsrs	r3, r3, #7
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2b7f      	cmp	r3, #127	; 0x7f
 8006888:	d8f0      	bhi.n	800686c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800688a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	637a      	str	r2, [r7, #52]	; 0x34
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a4:	e00b      	b.n	80068be <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	1c59      	adds	r1, r3, #1
 80068ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	09db      	lsrs	r3, r3, #7
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	2b7f      	cmp	r3, #127	; 0x7f
 80068c2:	d8f0      	bhi.n	80068a6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	e00b      	b.n	80068f8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	6279      	str	r1, [r7, #36]	; 0x24
 80068ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	09db      	lsrs	r3, r3, #7
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b7f      	cmp	r3, #127	; 0x7f
 80068fc:	d8f0      	bhi.n	80068e0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	627a      	str	r2, [r7, #36]	; 0x24
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	2300      	movs	r3, #0
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	e00b      	b.n	8006930 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	61f9      	str	r1, [r7, #28]
 8006922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	09db      	lsrs	r3, r3, #7
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b7f      	cmp	r3, #127	; 0x7f
 8006934:	d8f0      	bhi.n	8006918 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	61fa      	str	r2, [r7, #28]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006946:	2215      	movs	r2, #21
 8006948:	68f9      	ldr	r1, [r7, #12]
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f7fe ff1a 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f383 8811 	msr	BASEPRI, r3
}
 8006956:	bf00      	nop
 8006958:	3748      	adds	r7, #72	; 0x48
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2001a7c8 	.word	0x2001a7c8
 8006964:	2001a798 	.word	0x2001a798

08006968 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006968:	b580      	push	{r7, lr}
 800696a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800696c:	4b07      	ldr	r3, [pc, #28]	; (800698c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800697e:	4b03      	ldr	r3, [pc, #12]	; (800698c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	4798      	blx	r3
  }
}
 8006986:	bf00      	nop
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	2001a798 	.word	0x2001a798

08006990 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006998:	f3ef 8311 	mrs	r3, BASEPRI
 800699c:	f04f 0120 	mov.w	r1, #32
 80069a0:	f381 8811 	msr	BASEPRI, r1
 80069a4:	617b      	str	r3, [r7, #20]
 80069a6:	480b      	ldr	r0, [pc, #44]	; (80069d4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069a8:	f7fe fdfb 	bl	80055a2 <_PreparePacket>
 80069ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069ae:	2280      	movs	r2, #128	; 0x80
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	6938      	ldr	r0, [r7, #16]
 80069b4:	f7fe fda8 	bl	8005508 <_EncodeStr>
 80069b8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80069ba:	220e      	movs	r2, #14
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	6938      	ldr	r0, [r7, #16]
 80069c0:	f7fe fee0 	bl	8005784 <_SendPacket>
  RECORD_END();
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f383 8811 	msr	BASEPRI, r3
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	2001a7c8 	.word	0x2001a7c8

080069d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80069de:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01a      	beq.n	8006a1c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80069e6:	4b13      	ldr	r3, [pc, #76]	; (8006a34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d015      	beq.n	8006a1c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80069f0:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4798      	blx	r3
 80069f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	f04f 0300 	mov.w	r3, #0
 8006a0a:	000a      	movs	r2, r1
 8006a0c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a0e:	4613      	mov	r3, r2
 8006a10:	461a      	mov	r2, r3
 8006a12:	4621      	mov	r1, r4
 8006a14:	200d      	movs	r0, #13
 8006a16:	f7ff fbe5 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x2>
 8006a1a:	e006      	b.n	8006a2a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4619      	mov	r1, r3
 8006a22:	200c      	movs	r0, #12
 8006a24:	f7ff fba2 	bl	800616c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd90      	pop	{r4, r7, pc}
 8006a32:	bf00      	nop
 8006a34:	2001a798 	.word	0x2001a798
 8006a38:	e0001004 	.word	0xe0001004

08006a3c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a42:	f3ef 8311 	mrs	r3, BASEPRI
 8006a46:	f04f 0120 	mov.w	r1, #32
 8006a4a:	f381 8811 	msr	BASEPRI, r1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	4819      	ldr	r0, [pc, #100]	; (8006ab8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a52:	f7fe fda6 	bl	80055a2 <_PreparePacket>
 8006a56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a64:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	e00b      	b.n	8006a88 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1c59      	adds	r1, r3, #1
 8006a78:	6179      	str	r1, [r7, #20]
 8006a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	09db      	lsrs	r3, r3, #7
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8c:	d8f0      	bhi.n	8006a70 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	617a      	str	r2, [r7, #20]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	68b8      	ldr	r0, [r7, #8]
 8006aa4:	f7fe fe6e 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2001a7c8 	.word	0x2001a7c8
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aca:	f04f 0120 	mov.w	r1, #32
 8006ace:	f381 8811 	msr	BASEPRI, r1
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	4807      	ldr	r0, [pc, #28]	; (8006af4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ad6:	f7fe fd64 	bl	80055a2 <_PreparePacket>
 8006ada:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006adc:	2203      	movs	r2, #3
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6838      	ldr	r0, [r7, #0]
 8006ae2:	f7fe fe4f 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f383 8811 	msr	BASEPRI, r3
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	2001a7c8 	.word	0x2001a7c8

08006af8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006afe:	f3ef 8311 	mrs	r3, BASEPRI
 8006b02:	f04f 0120 	mov.w	r1, #32
 8006b06:	f381 8811 	msr	BASEPRI, r1
 8006b0a:	607b      	str	r3, [r7, #4]
 8006b0c:	4807      	ldr	r0, [pc, #28]	; (8006b2c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b0e:	f7fe fd48 	bl	80055a2 <_PreparePacket>
 8006b12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b14:	2212      	movs	r2, #18
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6838      	ldr	r0, [r7, #0]
 8006b1a:	f7fe fe33 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f383 8811 	msr	BASEPRI, r3
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	2001a7c8 	.word	0x2001a7c8

08006b30 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b36:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3a:	f04f 0120 	mov.w	r1, #32
 8006b3e:	f381 8811 	msr	BASEPRI, r1
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	4807      	ldr	r0, [pc, #28]	; (8006b64 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b46:	f7fe fd2c 	bl	80055a2 <_PreparePacket>
 8006b4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b4c:	2211      	movs	r2, #17
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	f7fe fe17 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f383 8811 	msr	BASEPRI, r3
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2001a7c8 	.word	0x2001a7c8

08006b68 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b70:	f3ef 8311 	mrs	r3, BASEPRI
 8006b74:	f04f 0120 	mov.w	r1, #32
 8006b78:	f381 8811 	msr	BASEPRI, r1
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	4819      	ldr	r0, [pc, #100]	; (8006be4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006b80:	f7fe fd0f 	bl	80055a2 <_PreparePacket>
 8006b84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	e00b      	b.n	8006bb6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	1c59      	adds	r1, r3, #1
 8006ba6:	61f9      	str	r1, [r7, #28]
 8006ba8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	09db      	lsrs	r3, r3, #7
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bba:	d8f0      	bhi.n	8006b9e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006bcc:	2208      	movs	r2, #8
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	6938      	ldr	r0, [r7, #16]
 8006bd2:	f7fe fdd7 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f383 8811 	msr	BASEPRI, r3
}
 8006bdc:	bf00      	nop
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	2001a7c8 	.word	0x2001a7c8
 8006be8:	2001a798 	.word	0x2001a798

08006bec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf8:	f04f 0120 	mov.w	r1, #32
 8006bfc:	f381 8811 	msr	BASEPRI, r1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	4819      	ldr	r0, [pc, #100]	; (8006c68 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c04:	f7fe fccd 	bl	80055a2 <_PreparePacket>
 8006c08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c0e:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	e00b      	b.n	8006c3a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	1c59      	adds	r1, r3, #1
 8006c2a:	61f9      	str	r1, [r7, #28]
 8006c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	09db      	lsrs	r3, r3, #7
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3e:	d8f0      	bhi.n	8006c22 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	1c5a      	adds	r2, r3, #1
 8006c44:	61fa      	str	r2, [r7, #28]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c50:	2204      	movs	r2, #4
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	6938      	ldr	r0, [r7, #16]
 8006c56:	f7fe fd95 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f383 8811 	msr	BASEPRI, r3
}
 8006c60:	bf00      	nop
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	2001a7c8 	.word	0x2001a7c8
 8006c6c:	2001a798 	.word	0x2001a798

08006c70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c78:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7c:	f04f 0120 	mov.w	r1, #32
 8006c80:	f381 8811 	msr	BASEPRI, r1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	4819      	ldr	r0, [pc, #100]	; (8006cec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c88:	f7fe fc8b 	bl	80055a2 <_PreparePacket>
 8006c8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c92:	4b17      	ldr	r3, [pc, #92]	; (8006cf0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	61bb      	str	r3, [r7, #24]
 8006ca4:	e00b      	b.n	8006cbe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	61f9      	str	r1, [r7, #28]
 8006cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	09db      	lsrs	r3, r3, #7
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc2:	d8f0      	bhi.n	8006ca6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	61fa      	str	r2, [r7, #28]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006cd4:	2206      	movs	r2, #6
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	6938      	ldr	r0, [r7, #16]
 8006cda:	f7fe fd53 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f383 8811 	msr	BASEPRI, r3
}
 8006ce4:	bf00      	nop
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	2001a7c8 	.word	0x2001a7c8
 8006cf0:	2001a798 	.word	0x2001a798

08006cf4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006d02:	f04f 0120 	mov.w	r1, #32
 8006d06:	f381 8811 	msr	BASEPRI, r1
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	4827      	ldr	r0, [pc, #156]	; (8006dac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006d0e:	f7fe fc48 	bl	80055a2 <_PreparePacket>
 8006d12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	e00b      	b.n	8006d44 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	1c59      	adds	r1, r3, #1
 8006d34:	6279      	str	r1, [r7, #36]	; 0x24
 8006d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d3a:	b2d2      	uxtb	r2, r2
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	09db      	lsrs	r3, r3, #7
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b7f      	cmp	r3, #127	; 0x7f
 8006d48:	d8f0      	bhi.n	8006d2c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	627a      	str	r2, [r7, #36]	; 0x24
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e00b      	b.n	8006d7c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	1c59      	adds	r1, r3, #1
 8006d6c:	61f9      	str	r1, [r7, #28]
 8006d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	09db      	lsrs	r3, r3, #7
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d80:	d8f0      	bhi.n	8006d64 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	61fa      	str	r2, [r7, #28]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006d92:	2207      	movs	r2, #7
 8006d94:	68f9      	ldr	r1, [r7, #12]
 8006d96:	6938      	ldr	r0, [r7, #16]
 8006d98:	f7fe fcf4 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f383 8811 	msr	BASEPRI, r3
}
 8006da2:	bf00      	nop
 8006da4:	3728      	adds	r7, #40	; 0x28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2001a7c8 	.word	0x2001a7c8
 8006db0:	2001a798 	.word	0x2001a798

08006db4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	1ad3      	subs	r3, r2, r3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	2001a798 	.word	0x2001a798

08006dd4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08c      	sub	sp, #48	; 0x30
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006dde:	4b3b      	ldr	r3, [pc, #236]	; (8006ecc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d06d      	beq.n	8006ec2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006dec:	2300      	movs	r3, #0
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df0:	e008      	b.n	8006e04 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d007      	beq.n	8006e0e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	3301      	adds	r3, #1
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e04:	79fb      	ldrb	r3, [r7, #7]
 8006e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d3f2      	bcc.n	8006df2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e0c:	e000      	b.n	8006e10 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e0e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d055      	beq.n	8006ec2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e16:	f3ef 8311 	mrs	r3, BASEPRI
 8006e1a:	f04f 0120 	mov.w	r1, #32
 8006e1e:	f381 8811 	msr	BASEPRI, r1
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	482a      	ldr	r0, [pc, #168]	; (8006ed0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006e26:	f7fe fbbc 	bl	80055a2 <_PreparePacket>
 8006e2a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	623b      	str	r3, [r7, #32]
 8006e38:	e00b      	b.n	8006e52 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	6279      	str	r1, [r7, #36]	; 0x24
 8006e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	09db      	lsrs	r3, r3, #7
 8006e50:	623b      	str	r3, [r7, #32]
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	2b7f      	cmp	r3, #127	; 0x7f
 8006e56:	d8f0      	bhi.n	8006e3a <SEGGER_SYSVIEW_SendModule+0x66>
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e00b      	b.n	8006e8c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	1c59      	adds	r1, r3, #1
 8006e7c:	61f9      	str	r1, [r7, #28]
 8006e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	09db      	lsrs	r3, r3, #7
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e90:	d8f0      	bhi.n	8006e74 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	61fa      	str	r2, [r7, #28]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fe fb2c 	bl	8005508 <_EncodeStr>
 8006eb0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006eb2:	2216      	movs	r2, #22
 8006eb4:	68f9      	ldr	r1, [r7, #12]
 8006eb6:	6938      	ldr	r0, [r7, #16]
 8006eb8:	f7fe fc64 	bl	8005784 <_SendPacket>
      RECORD_END();
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3730      	adds	r7, #48	; 0x30
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	2001a7c0 	.word	0x2001a7c0
 8006ed0:	2001a7c8 	.word	0x2001a7c8

08006ed4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006eda:	4b0c      	ldr	r3, [pc, #48]	; (8006f0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00f      	beq.n	8006f02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ee2:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f2      	bne.n	8006ee8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	2001a7c0 	.word	0x2001a7c0

08006f10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f16:	f3ef 8311 	mrs	r3, BASEPRI
 8006f1a:	f04f 0120 	mov.w	r1, #32
 8006f1e:	f381 8811 	msr	BASEPRI, r1
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	4817      	ldr	r0, [pc, #92]	; (8006f84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f26:	f7fe fb3c 	bl	80055a2 <_PreparePacket>
 8006f2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	e00b      	b.n	8006f54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	1c59      	adds	r1, r3, #1
 8006f44:	6179      	str	r1, [r7, #20]
 8006f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	09db      	lsrs	r3, r3, #7
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	2b7f      	cmp	r3, #127	; 0x7f
 8006f58:	d8f0      	bhi.n	8006f3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	1c5a      	adds	r2, r3, #1
 8006f5e:	617a      	str	r2, [r7, #20]
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f6a:	221b      	movs	r2, #27
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	68b8      	ldr	r0, [r7, #8]
 8006f70:	f7fe fc08 	bl	8005784 <_SendPacket>
  RECORD_END();
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f383 8811 	msr	BASEPRI, r3
}
 8006f7a:	bf00      	nop
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	2001a7c8 	.word	0x2001a7c8
 8006f88:	2001a7c4 	.word	0x2001a7c4

08006f8c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f8c:	b40f      	push	{r0, r1, r2, r3}
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f94:	f107 0314 	add.w	r3, r7, #20
 8006f98:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f9a:	1d3b      	adds	r3, r7, #4
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6938      	ldr	r0, [r7, #16]
 8006fa2:	f7fe fe79 	bl	8005c98 <_VPrintTarget>
  va_end(ParamList);
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fb0:	b004      	add	sp, #16
 8006fb2:	4770      	bx	lr

08006fb4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	; 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc0:	f04f 0120 	mov.w	r1, #32
 8006fc4:	f381 8811 	msr	BASEPRI, r1
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	4827      	ldr	r0, [pc, #156]	; (8007068 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006fcc:	f7fe fae9 	bl	80055a2 <_PreparePacket>
 8006fd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fd2:	2280      	movs	r2, #128	; 0x80
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	6938      	ldr	r0, [r7, #16]
 8006fd8:	f7fe fa96 	bl	8005508 <_EncodeStr>
 8006fdc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	e00b      	b.n	8007000 <SEGGER_SYSVIEW_Warn+0x4c>
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	09db      	lsrs	r3, r3, #7
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b7f      	cmp	r3, #127	; 0x7f
 8007004:	d8f0      	bhi.n	8006fe8 <SEGGER_SYSVIEW_Warn+0x34>
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	627a      	str	r2, [r7, #36]	; 0x24
 800700c:	6a3a      	ldr	r2, [r7, #32]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	2300      	movs	r3, #0
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	e00b      	b.n	8007038 <SEGGER_SYSVIEW_Warn+0x84>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	b2da      	uxtb	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	1c59      	adds	r1, r3, #1
 8007028:	61f9      	str	r1, [r7, #28]
 800702a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	09db      	lsrs	r3, r3, #7
 8007036:	61bb      	str	r3, [r7, #24]
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b7f      	cmp	r3, #127	; 0x7f
 800703c:	d8f0      	bhi.n	8007020 <SEGGER_SYSVIEW_Warn+0x6c>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	61fa      	str	r2, [r7, #28]
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800704e:	221a      	movs	r2, #26
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	6938      	ldr	r0, [r7, #16]
 8007054:	f7fe fb96 	bl	8005784 <_SendPacket>
  RECORD_END();
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f383 8811 	msr	BASEPRI, r3
}
 800705e:	bf00      	nop
 8007060:	3728      	adds	r7, #40	; 0x28
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	2001a7c8 	.word	0x2001a7c8

0800706c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007070:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007072:	7e1b      	ldrb	r3, [r3, #24]
 8007074:	4619      	mov	r1, r3
 8007076:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007078:	460b      	mov	r3, r1
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	440b      	add	r3, r1
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	336c      	adds	r3, #108	; 0x6c
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007088:	7e1b      	ldrb	r3, [r3, #24]
 800708a:	4618      	mov	r0, r3
 800708c:	490d      	ldr	r1, [pc, #52]	; (80070c4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800708e:	4603      	mov	r3, r0
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4403      	add	r3, r0
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	440b      	add	r3, r1
 8007098:	3370      	adds	r3, #112	; 0x70
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d00b      	beq.n	80070b8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070a2:	789b      	ldrb	r3, [r3, #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80070a8:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070aa:	2201      	movs	r2, #1
 80070ac:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80070ae:	f7fe fa85 	bl	80055bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80070b8:	4b01      	ldr	r3, [pc, #4]	; (80070c0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	2001a798 	.word	0x2001a798
 80070c4:	200192d8 	.word	0x200192d8

080070c8 <memcmp>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	3901      	subs	r1, #1
 80070cc:	4402      	add	r2, r0
 80070ce:	4290      	cmp	r0, r2
 80070d0:	d101      	bne.n	80070d6 <memcmp+0xe>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e005      	b.n	80070e2 <memcmp+0x1a>
 80070d6:	7803      	ldrb	r3, [r0, #0]
 80070d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d001      	beq.n	80070e4 <memcmp+0x1c>
 80070e0:	1b18      	subs	r0, r3, r4
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	3001      	adds	r0, #1
 80070e6:	e7f2      	b.n	80070ce <memcmp+0x6>

080070e8 <memset>:
 80070e8:	4402      	add	r2, r0
 80070ea:	4603      	mov	r3, r0
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <__libc_init_array>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	4d0d      	ldr	r5, [pc, #52]	; (8007130 <__libc_init_array+0x38>)
 80070fc:	4c0d      	ldr	r4, [pc, #52]	; (8007134 <__libc_init_array+0x3c>)
 80070fe:	1b64      	subs	r4, r4, r5
 8007100:	10a4      	asrs	r4, r4, #2
 8007102:	2600      	movs	r6, #0
 8007104:	42a6      	cmp	r6, r4
 8007106:	d109      	bne.n	800711c <__libc_init_array+0x24>
 8007108:	4d0b      	ldr	r5, [pc, #44]	; (8007138 <__libc_init_array+0x40>)
 800710a:	4c0c      	ldr	r4, [pc, #48]	; (800713c <__libc_init_array+0x44>)
 800710c:	f000 f826 	bl	800715c <_init>
 8007110:	1b64      	subs	r4, r4, r5
 8007112:	10a4      	asrs	r4, r4, #2
 8007114:	2600      	movs	r6, #0
 8007116:	42a6      	cmp	r6, r4
 8007118:	d105      	bne.n	8007126 <__libc_init_array+0x2e>
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007120:	4798      	blx	r3
 8007122:	3601      	adds	r6, #1
 8007124:	e7ee      	b.n	8007104 <__libc_init_array+0xc>
 8007126:	f855 3b04 	ldr.w	r3, [r5], #4
 800712a:	4798      	blx	r3
 800712c:	3601      	adds	r6, #1
 800712e:	e7f2      	b.n	8007116 <__libc_init_array+0x1e>
 8007130:	08007308 	.word	0x08007308
 8007134:	08007308 	.word	0x08007308
 8007138:	08007308 	.word	0x08007308
 800713c:	0800730c 	.word	0x0800730c

08007140 <memcpy>:
 8007140:	440a      	add	r2, r1
 8007142:	4291      	cmp	r1, r2
 8007144:	f100 33ff 	add.w	r3, r0, #4294967295
 8007148:	d100      	bne.n	800714c <memcpy+0xc>
 800714a:	4770      	bx	lr
 800714c:	b510      	push	{r4, lr}
 800714e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007156:	4291      	cmp	r1, r2
 8007158:	d1f9      	bne.n	800714e <memcpy+0xe>
 800715a:	bd10      	pop	{r4, pc}

0800715c <_init>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	bf00      	nop
 8007160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007162:	bc08      	pop	{r3}
 8007164:	469e      	mov	lr, r3
 8007166:	4770      	bx	lr

08007168 <_fini>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr
