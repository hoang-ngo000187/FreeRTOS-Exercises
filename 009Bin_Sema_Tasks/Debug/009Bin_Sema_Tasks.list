
009Bin_Sema_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007be8  08007be8  00017be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da4  08007da4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000198e0  20000078  08007e24  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019958  08007e24  00029958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab18  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033df  00000000  00000000  0003abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001508  00000000  00000000  0003dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0003f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242f3  00000000  00000000  00040818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011272  00000000  00000000  00064b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9497  00000000  00000000  00075d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  0014f290  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00154ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00154f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bd0 	.word	0x08007bd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007bd0 	.word	0x08007bd0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200198ac 	.word	0x200198ac

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_Init+0x40>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <HAL_Init+0x40>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_Init+0x40>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_Init+0x40>)
 8000636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800063a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_Init+0x40>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_Init+0x40>)
 8000642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f8d8 	bl	80007fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	2000      	movs	r0, #0
 8000650:	f002 f9d8 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000654:	f002 f966 	bl	8002924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023c00 	.word	0x40023c00

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	200197d8 	.word	0x200197d8

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200197d8 	.word	0x200197d8

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0b      	blt.n	8000732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 021f 	and.w	r2, r3, #31
 8000720:	4907      	ldr	r1, [pc, #28]	; (8000740 <__NVIC_EnableIRQ+0x38>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	095b      	lsrs	r3, r3, #5
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e100 	.word	0xe000e100

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db0a      	blt.n	800076e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	440b      	add	r3, r1
 8000768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800076c:	e00a      	b.n	8000784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	440b      	add	r3, r1
 8000782:	761a      	strb	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f1c3 0307 	rsb	r3, r3, #7
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	bf28      	it	cs
 80007b6:	2304      	movcs	r3, #4
 80007b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d902      	bls.n	80007c8 <NVIC_EncodePriority+0x30>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b03      	subs	r3, #3
 80007c6:	e000      	b.n	80007ca <NVIC_EncodePriority+0x32>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	401a      	ands	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43d9      	mvns	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff4c 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000826:	f7ff ff61 	bl	80006ec <__NVIC_GetPriorityGrouping>
 800082a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f7ff ffb1 	bl	8000798 <NVIC_EncodePriority>
 8000836:	4602      	mov	r2, r0
 8000838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff80 	bl	8000744 <__NVIC_SetPriority>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff54 	bl	8000708 <__NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e16b      	b.n	8000b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000884:	2201      	movs	r2, #1
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	429a      	cmp	r2, r3
 800089e:	f040 815a 	bne.w	8000b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00b      	beq.n	80008c2 <HAL_GPIO_Init+0x5a>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d007      	beq.n	80008c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b6:	2b11      	cmp	r3, #17
 80008b8:	d003      	beq.n	80008c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d130      	bne.n	8000924 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4013      	ands	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008f8:	2201      	movs	r2, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	f003 0201 	and.w	r2, r3, #1
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d003      	beq.n	8000964 <HAL_GPIO_Init+0xfc>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b12      	cmp	r3, #18
 8000962:	d123      	bne.n	80009ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	08da      	lsrs	r2, r3, #3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3208      	adds	r2, #8
 800096c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	220f      	movs	r2, #15
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	691a      	ldr	r2, [r3, #16]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	08da      	lsrs	r2, r3, #3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3208      	adds	r2, #8
 80009a6:	69b9      	ldr	r1, [r7, #24]
 80009a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0203 	and.w	r2, r3, #3
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 80b4 	beq.w	8000b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b5f      	ldr	r3, [pc, #380]	; (8000b70 <HAL_GPIO_Init+0x308>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a5e      	ldr	r2, [pc, #376]	; (8000b70 <HAL_GPIO_Init+0x308>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b5c      	ldr	r3, [pc, #368]	; (8000b70 <HAL_GPIO_Init+0x308>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a0a:	4a5a      	ldr	r2, [pc, #360]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <HAL_GPIO_Init+0x310>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d02b      	beq.n	8000a8e <HAL_GPIO_Init+0x226>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <HAL_GPIO_Init+0x314>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d025      	beq.n	8000a8a <HAL_GPIO_Init+0x222>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <HAL_GPIO_Init+0x318>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d01f      	beq.n	8000a86 <HAL_GPIO_Init+0x21e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4e      	ldr	r2, [pc, #312]	; (8000b84 <HAL_GPIO_Init+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d019      	beq.n	8000a82 <HAL_GPIO_Init+0x21a>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4d      	ldr	r2, [pc, #308]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0x216>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4c      	ldr	r2, [pc, #304]	; (8000b8c <HAL_GPIO_Init+0x324>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <HAL_GPIO_Init+0x328>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x20e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <HAL_GPIO_Init+0x32c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x20a>
 8000a6e:	2307      	movs	r3, #7
 8000a70:	e00e      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a72:	2308      	movs	r3, #8
 8000a74:	e00c      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a76:	2306      	movs	r3, #6
 8000a78:	e00a      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	e008      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a7e:	2304      	movs	r3, #4
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e004      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e002      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	f002 0203 	and.w	r2, r2, #3
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa0:	4934      	ldr	r1, [pc, #208]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ad2:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	f67f ae90 	bls.w	8000884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b64:	bf00      	nop
 8000b66:	3724      	adds	r7, #36	; 0x24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40021c00 	.word	0x40021c00
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb8:	e003      	b.n	8000bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e25b      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d075      	beq.n	8000cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d00c      	beq.n	8000c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bfa:	4ba0      	ldr	r3, [pc, #640]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d112      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4b9d      	ldr	r3, [pc, #628]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c12:	d10b      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d05b      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x108>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d157      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e236      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x74>
 8000c36:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a90      	ldr	r2, [pc, #576]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x98>
 8000c4e:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a8a      	ldr	r2, [pc, #552]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b88      	ldr	r3, [pc, #544]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a87      	ldr	r2, [pc, #540]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c68:	4b84      	ldr	r3, [pc, #528]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a83      	ldr	r2, [pc, #524]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b81      	ldr	r3, [pc, #516]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a80      	ldr	r2, [pc, #512]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fd00 	bl	800068c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcfc 	bl	800068c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1fb      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b76      	ldr	r3, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xc0>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fcec 	bl	800068c <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fce8 	bl	800068c <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1e7      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0xe8>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e1bb      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4952      	ldr	r1, [pc, #328]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d46:	f7ff fca1 	bl	800068c <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc9d 	bl	800068c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e19c      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4940      	ldr	r1, [pc, #256]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc80 	bl	800068c <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc7c 	bl	800068c <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e17b      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d030      	beq.n	8000e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d016      	beq.n	8000df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc60 	bl	800068c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc5c 	bl	800068c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e15b      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x200>
 8000dee:	e015      	b.n	8000e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fc49 	bl	800068c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc45 	bl	800068c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e144      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f0      	bne.n	8000dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a0 	beq.w	8000f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d121      	bne.n	8000eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fc0b 	bl	800068c <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	e011      	b.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	42470000 	.word	0x42470000
 8000e84:	42470e80 	.word	0x42470e80
 8000e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8c:	f7ff fbfe 	bl	800068c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e0fd      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b81      	ldr	r3, [pc, #516]	; (80010a4 <HAL_RCC_OscConfig+0x4d4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb6:	4a7c      	ldr	r2, [pc, #496]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b77      	ldr	r3, [pc, #476]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	4a76      	ldr	r2, [pc, #472]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	4b74      	ldr	r3, [pc, #464]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed8:	4a73      	ldr	r2, [pc, #460]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ee2:	4b71      	ldr	r3, [pc, #452]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	4a70      	ldr	r2, [pc, #448]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
 8000eee:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef2:	4a6d      	ldr	r2, [pc, #436]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbc3 	bl	800068c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fbbf 	bl	800068c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e0bc      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x33a>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fbad 	bl	800068c <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fba9 	bl	800068c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0a6      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8092 	beq.w	8001098 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d05c      	beq.n	800103a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d141      	bne.n	800100c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb7d 	bl	800068c <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb79 	bl	800068c <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e078      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	019b      	lsls	r3, r3, #6
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	061b      	lsls	r3, r3, #24
 8000fd8:	4933      	ldr	r1, [pc, #204]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <HAL_RCC_OscConfig+0x4dc>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb52 	bl	800068c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb4e 	bl	800068c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e04d      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x41c>
 800100a:	e045      	b.n	8001098 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_RCC_OscConfig+0x4dc>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fb3b 	bl	800068c <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fb37 	bl	800068c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e036      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x44a>
 8001038:	e02e      	b.n	8001098 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e029      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	429a      	cmp	r2, r3
 8001058:	d11c      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001064:	429a      	cmp	r2, r3
 8001066:	d115      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800106e:	4013      	ands	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001074:	4293      	cmp	r3, r2
 8001076:	d10d      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	42470060 	.word	0x42470060

080010b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0cc      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d90c      	bls.n	80010ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0b8      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800110e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	494d      	ldr	r1, [pc, #308]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d044      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d119      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e07f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d003      	beq.n	800116e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800116a:	2b03      	cmp	r3, #3
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e06f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e067      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f023 0203 	bic.w	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4934      	ldr	r1, [pc, #208]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	4313      	orrs	r3, r2
 800119e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a0:	f7ff fa74 	bl	800068c <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	e00a      	b.n	80011be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a8:	f7ff fa70 	bl	800068c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e04f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 020c 	and.w	r2, r3, #12
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d1eb      	bne.n	80011a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d20c      	bcs.n	80011f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e032      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4916      	ldr	r1, [pc, #88]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	490e      	ldr	r1, [pc, #56]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	4313      	orrs	r3, r2
 8001234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001236:	f000 f821 	bl	800127c <HAL_RCC_GetSysClockFreq>
 800123a:	4601      	mov	r1, r0
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	fa21 f303 	lsr.w	r3, r1, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fbd4 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00
 800126c:	40023800 	.word	0x40023800
 8001270:	08007d44 	.word	0x08007d44
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d007      	beq.n	80012ae <HAL_RCC_GetSysClockFreq+0x32>
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d008      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x38>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 80b4 	bne.w	8001410 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012aa:	60bb      	str	r3, [r7, #8]
       break;
 80012ac:	e0b3      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ae:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012b0:	60bb      	str	r3, [r7, #8]
      break;
 80012b2:	e0b0      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b4:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d04a      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	099b      	lsrs	r3, r3, #6
 80012d0:	f04f 0400 	mov.w	r4, #0
 80012d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	ea03 0501 	and.w	r5, r3, r1
 80012e0:	ea04 0602 	and.w	r6, r4, r2
 80012e4:	4629      	mov	r1, r5
 80012e6:	4632      	mov	r2, r6
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	f04f 0400 	mov.w	r4, #0
 80012f0:	0154      	lsls	r4, r2, #5
 80012f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f6:	014b      	lsls	r3, r1, #5
 80012f8:	4619      	mov	r1, r3
 80012fa:	4622      	mov	r2, r4
 80012fc:	1b49      	subs	r1, r1, r5
 80012fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f04f 0400 	mov.w	r4, #0
 800130a:	0194      	lsls	r4, r2, #6
 800130c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001310:	018b      	lsls	r3, r1, #6
 8001312:	1a5b      	subs	r3, r3, r1
 8001314:	eb64 0402 	sbc.w	r4, r4, r2
 8001318:	f04f 0100 	mov.w	r1, #0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	00e2      	lsls	r2, r4, #3
 8001322:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001326:	00d9      	lsls	r1, r3, #3
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	195b      	adds	r3, r3, r5
 800132e:	eb44 0406 	adc.w	r4, r4, r6
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	0262      	lsls	r2, r4, #9
 800133c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001340:	0259      	lsls	r1, r3, #9
 8001342:	460b      	mov	r3, r1
 8001344:	4614      	mov	r4, r2
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f04f 0400 	mov.w	r4, #0
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	f7fe ffe4 	bl	8000320 <__aeabi_uldivmod>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e049      	b.n	80013f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	f04f 0400 	mov.w	r4, #0
 800136a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	ea03 0501 	and.w	r5, r3, r1
 8001376:	ea04 0602 	and.w	r6, r4, r2
 800137a:	4629      	mov	r1, r5
 800137c:	4632      	mov	r2, r6
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	f04f 0400 	mov.w	r4, #0
 8001386:	0154      	lsls	r4, r2, #5
 8001388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800138c:	014b      	lsls	r3, r1, #5
 800138e:	4619      	mov	r1, r3
 8001390:	4622      	mov	r2, r4
 8001392:	1b49      	subs	r1, r1, r5
 8001394:	eb62 0206 	sbc.w	r2, r2, r6
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f04f 0400 	mov.w	r4, #0
 80013a0:	0194      	lsls	r4, r2, #6
 80013a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013a6:	018b      	lsls	r3, r1, #6
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	eb64 0402 	sbc.w	r4, r4, r2
 80013ae:	f04f 0100 	mov.w	r1, #0
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	00e2      	lsls	r2, r4, #3
 80013b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013bc:	00d9      	lsls	r1, r3, #3
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	195b      	adds	r3, r3, r5
 80013c4:	eb44 0406 	adc.w	r4, r4, r6
 80013c8:	f04f 0100 	mov.w	r1, #0
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	02a2      	lsls	r2, r4, #10
 80013d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013d6:	0299      	lsls	r1, r3, #10
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0400 	mov.w	r4, #0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	f7fe ff99 	bl	8000320 <__aeabi_uldivmod>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	3301      	adds	r3, #1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	60bb      	str	r3, [r7, #8]
      break;
 800140e:	e002      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001412:	60bb      	str	r3, [r7, #8]
      break;
 8001414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001416:	68bb      	ldr	r3, [r7, #8]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	00f42400 	.word	0x00f42400
 8001428:	007a1200 	.word	0x007a1200

0800142c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_RCC_GetHCLKFreq+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001448:	f7ff fff0 	bl	800142c <HAL_RCC_GetHCLKFreq>
 800144c:	4601      	mov	r1, r0
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	0a9b      	lsrs	r3, r3, #10
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	08007d54 	.word	0x08007d54

0800146c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001470:	f7ff ffdc 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001474:	4601      	mov	r1, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0b5b      	lsrs	r3, r3, #13
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	08007d54 	.word	0x08007d54

08001494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	220f      	movs	r2, #15
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_RCC_GetClockConfig+0x60>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 020f 	and.w	r2, r3, #15
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e01d      	b.n	8001546 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f815 	bl	800154e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3304      	adds	r3, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f000 f968 	bl	800180c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b06      	cmp	r3, #6
 800158a:	d007      	beq.n	800159c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d122      	bne.n	8001606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d11b      	bne.n	8001606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f06f 0202 	mvn.w	r2, #2
 80015d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f8ee 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 80015f2:	e005      	b.n	8001600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8e0 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8f1 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b04      	cmp	r3, #4
 8001612:	d122      	bne.n	800165a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b04      	cmp	r3, #4
 8001620:	d11b      	bne.n	800165a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0204 	mvn.w	r2, #4
 800162a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f8c4 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 8001646:	e005      	b.n	8001654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8b6 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8c7 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b08      	cmp	r3, #8
 8001666:	d122      	bne.n	80016ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11b      	bne.n	80016ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f06f 0208 	mvn.w	r2, #8
 800167e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f89a 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 800169a:	e005      	b.n	80016a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f88c 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f89d 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d122      	bne.n	8001702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d11b      	bne.n	8001702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0210 	mvn.w	r2, #16
 80016d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f870 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 80016ee:	e005      	b.n	80016fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f862 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f873 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10e      	bne.n	800172e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f06f 0201 	mvn.w	r2, #1
 8001726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f001 f8e1 	bl	80028f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b80      	cmp	r3, #128	; 0x80
 800173a:	d10e      	bne.n	800175a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b80      	cmp	r3, #128	; 0x80
 8001748:	d107      	bne.n	800175a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f903 	bl	8001960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001764:	2b40      	cmp	r3, #64	; 0x40
 8001766:	d10e      	bne.n	8001786 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	2b40      	cmp	r3, #64	; 0x40
 8001774:	d107      	bne.n	8001786 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800177e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f838 	bl	80017f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b20      	cmp	r3, #32
 8001792:	d10e      	bne.n	80017b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d107      	bne.n	80017b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f06f 0220 	mvn.w	r2, #32
 80017aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8cd 	bl	800194c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a40      	ldr	r2, [pc, #256]	; (8001920 <TIM_Base_SetConfig+0x114>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182a:	d00f      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3d      	ldr	r2, [pc, #244]	; (8001924 <TIM_Base_SetConfig+0x118>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00b      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <TIM_Base_SetConfig+0x11c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <TIM_Base_SetConfig+0x120>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d003      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <TIM_Base_SetConfig+0x124>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d108      	bne.n	800185e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <TIM_Base_SetConfig+0x114>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d02b      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d027      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <TIM_Base_SetConfig+0x118>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d023      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <TIM_Base_SetConfig+0x11c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a2a      	ldr	r2, [pc, #168]	; (800192c <TIM_Base_SetConfig+0x120>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01b      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a29      	ldr	r2, [pc, #164]	; (8001930 <TIM_Base_SetConfig+0x124>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d017      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a28      	ldr	r2, [pc, #160]	; (8001934 <TIM_Base_SetConfig+0x128>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <TIM_Base_SetConfig+0x12c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00f      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <TIM_Base_SetConfig+0x130>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00b      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a25      	ldr	r2, [pc, #148]	; (8001940 <TIM_Base_SetConfig+0x134>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <TIM_Base_SetConfig+0x138>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d003      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a23      	ldr	r2, [pc, #140]	; (8001948 <TIM_Base_SetConfig+0x13c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <TIM_Base_SetConfig+0x114>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <TIM_Base_SetConfig+0xf8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <TIM_Base_SetConfig+0x124>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d103      	bne.n	800190c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	615a      	str	r2, [r3, #20]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40010000 	.word	0x40010000
 8001924:	40000400 	.word	0x40000400
 8001928:	40000800 	.word	0x40000800
 800192c:	40000c00 	.word	0x40000c00
 8001930:	40010400 	.word	0x40010400
 8001934:	40014000 	.word	0x40014000
 8001938:	40014400 	.word	0x40014400
 800193c:	40014800 	.word	0x40014800
 8001940:	40001800 	.word	0x40001800
 8001944:	40001c00 	.word	0x40001c00
 8001948:	40002000 	.word	0x40002000

0800194c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e03f      	b.n	8001a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 ffea 	bl	8002974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f90b 	bl	8001bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b088      	sub	sp, #32
 8001a12:	af02      	add	r7, sp, #8
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	f040 8083 	bne.w	8001b36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_UART_Transmit+0x2e>
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e07b      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_UART_Transmit+0x40>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e074      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2221      	movs	r2, #33	; 0x21
 8001a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a64:	f7fe fe12 	bl	800068c <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a7e:	e042      	b.n	8001b06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d122      	bne.n	8001ade <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f84c 	bl	8001b40 <UART_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e042      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ac4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	e017      	b.n	8001b06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	e013      	b.n	8001b06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f829 	bl	8001b40 <UART_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e01f      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1b7      	bne.n	8001a80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f810 	bl	8001b40 <UART_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e006      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b50:	e02c      	b.n	8001bac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d028      	beq.n	8001bac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b60:	f7fe fd94 	bl	800068c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d21d      	bcs.n	8001bac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e00f      	b.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d0c3      	beq.n	8001b52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c16:	f023 030c 	bic.w	r3, r3, #12
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c42:	f040 818b 	bne.w	8001f5c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4ac1      	ldr	r2, [pc, #772]	; (8001f50 <UART_SetConfig+0x37c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d005      	beq.n	8001c5c <UART_SetConfig+0x88>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4abf      	ldr	r2, [pc, #764]	; (8001f54 <UART_SetConfig+0x380>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 80bd 	bne.w	8001dd6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c5c:	f7ff fc06 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8001c60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	461d      	mov	r5, r3
 8001c66:	f04f 0600 	mov.w	r6, #0
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	46b1      	mov	r9, r6
 8001c6e:	eb18 0308 	adds.w	r3, r8, r8
 8001c72:	eb49 0409 	adc.w	r4, r9, r9
 8001c76:	4698      	mov	r8, r3
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	eb18 0805 	adds.w	r8, r8, r5
 8001c7e:	eb49 0906 	adc.w	r9, r9, r6
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c96:	4688      	mov	r8, r1
 8001c98:	4691      	mov	r9, r2
 8001c9a:	eb18 0005 	adds.w	r0, r8, r5
 8001c9e:	eb49 0106 	adc.w	r1, r9, r6
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	f04f 0600 	mov.w	r6, #0
 8001cac:	196b      	adds	r3, r5, r5
 8001cae:	eb46 0406 	adc.w	r4, r6, r6
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	f7fe fb33 	bl	8000320 <__aeabi_uldivmod>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <UART_SetConfig+0x384>)
 8001cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	461d      	mov	r5, r3
 8001cd0:	f04f 0600 	mov.w	r6, #0
 8001cd4:	46a9      	mov	r9, r5
 8001cd6:	46b2      	mov	sl, r6
 8001cd8:	eb19 0309 	adds.w	r3, r9, r9
 8001cdc:	eb4a 040a 	adc.w	r4, sl, sl
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	46a2      	mov	sl, r4
 8001ce4:	eb19 0905 	adds.w	r9, r9, r5
 8001ce8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001cfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d00:	4689      	mov	r9, r1
 8001d02:	4692      	mov	sl, r2
 8001d04:	eb19 0005 	adds.w	r0, r9, r5
 8001d08:	eb4a 0106 	adc.w	r1, sl, r6
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	461d      	mov	r5, r3
 8001d12:	f04f 0600 	mov.w	r6, #0
 8001d16:	196b      	adds	r3, r5, r5
 8001d18:	eb46 0406 	adc.w	r4, r6, r6
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	f7fe fafe 	bl	8000320 <__aeabi_uldivmod>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <UART_SetConfig+0x384>)
 8001d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	2164      	movs	r1, #100	; 0x64
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	3332      	adds	r3, #50	; 0x32
 8001d3e:	4a86      	ldr	r2, [pc, #536]	; (8001f58 <UART_SetConfig+0x384>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d4c:	4498      	add	r8, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	461d      	mov	r5, r3
 8001d52:	f04f 0600 	mov.w	r6, #0
 8001d56:	46a9      	mov	r9, r5
 8001d58:	46b2      	mov	sl, r6
 8001d5a:	eb19 0309 	adds.w	r3, r9, r9
 8001d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8001d62:	4699      	mov	r9, r3
 8001d64:	46a2      	mov	sl, r4
 8001d66:	eb19 0905 	adds.w	r9, r9, r5
 8001d6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d82:	4689      	mov	r9, r1
 8001d84:	4692      	mov	sl, r2
 8001d86:	eb19 0005 	adds.w	r0, r9, r5
 8001d8a:	eb4a 0106 	adc.w	r1, sl, r6
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	461d      	mov	r5, r3
 8001d94:	f04f 0600 	mov.w	r6, #0
 8001d98:	196b      	adds	r3, r5, r5
 8001d9a:	eb46 0406 	adc.w	r4, r6, r6
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fabd 	bl	8000320 <__aeabi_uldivmod>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <UART_SetConfig+0x384>)
 8001dae:	fba3 1302 	umull	r1, r3, r3, r2
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2164      	movs	r1, #100	; 0x64
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <UART_SetConfig+0x384>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	f003 0207 	and.w	r2, r3, #7
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4442      	add	r2, r8
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	e26f      	b.n	80022b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dd6:	f7ff fb35 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8001dda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	461d      	mov	r5, r3
 8001de0:	f04f 0600 	mov.w	r6, #0
 8001de4:	46a8      	mov	r8, r5
 8001de6:	46b1      	mov	r9, r6
 8001de8:	eb18 0308 	adds.w	r3, r8, r8
 8001dec:	eb49 0409 	adc.w	r4, r9, r9
 8001df0:	4698      	mov	r8, r3
 8001df2:	46a1      	mov	r9, r4
 8001df4:	eb18 0805 	adds.w	r8, r8, r5
 8001df8:	eb49 0906 	adc.w	r9, r9, r6
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e10:	4688      	mov	r8, r1
 8001e12:	4691      	mov	r9, r2
 8001e14:	eb18 0005 	adds.w	r0, r8, r5
 8001e18:	eb49 0106 	adc.w	r1, r9, r6
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	461d      	mov	r5, r3
 8001e22:	f04f 0600 	mov.w	r6, #0
 8001e26:	196b      	adds	r3, r5, r5
 8001e28:	eb46 0406 	adc.w	r4, r6, r6
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4623      	mov	r3, r4
 8001e30:	f7fe fa76 	bl	8000320 <__aeabi_uldivmod>
 8001e34:	4603      	mov	r3, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <UART_SetConfig+0x384>)
 8001e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	461d      	mov	r5, r3
 8001e4a:	f04f 0600 	mov.w	r6, #0
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	46b2      	mov	sl, r6
 8001e52:	eb19 0309 	adds.w	r3, r9, r9
 8001e56:	eb4a 040a 	adc.w	r4, sl, sl
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	46a2      	mov	sl, r4
 8001e5e:	eb19 0905 	adds.w	r9, r9, r5
 8001e62:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e7a:	4689      	mov	r9, r1
 8001e7c:	4692      	mov	sl, r2
 8001e7e:	eb19 0005 	adds.w	r0, r9, r5
 8001e82:	eb4a 0106 	adc.w	r1, sl, r6
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	f04f 0600 	mov.w	r6, #0
 8001e90:	196b      	adds	r3, r5, r5
 8001e92:	eb46 0406 	adc.w	r4, r6, r6
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	f7fe fa41 	bl	8000320 <__aeabi_uldivmod>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <UART_SetConfig+0x384>)
 8001ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2164      	movs	r1, #100	; 0x64
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	3332      	adds	r3, #50	; 0x32
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <UART_SetConfig+0x384>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ec6:	4498      	add	r8, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	461d      	mov	r5, r3
 8001ecc:	f04f 0600 	mov.w	r6, #0
 8001ed0:	46a9      	mov	r9, r5
 8001ed2:	46b2      	mov	sl, r6
 8001ed4:	eb19 0309 	adds.w	r3, r9, r9
 8001ed8:	eb4a 040a 	adc.w	r4, sl, sl
 8001edc:	4699      	mov	r9, r3
 8001ede:	46a2      	mov	sl, r4
 8001ee0:	eb19 0905 	adds.w	r9, r9, r5
 8001ee4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ef4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001efc:	4689      	mov	r9, r1
 8001efe:	4692      	mov	sl, r2
 8001f00:	eb19 0005 	adds.w	r0, r9, r5
 8001f04:	eb4a 0106 	adc.w	r1, sl, r6
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	f04f 0600 	mov.w	r6, #0
 8001f12:	196b      	adds	r3, r5, r5
 8001f14:	eb46 0406 	adc.w	r4, r6, r6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	f7fe fa00 	bl	8000320 <__aeabi_uldivmod>
 8001f20:	4603      	mov	r3, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <UART_SetConfig+0x384>)
 8001f28:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	2164      	movs	r1, #100	; 0x64
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <UART_SetConfig+0x384>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	f003 0207 	and.w	r2, r3, #7
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4442      	add	r2, r8
 8001f4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f4e:	e1b2      	b.n	80022b6 <UART_SetConfig+0x6e2>
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4ad7      	ldr	r2, [pc, #860]	; (80022c0 <UART_SetConfig+0x6ec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d005      	beq.n	8001f72 <UART_SetConfig+0x39e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4ad6      	ldr	r2, [pc, #856]	; (80022c4 <UART_SetConfig+0x6f0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f040 80d1 	bne.w	8002114 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f72:	f7ff fa7b 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8001f76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	f04f 0b00 	mov.w	fp, #0
 8001f80:	46d0      	mov	r8, sl
 8001f82:	46d9      	mov	r9, fp
 8001f84:	eb18 0308 	adds.w	r3, r8, r8
 8001f88:	eb49 0409 	adc.w	r4, r9, r9
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	46a1      	mov	r9, r4
 8001f90:	eb18 080a 	adds.w	r8, r8, sl
 8001f94:	eb49 090b 	adc.w	r9, r9, fp
 8001f98:	f04f 0100 	mov.w	r1, #0
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fa4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fa8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fac:	4688      	mov	r8, r1
 8001fae:	4691      	mov	r9, r2
 8001fb0:	eb1a 0508 	adds.w	r5, sl, r8
 8001fb4:	eb4b 0609 	adc.w	r6, fp, r9
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	f04f 0400 	mov.w	r4, #0
 8001fca:	0094      	lsls	r4, r2, #2
 8001fcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001fd0:	008b      	lsls	r3, r1, #2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	4631      	mov	r1, r6
 8001fda:	f7fe f9a1 	bl	8000320 <__aeabi_uldivmod>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4bb8      	ldr	r3, [pc, #736]	; (80022c8 <UART_SetConfig+0x6f4>)
 8001fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	469b      	mov	fp, r3
 8001ff4:	f04f 0c00 	mov.w	ip, #0
 8001ff8:	46d9      	mov	r9, fp
 8001ffa:	46e2      	mov	sl, ip
 8001ffc:	eb19 0309 	adds.w	r3, r9, r9
 8002000:	eb4a 040a 	adc.w	r4, sl, sl
 8002004:	4699      	mov	r9, r3
 8002006:	46a2      	mov	sl, r4
 8002008:	eb19 090b 	adds.w	r9, r9, fp
 800200c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800201c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002020:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002024:	4689      	mov	r9, r1
 8002026:	4692      	mov	sl, r2
 8002028:	eb1b 0509 	adds.w	r5, fp, r9
 800202c:	eb4c 060a 	adc.w	r6, ip, sl
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	0094      	lsls	r4, r2, #2
 8002044:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002048:	008b      	lsls	r3, r1, #2
 800204a:	461a      	mov	r2, r3
 800204c:	4623      	mov	r3, r4
 800204e:	4628      	mov	r0, r5
 8002050:	4631      	mov	r1, r6
 8002052:	f7fe f965 	bl	8000320 <__aeabi_uldivmod>
 8002056:	4603      	mov	r3, r0
 8002058:	460c      	mov	r4, r1
 800205a:	461a      	mov	r2, r3
 800205c:	4b9a      	ldr	r3, [pc, #616]	; (80022c8 <UART_SetConfig+0x6f4>)
 800205e:	fba3 1302 	umull	r1, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2164      	movs	r1, #100	; 0x64
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	3332      	adds	r3, #50	; 0x32
 8002070:	4a95      	ldr	r2, [pc, #596]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207c:	4498      	add	r8, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	469b      	mov	fp, r3
 8002082:	f04f 0c00 	mov.w	ip, #0
 8002086:	46d9      	mov	r9, fp
 8002088:	46e2      	mov	sl, ip
 800208a:	eb19 0309 	adds.w	r3, r9, r9
 800208e:	eb4a 040a 	adc.w	r4, sl, sl
 8002092:	4699      	mov	r9, r3
 8002094:	46a2      	mov	sl, r4
 8002096:	eb19 090b 	adds.w	r9, r9, fp
 800209a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020b2:	4689      	mov	r9, r1
 80020b4:	4692      	mov	sl, r2
 80020b6:	eb1b 0509 	adds.w	r5, fp, r9
 80020ba:	eb4c 060a 	adc.w	r6, ip, sl
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	0094      	lsls	r4, r2, #2
 80020d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020d6:	008b      	lsls	r3, r1, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	4628      	mov	r0, r5
 80020de:	4631      	mov	r1, r6
 80020e0:	f7fe f91e 	bl	8000320 <__aeabi_uldivmod>
 80020e4:	4603      	mov	r3, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <UART_SetConfig+0x6f4>)
 80020ec:	fba3 1302 	umull	r1, r3, r3, r2
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	2164      	movs	r1, #100	; 0x64
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	3332      	adds	r3, #50	; 0x32
 80020fe:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4442      	add	r2, r8
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e0d0      	b.n	80022b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002114:	f7ff f996 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8002118:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	469a      	mov	sl, r3
 800211e:	f04f 0b00 	mov.w	fp, #0
 8002122:	46d0      	mov	r8, sl
 8002124:	46d9      	mov	r9, fp
 8002126:	eb18 0308 	adds.w	r3, r8, r8
 800212a:	eb49 0409 	adc.w	r4, r9, r9
 800212e:	4698      	mov	r8, r3
 8002130:	46a1      	mov	r9, r4
 8002132:	eb18 080a 	adds.w	r8, r8, sl
 8002136:	eb49 090b 	adc.w	r9, r9, fp
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002146:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800214a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800214e:	4688      	mov	r8, r1
 8002150:	4691      	mov	r9, r2
 8002152:	eb1a 0508 	adds.w	r5, sl, r8
 8002156:	eb4b 0609 	adc.w	r6, fp, r9
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	0094      	lsls	r4, r2, #2
 800216e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002172:	008b      	lsls	r3, r1, #2
 8002174:	461a      	mov	r2, r3
 8002176:	4623      	mov	r3, r4
 8002178:	4628      	mov	r0, r5
 800217a:	4631      	mov	r1, r6
 800217c:	f7fe f8d0 	bl	8000320 <__aeabi_uldivmod>
 8002180:	4603      	mov	r3, r0
 8002182:	460c      	mov	r4, r1
 8002184:	461a      	mov	r2, r3
 8002186:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002188:	fba3 2302 	umull	r2, r3, r3, r2
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	469b      	mov	fp, r3
 8002196:	f04f 0c00 	mov.w	ip, #0
 800219a:	46d9      	mov	r9, fp
 800219c:	46e2      	mov	sl, ip
 800219e:	eb19 0309 	adds.w	r3, r9, r9
 80021a2:	eb4a 040a 	adc.w	r4, sl, sl
 80021a6:	4699      	mov	r9, r3
 80021a8:	46a2      	mov	sl, r4
 80021aa:	eb19 090b 	adds.w	r9, r9, fp
 80021ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021c6:	4689      	mov	r9, r1
 80021c8:	4692      	mov	sl, r2
 80021ca:	eb1b 0509 	adds.w	r5, fp, r9
 80021ce:	eb4c 060a 	adc.w	r6, ip, sl
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	f04f 0400 	mov.w	r4, #0
 80021e4:	0094      	lsls	r4, r2, #2
 80021e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021ea:	008b      	lsls	r3, r1, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	4628      	mov	r0, r5
 80021f2:	4631      	mov	r1, r6
 80021f4:	f7fe f894 	bl	8000320 <__aeabi_uldivmod>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002200:	fba3 1302 	umull	r1, r3, r3, r2
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	3332      	adds	r3, #50	; 0x32
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221e:	4498      	add	r8, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	469b      	mov	fp, r3
 8002224:	f04f 0c00 	mov.w	ip, #0
 8002228:	46d9      	mov	r9, fp
 800222a:	46e2      	mov	sl, ip
 800222c:	eb19 0309 	adds.w	r3, r9, r9
 8002230:	eb4a 040a 	adc.w	r4, sl, sl
 8002234:	4699      	mov	r9, r3
 8002236:	46a2      	mov	sl, r4
 8002238:	eb19 090b 	adds.w	r9, r9, fp
 800223c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800224c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002250:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002254:	4689      	mov	r9, r1
 8002256:	4692      	mov	sl, r2
 8002258:	eb1b 0509 	adds.w	r5, fp, r9
 800225c:	eb4c 060a 	adc.w	r6, ip, sl
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0094      	lsls	r4, r2, #2
 8002274:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	461a      	mov	r2, r3
 800227c:	4623      	mov	r3, r4
 800227e:	4628      	mov	r0, r5
 8002280:	4631      	mov	r1, r6
 8002282:	f7fe f84d 	bl	8000320 <__aeabi_uldivmod>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	461a      	mov	r2, r3
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <UART_SetConfig+0x6f4>)
 800228e:	fba3 1302 	umull	r1, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2164      	movs	r1, #100	; 0x64
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	; 0x32
 80022a0:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <UART_SetConfig+0x6f4>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4442      	add	r2, r8
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	e7ff      	b.n	80022b6 <UART_SetConfig+0x6e2>
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c0:	40011000 	.word	0x40011000
 80022c4:	40011400 	.word	0x40011400
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022d2:	f7fe f9a5 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022d6:	f000 f881 	bl	80023dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022da:	f000 f913 	bl	8002504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022de:	f000 f8e7 	bl	80024b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //SEGGER_UART_init(500000);

  //CYCLCNT enable
     DWT_CTRL |= ( 1 << 0);
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <main+0xe8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <main+0xe8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6013      	str	r3, [r2, #0]

     //SEGGER_SYSVIEW_Conf();

  //   SEGGER_SYSVIEW_Start();

     srand(time(NULL)); // Seed once at the start
 80022ee:	2000      	movs	r0, #0
 80022f0:	f005 f836 	bl	8007360 <time>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 ffd9 	bl	80072b0 <srand>

     printmsg("Demo of Binary semaphore usage between 2 Tasks \r\n");
 80022fe:	482e      	ldr	r0, [pc, #184]	; (80023b8 <main+0xec>)
 8002300:	f000 fad0 	bl	80028a4 <printmsg>

     /* Create Binary semaphore */
     vSemaphoreCreateBinary(xBin_Sema);
 8002304:	2203      	movs	r2, #3
 8002306:	2100      	movs	r1, #0
 8002308:	2001      	movs	r0, #1
 800230a:	f000 fd89 	bl	8002e20 <xQueueGenericCreate>
 800230e:	4602      	mov	r2, r0
 8002310:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <main+0xf0>)
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <main+0xf0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d006      	beq.n	800232a <main+0x5e>
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <main+0xf0>)
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	f000 fdf7 	bl	8002f18 <xQueueGenericSend>

     /* Create Queue: 1 space for Ticket ID, Ticket ID is unsigned int type */
     xWorkQueue = xQueueCreate(1, sizeof(unsigned int));
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	2001      	movs	r0, #1
 8002330:	f000 fd76 	bl	8002e20 <xQueueGenericCreate>
 8002334:	4602      	mov	r2, r0
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <main+0xf4>)
 8002338:	601a      	str	r2, [r3, #0]

     /* If the Binary semaphore and Queue are created successfully, we will create 2 tasks and schedule them */
     if ((xBin_Sema != NULL) && (xWorkQueue != NULL))
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <main+0xf0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d037      	beq.n	80023b2 <main+0xe6>
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <main+0xf4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d033      	beq.n	80023b2 <main+0xe6>
     {
    	// The Manager task is created with a high priority
		status = xTaskCreate(vManagerTask_handler, "Manager-Task", 500, NULL, 3, &ManagerTask_handle);
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <main+0xf8>)
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2303      	movs	r3, #3
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002358:	491b      	ldr	r1, [pc, #108]	; (80023c8 <main+0xfc>)
 800235a:	481c      	ldr	r0, [pc, #112]	; (80023cc <main+0x100>)
 800235c:	f001 fb02 	bl	8003964 <xTaskCreate>
 8002360:	60f8      	str	r0, [r7, #12]
		configASSERT(status == pdPASS);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d009      	beq.n	800237c <main+0xb0>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236c:	f383 8811 	msr	BASEPRI, r3
 8002370:	f3bf 8f6f 	isb	sy
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	e7fe      	b.n	800237a <main+0xae>

		// The Employee task is created with lower priority than Manager task
		status = xTaskCreate(vEmployeeTask_handler, "Employee-Task", 500, NULL, 1, &EmployeeTask_handle);
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <main+0x104>)
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2301      	movs	r3, #1
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800238a:	4912      	ldr	r1, [pc, #72]	; (80023d4 <main+0x108>)
 800238c:	4812      	ldr	r0, [pc, #72]	; (80023d8 <main+0x10c>)
 800238e:	f001 fae9 	bl	8003964 <xTaskCreate>
 8002392:	60f8      	str	r0, [r7, #12]
		configASSERT(status == pdPASS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d009      	beq.n	80023ae <main+0xe2>
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	e7fe      	b.n	80023ac <main+0xe0>

		// Start the scheduler
		vTaskStartScheduler();
 80023ae:	f001 fca9 	bl	8003d04 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
     /* If all is well we will never reach here as the scheduler will now be
         running the tasks.  If we do reach here then it is likely that there was
         insufficient heap memory available for a resource to be created. */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <main+0xe6>
 80023b4:	e0001000 	.word	0xe0001000
 80023b8:	08007be8 	.word	0x08007be8
 80023bc:	200197e4 	.word	0x200197e4
 80023c0:	200197e0 	.word	0x200197e0
 80023c4:	200197dc 	.word	0x200197dc
 80023c8:	08007c1c 	.word	0x08007c1c
 80023cc:	080027c1 	.word	0x080027c1
 80023d0:	20019828 	.word	0x20019828
 80023d4:	08007c2c 	.word	0x08007c2c
 80023d8:	08002859 	.word	0x08002859

080023dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b094      	sub	sp, #80	; 0x50
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	2230      	movs	r2, #48	; 0x30
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 ff58 	bl	80072a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <SystemClock_Config+0xcc>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <SystemClock_Config+0xcc>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240e:	6413      	str	r3, [r2, #64]	; 0x40
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <SystemClock_Config+0xcc>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <SystemClock_Config+0xd0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a21      	ldr	r2, [pc, #132]	; (80024ac <SystemClock_Config+0xd0>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <SystemClock_Config+0xd0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002440:	2310      	movs	r3, #16
 8002442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002444:	2302      	movs	r3, #2
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002448:	2300      	movs	r3, #0
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800244c:	2308      	movs	r3, #8
 800244e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002450:	2332      	movs	r3, #50	; 0x32
 8002452:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002454:	2304      	movs	r3, #4
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002458:	2307      	movs	r3, #7
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe fbb5 	bl	8000bd0 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800246c:	f000 fa52 	bl	8002914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002470:	230f      	movs	r3, #15
 8002472:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800247c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002482:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002486:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fe0e 	bl	80010b0 <HAL_RCC_ClockConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800249a:	f000 fa3b 	bl	8002914 <Error_Handler>
  }
}
 800249e:	bf00      	nop
 80024a0:	3750      	adds	r7, #80	; 0x50
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000

080024b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_USART2_UART_Init+0x50>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_USART2_UART_Init+0x4c>)
 80024e8:	f7ff fa44 	bl	8001974 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024f2:	f000 fa0f 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200197e8 	.word	0x200197e8
 8002500:	40004400 	.word	0x40004400

08002504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08c      	sub	sp, #48	; 0x30
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4aa0      	ldr	r2, [pc, #640]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002524:	f043 0310 	orr.w	r3, r3, #16
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b9e      	ldr	r3, [pc, #632]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	4b9a      	ldr	r3, [pc, #616]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a99      	ldr	r2, [pc, #612]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b97      	ldr	r3, [pc, #604]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b93      	ldr	r3, [pc, #588]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a92      	ldr	r2, [pc, #584]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b90      	ldr	r3, [pc, #576]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b8c      	ldr	r3, [pc, #560]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a8b      	ldr	r2, [pc, #556]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b89      	ldr	r3, [pc, #548]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a84      	ldr	r2, [pc, #528]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b82      	ldr	r3, [pc, #520]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b7e      	ldr	r3, [pc, #504]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	4a7d      	ldr	r2, [pc, #500]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	6313      	str	r3, [r2, #48]	; 0x30
 80025b6:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <MX_GPIO_Init+0x2a0>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2108      	movs	r1, #8
 80025c6:	4878      	ldr	r0, [pc, #480]	; (80027a8 <MX_GPIO_Init+0x2a4>)
 80025c8:	f7fe fae8 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2101      	movs	r1, #1
 80025d0:	4876      	ldr	r0, [pc, #472]	; (80027ac <MX_GPIO_Init+0x2a8>)
 80025d2:	f7fe fae3 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80025d6:	2200      	movs	r2, #0
 80025d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80025dc:	4874      	ldr	r0, [pc, #464]	; (80027b0 <MX_GPIO_Init+0x2ac>)
 80025de:	f7fe fadd 	bl	8000b9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025e2:	2308      	movs	r3, #8
 80025e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	486b      	ldr	r0, [pc, #428]	; (80027a8 <MX_GPIO_Init+0x2a4>)
 80025fa:	f7fe f935 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025fe:	2301      	movs	r3, #1
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4865      	ldr	r0, [pc, #404]	; (80027ac <MX_GPIO_Init+0x2a8>)
 8002616:	f7fe f927 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800261a:	2308      	movs	r3, #8
 800261c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800262a:	2305      	movs	r3, #5
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	485d      	ldr	r0, [pc, #372]	; (80027ac <MX_GPIO_Init+0x2a8>)
 8002636:	f7fe f917 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800263a:	2301      	movs	r3, #1
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <MX_GPIO_Init+0x2b0>)
 8002640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002646:	f107 031c 	add.w	r3, r7, #28
 800264a:	4619      	mov	r1, r3
 800264c:	485a      	ldr	r0, [pc, #360]	; (80027b8 <MX_GPIO_Init+0x2b4>)
 800264e:	f7fe f90b 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002652:	2310      	movs	r3, #16
 8002654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002662:	2306      	movs	r3, #6
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	4852      	ldr	r0, [pc, #328]	; (80027b8 <MX_GPIO_Init+0x2b4>)
 800266e:	f7fe f8fb 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002672:	23e0      	movs	r3, #224	; 0xe0
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002682:	2305      	movs	r3, #5
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	f107 031c 	add.w	r3, r7, #28
 800268a:	4619      	mov	r1, r3
 800268c:	484a      	ldr	r0, [pc, #296]	; (80027b8 <MX_GPIO_Init+0x2b4>)
 800268e:	f7fe f8eb 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002692:	2304      	movs	r3, #4
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	4845      	ldr	r0, [pc, #276]	; (80027bc <MX_GPIO_Init+0x2b8>)
 80026a6:	f7fe f8df 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026bc:	2305      	movs	r3, #5
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	483d      	ldr	r0, [pc, #244]	; (80027bc <MX_GPIO_Init+0x2b8>)
 80026c8:	f7fe f8ce 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80026cc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80026d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026de:	f107 031c 	add.w	r3, r7, #28
 80026e2:	4619      	mov	r1, r3
 80026e4:	4832      	ldr	r0, [pc, #200]	; (80027b0 <MX_GPIO_Init+0x2ac>)
 80026e6:	f7fe f8bf 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80026ea:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80026ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026fc:	2306      	movs	r3, #6
 80026fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	4619      	mov	r1, r3
 8002706:	4829      	ldr	r0, [pc, #164]	; (80027ac <MX_GPIO_Init+0x2a8>)
 8002708:	f7fe f8ae 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800270c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	4619      	mov	r1, r3
 8002720:	4825      	ldr	r0, [pc, #148]	; (80027b8 <MX_GPIO_Init+0x2b4>)
 8002722:	f7fe f8a1 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002726:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800272a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002738:	230a      	movs	r3, #10
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273c:	f107 031c 	add.w	r3, r7, #28
 8002740:	4619      	mov	r1, r3
 8002742:	481d      	ldr	r0, [pc, #116]	; (80027b8 <MX_GPIO_Init+0x2b4>)
 8002744:	f7fe f890 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002748:	2320      	movs	r3, #32
 800274a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4815      	ldr	r0, [pc, #84]	; (80027b0 <MX_GPIO_Init+0x2ac>)
 800275c:	f7fe f884 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002760:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002766:	2312      	movs	r3, #18
 8002768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276a:	2301      	movs	r3, #1
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002772:	2304      	movs	r3, #4
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	4619      	mov	r1, r3
 800277c:	480f      	ldr	r0, [pc, #60]	; (80027bc <MX_GPIO_Init+0x2b8>)
 800277e:	f7fe f873 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002782:	2302      	movs	r3, #2
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <MX_GPIO_Init+0x2b0>)
 8002788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4804      	ldr	r0, [pc, #16]	; (80027a8 <MX_GPIO_Init+0x2a4>)
 8002796:	f7fe f867 	bl	8000868 <HAL_GPIO_Init>

}
 800279a:	bf00      	nop
 800279c:	3730      	adds	r7, #48	; 0x30
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	10110000 	.word	0x10110000
 80027b8:	40020000 	.word	0x40020000
 80027bc:	40020400 	.word	0x40020400

080027c0 <vManagerTask_handler>:

/* USER CODE BEGIN 4 */
static void vManagerTask_handler(void *pvParameters)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;

	/* The semaphore is created in the 'empty' state, meaning the semaphore must
		 first be given using the xSemaphoreGive() API function before it
		 can subsequently be taken (obtained) */
	xSemaphoreGive(xBin_Sema);
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <vManagerTask_handler+0x64>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	f000 fba1 	bl	8002f18 <xQueueGenericSend>

	while(1)
	{
		/* Get the work Ticket ID (some random number) */
		u32TicketID = (rand() & 0x1FF);
 80027d6:	f004 fd8f 	bl	80072f8 <rand>
 80027da:	4603      	mov	r3, r0
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	60bb      	str	r3, [r7, #8]

		/* Send work Ticket ID to the queue */
		xStatus = xQueueSend(xWorkQueue, &u32TicketID, portMAX_DELAY);
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <vManagerTask_handler+0x68>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	f107 0108 	add.w	r1, r7, #8
 80027ea:	2300      	movs	r3, #0
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	f000 fb92 	bl	8002f18 <xQueueGenericSend>
 80027f4:	60f8      	str	r0, [r7, #12]

		if (xStatus != pdPASS)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d003      	beq.n	8002804 <vManagerTask_handler+0x44>
		{
			//sprintf(usr_msg, "Could not send to the queue. \r\n");
			printmsg("Could not send to the queue. \r\n");
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <vManagerTask_handler+0x6c>)
 80027fe:	f000 f851 	bl	80028a4 <printmsg>
 8002802:	e7e8      	b.n	80027d6 <vManagerTask_handler+0x16>
		}
		else
		{
			/* Manager notifies the Employee by "Giving" semaphore */
			xSemaphoreGive(xBin_Sema);
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <vManagerTask_handler+0x64>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	f000 fb83 	bl	8002f18 <xQueueGenericSend>
			/* After assigning the work, just yield the processor because Manager task has nothing to do now */
			taskYIELD();
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <vManagerTask_handler+0x70>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
		u32TicketID = (rand() & 0x1FF);
 8002822:	e7d8      	b.n	80027d6 <vManagerTask_handler+0x16>
 8002824:	200197e4 	.word	0x200197e4
 8002828:	200197e0 	.word	0x200197e0
 800282c:	08007c3c 	.word	0x08007c3c
 8002830:	e000ed04 	.word	0xe000ed04

08002834 <EmployeeDoWork>:
		}
	}
}

void EmployeeDoWork(uint32_t u32TicketID)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	/* implement the work according to TicketID */
	//sprintf(usr_msg, "Employee task: Working on Ticket ID: %ld\r\n", u32TicketID);
	printmsg("Employee task: Working on Ticket ID: %ld\r\n", u32TicketID);
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <EmployeeDoWork+0x20>)
 8002840:	f000 f830 	bl	80028a4 <printmsg>
	vTaskDelay(u32TicketID);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f001 fa25 	bl	8003c94 <vTaskDelay>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	08007c5c 	.word	0x08007c5c

08002858 <vEmployeeTask_handler>:

static void vEmployeeTask_handler(void *pvParameters)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	{
		/* First, Employee will try to take the semaphore.
			> If the semaphore is available --> there is a task assigned by Manager.
			> Otherwise, Employee task will be blocked.
		*/
		xSemaphoreTake(xBin_Sema, 0);
 8002860:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <vEmployeeTask_handler+0x40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd8c 	bl	8003384 <xQueueSemaphoreTake>

		/* If the execution reaches here, it means that Employee take semaphore successfully
		   Now Employee task will try to read Ticket ID from Queue
		 */
		xStatus = xQueueReceive(xWorkQueue, &u32TicketID, 0);
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <vEmployeeTask_handler+0x44>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f107 0108 	add.w	r1, r7, #8
 8002874:	2200      	movs	r2, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fc70 	bl	800315c <xQueueReceive>
 800287c:	60f8      	str	r0, [r7, #12]

		if (xStatus == pdPASS)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d104      	bne.n	800288e <vEmployeeTask_handler+0x36>
		{
			/* Employee will decode the u32TicketID in this function to do the work */
			EmployeeDoWork(u32TicketID);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffd4 	bl	8002834 <EmployeeDoWork>
 800288c:	e7e8      	b.n	8002860 <vEmployeeTask_handler+0x8>
		}
		else
		{
			//sprintf(usr_msg, "Employee task: Queue is empty, nothing to do. \r\n");
			printmsg("Employee task: Queue is empty, nothing to do. \r\n");
 800288e:	4804      	ldr	r0, [pc, #16]	; (80028a0 <vEmployeeTask_handler+0x48>)
 8002890:	f000 f808 	bl	80028a4 <printmsg>
		xSemaphoreTake(xBin_Sema, 0);
 8002894:	e7e4      	b.n	8002860 <vEmployeeTask_handler+0x8>
 8002896:	bf00      	nop
 8002898:	200197e4 	.word	0x200197e4
 800289c:	200197e0 	.word	0x200197e0
 80028a0:	08007c88 	.word	0x08007c88

080028a4 <printmsg>:
		}
	}
}

void printmsg(char *format,...)
{
 80028a4:	b40f      	push	{r0, r1, r2, r3}
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b0a8      	sub	sp, #160	; 0xa0
 80028aa:	af00      	add	r7, sp, #0
	char str[150];

	va_list args;
	va_start(args, format);
 80028ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028b0:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80028bc:	4618      	mov	r0, r3
 80028be:	f004 fd7f 	bl	80073c0 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fccc 	bl	8000264 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	f107 0108 	add.w	r1, r7, #8
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	4804      	ldr	r0, [pc, #16]	; (80028ec <printmsg+0x48>)
 80028da:	f7ff f898 	bl	8001a0e <HAL_UART_Transmit>
	va_end(args);
}
 80028de:	bf00      	nop
 80028e0:	37a0      	adds	r7, #160	; 0xa0
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028e8:	b004      	add	sp, #16
 80028ea:	4770      	bx	lr
 80028ec:	200197e8 	.word	0x200197e8

080028f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002902:	f7fd feaf 	bl	8000664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40001000 	.word	0x40001000

08002914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_MspInit+0x4c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4a0f      	ldr	r2, [pc, #60]	; (8002970 <HAL_MspInit+0x4c>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	6453      	str	r3, [r2, #68]	; 0x44
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <HAL_MspInit+0x4c>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	4b09      	ldr	r3, [pc, #36]	; (8002970 <HAL_MspInit+0x4c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a08      	ldr	r2, [pc, #32]	; (8002970 <HAL_MspInit+0x4c>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_MspInit+0x4c>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8002962:	f002 fdbd 	bl	80054e0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40023800 	.word	0x40023800

08002974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_UART_MspInit+0x84>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12b      	bne.n	80029ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0x88>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ce:	230c      	movs	r3, #12
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029de:	2307      	movs	r3, #7
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <HAL_UART_MspInit+0x8c>)
 80029ea:	f7fd ff3d 	bl	8000868 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40004400 	.word	0x40004400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	; 0x30
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002a14:	2200      	movs	r2, #0
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	2036      	movs	r0, #54	; 0x36
 8002a1a:	f7fd fefb 	bl	8000814 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002a1e:	2036      	movs	r0, #54	; 0x36
 8002a20:	f7fd ff14 	bl	800084c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	4b1f      	ldr	r3, [pc, #124]	; (8002aa8 <HAL_InitTick+0xa4>)
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <HAL_InitTick+0xa4>)
 8002a2e:	f043 0310 	orr.w	r3, r3, #16
 8002a32:	6413      	str	r3, [r2, #64]	; 0x40
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_InitTick+0xa4>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a40:	f107 0210 	add.w	r2, r7, #16
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fd22 	bl	8001494 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a50:	f7fe fcf8 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8002a54:	4603      	mov	r3, r0
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5c:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_InitTick+0xa8>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0c9b      	lsrs	r3, r3, #18
 8002a64:	3b01      	subs	r3, #1
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <HAL_InitTick+0xb0>)
 8002a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002a6e:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a88:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a8a:	f7fe fd35 	bl	80014f8 <HAL_TIM_Base_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a94:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <HAL_InitTick+0xac>)
 8002a96:	f7fe fd64 	bl	8001562 <HAL_TIM_Base_Start_IT>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3730      	adds	r7, #48	; 0x30
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	431bde83 	.word	0x431bde83
 8002ab0:	2001982c 	.word	0x2001982c
 8002ab4:	40001000 	.word	0x40001000

08002ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aca:	e7fe      	b.n	8002aca <HardFault_Handler+0x4>

08002acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <MemManage_Handler+0x4>

08002ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <BusFault_Handler+0x4>

08002ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <UsageFault_Handler+0x4>

08002ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <TIM6_DAC_IRQHandler+0x10>)
 8002af2:	f7fe fd5a 	bl	80015aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2001982c 	.word	0x2001982c

08002b00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <_sbrk+0x50>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <_sbrk+0x16>
		heap_end = &end;
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <_sbrk+0x50>)
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <_sbrk+0x54>)
 8002b14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <_sbrk+0x50>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <_sbrk+0x50>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	466a      	mov	r2, sp
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d907      	bls.n	8002b3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b2a:	f004 fb75 	bl	8007218 <__errno>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	230c      	movs	r3, #12
 8002b32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	e006      	b.n	8002b48 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <_sbrk+0x50>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	4a03      	ldr	r2, [pc, #12]	; (8002b50 <_sbrk+0x50>)
 8002b44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b46:	68fb      	ldr	r3, [r7, #12]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000094 	.word	0x20000094
 8002b54:	20019958 	.word	0x20019958

08002b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <SystemInit+0x28>)
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <SystemInit+0x28>)
 8002b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b6c:	4b04      	ldr	r3, [pc, #16]	; (8002b80 <SystemInit+0x28>)
 8002b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b72:	609a      	str	r2, [r3, #8]
#endif
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b8a:	e003      	b.n	8002b94 <LoopCopyDataInit>

08002b8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b92:	3104      	adds	r1, #4

08002b94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b94:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b9c:	d3f6      	bcc.n	8002b8c <CopyDataInit>
  ldr  r2, =_sbss
 8002b9e:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ba0:	e002      	b.n	8002ba8 <LoopFillZerobss>

08002ba2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ba2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ba4:	f842 3b04 	str.w	r3, [r2], #4

08002ba8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002baa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bac:	d3f9      	bcc.n	8002ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bae:	f7ff ffd3 	bl	8002b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb2:	f004 fb37 	bl	8007224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bb6:	f7ff fb89 	bl	80022cc <main>
  bx  lr    
 8002bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bc0:	08007dac 	.word	0x08007dac
  ldr  r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bc8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002bcc:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002bd0:	20019958 	.word	0x20019958

08002bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <ADC_IRQHandler>

08002bd6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f103 0208 	add.w	r2, r3, #8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f04f 32ff 	mov.w	r2, #4294967295
 8002bee:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0208 	add.w	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f103 0208 	add.w	r2, r3, #8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d103      	bne.n	8002c50 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e00c      	b.n	8002c6a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3308      	adds	r3, #8
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e002      	b.n	8002c5e <vListInsert+0x2e>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d2f6      	bcs.n	8002c58 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	601a      	str	r2, [r3, #0]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6852      	ldr	r2, [r2, #4]
 8002cc2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d103      	bne.n	8002cd6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <xQueueGenericReset+0x2c>
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e7fe      	b.n	8002d22 <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d05f      	beq.n	8002df2 <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	fba2 1203 	umull	r1, r2, r2, r3
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	f04f 0400 	mov.w	r4, #0
 8002d48:	0013      	movs	r3, r2
 8002d4a:	2400      	movs	r4, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d000      	beq.n	8002d52 <xQueueGenericReset+0x5a>
 8002d50:	2001      	movs	r0, #1
 8002d52:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d14c      	bne.n	8002df2 <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002d58:	f002 fc3c 	bl	80055d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	441a      	add	r2, r3
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	6939      	ldr	r1, [r7, #16]
 8002d8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	441a      	add	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	22ff      	movs	r2, #255	; 0xff
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	22ff      	movs	r2, #255	; 0xff
 8002da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d114      	bne.n	8002dd8 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01a      	beq.n	8002dec <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	3310      	adds	r3, #16
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 fb0c 	bl	80043d8 <xTaskRemoveFromEventList>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <xQueueGenericReset+0x124>)
 8002dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	e009      	b.n	8002dec <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3310      	adds	r3, #16
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fefa 	bl	8002bd6 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3324      	adds	r3, #36	; 0x24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fef5 	bl	8002bd6 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002dec:	f002 fc20 	bl	8005630 <vPortExitCritical>
 8002df0:	e001      	b.n	8002df6 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <xQueueGenericReset+0x118>
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	e7fe      	b.n	8002e0e <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e10:	697b      	ldr	r3, [r7, #20]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b08b      	sub	sp, #44	; 0x2c
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d034      	beq.n	8002ea2 <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e38:	2000      	movs	r0, #0
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	fba2 1203 	umull	r1, r2, r2, r3
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	f04f 0400 	mov.w	r4, #0
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d000      	beq.n	8002e54 <xQueueGenericCreate+0x34>
 8002e52:	2001      	movs	r0, #1
 8002e54:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d123      	bne.n	8002ea2 <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002e62:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002e66:	d81c      	bhi.n	8002ea2 <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	3350      	adds	r3, #80	; 0x50
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fc8e 	bl	8005798 <pvPortMalloc>
 8002e7c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01b      	beq.n	8002ebc <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3350      	adds	r3, #80	; 0x50
 8002e8c:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e8e:	79fa      	ldrb	r2, [r7, #7]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f813 	bl	8002ec6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ea0:	e00c      	b.n	8002ebc <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <xQueueGenericCreate+0x9c>
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e7fe      	b.n	8002eba <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
    }
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}

08002ec6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e002      	b.n	8002ee8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	69b8      	ldr	r0, [r7, #24]
 8002ef8:	f7ff fefe 	bl	8002cf8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	2073      	movs	r0, #115	; 0x73
 8002f0c:	f003 fad4 	bl	80064b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b090      	sub	sp, #64	; 0x40
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <xQueueGenericSend+0x30>
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f46:	e7fe      	b.n	8002f46 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <xQueueGenericSend+0x3e>
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <xQueueGenericSend+0x42>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueGenericSend+0x44>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <xQueueGenericSend+0x5c>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <xQueueGenericSend+0x6a>
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <xQueueGenericSend+0x6e>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericSend+0x70>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <xQueueGenericSend+0x88>
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	623b      	str	r3, [r7, #32]
 8002f9e:	e7fe      	b.n	8002f9e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fa0:	f001 fc28 	bl	80047f4 <xTaskGetSchedulerState>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <xQueueGenericSend+0x98>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <xQueueGenericSend+0x9c>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <xQueueGenericSend+0x9e>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <xQueueGenericSend+0xb6>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fce:	f002 fb01 	bl	80055d4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <xQueueGenericSend+0xcc>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d136      	bne.n	8003052 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 ffce 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	205a      	movs	r0, #90	; 0x5a
 8002ffa:	f003 fad3 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003004:	f000 fb14 	bl	8003630 <prvCopyDataToQueue>
 8003008:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	2b00      	cmp	r3, #0
 8003010:	d010      	beq.n	8003034 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003014:	3324      	adds	r3, #36	; 0x24
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f9de 	bl	80043d8 <xTaskRemoveFromEventList>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d013      	beq.n	800304a <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003022:	4b4d      	ldr	r3, [pc, #308]	; (8003158 <xQueueGenericSend+0x240>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	e00a      	b.n	800304a <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <xQueueGenericSend+0x240>)
 800303c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800304a:	f002 faf1 	bl	8005630 <vPortExitCritical>
                return pdPASS;
 800304e:	2301      	movs	r3, #1
 8003050:	e07d      	b.n	800314e <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d110      	bne.n	800307a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003058:	f002 faea 	bl	8005630 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	4618      	mov	r0, r3
 8003060:	f003 ff92 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	4601      	mov	r1, r0
 8003070:	205a      	movs	r0, #90	; 0x5a
 8003072:	f003 fa97 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003076:	2300      	movs	r3, #0
 8003078:	e069      	b.n	800314e <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 800307a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	4618      	mov	r0, r3
 8003086:	f001 fa7f 	bl	8004588 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800308a:	2301      	movs	r3, #1
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800308e:	f002 facf 	bl	8005630 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003092:	f000 fe97 	bl	8003dc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003096:	f002 fa9d 	bl	80055d4 <vPortEnterCritical>
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d103      	bne.n	80030b0 <xQueueGenericSend+0x198>
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d103      	bne.n	80030c6 <xQueueGenericSend+0x1ae>
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c6:	f002 fab3 	bl	8005630 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ca:	1d3a      	adds	r2, r7, #4
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 fa6e 	bl	80045b4 <xTaskCheckForTimeOut>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d124      	bne.n	8003128 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e0:	f000 fb9e 	bl	8003820 <prvIsQueueFull>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ec:	3310      	adds	r3, #16
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f904 	bl	8004300 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80030f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030fa:	f000 fb29 	bl	8003750 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80030fe:	f000 fe6f 	bl	8003de0 <xTaskResumeAll>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f af62 	bne.w	8002fce <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <xQueueGenericSend+0x240>)
 800310c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	e758      	b.n	8002fce <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800311c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311e:	f000 fb17 	bl	8003750 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003122:	f000 fe5d 	bl	8003de0 <xTaskResumeAll>
 8003126:	e752      	b.n	8002fce <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800312a:	f000 fb11 	bl	8003750 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800312e:	f000 fe57 	bl	8003de0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	4618      	mov	r0, r3
 8003136:	f003 ff27 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	460b      	mov	r3, r1
 8003144:	4601      	mov	r1, r0
 8003146:	205a      	movs	r0, #90	; 0x5a
 8003148:	f003 fa2c 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800314c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800314e:	4618      	mov	r0, r3
 8003150:	3738      	adds	r7, #56	; 0x38
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b08f      	sub	sp, #60	; 0x3c
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <xQueueReceive+0x2e>
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	e7fe      	b.n	8003188 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <xQueueReceive+0x3c>
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <xQueueReceive+0x40>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <xQueueReceive+0x42>
 800319c:	2300      	movs	r3, #0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <xQueueReceive+0x5a>
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	e7fe      	b.n	80031b4 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b6:	f001 fb1d 	bl	80047f4 <xTaskGetSchedulerState>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <xQueueReceive+0x6a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <xQueueReceive+0x6e>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <xQueueReceive+0x70>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <xQueueReceive+0x88>
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e7fe      	b.n	80031e2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031e4:	f002 f9f6 	bl	80055d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d031      	beq.n	8003258 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f8:	f000 fa84 	bl	8003704 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fec2 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8003204:	4604      	mov	r4, r0
 8003206:	2000      	movs	r0, #0
 8003208:	f003 febe 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 800320c:	4601      	mov	r1, r0
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	2301      	movs	r3, #1
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	460a      	mov	r2, r1
 8003218:	4621      	mov	r1, r4
 800321a:	205c      	movs	r0, #92	; 0x5c
 800321c:	f003 f9c2 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00f      	beq.n	8003250 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	3310      	adds	r3, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f001 f8cf 	bl	80043d8 <xTaskRemoveFromEventList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003240:	4b4f      	ldr	r3, [pc, #316]	; (8003380 <xQueueReceive+0x224>)
 8003242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003250:	f002 f9ee 	bl	8005630 <vPortExitCritical>
                return pdPASS;
 8003254:	2301      	movs	r3, #1
 8003256:	e08e      	b.n	8003376 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800325e:	f002 f9e7 	bl	8005630 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fe8f 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 800326a:	4604      	mov	r4, r0
 800326c:	2000      	movs	r0, #0
 800326e:	f003 fe8b 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8003272:	4601      	mov	r1, r0
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	2301      	movs	r3, #1
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	460a      	mov	r2, r1
 800327e:	4621      	mov	r1, r4
 8003280:	205c      	movs	r0, #92	; 0x5c
 8003282:	f003 f98f 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003286:	2300      	movs	r3, #0
 8003288:	e075      	b.n	8003376 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4618      	mov	r0, r3
 8003296:	f001 f977 	bl	8004588 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800329a:	2301      	movs	r3, #1
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800329e:	f002 f9c7 	bl	8005630 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032a2:	f000 fd8f 	bl	8003dc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032a6:	f002 f995 	bl	80055d4 <vPortEnterCritical>
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d103      	bne.n	80032c0 <xQueueReceive+0x164>
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d103      	bne.n	80032d6 <xQueueReceive+0x17a>
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d6:	f002 f9ab 	bl	8005630 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032da:	1d3a      	adds	r2, r7, #4
 80032dc:	f107 0310 	add.w	r3, r7, #16
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 f966 	bl	80045b4 <xTaskCheckForTimeOut>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d124      	bne.n	8003338 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f0:	f000 fa80 	bl	80037f4 <prvIsQueueEmpty>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d018      	beq.n	800332c <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	3324      	adds	r3, #36	; 0x24
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fffc 	bl	8004300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330a:	f000 fa21 	bl	8003750 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800330e:	f000 fd67 	bl	8003de0 <xTaskResumeAll>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	f47f af65 	bne.w	80031e4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <xQueueReceive+0x224>)
 800331c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	e75b      	b.n	80031e4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800332c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332e:	f000 fa0f 	bl	8003750 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003332:	f000 fd55 	bl	8003de0 <xTaskResumeAll>
 8003336:	e755      	b.n	80031e4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800333a:	f000 fa09 	bl	8003750 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800333e:	f000 fd4f 	bl	8003de0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003344:	f000 fa56 	bl	80037f4 <prvIsQueueEmpty>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f43f af4a 	beq.w	80031e4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fe18 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8003358:	4604      	mov	r4, r0
 800335a:	2000      	movs	r0, #0
 800335c:	f003 fe14 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8003360:	4601      	mov	r1, r0
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	2301      	movs	r3, #1
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	460a      	mov	r2, r1
 800336c:	4621      	mov	r1, r4
 800336e:	205c      	movs	r0, #92	; 0x5c
 8003370:	f003 f918 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003374:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003376:	4618      	mov	r0, r3
 8003378:	3734      	adds	r7, #52	; 0x34
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	e000ed04 	.word	0xe000ed04

08003384 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b091      	sub	sp, #68	; 0x44
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800338e:	2300      	movs	r3, #0
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <xQueueSemaphoreTake+0x30>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	623b      	str	r3, [r7, #32]
 80033b2:	e7fe      	b.n	80033b2 <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <xQueueSemaphoreTake+0x4c>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	e7fe      	b.n	80033ce <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d0:	f001 fa10 	bl	80047f4 <xTaskGetSchedulerState>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <xQueueSemaphoreTake+0x5c>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <xQueueSemaphoreTake+0x60>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <xQueueSemaphoreTake+0x62>
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <xQueueSemaphoreTake+0x7a>
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e7fe      	b.n	80033fc <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033fe:	f002 f8e9 	bl	80055d4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d036      	beq.n	800347c <xQueueSemaphoreTake+0xf8>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fdb9 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 8003416:	4604      	mov	r4, r0
 8003418:	2000      	movs	r0, #0
 800341a:	f003 fdb5 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 800341e:	4601      	mov	r1, r0
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	2301      	movs	r3, #1
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	460a      	mov	r2, r1
 800342a:	4621      	mov	r1, r4
 800342c:	205c      	movs	r0, #92	; 0x5c
 800342e:	f003 f8b9 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <xQueueSemaphoreTake+0xc8>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003442:	f001 fc07 	bl	8004c54 <pvTaskIncrementMutexHeldCount>
 8003446:	4602      	mov	r2, r0
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00f      	beq.n	8003474 <xQueueSemaphoreTake+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	3310      	adds	r3, #16
 8003458:	4618      	mov	r0, r3
 800345a:	f000 ffbd 	bl	80043d8 <xTaskRemoveFromEventList>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <xQueueSemaphoreTake+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003464:	4b65      	ldr	r3, [pc, #404]	; (80035fc <xQueueSemaphoreTake+0x278>)
 8003466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003474:	f002 f8dc 	bl	8005630 <vPortExitCritical>
                return pdPASS;
 8003478:	2301      	movs	r3, #1
 800347a:	e0ba      	b.n	80035f2 <xQueueSemaphoreTake+0x26e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d122      	bne.n	80034c8 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <xQueueSemaphoreTake+0x118>
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e7fe      	b.n	800349a <xQueueSemaphoreTake+0x116>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800349c:	f002 f8c8 	bl	8005630 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 fd70 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 80034a8:	4604      	mov	r4, r0
 80034aa:	2000      	movs	r0, #0
 80034ac:	f003 fd6c 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 80034b0:	4601      	mov	r1, r0
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	2301      	movs	r3, #1
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	460a      	mov	r2, r1
 80034bc:	4621      	mov	r1, r4
 80034be:	205c      	movs	r0, #92	; 0x5c
 80034c0:	f003 f870 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e094      	b.n	80035f2 <xQueueSemaphoreTake+0x26e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034ce:	f107 030c 	add.w	r3, r7, #12
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f858 	bl	8004588 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034dc:	f002 f8a8 	bl	8005630 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034e0:	f000 fc70 	bl	8003dc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034e4:	f002 f876 	bl	80055d4 <vPortEnterCritical>
 80034e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ee:	b25b      	sxtb	r3, r3
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d103      	bne.n	80034fe <xQueueSemaphoreTake+0x17a>
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d103      	bne.n	8003514 <xQueueSemaphoreTake+0x190>
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003514:	f002 f88c 	bl	8005630 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003518:	463a      	mov	r2, r7
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f001 f847 	bl	80045b4 <xTaskCheckForTimeOut>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d132      	bne.n	8003592 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800352c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800352e:	f000 f961 	bl	80037f4 <prvIsQueueEmpty>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d026      	beq.n	8003586 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d109      	bne.n	8003554 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003540:	f002 f848 	bl	80055d4 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f001 f971 	bl	8004830 <xTaskPriorityInherit>
 800354e:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003550:	f002 f86e 	bl	8005630 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	3324      	adds	r3, #36	; 0x24
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fecf 	bl	8004300 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003562:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003564:	f000 f8f4 	bl	8003750 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003568:	f000 fc3a 	bl	8003de0 <xTaskResumeAll>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f47f af45 	bne.w	80033fe <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <xQueueSemaphoreTake+0x278>)
 8003576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	e73b      	b.n	80033fe <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003588:	f000 f8e2 	bl	8003750 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800358c:	f000 fc28 	bl	8003de0 <xTaskResumeAll>
 8003590:	e735      	b.n	80033fe <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003594:	f000 f8dc 	bl	8003750 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003598:	f000 fc22 	bl	8003de0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800359c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800359e:	f000 f929 	bl	80037f4 <prvIsQueueEmpty>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f43f af2a 	beq.w	80033fe <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 80035b0:	f002 f810 	bl	80055d4 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035b6:	f000 f823 	bl	8003600 <prvGetDisinheritPriorityAfterTimeout>
 80035ba:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fa86 	bl	8004ad4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80035c8:	f002 f832 	bl	8005630 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fcda 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 80035d4:	4604      	mov	r4, r0
 80035d6:	2000      	movs	r0, #0
 80035d8:	f003 fcd6 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 80035dc:	4601      	mov	r1, r0
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	2301      	movs	r3, #1
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	460a      	mov	r2, r1
 80035e8:	4621      	mov	r1, r4
 80035ea:	205c      	movs	r0, #92	; 0x5c
 80035ec:	f002 ffda 	bl	80065a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80035f0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	373c      	adds	r7, #60	; 0x3c
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1c3 0305 	rsb	r3, r3, #5
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e001      	b.n	8003622 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003622:	68fb      	ldr	r3, [r7, #12]
    }
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d14d      	bne.n	80036f2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f001 f990 	bl	8004980 <xTaskPriorityDisinherit>
 8003660:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e043      	b.n	80036f2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d119      	bne.n	80036a4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6858      	ldr	r0, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	461a      	mov	r2, r3
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	f003 fe05 	bl	800728a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	441a      	add	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d32b      	bcc.n	80036f2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	e026      	b.n	80036f2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68d8      	ldr	r0, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	f003 fdeb 	bl	800728a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	425b      	negs	r3, r3
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d207      	bcs.n	80036e0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	425b      	negs	r3, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d105      	bne.n	80036f2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80036fa:	697b      	ldr	r3, [r7, #20]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	441a      	add	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d303      	bcc.n	8003738 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68d9      	ldr	r1, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	461a      	mov	r2, r3
 8003742:	6838      	ldr	r0, [r7, #0]
 8003744:	f003 fda1 	bl	800728a <memcpy>
    }
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003758:	f001 ff3c 	bl	80055d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003762:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003764:	e011      	b.n	800378a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3324      	adds	r3, #36	; 0x24
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fe30 	bl	80043d8 <xTaskRemoveFromEventList>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800377e:	f000 ff7d 	bl	800467c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	3b01      	subs	r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	dce9      	bgt.n	8003766 <prvUnlockQueue+0x16>
 8003792:	e000      	b.n	8003796 <prvUnlockQueue+0x46>
                        break;
 8003794:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	22ff      	movs	r2, #255	; 0xff
 800379a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800379e:	f001 ff47 	bl	8005630 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80037a2:	f001 ff17 	bl	80055d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ae:	e011      	b.n	80037d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3310      	adds	r3, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fe0b 	bl	80043d8 <xTaskRemoveFromEventList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80037c8:	f000 ff58 	bl	800467c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	dce9      	bgt.n	80037b0 <prvUnlockQueue+0x60>
 80037dc:	e000      	b.n	80037e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80037de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	22ff      	movs	r2, #255	; 0xff
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80037e8:	f001 ff22 	bl	8005630 <vPortExitCritical>
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80037fc:	f001 feea 	bl	80055d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e001      	b.n	8003812 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003812:	f001 ff0d 	bl	8005630 <vPortExitCritical>

    return xReturn;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003828:	f001 fed4 	bl	80055d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	429a      	cmp	r2, r3
 8003836:	d102      	bne.n	800383e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e001      	b.n	8003842 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003842:	f001 fef5 	bl	8005630 <vPortExitCritical>

    return xReturn;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <vQueueAddToRegistry+0x24>
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e7fe      	b.n	8003872 <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d024      	beq.n	80038c8 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e01e      	b.n	80038c2 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003884:	4a1c      	ldr	r2, [pc, #112]	; (80038f8 <vQueueAddToRegistry+0xa8>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	429a      	cmp	r2, r3
 8003892:	d105      	bne.n	80038a0 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <vQueueAddToRegistry+0xa8>)
 800389a:	4413      	add	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
                    break;
 800389e:	e013      	b.n	80038c8 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <vQueueAddToRegistry+0x6c>
 80038a6:	4a14      	ldr	r2, [pc, #80]	; (80038f8 <vQueueAddToRegistry+0xa8>)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <vQueueAddToRegistry+0xa8>)
 80038b8:	4413      	add	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b07      	cmp	r3, #7
 80038c6:	d9dd      	bls.n	8003884 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00f      	beq.n	80038ee <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 fb53 	bl	8006f88 <SEGGER_SYSVIEW_ShrinkId>
 80038e2:	4601      	mov	r1, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	2071      	movs	r0, #113	; 0x71
 80038ea:	f002 fd8b 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2001986c 	.word	0x2001986c

080038fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800390c:	f001 fe62 	bl	80055d4 <vPortEnterCritical>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003916:	b25b      	sxtb	r3, r3
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d103      	bne.n	8003926 <vQueueWaitForMessageRestricted+0x2a>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392c:	b25b      	sxtb	r3, r3
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d103      	bne.n	800393c <vQueueWaitForMessageRestricted+0x40>
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393c:	f001 fe78 	bl	8005630 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3324      	adds	r3, #36	; 0x24
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fcf9 	bl	8004348 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff fefa 	bl	8003750 <prvUnlockQueue>
    }
 800395c:	bf00      	nop
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b08c      	sub	sp, #48	; 0x30
 8003968:	af04      	add	r7, sp, #16
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4618      	mov	r0, r3
 800397a:	f001 ff0d 	bl	8005798 <pvPortMalloc>
 800397e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00e      	beq.n	80039a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003986:	2058      	movs	r0, #88	; 0x58
 8003988:	f001 ff06 	bl	8005798 <pvPortMalloc>
 800398c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
 800399a:	e005      	b.n	80039a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f001 ffd7 	bl	8005950 <vPortFree>
 80039a2:	e001      	b.n	80039a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d013      	beq.n	80039d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	2300      	movs	r3, #0
 80039b2:	9303      	str	r3, [sp, #12]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	9302      	str	r3, [sp, #8]
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f80e 	bl	80039e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80039ca:	69f8      	ldr	r0, [r7, #28]
 80039cc:	f000 f8ae 	bl	8003b2c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80039d0:	2301      	movs	r3, #1
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	e002      	b.n	80039dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80039dc:	69bb      	ldr	r3, [r7, #24]
    }
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b088      	sub	sp, #32
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	461a      	mov	r2, r3
 80039fe:	21a5      	movs	r1, #165	; 0xa5
 8003a00:	f003 fc4e 	bl	80072a0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	f023 0307 	bic.w	r3, r3, #7
 8003a1c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d009      	beq.n	8003a3c <prvInitialiseNewTask+0x56>
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e7fe      	b.n	8003a3a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01f      	beq.n	8003a82 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e012      	b.n	8003a6e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	7819      	ldrb	r1, [r3, #0]
 8003a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	3334      	adds	r3, #52	; 0x34
 8003a58:	460a      	mov	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b09      	cmp	r3, #9
 8003a72:	d9e9      	bls.n	8003a48 <prvInitialiseNewTask+0x62>
 8003a74:	e000      	b.n	8003a78 <prvInitialiseNewTask+0x92>
            {
                break;
 8003a76:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003a80:	e003      	b.n	8003a8a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d909      	bls.n	8003aa4 <prvInitialiseNewTask+0xbe>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e7fe      	b.n	8003aa2 <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d901      	bls.n	8003aae <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aaa:	2304      	movs	r3, #4
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	2200      	movs	r2, #0
 8003abe:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff f8a6 	bl	8002c16 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	3318      	adds	r3, #24
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff f8a1 	bl	8002c16 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	f1c3 0205 	rsb	r2, r3, #5
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	3350      	adds	r3, #80	; 0x50
 8003aee:	2204      	movs	r2, #4
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 fbd4 	bl	80072a0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	3354      	adds	r3, #84	; 0x54
 8003afc:	2201      	movs	r2, #1
 8003afe:	2100      	movs	r1, #0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 fbcd 	bl	80072a0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	69b8      	ldr	r0, [r7, #24]
 8003b0c:	f001 fbc2 	bl	8005294 <pxPortInitialiseStack>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b22:	bf00      	nop
 8003b24:	3720      	adds	r7, #32
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003b34:	f001 fd4e 	bl	80055d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003b38:	4b4f      	ldr	r3, [pc, #316]	; (8003c78 <prvAddNewTaskToReadyList+0x14c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <prvAddNewTaskToReadyList+0x14c>)
 8003b40:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003b42:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <prvAddNewTaskToReadyList+0x150>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003b4a:	4a4c      	ldr	r2, [pc, #304]	; (8003c7c <prvAddNewTaskToReadyList+0x150>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b50:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <prvAddNewTaskToReadyList+0x14c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d110      	bne.n	8003b7a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003b58:	f000 fdb4 	bl	80046c4 <prvInitialiseTaskLists>
 8003b5c:	e00d      	b.n	8003b7a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003b5e:	4b48      	ldr	r3, [pc, #288]	; (8003c80 <prvAddNewTaskToReadyList+0x154>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b66:	4b45      	ldr	r3, [pc, #276]	; (8003c7c <prvAddNewTaskToReadyList+0x150>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d802      	bhi.n	8003b7a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003b74:	4a41      	ldr	r2, [pc, #260]	; (8003c7c <prvAddNewTaskToReadyList+0x150>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <prvAddNewTaskToReadyList+0x158>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	4a40      	ldr	r2, [pc, #256]	; (8003c84 <prvAddNewTaskToReadyList+0x158>)
 8003b82:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <prvAddNewTaskToReadyList+0x158>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <prvAddNewTaskToReadyList+0x94>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f003 f8d1 	bl	8006d3c <SEGGER_SYSVIEW_OnTaskCreate>
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	461d      	mov	r5, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461c      	mov	r4, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	1ae3      	subs	r3, r4, r3
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	462b      	mov	r3, r5
 8003bbc:	f001 ffe4 	bl	8005b88 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f003 f93e 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	4b2d      	ldr	r3, [pc, #180]	; (8003c88 <prvAddNewTaskToReadyList+0x15c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	4a2c      	ldr	r2, [pc, #176]	; (8003c88 <prvAddNewTaskToReadyList+0x15c>)
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	492b      	ldr	r1, [pc, #172]	; (8003c8c <prvAddNewTaskToReadyList+0x160>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3304      	adds	r3, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	3204      	adds	r2, #4
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1d1a      	adds	r2, r3, #4
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <prvAddNewTaskToReadyList+0x160>)
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	615a      	str	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	4918      	ldr	r1, [pc, #96]	; (8003c8c <prvAddNewTaskToReadyList+0x160>)
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	4814      	ldr	r0, [pc, #80]	; (8003c8c <prvAddNewTaskToReadyList+0x160>)
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4403      	add	r3, r0
 8003c44:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003c46:	f001 fcf3 	bl	8005630 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <prvAddNewTaskToReadyList+0x154>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00e      	beq.n	8003c70 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <prvAddNewTaskToReadyList+0x150>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d207      	bcs.n	8003c70 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <prvAddNewTaskToReadyList+0x164>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bdb0      	pop	{r4, r5, r7, pc}
 8003c78:	20000170 	.word	0x20000170
 8003c7c:	20000098 	.word	0x20000098
 8003c80:	2000017c 	.word	0x2000017c
 8003c84:	2000018c 	.word	0x2000018c
 8003c88:	20000178 	.word	0x20000178
 8003c8c:	2000009c 	.word	0x2000009c
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01a      	beq.n	8003cdc <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <vTaskDelay+0x68>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d009      	beq.n	8003cc2 <vTaskDelay+0x2e>
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	e7fe      	b.n	8003cc0 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8003cc2:	f000 f87f 	bl	8003dc4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	2023      	movs	r0, #35	; 0x23
 8003cca:	f002 fb5f 	bl	800638c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cce:	2100      	movs	r1, #0
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 ffd3 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003cd6:	f000 f883 	bl	8003de0 <xTaskResumeAll>
 8003cda:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <vTaskDelay+0x6c>)
 8003ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000198 	.word	0x20000198
 8003d00:	e000ed04 	.word	0xe000ed04

08003d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003d0a:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <vTaskStartScheduler+0xa0>)
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	2282      	movs	r2, #130	; 0x82
 8003d16:	4924      	ldr	r1, [pc, #144]	; (8003da8 <vTaskStartScheduler+0xa4>)
 8003d18:	4824      	ldr	r0, [pc, #144]	; (8003dac <vTaskStartScheduler+0xa8>)
 8003d1a:	f7ff fe23 	bl	8003964 <xTaskCreate>
 8003d1e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d102      	bne.n	8003d2c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003d26:	f001 f835 	bl	8004d94 <xTimerCreateTimerTask>
 8003d2a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d123      	bne.n	8003d7a <vTaskStartScheduler+0x76>
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <vTaskStartScheduler+0xac>)
 8003d46:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003d4c:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <vTaskStartScheduler+0xb0>)
 8003d4e:	2201      	movs	r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <vTaskStartScheduler+0xb4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <vTaskStartScheduler+0xb8>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <vTaskStartScheduler+0xa0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d102      	bne.n	8003d6a <vTaskStartScheduler+0x66>
 8003d64:	f002 ffce 	bl	8006d04 <SEGGER_SYSVIEW_OnIdle>
 8003d68:	e004      	b.n	8003d74 <vTaskStartScheduler+0x70>
 8003d6a:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <vTaskStartScheduler+0xb8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 f826 	bl	8006dc0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003d74:	f001 fb16 	bl	80053a4 <xPortStartScheduler>
 8003d78:	e00d      	b.n	8003d96 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d109      	bne.n	8003d96 <vTaskStartScheduler+0x92>
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e7fe      	b.n	8003d94 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <vTaskStartScheduler+0xbc>)
 8003d98:	681b      	ldr	r3, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000194 	.word	0x20000194
 8003da8:	08007cbc 	.word	0x08007cbc
 8003dac:	08004695 	.word	0x08004695
 8003db0:	20000190 	.word	0x20000190
 8003db4:	2000017c 	.word	0x2000017c
 8003db8:	20000174 	.word	0x20000174
 8003dbc:	20000098 	.word	0x20000098
 8003dc0:	2000000c 	.word	0x2000000c

08003dc4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <vTaskSuspendAll+0x18>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4a03      	ldr	r2, [pc, #12]	; (8003ddc <vTaskSuspendAll+0x18>)
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20000198 	.word	0x20000198

08003de0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003dee:	4b72      	ldr	r3, [pc, #456]	; (8003fb8 <xTaskResumeAll+0x1d8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <xTaskResumeAll+0x2a>
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	e7fe      	b.n	8003e08 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003e0a:	f001 fbe3 	bl	80055d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003e0e:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <xTaskResumeAll+0x1d8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <xTaskResumeAll+0x1d8>)
 8003e16:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e18:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <xTaskResumeAll+0x1d8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 80c4 	bne.w	8003faa <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e22:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <xTaskResumeAll+0x1dc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80bf 	beq.w	8003faa <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e2c:	e08e      	b.n	8003f4c <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2e:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <xTaskResumeAll+0x1e0>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	6a12      	ldr	r2, [r2, #32]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	69d2      	ldr	r2, [r2, #28]
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	3318      	adds	r3, #24
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d103      	bne.n	8003e64 <xTaskResumeAll+0x84>
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	605a      	str	r2, [r3, #4]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1e5a      	subs	r2, r3, #1
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	6892      	ldr	r2, [r2, #8]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d103      	bne.n	8003ea2 <xTaskResumeAll+0xc2>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 ffc5 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <xTaskResumeAll+0x1e4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	4a3e      	ldr	r2, [pc, #248]	; (8003fc4 <xTaskResumeAll+0x1e4>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed0:	493d      	ldr	r1, [pc, #244]	; (8003fc8 <xTaskResumeAll+0x1e8>)
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3304      	adds	r3, #4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	60da      	str	r2, [r3, #12]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	3204      	adds	r2, #4
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	609a      	str	r2, [r3, #8]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4a2e      	ldr	r2, [pc, #184]	; (8003fc8 <xTaskResumeAll+0x1e8>)
 8003f10:	441a      	add	r2, r3
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	615a      	str	r2, [r3, #20]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1a:	492b      	ldr	r1, [pc, #172]	; (8003fc8 <xTaskResumeAll+0x1e8>)
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1c59      	adds	r1, r3, #1
 8003f2a:	4827      	ldr	r0, [pc, #156]	; (8003fc8 <xTaskResumeAll+0x1e8>)
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4403      	add	r3, r0
 8003f36:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b23      	ldr	r3, [pc, #140]	; (8003fcc <xTaskResumeAll+0x1ec>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <xTaskResumeAll+0x1f0>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <xTaskResumeAll+0x1e0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f af6c 	bne.w	8003e2e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f5c:	f000 fc2e 	bl	80047bc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <xTaskResumeAll+0x1f4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d010      	beq.n	8003f8e <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f6c:	f000 f846 	bl	8003ffc <xTaskIncrementTick>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <xTaskResumeAll+0x1f0>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f1      	bne.n	8003f6c <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <xTaskResumeAll+0x1f4>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <xTaskResumeAll+0x1f0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <xTaskResumeAll+0x1f8>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003faa:	f001 fb41 	bl	8005630 <vPortExitCritical>

    return xAlreadyYielded;
 8003fae:	69bb      	ldr	r3, [r7, #24]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000198 	.word	0x20000198
 8003fbc:	20000170 	.word	0x20000170
 8003fc0:	20000130 	.word	0x20000130
 8003fc4:	20000178 	.word	0x20000178
 8003fc8:	2000009c 	.word	0x2000009c
 8003fcc:	20000098 	.word	0x20000098
 8003fd0:	20000184 	.word	0x20000184
 8003fd4:	20000180 	.word	0x20000180
 8003fd8:	e000ed04 	.word	0xe000ed04

08003fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <xTaskGetTickCount+0x1c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003fe8:	687b      	ldr	r3, [r7, #4]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000174 	.word	0x20000174

08003ffc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004006:	4b7f      	ldr	r3, [pc, #508]	; (8004204 <xTaskIncrementTick+0x208>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 80ef 	bne.w	80041ee <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004010:	4b7d      	ldr	r3, [pc, #500]	; (8004208 <xTaskIncrementTick+0x20c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004018:	4a7b      	ldr	r2, [pc, #492]	; (8004208 <xTaskIncrementTick+0x20c>)
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11f      	bne.n	8004064 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8004024:	4b79      	ldr	r3, [pc, #484]	; (800420c <xTaskIncrementTick+0x210>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <xTaskIncrementTick+0x46>
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
 8004040:	e7fe      	b.n	8004040 <xTaskIncrementTick+0x44>
 8004042:	4b72      	ldr	r3, [pc, #456]	; (800420c <xTaskIncrementTick+0x210>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	4b71      	ldr	r3, [pc, #452]	; (8004210 <xTaskIncrementTick+0x214>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6f      	ldr	r2, [pc, #444]	; (800420c <xTaskIncrementTick+0x210>)
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4a6f      	ldr	r2, [pc, #444]	; (8004210 <xTaskIncrementTick+0x214>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <xTaskIncrementTick+0x218>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a6d      	ldr	r2, [pc, #436]	; (8004214 <xTaskIncrementTick+0x218>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	f000 fbac 	bl	80047bc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004064:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <xTaskIncrementTick+0x21c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	429a      	cmp	r2, r3
 800406c:	f0c0 80aa 	bcc.w	80041c4 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <xTaskIncrementTick+0x210>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800407a:	4b67      	ldr	r3, [pc, #412]	; (8004218 <xTaskIncrementTick+0x21c>)
 800407c:	f04f 32ff 	mov.w	r2, #4294967295
 8004080:	601a      	str	r2, [r3, #0]
                    break;
 8004082:	e09f      	b.n	80041c4 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004084:	4b61      	ldr	r3, [pc, #388]	; (800420c <xTaskIncrementTick+0x210>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	429a      	cmp	r2, r3
 800409a:	d203      	bcs.n	80040a4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800409c:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <xTaskIncrementTick+0x21c>)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80040a2:	e08f      	b.n	80041c4 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	6892      	ldr	r2, [r2, #8]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	3304      	adds	r3, #4
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d103      	bne.n	80040d2 <xTaskIncrementTick+0xd6>
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2200      	movs	r2, #0
 80040d6:	615a      	str	r2, [r3, #20]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01e      	beq.n	8004128 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	6a12      	ldr	r2, [r2, #32]
 80040f8:	609a      	str	r2, [r3, #8]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	69d2      	ldr	r2, [r2, #28]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	3318      	adds	r3, #24
 800410c:	429a      	cmp	r2, r3
 800410e:	d103      	bne.n	8004118 <xTaskIncrementTick+0x11c>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2200      	movs	r2, #0
 800411c:	629a      	str	r2, [r3, #40]	; 0x28
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4618      	mov	r0, r3
 800412c:	f002 fe8a 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2201      	movs	r2, #1
 8004136:	409a      	lsls	r2, r3
 8004138:	4b38      	ldr	r3, [pc, #224]	; (800421c <xTaskIncrementTick+0x220>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	4a37      	ldr	r2, [pc, #220]	; (800421c <xTaskIncrementTick+0x220>)
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	4936      	ldr	r1, [pc, #216]	; (8004220 <xTaskIncrementTick+0x224>)
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3304      	adds	r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	3204      	adds	r2, #4
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4a26      	ldr	r2, [pc, #152]	; (8004220 <xTaskIncrementTick+0x224>)
 8004186:	441a      	add	r2, r3
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	615a      	str	r2, [r3, #20]
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	4923      	ldr	r1, [pc, #140]	; (8004220 <xTaskIncrementTick+0x224>)
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	481f      	ldr	r0, [pc, #124]	; (8004220 <xTaskIncrementTick+0x224>)
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4403      	add	r3, r0
 80041ac:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <xTaskIncrementTick+0x228>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	f4ff af59 	bcc.w	8004070 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80041be:	2301      	movs	r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c2:	e755      	b.n	8004070 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041c4:	4b17      	ldr	r3, [pc, #92]	; (8004224 <xTaskIncrementTick+0x228>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	4915      	ldr	r1, [pc, #84]	; (8004220 <xTaskIncrementTick+0x224>)
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d901      	bls.n	80041e0 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80041e0:	4b11      	ldr	r3, [pc, #68]	; (8004228 <xTaskIncrementTick+0x22c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
 80041ec:	e004      	b.n	80041f8 <xTaskIncrementTick+0x1fc>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <xTaskIncrementTick+0x230>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	4a0d      	ldr	r2, [pc, #52]	; (800422c <xTaskIncrementTick+0x230>)
 80041f6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3728      	adds	r7, #40	; 0x28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000198 	.word	0x20000198
 8004208:	20000174 	.word	0x20000174
 800420c:	20000128 	.word	0x20000128
 8004210:	2000012c 	.word	0x2000012c
 8004214:	20000188 	.word	0x20000188
 8004218:	20000190 	.word	0x20000190
 800421c:	20000178 	.word	0x20000178
 8004220:	2000009c 	.word	0x2000009c
 8004224:	20000098 	.word	0x20000098
 8004228:	20000184 	.word	0x20000184
 800422c:	20000180 	.word	0x20000180

08004230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004236:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <vTaskSwitchContext+0xb8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <vTaskSwitchContext+0xbc>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004244:	e04c      	b.n	80042e0 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <vTaskSwitchContext+0xbc>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <vTaskSwitchContext+0xc0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800425a:	7afb      	ldrb	r3, [r7, #11]
 800425c:	f1c3 031f 	rsb	r3, r3, #31
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	4924      	ldr	r1, [pc, #144]	; (80042f4 <vTaskSwitchContext+0xc4>)
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <vTaskSwitchContext+0x5a>
        __asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	e7fe      	b.n	8004288 <vTaskSwitchContext+0x58>
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <vTaskSwitchContext+0xc4>)
 8004296:	4413      	add	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3308      	adds	r3, #8
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d104      	bne.n	80042ba <vTaskSwitchContext+0x8a>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <vTaskSwitchContext+0xc8>)
 80042c2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <vTaskSwitchContext+0xc8>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <vTaskSwitchContext+0xcc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d102      	bne.n	80042d6 <vTaskSwitchContext+0xa6>
 80042d0:	f002 fd18 	bl	8006d04 <SEGGER_SYSVIEW_OnIdle>
}
 80042d4:	e004      	b.n	80042e0 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <vTaskSwitchContext+0xc8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f002 fd70 	bl	8006dc0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80042e0:	bf00      	nop
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20000198 	.word	0x20000198
 80042ec:	20000184 	.word	0x20000184
 80042f0:	20000178 	.word	0x20000178
 80042f4:	2000009c 	.word	0x2000009c
 80042f8:	20000098 	.word	0x20000098
 80042fc:	20000194 	.word	0x20000194

08004300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <vTaskPlaceOnEventList+0x24>
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	e7fe      	b.n	8004322 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <vTaskPlaceOnEventList+0x44>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3318      	adds	r3, #24
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fe fc7f 	bl	8002c30 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004332:	2101      	movs	r1, #1
 8004334:	6838      	ldr	r0, [r7, #0]
 8004336:	f000 fca1 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000098 	.word	0x20000098

08004348 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <vTaskPlaceOnEventListRestricted+0x26>
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	e7fe      	b.n	800436c <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	4b17      	ldr	r3, [pc, #92]	; (80043d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	61da      	str	r2, [r3, #28]
 800437c:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	6892      	ldr	r2, [r2, #8]
 8004384:	621a      	str	r2, [r3, #32]
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	3218      	adds	r2, #24
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f103 0218 	add.w	r2, r3, #24
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <vTaskPlaceOnEventListRestricted+0x8c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	629a      	str	r2, [r3, #40]	; 0x28
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80043bc:	2024      	movs	r0, #36	; 0x24
 80043be:	f001 ffc7 	bl	8006350 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	68b8      	ldr	r0, [r7, #8]
 80043c6:	f000 fc59 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
    }
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000098 	.word	0x20000098

080043d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <xTaskRemoveFromEventList+0x2a>
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e7fe      	b.n	8004400 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	6a12      	ldr	r2, [r2, #32]
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	69d2      	ldr	r2, [r2, #28]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	3318      	adds	r3, #24
 8004424:	429a      	cmp	r2, r3
 8004426:	d103      	bne.n	8004430 <xTaskRemoveFromEventList+0x58>
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	2200      	movs	r2, #0
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004440:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <xTaskRemoveFromEventList+0x198>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d162      	bne.n	800450e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	6a3a      	ldr	r2, [r7, #32]
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	6a3a      	ldr	r2, [r7, #32]
 800445e:	6892      	ldr	r2, [r2, #8]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	3304      	adds	r3, #4
 800446a:	429a      	cmp	r2, r3
 800446c:	d103      	bne.n	8004476 <xTaskRemoveFromEventList+0x9e>
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	2200      	movs	r2, #0
 800447a:	615a      	str	r2, [r3, #20]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	1e5a      	subs	r2, r3, #1
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	4618      	mov	r0, r3
 800448a:	f002 fcdb 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	2201      	movs	r2, #1
 8004494:	409a      	lsls	r2, r3
 8004496:	4b37      	ldr	r3, [pc, #220]	; (8004574 <xTaskRemoveFromEventList+0x19c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	4a35      	ldr	r2, [pc, #212]	; (8004574 <xTaskRemoveFromEventList+0x19c>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4934      	ldr	r1, [pc, #208]	; (8004578 <xTaskRemoveFromEventList+0x1a0>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3304      	adds	r3, #4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	3204      	adds	r2, #4
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	1d1a      	adds	r2, r3, #4
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a25      	ldr	r2, [pc, #148]	; (8004578 <xTaskRemoveFromEventList+0x1a0>)
 80044e4:	441a      	add	r2, r3
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	615a      	str	r2, [r3, #20]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	4922      	ldr	r1, [pc, #136]	; (8004578 <xTaskRemoveFromEventList+0x1a0>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	1c59      	adds	r1, r3, #1
 80044fe:	481e      	ldr	r0, [pc, #120]	; (8004578 <xTaskRemoveFromEventList+0x1a0>)
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4403      	add	r3, r0
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	e01b      	b.n	8004546 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800450e:	4b1b      	ldr	r3, [pc, #108]	; (800457c <xTaskRemoveFromEventList+0x1a4>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61bb      	str	r3, [r7, #24]
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	61da      	str	r2, [r3, #28]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	621a      	str	r2, [r3, #32]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	6a3a      	ldr	r2, [r7, #32]
 8004528:	3218      	adds	r2, #24
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f103 0218 	add.w	r2, r3, #24
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	4a10      	ldr	r2, [pc, #64]	; (800457c <xTaskRemoveFromEventList+0x1a4>)
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <xTaskRemoveFromEventList+0x1a4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3301      	adds	r3, #1
 8004542:	4a0e      	ldr	r2, [pc, #56]	; (800457c <xTaskRemoveFromEventList+0x1a4>)
 8004544:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <xTaskRemoveFromEventList+0x1a8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d905      	bls.n	8004560 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004558:	4b0a      	ldr	r3, [pc, #40]	; (8004584 <xTaskRemoveFromEventList+0x1ac>)
 800455a:	2201      	movs	r2, #1
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e001      	b.n	8004564 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004566:	4618      	mov	r0, r3
 8004568:	3728      	adds	r7, #40	; 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000198 	.word	0x20000198
 8004574:	20000178 	.word	0x20000178
 8004578:	2000009c 	.word	0x2000009c
 800457c:	20000130 	.word	0x20000130
 8004580:	20000098 	.word	0x20000098
 8004584:	20000184 	.word	0x20000184

08004588 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <vTaskInternalSetTimeOutState+0x24>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <vTaskInternalSetTimeOutState+0x28>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	605a      	str	r2, [r3, #4]
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000188 	.word	0x20000188
 80045b0:	20000174 	.word	0x20000174

080045b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d109      	bne.n	80045d8 <xTaskCheckForTimeOut+0x24>
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	e7fe      	b.n	80045d6 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <xTaskCheckForTimeOut+0x3e>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e7fe      	b.n	80045f0 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80045f2:	f000 ffef 	bl	80055d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80045f6:	4b1f      	ldr	r3, [pc, #124]	; (8004674 <xTaskCheckForTimeOut+0xc0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d102      	bne.n	8004616 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004610:	2300      	movs	r3, #0
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e026      	b.n	8004664 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <xTaskCheckForTimeOut+0xc4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d00a      	beq.n	8004638 <xTaskCheckForTimeOut+0x84>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	429a      	cmp	r2, r3
 800462a:	d305      	bcc.n	8004638 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800462c:	2301      	movs	r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e015      	b.n	8004664 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	429a      	cmp	r2, r3
 8004640:	d20b      	bcs.n	800465a <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	1ad2      	subs	r2, r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff9a 	bl	8004588 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	e004      	b.n	8004664 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004664:	f000 ffe4 	bl	8005630 <vPortExitCritical>

    return xReturn;
 8004668:	69fb      	ldr	r3, [r7, #28]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3720      	adds	r7, #32
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000174 	.word	0x20000174
 8004678:	20000188 	.word	0x20000188

0800467c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <vTaskMissedYield+0x14>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000184 	.word	0x20000184

08004694 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800469c:	f000 f852 	bl	8004744 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <prvIdleTask+0x28>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d9f9      	bls.n	800469c <prvIdleTask+0x8>
                {
                    taskYIELD();
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <prvIdleTask+0x2c>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80046b8:	e7f0      	b.n	800469c <prvIdleTask+0x8>
 80046ba:	bf00      	nop
 80046bc:	2000009c 	.word	0x2000009c
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	e00c      	b.n	80046ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4a12      	ldr	r2, [pc, #72]	; (8004724 <prvInitialiseTaskLists+0x60>)
 80046dc:	4413      	add	r3, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fa79 	bl	8002bd6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3301      	adds	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d9ef      	bls.n	80046d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80046f0:	480d      	ldr	r0, [pc, #52]	; (8004728 <prvInitialiseTaskLists+0x64>)
 80046f2:	f7fe fa70 	bl	8002bd6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80046f6:	480d      	ldr	r0, [pc, #52]	; (800472c <prvInitialiseTaskLists+0x68>)
 80046f8:	f7fe fa6d 	bl	8002bd6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <prvInitialiseTaskLists+0x6c>)
 80046fe:	f7fe fa6a 	bl	8002bd6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004702:	480c      	ldr	r0, [pc, #48]	; (8004734 <prvInitialiseTaskLists+0x70>)
 8004704:	f7fe fa67 	bl	8002bd6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004708:	480b      	ldr	r0, [pc, #44]	; (8004738 <prvInitialiseTaskLists+0x74>)
 800470a:	f7fe fa64 	bl	8002bd6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800470e:	4b0b      	ldr	r3, [pc, #44]	; (800473c <prvInitialiseTaskLists+0x78>)
 8004710:	4a05      	ldr	r2, [pc, #20]	; (8004728 <prvInitialiseTaskLists+0x64>)
 8004712:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <prvInitialiseTaskLists+0x7c>)
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <prvInitialiseTaskLists+0x68>)
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	2000009c 	.word	0x2000009c
 8004728:	20000100 	.word	0x20000100
 800472c:	20000114 	.word	0x20000114
 8004730:	20000130 	.word	0x20000130
 8004734:	20000144 	.word	0x20000144
 8004738:	2000015c 	.word	0x2000015c
 800473c:	20000128 	.word	0x20000128
 8004740:	2000012c 	.word	0x2000012c

08004744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800474a:	e019      	b.n	8004780 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800474c:	f000 ff42 	bl	80055d4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <prvCheckTasksWaitingTermination+0x4c>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe faa0 	bl	8002ca2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <prvCheckTasksWaitingTermination+0x50>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3b01      	subs	r3, #1
 8004768:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <prvCheckTasksWaitingTermination+0x50>)
 800476a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <prvCheckTasksWaitingTermination+0x54>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <prvCheckTasksWaitingTermination+0x54>)
 8004774:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004776:	f000 ff5b 	bl	8005630 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f80e 	bl	800479c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <prvCheckTasksWaitingTermination+0x54>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e1      	bne.n	800474c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000144 	.word	0x20000144
 8004794:	20000170 	.word	0x20000170
 8004798:	20000158 	.word	0x20000158

0800479c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f8d1 	bl	8005950 <vPortFree>
                vPortFree( pxTCB );
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f001 f8ce 	bl	8005950 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <prvResetNextTaskUnblockTime+0x30>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <prvResetNextTaskUnblockTime+0x34>)
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80047d2:	e005      	b.n	80047e0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <prvResetNextTaskUnblockTime+0x30>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <prvResetNextTaskUnblockTime+0x34>)
 80047de:	6013      	str	r3, [r2, #0]
}
 80047e0:	bf00      	nop
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000128 	.word	0x20000128
 80047f0:	20000190 	.word	0x20000190

080047f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80047fa:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <xTaskGetSchedulerState+0x34>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004802:	2301      	movs	r3, #1
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	e008      	b.n	800481a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <xTaskGetSchedulerState+0x38>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004810:	2302      	movs	r3, #2
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	e001      	b.n	800481a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800481a:	687b      	ldr	r3, [r7, #4]
    }
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	2000017c 	.word	0x2000017c
 800482c:	20000198 	.word	0x20000198

08004830 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8090 	beq.w	8004968 <xTaskPriorityInherit+0x138>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	4b49      	ldr	r3, [pc, #292]	; (8004974 <xTaskPriorityInherit+0x144>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d27f      	bcs.n	8004956 <xTaskPriorityInherit+0x126>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	db06      	blt.n	800486c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485e:	4b45      	ldr	r3, [pc, #276]	; (8004974 <xTaskPriorityInherit+0x144>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	f1c3 0205 	rsb	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	6959      	ldr	r1, [r3, #20]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4a3e      	ldr	r2, [pc, #248]	; (8004978 <xTaskPriorityInherit+0x148>)
 800487e:	4413      	add	r3, r2
 8004880:	4299      	cmp	r1, r3
 8004882:	d15b      	bne.n	800493c <xTaskPriorityInherit+0x10c>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	3304      	adds	r3, #4
 8004888:	4618      	mov	r0, r3
 800488a:	f7fe fa0a 	bl	8002ca2 <uxListRemove>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	2201      	movs	r2, #1
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	4b36      	ldr	r3, [pc, #216]	; (800497c <xTaskPriorityInherit+0x14c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4013      	ands	r3, r2
 80048a6:	4a35      	ldr	r2, [pc, #212]	; (800497c <xTaskPriorityInherit+0x14c>)
 80048a8:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048aa:	4b32      	ldr	r3, [pc, #200]	; (8004974 <xTaskPriorityInherit+0x144>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f002 fac4 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	409a      	lsls	r2, r3
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <xTaskPriorityInherit+0x14c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	4a2c      	ldr	r2, [pc, #176]	; (800497c <xTaskPriorityInherit+0x14c>)
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	4929      	ldr	r1, [pc, #164]	; (8004978 <xTaskPriorityInherit+0x148>)
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	3304      	adds	r3, #4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	3204      	adds	r2, #4
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1d1a      	adds	r2, r3, #4
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <xTaskPriorityInherit+0x148>)
 8004912:	441a      	add	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	615a      	str	r2, [r3, #20]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491c:	4916      	ldr	r1, [pc, #88]	; (8004978 <xTaskPriorityInherit+0x148>)
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	1c59      	adds	r1, r3, #1
 800492c:	4812      	ldr	r0, [pc, #72]	; (8004978 <xTaskPriorityInherit+0x148>)
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4403      	add	r3, r0
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	e004      	b.n	8004946 <xTaskPriorityInherit+0x116>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <xTaskPriorityInherit+0x144>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4619      	mov	r1, r3
 800494a:	2049      	movs	r0, #73	; 0x49
 800494c:	f001 fd1e 	bl	800638c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e008      	b.n	8004968 <xTaskPriorityInherit+0x138>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <xTaskPriorityInherit+0x144>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	429a      	cmp	r2, r3
 8004962:	d201      	bcs.n	8004968 <xTaskPriorityInherit+0x138>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004968:	697b      	ldr	r3, [r7, #20]
    }
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000098 	.word	0x20000098
 8004978:	2000009c 	.word	0x2000009c
 800497c:	20000178 	.word	0x20000178

08004980 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8093 	beq.w	8004abe <xTaskPriorityDisinherit+0x13e>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004998:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <xTaskPriorityDisinherit+0x148>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d009      	beq.n	80049b6 <xTaskPriorityDisinherit+0x36>
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	e7fe      	b.n	80049b4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <xTaskPriorityDisinherit+0x52>
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e7fe      	b.n	80049d0 <xTaskPriorityDisinherit+0x50>
            ( pxTCB->uxMutexesHeld )--;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	1e5a      	subs	r2, r3, #1
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d06a      	beq.n	8004abe <xTaskPriorityDisinherit+0x13e>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d166      	bne.n	8004abe <xTaskPriorityDisinherit+0x13e>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe f954 	bl	8002ca2 <uxListRemove>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xTaskPriorityDisinherit+0x96>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2201      	movs	r2, #1
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <xTaskPriorityDisinherit+0x14c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4013      	ands	r3, r2
 8004a12:	4a2e      	ldr	r2, [pc, #184]	; (8004acc <xTaskPriorityDisinherit+0x14c>)
 8004a14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4619      	mov	r1, r3
 8004a1a:	204a      	movs	r0, #74	; 0x4a
 8004a1c:	f001 fcb6 	bl	800638c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	f1c3 0205 	rsb	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f002 fa04 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	2201      	movs	r2, #1
 8004a42:	409a      	lsls	r2, r3
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <xTaskPriorityDisinherit+0x14c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <xTaskPriorityDisinherit+0x14c>)
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a52:	491f      	ldr	r1, [pc, #124]	; (8004ad0 <xTaskPriorityDisinherit+0x150>)
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	3304      	adds	r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	60da      	str	r2, [r3, #12]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	3204      	adds	r2, #4
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a0f      	ldr	r2, [pc, #60]	; (8004ad0 <xTaskPriorityDisinherit+0x150>)
 8004a92:	441a      	add	r2, r3
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	615a      	str	r2, [r3, #20]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <xTaskPriorityDisinherit+0x150>)
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	4808      	ldr	r0, [pc, #32]	; (8004ad0 <xTaskPriorityDisinherit+0x150>)
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4403      	add	r3, r0
 8004ab8:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004abe:	69fb      	ldr	r3, [r7, #28]
    }
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000098 	.word	0x20000098
 8004acc:	20000178 	.word	0x20000178
 8004ad0:	2000009c 	.word	0x2000009c

08004ad4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a9 	beq.w	8004c40 <vTaskPriorityDisinheritAfterTimeout+0x16c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	e7fe      	b.n	8004b08 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d902      	bls.n	8004b1a <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
 8004b18:	e002      	b.n	8004b20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b26:	429a      	cmp	r2, r3
 8004b28:	f000 808a 	beq.w	8004c40 <vTaskPriorityDisinheritAfterTimeout+0x16c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	f040 8084 	bne.w	8004c40 <vTaskPriorityDisinheritAfterTimeout+0x16c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d109      	bne.n	8004b56 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e7fe      	b.n	8004b54 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	204a      	movs	r0, #74	; 0x4a
 8004b5c:	f001 fc16 	bl	800638c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db04      	blt.n	8004b7e <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f1c3 0205 	rsb	r2, r3, #5
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	6959      	ldr	r1, [r3, #20]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8004b8e:	4413      	add	r3, r2
 8004b90:	4299      	cmp	r1, r3
 8004b92:	d155      	bne.n	8004c40 <vTaskPriorityDisinheritAfterTimeout+0x16c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fe f882 	bl	8002ca2 <uxListRemove>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	2201      	movs	r2, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43da      	mvns	r2, r3
 8004bb0:	4b27      	ldr	r3, [pc, #156]	; (8004c50 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004bb8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 f941 	bl	8006e44 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	4a1f      	ldr	r2, [pc, #124]	; (8004c50 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	491c      	ldr	r1, [pc, #112]	; (8004c4c <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	3304      	adds	r3, #4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	6a3a      	ldr	r2, [r7, #32]
 8004bfe:	3204      	adds	r2, #4
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4613      	mov	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8004c18:	441a      	add	r2, r3
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	615a      	str	r2, [r3, #20]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c22:	490a      	ldr	r1, [pc, #40]	; (8004c4c <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1c59      	adds	r1, r3, #1
 8004c32:	4806      	ldr	r0, [pc, #24]	; (8004c4c <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4403      	add	r3, r0
 8004c3e:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004c40:	bf00      	nop
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000098 	.word	0x20000098
 8004c4c:	2000009c 	.word	0x2000009c
 8004c50:	20000178 	.word	0x20000178

08004c54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004c58:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c66:	3201      	adds	r2, #1
 8004c68:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004c6a:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
    }
 8004c6e:	4618      	mov	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000098 	.word	0x20000098

08004c7c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b3c      	ldr	r3, [pc, #240]	; (8004d78 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe f805 	bl	8002ca2 <uxListRemove>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c9e:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x104>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	4a33      	ldr	r2, [pc, #204]	; (8004d80 <prvAddCurrentTaskToDelayedList+0x104>)
 8004cb4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d124      	bne.n	8004d08 <prvAddCurrentTaskToDelayedList+0x8c>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d021      	beq.n	8004d08 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc4:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x108>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	609a      	str	r2, [r3, #8]
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	6892      	ldr	r2, [r2, #8]
 8004cda:	60da      	str	r2, [r3, #12]
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	3204      	adds	r2, #4
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x108>)
 8004cf8:	615a      	str	r2, [r3, #20]
 8004cfa:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x108>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	4a20      	ldr	r2, [pc, #128]	; (8004d84 <prvAddCurrentTaskToDelayedList+0x108>)
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d06:	e032      	b.n	8004d6e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d20f      	bcs.n	8004d40 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004d20:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2104      	movs	r1, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f002 f8ce 	bl	8006ec8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2c:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fd ff79 	bl	8002c30 <vListInsert>
}
 8004d3e:	e016      	b.n	8004d6e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2104      	movs	r1, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 f8be 	bl	8006ec8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <prvAddCurrentTaskToDelayedList+0x110>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <prvAddCurrentTaskToDelayedList+0x100>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f7fd ff69 	bl	8002c30 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d202      	bcs.n	8004d6e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <prvAddCurrentTaskToDelayedList+0x114>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6013      	str	r3, [r2, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20000174 	.word	0x20000174
 8004d7c:	20000098 	.word	0x20000098
 8004d80:	20000178 	.word	0x20000178
 8004d84:	2000015c 	.word	0x2000015c
 8004d88:	2000012c 	.word	0x2000012c
 8004d8c:	20000128 	.word	0x20000128
 8004d90:	20000190 	.word	0x20000190

08004d94 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004d9e:	f000 fa43 	bl	8005228 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004da2:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <xTimerCreateTimerTask+0x54>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <xTimerCreateTimerTask+0x58>)
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	2302      	movs	r3, #2
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	2300      	movs	r3, #0
 8004db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004db8:	490d      	ldr	r1, [pc, #52]	; (8004df0 <xTimerCreateTimerTask+0x5c>)
 8004dba:	480e      	ldr	r0, [pc, #56]	; (8004df4 <xTimerCreateTimerTask+0x60>)
 8004dbc:	f7fe fdd2 	bl	8003964 <xTaskCreate>
 8004dc0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <xTimerCreateTimerTask+0x48>
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	e7fe      	b.n	8004dda <xTimerCreateTimerTask+0x46>
        return xReturn;
 8004ddc:	687b      	ldr	r3, [r7, #4]
    }
 8004dde:	4618      	mov	r0, r3
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200001cc 	.word	0x200001cc
 8004dec:	200001d0 	.word	0x200001d0
 8004df0:	08007cc4 	.word	0x08007cc4
 8004df4:	08004e99 	.word	0x08004e99

08004df8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e04:	e008      	b.n	8004e18 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	18d1      	adds	r1, r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f8db 	bl	8004fe0 <prvInsertTimerInActiveList>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ea      	bne.n	8004e06 <prvReloadTimer+0xe>
        }
    }
 8004e30:	bf00      	nop
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <prvProcessExpiredTimer+0x5c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fd ff26 	bl	8002ca2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7ff ffc5 	bl	8004df8 <prvReloadTimer>
 8004e6e:	e008      	b.n	8004e82 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e76:	f023 0301 	bic.w	r3, r3, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	4798      	blx	r3
    }
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200001c4 	.word	0x200001c4

08004e98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ea0:	f107 0308 	add.w	r3, r7, #8
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f857 	bl	8004f58 <prvGetNextExpireTime>
 8004eaa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f803 	bl	8004ebc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004eb6:	f000 f8d5 	bl	8005064 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eba:	e7f1      	b.n	8004ea0 <prvTimerTask+0x8>

08004ebc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004ec6:	f7fe ff7d 	bl	8003dc4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004eca:	f107 0308 	add.w	r3, r7, #8
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f866 	bl	8004fa0 <prvSampleTimeNow>
 8004ed4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d130      	bne.n	8004f3e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <prvProcessTimerOrBlockTask+0x3c>
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d806      	bhi.n	8004ef8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004eea:	f7fe ff79 	bl	8003de0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ffa1 	bl	8004e38 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004ef6:	e024      	b.n	8004f42 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <prvProcessTimerOrBlockTask+0x90>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <prvProcessTimerOrBlockTask+0x50>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <prvProcessTimerOrBlockTask+0x52>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <prvProcessTimerOrBlockTask+0x94>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fe fced 	bl	80038fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004f22:	f7fe ff5d 	bl	8003de0 <xTaskResumeAll>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <prvProcessTimerOrBlockTask+0x98>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
    }
 8004f3c:	e001      	b.n	8004f42 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004f3e:	f7fe ff4f 	bl	8003de0 <xTaskResumeAll>
    }
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200001c8 	.word	0x200001c8
 8004f50:	200001cc 	.word	0x200001cc
 8004f54:	e000ed04 	.word	0xe000ed04

08004f58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <prvGetNextExpireTime+0x44>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <prvGetNextExpireTime+0x16>
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	e000      	b.n	8004f70 <prvGetNextExpireTime+0x18>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d105      	bne.n	8004f88 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <prvGetNextExpireTime+0x44>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	e001      	b.n	8004f8c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
    }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200001c4 	.word	0x200001c4

08004fa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004fa8:	f7ff f818 	bl	8003fdc <xTaskGetTickCount>
 8004fac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004fae:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <prvSampleTimeNow+0x3c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d205      	bcs.n	8004fc4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004fb8:	f000 f910 	bl	80051dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e002      	b.n	8004fca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004fca:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <prvSampleTimeNow+0x3c>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    }
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200001d4 	.word	0x200001d4

08004fe0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	68ba      	ldr	r2, [r7, #8]
 8004ff6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d812      	bhi.n	800502c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005014:	2301      	movs	r3, #1
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e01b      	b.n	8005052 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800501a:	4b10      	ldr	r3, [pc, #64]	; (800505c <prvInsertTimerInActiveList+0x7c>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3304      	adds	r3, #4
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7fd fe03 	bl	8002c30 <vListInsert>
 800502a:	e012      	b.n	8005052 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d206      	bcs.n	8005042 <prvInsertTimerInActiveList+0x62>
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d302      	bcc.n	8005042 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e007      	b.n	8005052 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <prvInsertTimerInActiveList+0x80>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f7fd fdef 	bl	8002c30 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005052:	697b      	ldr	r3, [r7, #20]
    }
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200001c8 	.word	0x200001c8
 8005060:	200001c4 	.word	0x200001c4

08005064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800506a:	e0a5      	b.n	80051b8 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f2c0 80a1 	blt.w	80051b6 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	3304      	adds	r3, #4
 8005084:	4618      	mov	r0, r3
 8005086:	f7fd fe0c 	bl	8002ca2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800508a:	1d3b      	adds	r3, r7, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff ff87 	bl	8004fa0 <prvSampleTimeNow>
 8005092:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	2b08      	cmp	r3, #8
 800509a:	f200 808d 	bhi.w	80051b8 <prvProcessReceivedCommands+0x154>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <prvProcessReceivedCommands+0x40>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050c9 	.word	0x080050c9
 80050ac:	08005131 	.word	0x08005131
 80050b0:	08005145 	.word	0x08005145
 80050b4:	0800518d 	.word	0x0800518d
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050c9 	.word	0x080050c9
 80050c0:	08005131 	.word	0x08005131
 80050c4:	08005145 	.word	0x08005145
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	18d1      	adds	r1, r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	69f8      	ldr	r0, [r7, #28]
 80050e8:	f7ff ff7a 	bl	8004fe0 <prvInsertTimerInActiveList>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d062      	beq.n	80051b8 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d009      	beq.n	8005114 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	4413      	add	r3, r2
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4619      	mov	r1, r3
 800510c:	69f8      	ldr	r0, [r7, #28]
 800510e:	f7ff fe73 	bl	8004df8 <prvReloadTimer>
 8005112:	e008      	b.n	8005126 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	69f8      	ldr	r0, [r7, #28]
 800512c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800512e:	e043      	b.n	80051b8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005142:	e039      	b.n	80051b8 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <prvProcessReceivedCommands+0x114>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	e7fe      	b.n	8005176 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	18d1      	adds	r1, r2, r3
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	69f8      	ldr	r0, [r7, #28]
 8005186:	f7ff ff2b 	bl	8004fe0 <prvInsertTimerInActiveList>
                        break;
 800518a:	e015      	b.n	80051b8 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 800519a:	69f8      	ldr	r0, [r7, #28]
 800519c:	f000 fbd8 	bl	8005950 <vPortFree>
 80051a0:	e00a      	b.n	80051b8 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051a8:	f023 0301 	bic.w	r3, r3, #1
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80051b4:	e000      	b.n	80051b8 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80051b6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <prvProcessReceivedCommands+0x174>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f107 0108 	add.w	r1, r7, #8
 80051c0:	2200      	movs	r2, #0
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd ffca 	bl	800315c <xQueueReceive>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f47f af4e 	bne.w	800506c <prvProcessReceivedCommands+0x8>
        }
    }
 80051d0:	bf00      	nop
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200001cc 	.word	0x200001cc

080051dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051e2:	e009      	b.n	80051f8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051e4:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <prvSwitchTimerLists+0x44>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80051ee:	f04f 31ff 	mov.w	r1, #4294967295
 80051f2:	6838      	ldr	r0, [r7, #0]
 80051f4:	f7ff fe20 	bl	8004e38 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <prvSwitchTimerLists+0x44>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <prvSwitchTimerLists+0x44>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <prvSwitchTimerLists+0x48>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a04      	ldr	r2, [pc, #16]	; (8005220 <prvSwitchTimerLists+0x44>)
 800520e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005210:	4a04      	ldr	r2, [pc, #16]	; (8005224 <prvSwitchTimerLists+0x48>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6013      	str	r3, [r2, #0]
    }
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200001c4 	.word	0x200001c4
 8005224:	200001c8 	.word	0x200001c8

08005228 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800522c:	f000 f9d2 	bl	80055d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <prvCheckForValidListAndQueue+0x54>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11d      	bne.n	8005274 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005238:	4811      	ldr	r0, [pc, #68]	; (8005280 <prvCheckForValidListAndQueue+0x58>)
 800523a:	f7fd fccc 	bl	8002bd6 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800523e:	4811      	ldr	r0, [pc, #68]	; (8005284 <prvCheckForValidListAndQueue+0x5c>)
 8005240:	f7fd fcc9 	bl	8002bd6 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005244:	4b10      	ldr	r3, [pc, #64]	; (8005288 <prvCheckForValidListAndQueue+0x60>)
 8005246:	4a0e      	ldr	r2, [pc, #56]	; (8005280 <prvCheckForValidListAndQueue+0x58>)
 8005248:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <prvCheckForValidListAndQueue+0x64>)
 800524c:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <prvCheckForValidListAndQueue+0x5c>)
 800524e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005250:	2200      	movs	r2, #0
 8005252:	210c      	movs	r1, #12
 8005254:	200a      	movs	r0, #10
 8005256:	f7fd fde3 	bl	8002e20 <xQueueGenericCreate>
 800525a:	4602      	mov	r2, r0
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <prvCheckForValidListAndQueue+0x54>)
 800525e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005260:	4b06      	ldr	r3, [pc, #24]	; (800527c <prvCheckForValidListAndQueue+0x54>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005268:	4b04      	ldr	r3, [pc, #16]	; (800527c <prvCheckForValidListAndQueue+0x54>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4908      	ldr	r1, [pc, #32]	; (8005290 <prvCheckForValidListAndQueue+0x68>)
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe faee 	bl	8003850 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005274:	f000 f9dc 	bl	8005630 <vPortExitCritical>
    }
 8005278:	bf00      	nop
 800527a:	bd80      	pop	{r7, pc}
 800527c:	200001cc 	.word	0x200001cc
 8005280:	2000019c 	.word	0x2000019c
 8005284:	200001b0 	.word	0x200001b0
 8005288:	200001c4 	.word	0x200001c4
 800528c:	200001c8 	.word	0x200001c8
 8005290:	08007ccc 	.word	0x08007ccc

08005294 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3b04      	subs	r3, #4
 80052a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3b04      	subs	r3, #4
 80052b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0201 	bic.w	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3b04      	subs	r3, #4
 80052c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80052c4:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <pxPortInitialiseStack+0x64>)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3b14      	subs	r3, #20
 80052ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3b04      	subs	r3, #4
 80052da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f06f 0202 	mvn.w	r2, #2
 80052e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b20      	subs	r3, #32
 80052e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80052ea:	68fb      	ldr	r3, [r7, #12]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	080052fd 	.word	0x080052fd

080052fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005306:	4b11      	ldr	r3, [pc, #68]	; (800534c <prvTaskExitError+0x50>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d009      	beq.n	8005324 <prvTaskExitError+0x28>
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e7fe      	b.n	8005322 <prvTaskExitError+0x26>
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005336:	bf00      	nop
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0fc      	beq.n	8005338 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800533e:	bf00      	nop
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000010 	.word	0x20000010

08005350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <pxCurrentTCBConst2>)
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	6808      	ldr	r0, [r1, #0]
 8005356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535a:	f380 8809 	msr	PSP, r0
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f04f 0000 	mov.w	r0, #0
 8005366:	f380 8811 	msr	BASEPRI, r0
 800536a:	4770      	bx	lr
 800536c:	f3af 8000 	nop.w

08005370 <pxCurrentTCBConst2>:
 8005370:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop

08005378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005378:	4808      	ldr	r0, [pc, #32]	; (800539c <prvPortStartFirstTask+0x24>)
 800537a:	6800      	ldr	r0, [r0, #0]
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f380 8808 	msr	MSP, r0
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f380 8814 	msr	CONTROL, r0
 800538a:	b662      	cpsie	i
 800538c:	b661      	cpsie	f
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	df00      	svc	0
 8005398:	bf00      	nop
 800539a:	0000      	.short	0x0000
 800539c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop

080053a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053aa:	4b44      	ldr	r3, [pc, #272]	; (80054bc <xPortStartScheduler+0x118>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a44      	ldr	r2, [pc, #272]	; (80054c0 <xPortStartScheduler+0x11c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <xPortStartScheduler+0x24>
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	e7fe      	b.n	80053c6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80053c8:	4b3c      	ldr	r3, [pc, #240]	; (80054bc <xPortStartScheduler+0x118>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a3d      	ldr	r2, [pc, #244]	; (80054c4 <xPortStartScheduler+0x120>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d109      	bne.n	80053e6 <xPortStartScheduler+0x42>
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e7fe      	b.n	80053e4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053e6:	4b38      	ldr	r3, [pc, #224]	; (80054c8 <xPortStartScheduler+0x124>)
 80053e8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	22ff      	movs	r2, #255	; 0xff
 80053f6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4b30      	ldr	r3, [pc, #192]	; (80054cc <xPortStartScheduler+0x128>)
 800540c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800540e:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <xPortStartScheduler+0x12c>)
 8005410:	2207      	movs	r2, #7
 8005412:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005414:	e009      	b.n	800542a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <xPortStartScheduler+0x12c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3b01      	subs	r3, #1
 800541c:	4a2c      	ldr	r2, [pc, #176]	; (80054d0 <xPortStartScheduler+0x12c>)
 800541e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	b2db      	uxtb	r3, r3
 8005428:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d0ef      	beq.n	8005416 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005436:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <xPortStartScheduler+0x12c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1c3 0307 	rsb	r3, r3, #7
 800543e:	2b04      	cmp	r3, #4
 8005440:	d009      	beq.n	8005456 <xPortStartScheduler+0xb2>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <xPortStartScheduler+0x12c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	4a1c      	ldr	r2, [pc, #112]	; (80054d0 <xPortStartScheduler+0x12c>)
 800545e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005460:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <xPortStartScheduler+0x12c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005468:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <xPortStartScheduler+0x12c>)
 800546a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <xPortStartScheduler+0x130>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <xPortStartScheduler+0x130>)
 800547a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800547e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <xPortStartScheduler+0x130>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <xPortStartScheduler+0x130>)
 8005486:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800548a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800548c:	f000 f954 	bl	8005738 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <xPortStartScheduler+0x134>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005496:	f000 f973 	bl	8005780 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800549a:	4b10      	ldr	r3, [pc, #64]	; (80054dc <xPortStartScheduler+0x138>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <xPortStartScheduler+0x138>)
 80054a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054a4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80054a6:	f7ff ff67 	bl	8005378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80054aa:	f7fe fec1 	bl	8004230 <vTaskSwitchContext>
    prvTaskExitError();
 80054ae:	f7ff ff25 	bl	80052fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	e000ed00 	.word	0xe000ed00
 80054c0:	410fc271 	.word	0x410fc271
 80054c4:	410fc270 	.word	0x410fc270
 80054c8:	e000e400 	.word	0xe000e400
 80054cc:	200001d8 	.word	0x200001d8
 80054d0:	200001dc 	.word	0x200001dc
 80054d4:	e000ed20 	.word	0xe000ed20
 80054d8:	20000010 	.word	0x20000010
 80054dc:	e000ef34 	.word	0xe000ef34

080054e0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054e6:	4b35      	ldr	r3, [pc, #212]	; (80055bc <vInitPrioGroupValue+0xdc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a35      	ldr	r2, [pc, #212]	; (80055c0 <vInitPrioGroupValue+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d109      	bne.n	8005504 <vInitPrioGroupValue+0x24>
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e7fe      	b.n	8005502 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005504:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <vInitPrioGroupValue+0xdc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2e      	ldr	r2, [pc, #184]	; (80055c4 <vInitPrioGroupValue+0xe4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d109      	bne.n	8005522 <vInitPrioGroupValue+0x42>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e7fe      	b.n	8005520 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005522:	4b29      	ldr	r3, [pc, #164]	; (80055c8 <vInitPrioGroupValue+0xe8>)
 8005524:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	22ff      	movs	r2, #255	; 0xff
 8005532:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005544:	b2da      	uxtb	r2, r3
 8005546:	4b21      	ldr	r3, [pc, #132]	; (80055cc <vInitPrioGroupValue+0xec>)
 8005548:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800554a:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 800554c:	2207      	movs	r2, #7
 800554e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005550:	e009      	b.n	8005566 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005552:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3b01      	subs	r3, #1
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 800555a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556e:	2b80      	cmp	r3, #128	; 0x80
 8005570:	d0ef      	beq.n	8005552 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005572:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1c3 0307 	rsb	r3, r3, #7
 800557a:	2b04      	cmp	r3, #4
 800557c:	d009      	beq.n	8005592 <vInitPrioGroupValue+0xb2>
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	e7fe      	b.n	8005590 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005592:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 800559a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800559c:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <vInitPrioGroupValue+0xf0>)
 80055a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	e000ed00 	.word	0xe000ed00
 80055c0:	410fc271 	.word	0x410fc271
 80055c4:	410fc270 	.word	0x410fc270
 80055c8:	e000e400 	.word	0xe000e400
 80055cc:	200001d8 	.word	0x200001d8
 80055d0:	200001dc 	.word	0x200001dc

080055d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <vPortEnterCritical+0x54>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	4a0d      	ldr	r2, [pc, #52]	; (8005628 <vPortEnterCritical+0x54>)
 80055f4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80055f6:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <vPortEnterCritical+0x54>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d10e      	bne.n	800561c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <vPortEnterCritical+0x58>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d009      	beq.n	800561c <vPortEnterCritical+0x48>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	603b      	str	r3, [r7, #0]
 800561a:	e7fe      	b.n	800561a <vPortEnterCritical+0x46>
    }
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	20000010 	.word	0x20000010
 800562c:	e000ed04 	.word	0xe000ed04

08005630 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005636:	4b11      	ldr	r3, [pc, #68]	; (800567c <vPortExitCritical+0x4c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <vPortExitCritical+0x22>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
 8005650:	e7fe      	b.n	8005650 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <vPortExitCritical+0x4c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <vPortExitCritical+0x4c>)
 800565a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <vPortExitCritical+0x4c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <vPortExitCritical+0x3e>
 8005664:	2300      	movs	r3, #0
 8005666:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000010 	.word	0x20000010

08005680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005680:	f3ef 8009 	mrs	r0, PSP
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <pxCurrentTCBConst>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f01e 0f10 	tst.w	lr, #16
 8005690:	bf08      	it	eq
 8005692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	6010      	str	r0, [r2, #0]
 800569c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056a4:	f380 8811 	msr	BASEPRI, r0
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f7fe fdbe 	bl	8004230 <vTaskSwitchContext>
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f380 8811 	msr	BASEPRI, r0
 80056bc:	bc09      	pop	{r0, r3}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c6:	f01e 0f10 	tst.w	lr, #16
 80056ca:	bf08      	it	eq
 80056cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056d0:	f380 8809 	msr	PSP, r0
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst>:
 80056e0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
        __asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005700:	f001 fa86 	bl	8006c10 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005704:	f7fe fc7a 	bl	8003ffc <xTaskIncrementTick>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d006      	beq.n	800571c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800570e:	f001 fadd 	bl	8006ccc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005712:	4b08      	ldr	r3, [pc, #32]	; (8005734 <SysTick_Handler+0x4c>)
 8005714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e001      	b.n	8005720 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800571c:	f001 faba 	bl	8006c94 <SEGGER_SYSVIEW_RecordExitISR>
 8005720:	2300      	movs	r3, #0
 8005722:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <vPortSetupTimerInterrupt+0x34>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <vPortSetupTimerInterrupt+0x38>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <vPortSetupTimerInterrupt+0x3c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <vPortSetupTimerInterrupt+0x40>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	099b      	lsrs	r3, r3, #6
 8005754:	4a09      	ldr	r2, [pc, #36]	; (800577c <vPortSetupTimerInterrupt+0x44>)
 8005756:	3b01      	subs	r3, #1
 8005758:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800575a:	4b04      	ldr	r3, [pc, #16]	; (800576c <vPortSetupTimerInterrupt+0x34>)
 800575c:	2207      	movs	r2, #7
 800575e:	601a      	str	r2, [r3, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000e010 	.word	0xe000e010
 8005770:	e000e018 	.word	0xe000e018
 8005774:	20000008 	.word	0x20000008
 8005778:	10624dd3 	.word	0x10624dd3
 800577c:	e000e014 	.word	0xe000e014

08005780 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005780:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005790 <vPortEnableVFP+0x10>
 8005784:	6801      	ldr	r1, [r0, #0]
 8005786:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800578a:	6001      	str	r1, [r0, #0]
 800578c:	4770      	bx	lr
 800578e:	0000      	.short	0x0000
 8005790:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80057a4:	f7fe fb0e 	bl	8003dc4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80057a8:	4b63      	ldr	r3, [pc, #396]	; (8005938 <pvPortMalloc+0x1a0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80057b0:	f000 f92e 	bl	8005a10 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057b4:	4b61      	ldr	r3, [pc, #388]	; (800593c <pvPortMalloc+0x1a4>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f040 80a5 	bne.w	800590c <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d02c      	beq.n	8005822 <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80057c8:	2208      	movs	r2, #8
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d226      	bcs.n	8005822 <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80057d4:	2208      	movs	r2, #8
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4413      	add	r3, r2
 80057da:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d020      	beq.n	8005828 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f023 0307 	bic.w	r3, r3, #7
 80057ec:	3308      	adds	r3, #8
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d213      	bcs.n	800581c <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f023 0307 	bic.w	r3, r3, #7
 80057fa:	3308      	adds	r3, #8
 80057fc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00f      	beq.n	8005828 <pvPortMalloc+0x90>
        __asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e7fe      	b.n	800581a <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005820:	e002      	b.n	8005828 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
 8005826:	e000      	b.n	800582a <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005828:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d06d      	beq.n	800590c <pvPortMalloc+0x174>
 8005830:	4b43      	ldr	r3, [pc, #268]	; (8005940 <pvPortMalloc+0x1a8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d868      	bhi.n	800590c <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800583a:	4b42      	ldr	r3, [pc, #264]	; (8005944 <pvPortMalloc+0x1ac>)
 800583c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800583e:	4b41      	ldr	r3, [pc, #260]	; (8005944 <pvPortMalloc+0x1ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005844:	e004      	b.n	8005850 <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d903      	bls.n	8005862 <pvPortMalloc+0xca>
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f1      	bne.n	8005846 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005862:	4b35      	ldr	r3, [pc, #212]	; (8005938 <pvPortMalloc+0x1a0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005868:	429a      	cmp	r2, r3
 800586a:	d04f      	beq.n	800590c <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2208      	movs	r2, #8
 8005872:	4413      	add	r3, r2
 8005874:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1ad2      	subs	r2, r2, r3
 8005886:	2308      	movs	r3, #8
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	429a      	cmp	r2, r3
 800588c:	d91e      	bls.n	80058cc <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800588e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4413      	add	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <pvPortMalloc+0x11c>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e7fe      	b.n	80058b2 <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058c6:	69b8      	ldr	r0, [r7, #24]
 80058c8:	f000 f904 	bl	8005ad4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058cc:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <pvPortMalloc+0x1a8>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <pvPortMalloc+0x1a8>)
 80058d8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058da:	4b19      	ldr	r3, [pc, #100]	; (8005940 <pvPortMalloc+0x1a8>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <pvPortMalloc+0x1b0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d203      	bcs.n	80058ee <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058e6:	4b16      	ldr	r3, [pc, #88]	; (8005940 <pvPortMalloc+0x1a8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a17      	ldr	r2, [pc, #92]	; (8005948 <pvPortMalloc+0x1b0>)
 80058ec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <pvPortMalloc+0x1a4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <pvPortMalloc+0x1b4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3301      	adds	r3, #1
 8005908:	4a10      	ldr	r2, [pc, #64]	; (800594c <pvPortMalloc+0x1b4>)
 800590a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800590c:	f7fe fa68 	bl	8003de0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <pvPortMalloc+0x196>
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e7fe      	b.n	800592c <pvPortMalloc+0x194>
    return pvReturn;
 800592e:	69fb      	ldr	r3, [r7, #28]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200191e8 	.word	0x200191e8
 800593c:	200191fc 	.word	0x200191fc
 8005940:	200191ec 	.word	0x200191ec
 8005944:	200191e0 	.word	0x200191e0
 8005948:	200191f0 	.word	0x200191f0
 800594c:	200191f4 	.word	0x200191f4

08005950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04b      	beq.n	80059fa <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005962:	2308      	movs	r3, #8
 8005964:	425b      	negs	r3, r3
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4b23      	ldr	r3, [pc, #140]	; (8005a04 <vPortFree+0xb4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <vPortFree+0x42>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e7fe      	b.n	8005990 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <vPortFree+0x5e>
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	e7fe      	b.n	80059ac <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <vPortFree+0xb4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01e      	beq.n	80059fa <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11a      	bne.n	80059fa <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <vPortFree+0xb4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	401a      	ands	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80059d4:	f7fe f9f6 	bl	8003dc4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vPortFree+0xb8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4413      	add	r3, r2
 80059e2:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <vPortFree+0xb8>)
 80059e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059e6:	6938      	ldr	r0, [r7, #16]
 80059e8:	f000 f874 	bl	8005ad4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80059ec:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <vPortFree+0xbc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	4a06      	ldr	r2, [pc, #24]	; (8005a0c <vPortFree+0xbc>)
 80059f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80059f6:	f7fe f9f3 	bl	8003de0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	200191fc 	.word	0x200191fc
 8005a08:	200191ec 	.word	0x200191ec
 8005a0c:	200191f8 	.word	0x200191f8

08005a10 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a16:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8005a1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005a1c:	4b27      	ldr	r3, [pc, #156]	; (8005abc <prvHeapInit+0xac>)
 8005a1e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3307      	adds	r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0307 	bic.w	r3, r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <prvHeapInit+0xac>)
 8005a40:	4413      	add	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a48:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <prvHeapInit+0xb0>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <prvHeapInit+0xb0>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4413      	add	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1a9b      	subs	r3, r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a70:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a72:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2200      	movs	r2, #0
 8005a78:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a90:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <prvHeapInit+0xb4>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <prvHeapInit+0xb8>)
 8005a9e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a09      	ldr	r2, [pc, #36]	; (8005acc <prvHeapInit+0xbc>)
 8005aa6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <prvHeapInit+0xc0>)
 8005aaa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005aae:	601a      	str	r2, [r3, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	200001e0 	.word	0x200001e0
 8005ac0:	200191e0 	.word	0x200191e0
 8005ac4:	200191e8 	.word	0x200191e8
 8005ac8:	200191f0 	.word	0x200191f0
 8005acc:	200191ec 	.word	0x200191ec
 8005ad0:	200191fc 	.word	0x200191fc

08005ad4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005adc:	4b28      	ldr	r3, [pc, #160]	; (8005b80 <prvInsertBlockIntoFreeList+0xac>)
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	e002      	b.n	8005ae8 <prvInsertBlockIntoFreeList+0x14>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d8f7      	bhi.n	8005ae2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d108      	bne.n	8005b16 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	441a      	add	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	441a      	add	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d118      	bne.n	8005b5c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <prvInsertBlockIntoFreeList+0xb0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d00d      	beq.n	8005b52 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	441a      	add	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e008      	b.n	8005b64 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b52:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <prvInsertBlockIntoFreeList+0xb0>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	e003      	b.n	8005b64 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d002      	beq.n	8005b72 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	200191e0 	.word	0x200191e0
 8005b84:	200191e8 	.word	0x200191e8

08005b88 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005b96:	2205      	movs	r2, #5
 8005b98:	492b      	ldr	r1, [pc, #172]	; (8005c48 <SYSVIEW_AddTask+0xc0>)
 8005b9a:	68b8      	ldr	r0, [r7, #8]
 8005b9c:	f001 fb66 	bl	800726c <memcmp>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d04b      	beq.n	8005c3e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005ba6:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b07      	cmp	r3, #7
 8005bac:	d903      	bls.n	8005bb6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005bae:	4828      	ldr	r0, [pc, #160]	; (8005c50 <SYSVIEW_AddTask+0xc8>)
 8005bb0:	f001 fad6 	bl	8007160 <SEGGER_SYSVIEW_Warn>
    return;
 8005bb4:	e044      	b.n	8005c40 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005bb6:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4926      	ldr	r1, [pc, #152]	; (8005c54 <SYSVIEW_AddTask+0xcc>)
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4921      	ldr	r1, [pc, #132]	; (8005c54 <SYSVIEW_AddTask+0xcc>)
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	3304      	adds	r3, #4
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	491b      	ldr	r1, [pc, #108]	; (8005c54 <SYSVIEW_AddTask+0xcc>)
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4916      	ldr	r1, [pc, #88]	; (8005c54 <SYSVIEW_AddTask+0xcc>)
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	330c      	adds	r3, #12
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4910      	ldr	r1, [pc, #64]	; (8005c54 <SYSVIEW_AddTask+0xcc>)
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	4a08      	ldr	r2, [pc, #32]	; (8005c4c <SYSVIEW_AddTask+0xc4>)
 8005c2a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f80e 	bl	8005c58 <SYSVIEW_SendTaskInfo>
 8005c3c:	e000      	b.n	8005c40 <SYSVIEW_AddTask+0xb8>
    return;
 8005c3e:	bf00      	nop

}
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	08007cd4 	.word	0x08007cd4
 8005c4c:	200192a0 	.word	0x200192a0
 8005c50:	08007cdc 	.word	0x08007cdc
 8005c54:	20019200 	.word	0x20019200

08005c58 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005c66:	f107 0314 	add.w	r3, r7, #20
 8005c6a:	2214      	movs	r2, #20
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fb16 	bl	80072a0 <memset>
  TaskInfo.TaskID     = TaskID;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005c88:	f107 0314 	add.w	r3, r7, #20
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fe97 	bl	80069c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005c92:	bf00      	nop
 8005c94:	3728      	adds	r7, #40	; 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005ca2:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <USART2_IRQHandler+0x80>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d011      	beq.n	8005cd6 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005cb2:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <USART2_IRQHandler+0x84>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 030b 	and.w	r3, r3, #11
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d108      	bne.n	8005cd6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005cc4:	4b17      	ldr	r3, [pc, #92]	; (8005d24 <USART2_IRQHandler+0x88>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <USART2_IRQHandler+0x88>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	79fa      	ldrb	r2, [r7, #7]
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01a      	beq.n	8005d16 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005ce0:	4b11      	ldr	r3, [pc, #68]	; (8005d28 <USART2_IRQHandler+0x8c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <USART2_IRQHandler+0x8c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	1dfa      	adds	r2, r7, #7
 8005cee:	4610      	mov	r0, r2
 8005cf0:	4798      	blx	r3
 8005cf2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <USART2_IRQHandler+0x90>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <USART2_IRQHandler+0x90>)
 8005d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e006      	b.n	8005d16 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <USART2_IRQHandler+0x80>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005d0c:	79fa      	ldrb	r2, [r7, #7]
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <USART2_IRQHandler+0x84>)
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e000      	b.n	8005d16 <USART2_IRQHandler+0x7a>
      return;
 8005d14:	bf00      	nop
    }
  }
}
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40004400 	.word	0x40004400
 8005d20:	40004404 	.word	0x40004404
 8005d24:	200192a4 	.word	0x200192a4
 8005d28:	200192a8 	.word	0x200192a8
 8005d2c:	4000440c 	.word	0x4000440c

08005d30 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	bf00      	nop
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	4000440c 	.word	0x4000440c

08005d50 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005d56:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <_DoInit+0x98>)
 8005d58:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2203      	movs	r2, #3
 8005d64:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <_DoInit+0x9c>)
 8005d6a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a20      	ldr	r2, [pc, #128]	; (8005df0 <_DoInit+0xa0>)
 8005d70:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d78:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a17      	ldr	r2, [pc, #92]	; (8005dec <_DoInit+0x9c>)
 8005d90:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <_DoInit+0xa4>)
 8005d96:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3307      	adds	r3, #7
 8005db4:	4a10      	ldr	r2, [pc, #64]	; (8005df8 <_DoInit+0xa8>)
 8005db6:	6810      	ldr	r0, [r2, #0]
 8005db8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005dba:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a0e      	ldr	r2, [pc, #56]	; (8005dfc <_DoInit+0xac>)
 8005dc2:	6810      	ldr	r0, [r2, #0]
 8005dc4:	6018      	str	r0, [r3, #0]
 8005dc6:	8891      	ldrh	r1, [r2, #4]
 8005dc8:	7992      	ldrb	r2, [r2, #6]
 8005dca:	8099      	strh	r1, [r3, #4]
 8005dcc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005dce:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005dd8:	f3bf 8f5f 	dmb	sy
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	200198ac 	.word	0x200198ac
 8005dec:	08007d2c 	.word	0x08007d2c
 8005df0:	200192ac 	.word	0x200192ac
 8005df4:	200196ac 	.word	0x200196ac
 8005df8:	08007d38 	.word	0x08007d38
 8005dfc:	08007d3c 	.word	0x08007d3c

08005e00 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005e0c:	4b3e      	ldr	r3, [pc, #248]	; (8005f08 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <SEGGER_RTT_ReadNoLock+0x1e>
 8005e1a:	f7ff ff99 	bl	8005d50 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	3360      	adds	r3, #96	; 0x60
 8005e2a:	4a37      	ldr	r2, [pc, #220]	; (8005f08 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e2c:	4413      	add	r3, r2
 8005e2e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005e40:	2300      	movs	r3, #0
 8005e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d92b      	bls.n	8005ea4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bf28      	it	cs
 8005e5e:	4613      	movcs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	4413      	add	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	6939      	ldr	r1, [r7, #16]
 8005e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e72:	f001 fa0a 	bl	800728a <memcpy>
    NumBytesRead += NumBytesRem;
 8005e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4413      	add	r3, r2
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d101      	bne.n	8005ea4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bf28      	it	cs
 8005eb4:	4613      	movcs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d019      	beq.n	8005ef2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	4413      	add	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	6939      	ldr	r1, [r7, #16]
 8005ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ece:	f001 f9dc 	bl	800728a <memcpy>
    NumBytesRead += NumBytesRem;
 8005ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	4413      	add	r3, r2
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d002      	beq.n	8005efe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3730      	adds	r7, #48	; 0x30
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200198ac 	.word	0x200198ac

08005f0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f1c:	e002      	b.n	8005f24 <_EncodeStr+0x18>
    Len++;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3301      	adds	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f6      	bne.n	8005f1e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d901      	bls.n	8005f3c <_EncodeStr+0x30>
    Len = Limit;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2bfe      	cmp	r3, #254	; 0xfe
 8005f40:	d806      	bhi.n	8005f50 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e011      	b.n	8005f74 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	60fa      	str	r2, [r7, #12]
 8005f56:	22ff      	movs	r2, #255	; 0xff
 8005f58:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	60fa      	str	r2, [r7, #12]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	0a19      	lsrs	r1, r3, #8
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	60fa      	str	r2, [r7, #12]
 8005f70:	b2ca      	uxtb	r2, r1
 8005f72:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f78:	e00a      	b.n	8005f90 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	1c53      	adds	r3, r2, #1
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1c59      	adds	r1, r3, #1
 8005f84:	60f9      	str	r1, [r7, #12]
 8005f86:	7812      	ldrb	r2, [r2, #0]
 8005f88:	701a      	strb	r2, [r3, #0]
    n++;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d3f0      	bcc.n	8005f7a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005f98:	68fb      	ldr	r3, [r7, #12]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3304      	adds	r3, #4
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fc6:	4b33      	ldr	r3, [pc, #204]	; (8006094 <_HandleIncomingPacket+0xd4>)
 8005fc8:	7e1b      	ldrb	r3, [r3, #24]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	1cfb      	adds	r3, r7, #3
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	f7ff ff15 	bl	8005e00 <SEGGER_RTT_ReadNoLock>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dd4d      	ble.n	800607c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	2b05      	cmp	r3, #5
 8005fe4:	d022      	beq.n	800602c <_HandleIncomingPacket+0x6c>
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	dc0b      	bgt.n	8006002 <_HandleIncomingPacket+0x42>
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d015      	beq.n	800601a <_HandleIncomingPacket+0x5a>
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	dc02      	bgt.n	8005ff8 <_HandleIncomingPacket+0x38>
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d00e      	beq.n	8006014 <_HandleIncomingPacket+0x54>
 8005ff6:	e034      	b.n	8006062 <_HandleIncomingPacket+0xa2>
 8005ff8:	2b03      	cmp	r3, #3
 8005ffa:	d011      	beq.n	8006020 <_HandleIncomingPacket+0x60>
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d012      	beq.n	8006026 <_HandleIncomingPacket+0x66>
 8006000:	e02f      	b.n	8006062 <_HandleIncomingPacket+0xa2>
 8006002:	2b07      	cmp	r3, #7
 8006004:	d018      	beq.n	8006038 <_HandleIncomingPacket+0x78>
 8006006:	2b07      	cmp	r3, #7
 8006008:	db13      	blt.n	8006032 <_HandleIncomingPacket+0x72>
 800600a:	2b7f      	cmp	r3, #127	; 0x7f
 800600c:	d038      	beq.n	8006080 <_HandleIncomingPacket+0xc0>
 800600e:	2b80      	cmp	r3, #128	; 0x80
 8006010:	d015      	beq.n	800603e <_HandleIncomingPacket+0x7e>
 8006012:	e026      	b.n	8006062 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006014:	f000 fb58 	bl	80066c8 <SEGGER_SYSVIEW_Start>
      break;
 8006018:	e037      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800601a:	f000 fc11 	bl	8006840 <SEGGER_SYSVIEW_Stop>
      break;
 800601e:	e034      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006020:	f000 fdc6 	bl	8006bb0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006024:	e031      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006026:	f000 fdaf 	bl	8006b88 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800602a:	e02e      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800602c:	f000 fc2e 	bl	800688c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006030:	e02b      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006032:	f001 f857 	bl	80070e4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006036:	e028      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006038:	f001 f836 	bl	80070a8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800603c:	e025      	b.n	800608a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800603e:	4b15      	ldr	r3, [pc, #84]	; (8006094 <_HandleIncomingPacket+0xd4>)
 8006040:	7e1b      	ldrb	r3, [r3, #24]
 8006042:	4618      	mov	r0, r3
 8006044:	1cfb      	adds	r3, r7, #3
 8006046:	2201      	movs	r2, #1
 8006048:	4619      	mov	r1, r3
 800604a:	f7ff fed9 	bl	8005e00 <SEGGER_RTT_ReadNoLock>
 800604e:	4603      	mov	r3, r0
 8006050:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	dd15      	ble.n	8006084 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 ffa4 	bl	8006fa8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006060:	e010      	b.n	8006084 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	b25b      	sxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	da0e      	bge.n	8006088 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <_HandleIncomingPacket+0xd4>)
 800606c:	7e1b      	ldrb	r3, [r3, #24]
 800606e:	4618      	mov	r0, r3
 8006070:	1cfb      	adds	r3, r7, #3
 8006072:	2201      	movs	r2, #1
 8006074:	4619      	mov	r1, r3
 8006076:	f7ff fec3 	bl	8005e00 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800607a:	e005      	b.n	8006088 <_HandleIncomingPacket+0xc8>
    }
  }
 800607c:	bf00      	nop
 800607e:	e004      	b.n	800608a <_HandleIncomingPacket+0xca>
      break;
 8006080:	bf00      	nop
 8006082:	e002      	b.n	800608a <_HandleIncomingPacket+0xca>
      break;
 8006084:	bf00      	nop
 8006086:	e000      	b.n	800608a <_HandleIncomingPacket+0xca>
      break;
 8006088:	bf00      	nop
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	200196bc 	.word	0x200196bc

08006098 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b08c      	sub	sp, #48	; 0x30
 800609c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800609e:	2301      	movs	r3, #1
 80060a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80060a2:	1d3b      	adds	r3, r7, #4
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ac:	4b32      	ldr	r3, [pc, #200]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b2:	e00b      	b.n	80060cc <_TrySendOverflowPacket+0x34>
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	1c59      	adds	r1, r3, #1
 80060bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	09db      	lsrs	r3, r3, #7
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	2b7f      	cmp	r3, #127	; 0x7f
 80060d0:	d8f0      	bhi.n	80060b4 <_TrySendOverflowPacket+0x1c>
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060e2:	4b26      	ldr	r3, [pc, #152]	; (800617c <_TrySendOverflowPacket+0xe4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80060e8:	4b23      	ldr	r3, [pc, #140]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	e00b      	b.n	8006114 <_TrySendOverflowPacket+0x7c>
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	6279      	str	r1, [r7, #36]	; 0x24
 8006106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	701a      	strb	r2, [r3, #0]
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	09db      	lsrs	r3, r3, #7
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b7f      	cmp	r3, #127	; 0x7f
 8006118:	d8f0      	bhi.n	80060fc <_TrySendOverflowPacket+0x64>
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	627a      	str	r2, [r7, #36]	; 0x24
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	4618      	mov	r0, r3
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	1d3b      	adds	r3, r7, #4
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	461a      	mov	r2, r3
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	4619      	mov	r1, r3
 800613c:	f7fa f848 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006140:	4603      	mov	r3, r0
 8006142:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8006144:	f7ff fdf4 	bl	8005d30 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006154:	4b08      	ldr	r3, [pc, #32]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	3b01      	subs	r3, #1
 800615a:	b2da      	uxtb	r2, r3
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	e004      	b.n	800616c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	3301      	adds	r3, #1
 8006168:	4a03      	ldr	r2, [pc, #12]	; (8006178 <_TrySendOverflowPacket+0xe0>)
 800616a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800616c:	693b      	ldr	r3, [r7, #16]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3730      	adds	r7, #48	; 0x30
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200196bc 	.word	0x200196bc
 800617c:	e0001004 	.word	0xe0001004

08006180 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	; 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800618c:	4b6d      	ldr	r3, [pc, #436]	; (8006344 <_SendPacket+0x1c4>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d010      	beq.n	80061b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006194:	4b6b      	ldr	r3, [pc, #428]	; (8006344 <_SendPacket+0x1c4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80a5 	beq.w	80062e8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800619e:	4b69      	ldr	r3, [pc, #420]	; (8006344 <_SendPacket+0x1c4>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d109      	bne.n	80061ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80061a6:	f7ff ff77 	bl	8006098 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80061aa:	4b66      	ldr	r3, [pc, #408]	; (8006344 <_SendPacket+0x1c4>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	f040 809c 	bne.w	80062ec <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80061b4:	e001      	b.n	80061ba <_SendPacket+0x3a>
    goto Send;
 80061b6:	bf00      	nop
 80061b8:	e000      	b.n	80061bc <_SendPacket+0x3c>
Send:
 80061ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b1f      	cmp	r3, #31
 80061c0:	d809      	bhi.n	80061d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80061c2:	4b60      	ldr	r3, [pc, #384]	; (8006344 <_SendPacket+0x1c4>)
 80061c4:	69da      	ldr	r2, [r3, #28]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f040 808d 	bne.w	80062f0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b17      	cmp	r3, #23
 80061da:	d807      	bhi.n	80061ec <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3b01      	subs	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e03d      	b.n	8006268 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b7f      	cmp	r3, #127	; 0x7f
 80061f8:	d912      	bls.n	8006220 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	09da      	lsrs	r2, r3, #7
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3b01      	subs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	3a01      	subs	r2, #1
 8006212:	60fa      	str	r2, [r7, #12]
 8006214:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	701a      	strb	r2, [r3, #0]
 800621e:	e006      	b.n	800622e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3b01      	subs	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	b2da      	uxtb	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b7f      	cmp	r3, #127	; 0x7f
 8006232:	d912      	bls.n	800625a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	09da      	lsrs	r2, r3, #7
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	3a01      	subs	r2, #1
 800624c:	60fa      	str	r2, [r7, #12]
 800624e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006252:	b2da      	uxtb	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	e006      	b.n	8006268 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3b01      	subs	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006268:	4b37      	ldr	r3, [pc, #220]	; (8006348 <_SendPacket+0x1c8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800626e:	4b35      	ldr	r3, [pc, #212]	; (8006344 <_SendPacket+0x1c4>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	623b      	str	r3, [r7, #32]
 8006280:	e00b      	b.n	800629a <_SendPacket+0x11a>
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	6279      	str	r1, [r7, #36]	; 0x24
 800628c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	09db      	lsrs	r3, r3, #7
 8006298:	623b      	str	r3, [r7, #32]
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	2b7f      	cmp	r3, #127	; 0x7f
 800629e:	d8f0      	bhi.n	8006282 <_SendPacket+0x102>
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	627a      	str	r2, [r7, #36]	; 0x24
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80062b0:	4b24      	ldr	r3, [pc, #144]	; (8006344 <_SendPacket+0x1c4>)
 80062b2:	785b      	ldrb	r3, [r3, #1]
 80062b4:	4618      	mov	r0, r3
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	f7f9 ff86 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80062c4:	4603      	mov	r3, r0
 80062c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80062c8:	f7ff fd32 	bl	8005d30 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80062d2:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <_SendPacket+0x1c4>)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	60d3      	str	r3, [r2, #12]
 80062d8:	e00b      	b.n	80062f2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <_SendPacket+0x1c4>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	3301      	adds	r3, #1
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	4b18      	ldr	r3, [pc, #96]	; (8006344 <_SendPacket+0x1c4>)
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e004      	b.n	80062f2 <_SendPacket+0x172>
    goto SendDone;
 80062e8:	bf00      	nop
 80062ea:	e002      	b.n	80062f2 <_SendPacket+0x172>
      goto SendDone;
 80062ec:	bf00      	nop
 80062ee:	e000      	b.n	80062f2 <_SendPacket+0x172>
      goto SendDone;
 80062f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80062f2:	4b14      	ldr	r3, [pc, #80]	; (8006344 <_SendPacket+0x1c4>)
 80062f4:	7e1b      	ldrb	r3, [r3, #24]
 80062f6:	4619      	mov	r1, r3
 80062f8:	4a14      	ldr	r2, [pc, #80]	; (800634c <_SendPacket+0x1cc>)
 80062fa:	460b      	mov	r3, r1
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	440b      	add	r3, r1
 8006300:	00db      	lsls	r3, r3, #3
 8006302:	4413      	add	r3, r2
 8006304:	336c      	adds	r3, #108	; 0x6c
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <_SendPacket+0x1c4>)
 800630a:	7e1b      	ldrb	r3, [r3, #24]
 800630c:	4618      	mov	r0, r3
 800630e:	490f      	ldr	r1, [pc, #60]	; (800634c <_SendPacket+0x1cc>)
 8006310:	4603      	mov	r3, r0
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4403      	add	r3, r0
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	440b      	add	r3, r1
 800631a:	3370      	adds	r3, #112	; 0x70
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d00b      	beq.n	800633a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006322:	4b08      	ldr	r3, [pc, #32]	; (8006344 <_SendPacket+0x1c4>)
 8006324:	789b      	ldrb	r3, [r3, #2]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d107      	bne.n	800633a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <_SendPacket+0x1c4>)
 800632c:	2201      	movs	r2, #1
 800632e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006330:	f7ff fe46 	bl	8005fc0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <_SendPacket+0x1c4>)
 8006336:	2200      	movs	r2, #0
 8006338:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800633a:	bf00      	nop
 800633c:	3728      	adds	r7, #40	; 0x28
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	200196bc 	.word	0x200196bc
 8006348:	e0001004 	.word	0xe0001004
 800634c:	200198ac 	.word	0x200198ac

08006350 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006358:	f3ef 8311 	mrs	r3, BASEPRI
 800635c:	f04f 0120 	mov.w	r1, #32
 8006360:	f381 8811 	msr	BASEPRI, r1
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	4808      	ldr	r0, [pc, #32]	; (8006388 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006368:	f7ff fe1d 	bl	8005fa6 <_PreparePacket>
 800636c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68b8      	ldr	r0, [r7, #8]
 8006374:	f7ff ff04 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200196ec 	.word	0x200196ec

0800638c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006396:	f3ef 8311 	mrs	r3, BASEPRI
 800639a:	f04f 0120 	mov.w	r1, #32
 800639e:	f381 8811 	msr	BASEPRI, r1
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	4816      	ldr	r0, [pc, #88]	; (8006400 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80063a6:	f7ff fdfe 	bl	8005fa6 <_PreparePacket>
 80063aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e00b      	b.n	80063d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	61f9      	str	r1, [r7, #28]
 80063c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	61bb      	str	r3, [r7, #24]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b7f      	cmp	r3, #127	; 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	61fa      	str	r2, [r7, #28]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	6938      	ldr	r0, [r7, #16]
 80063ee:	f7ff fec7 	bl	8006180 <_SendPacket>
  RECORD_END();
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f383 8811 	msr	BASEPRI, r3
}
 80063f8:	bf00      	nop
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200196ec 	.word	0x200196ec

08006404 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	; 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006410:	f3ef 8311 	mrs	r3, BASEPRI
 8006414:	f04f 0120 	mov.w	r1, #32
 8006418:	f381 8811 	msr	BASEPRI, r1
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	4825      	ldr	r0, [pc, #148]	; (80064b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006420:	f7ff fdc1 	bl	8005fa6 <_PreparePacket>
 8006424:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
 8006432:	e00b      	b.n	800644c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800643e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	2b7f      	cmp	r3, #127	; 0x7f
 8006450:	d8f0      	bhi.n	8006434 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006460:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	e00b      	b.n	8006484 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	b2da      	uxtb	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	1c59      	adds	r1, r3, #1
 8006474:	6279      	str	r1, [r7, #36]	; 0x24
 8006476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	09db      	lsrs	r3, r3, #7
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b7f      	cmp	r3, #127	; 0x7f
 8006488:	d8f0      	bhi.n	800646c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	627a      	str	r2, [r7, #36]	; 0x24
 8006490:	6a3a      	ldr	r2, [r7, #32]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	6979      	ldr	r1, [r7, #20]
 800649e:	69b8      	ldr	r0, [r7, #24]
 80064a0:	f7ff fe6e 	bl	8006180 <_SendPacket>
  RECORD_END();
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	f383 8811 	msr	BASEPRI, r3
}
 80064aa:	bf00      	nop
 80064ac:	3730      	adds	r7, #48	; 0x30
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200196ec 	.word	0x200196ec

080064b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08e      	sub	sp, #56	; 0x38
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80064c6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ca:	f04f 0120 	mov.w	r1, #32
 80064ce:	f381 8811 	msr	BASEPRI, r1
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	4832      	ldr	r0, [pc, #200]	; (80065a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80064d6:	f7ff fd66 	bl	8005fa6 <_PreparePacket>
 80064da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
 80064e8:	e00b      	b.n	8006502 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	6379      	str	r1, [r7, #52]	; 0x34
 80064f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	09db      	lsrs	r3, r3, #7
 8006500:	633b      	str	r3, [r7, #48]	; 0x30
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2b7f      	cmp	r3, #127	; 0x7f
 8006506:	d8f0      	bhi.n	80064ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	637a      	str	r2, [r7, #52]	; 0x34
 800650e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006520:	e00b      	b.n	800653a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	1c59      	adds	r1, r3, #1
 800652a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800652c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	09db      	lsrs	r3, r3, #7
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	2b7f      	cmp	r3, #127	; 0x7f
 800653e:	d8f0      	bhi.n	8006522 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	e00b      	b.n	8006572 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	1c59      	adds	r1, r3, #1
 8006562:	6279      	str	r1, [r7, #36]	; 0x24
 8006564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	09db      	lsrs	r3, r3, #7
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	2b7f      	cmp	r3, #127	; 0x7f
 8006576:	d8f0      	bhi.n	800655a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	627a      	str	r2, [r7, #36]	; 0x24
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	b2d2      	uxtb	r2, r2
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	6979      	ldr	r1, [r7, #20]
 800658c:	69b8      	ldr	r0, [r7, #24]
 800658e:	f7ff fdf7 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f383 8811 	msr	BASEPRI, r3
}
 8006598:	bf00      	nop
 800659a:	3738      	adds	r7, #56	; 0x38
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	200196ec 	.word	0x200196ec

080065a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b090      	sub	sp, #64	; 0x40
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065b2:	f3ef 8311 	mrs	r3, BASEPRI
 80065b6:	f04f 0120 	mov.w	r1, #32
 80065ba:	f381 8811 	msr	BASEPRI, r1
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	4840      	ldr	r0, [pc, #256]	; (80066c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80065c2:	f7ff fcf0 	bl	8005fa6 <_PreparePacket>
 80065c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065d4:	e00b      	b.n	80065ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80065d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065dc:	1c59      	adds	r1, r3, #1
 80065de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	09db      	lsrs	r3, r3, #7
 80065ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	2b7f      	cmp	r3, #127	; 0x7f
 80065f2:	d8f0      	bhi.n	80065d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80065f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]
 8006600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006602:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	e00b      	b.n	8006626 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	b2da      	uxtb	r2, r3
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	1c59      	adds	r1, r3, #1
 8006616:	6379      	str	r1, [r7, #52]	; 0x34
 8006618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661c:	b2d2      	uxtb	r2, r2
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	09db      	lsrs	r3, r3, #7
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b7f      	cmp	r3, #127	; 0x7f
 800662a:	d8f0      	bhi.n	800660e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	637a      	str	r2, [r7, #52]	; 0x34
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
 8006644:	e00b      	b.n	800665e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	09db      	lsrs	r3, r3, #7
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2b7f      	cmp	r3, #127	; 0x7f
 8006662:	d8f0      	bhi.n	8006646 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
 8006678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667a:	623b      	str	r3, [r7, #32]
 800667c:	e00b      	b.n	8006696 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1c59      	adds	r1, r3, #1
 8006686:	6279      	str	r1, [r7, #36]	; 0x24
 8006688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	09db      	lsrs	r3, r3, #7
 8006694:	623b      	str	r3, [r7, #32]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	2b7f      	cmp	r3, #127	; 0x7f
 800669a:	d8f0      	bhi.n	800667e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	627a      	str	r2, [r7, #36]	; 0x24
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	6979      	ldr	r1, [r7, #20]
 80066b0:	69b8      	ldr	r0, [r7, #24]
 80066b2:	f7ff fd65 	bl	8006180 <_SendPacket>
  RECORD_END();
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3740      	adds	r7, #64	; 0x40
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	200196ec 	.word	0x200196ec

080066c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066ce:	4b59      	ldr	r3, [pc, #356]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066d4:	f3ef 8311 	mrs	r3, BASEPRI
 80066d8:	f04f 0120 	mov.w	r1, #32
 80066dc:	f381 8811 	msr	BASEPRI, r1
 80066e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066e2:	4b54      	ldr	r3, [pc, #336]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	220a      	movs	r2, #10
 80066e8:	4953      	ldr	r1, [pc, #332]	; (8006838 <SEGGER_SYSVIEW_Start+0x170>)
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7f9 fd70 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80066f6:	f7ff fb1b 	bl	8005d30 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80066fa:	200a      	movs	r0, #10
 80066fc:	f7ff fe28 	bl	8006350 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006700:	f3ef 8311 	mrs	r3, BASEPRI
 8006704:	f04f 0120 	mov.w	r1, #32
 8006708:	f381 8811 	msr	BASEPRI, r1
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	484b      	ldr	r0, [pc, #300]	; (800683c <SEGGER_SYSVIEW_Start+0x174>)
 8006710:	f7ff fc49 	bl	8005fa6 <_PreparePacket>
 8006714:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800671e:	4b45      	ldr	r3, [pc, #276]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
 8006724:	e00b      	b.n	800673e <SEGGER_SYSVIEW_Start+0x76>
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	b2da      	uxtb	r2, r3
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	09db      	lsrs	r3, r3, #7
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	2b7f      	cmp	r3, #127	; 0x7f
 8006742:	d8f0      	bhi.n	8006726 <SEGGER_SYSVIEW_Start+0x5e>
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800674a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
 8006758:	4b36      	ldr	r3, [pc, #216]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	e00b      	b.n	8006778 <SEGGER_SYSVIEW_Start+0xb0>
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	1c59      	adds	r1, r3, #1
 8006768:	6279      	str	r1, [r7, #36]	; 0x24
 800676a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	09db      	lsrs	r3, r3, #7
 8006776:	623b      	str	r3, [r7, #32]
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b7f      	cmp	r3, #127	; 0x7f
 800677c:	d8f0      	bhi.n	8006760 <SEGGER_SYSVIEW_Start+0x98>
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	627a      	str	r2, [r7, #36]	; 0x24
 8006784:	6a3a      	ldr	r2, [r7, #32]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	4b28      	ldr	r3, [pc, #160]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	e00b      	b.n	80067b2 <SEGGER_SYSVIEW_Start+0xea>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	1c59      	adds	r1, r3, #1
 80067a2:	61f9      	str	r1, [r7, #28]
 80067a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	09db      	lsrs	r3, r3, #7
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b7f      	cmp	r3, #127	; 0x7f
 80067b6:	d8f0      	bhi.n	800679a <SEGGER_SYSVIEW_Start+0xd2>
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	61fa      	str	r2, [r7, #28]
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	2300      	movs	r3, #0
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	e00b      	b.n	80067ea <SEGGER_SYSVIEW_Start+0x122>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	6179      	str	r1, [r7, #20]
 80067dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b7f      	cmp	r3, #127	; 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <SEGGER_SYSVIEW_Start+0x10a>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	617a      	str	r2, [r7, #20]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006800:	2218      	movs	r2, #24
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fcbb 	bl	8006180 <_SendPacket>
      RECORD_END();
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006810:	4b08      	ldr	r3, [pc, #32]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <SEGGER_SYSVIEW_Start+0x16c>)
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800681e:	f000 f9c7 	bl	8006bb0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006822:	f000 f9b1 	bl	8006b88 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006826:	f000 fc5d 	bl	80070e4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800682a:	bf00      	nop
 800682c:	3730      	adds	r7, #48	; 0x30
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200196bc 	.word	0x200196bc
 8006838:	08007d5c 	.word	0x08007d5c
 800683c:	200196ec 	.word	0x200196ec

08006840 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006846:	f3ef 8311 	mrs	r3, BASEPRI
 800684a:	f04f 0120 	mov.w	r1, #32
 800684e:	f381 8811 	msr	BASEPRI, r1
 8006852:	607b      	str	r3, [r7, #4]
 8006854:	480b      	ldr	r0, [pc, #44]	; (8006884 <SEGGER_SYSVIEW_Stop+0x44>)
 8006856:	f7ff fba6 	bl	8005fa6 <_PreparePacket>
 800685a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800685c:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <SEGGER_SYSVIEW_Stop+0x48>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006864:	220b      	movs	r2, #11
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6838      	ldr	r0, [r7, #0]
 800686a:	f7ff fc89 	bl	8006180 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800686e:	4b06      	ldr	r3, [pc, #24]	; (8006888 <SEGGER_SYSVIEW_Stop+0x48>)
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f383 8811 	msr	BASEPRI, r3
}
 800687a:	bf00      	nop
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200196ec 	.word	0x200196ec
 8006888:	200196bc 	.word	0x200196bc

0800688c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b08c      	sub	sp, #48	; 0x30
 8006890:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006892:	f3ef 8311 	mrs	r3, BASEPRI
 8006896:	f04f 0120 	mov.w	r1, #32
 800689a:	f381 8811 	msr	BASEPRI, r1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	4845      	ldr	r0, [pc, #276]	; (80069b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068a2:	f7ff fb80 	bl	8005fa6 <_PreparePacket>
 80068a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068b0:	4b42      	ldr	r3, [pc, #264]	; (80069bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b6:	e00b      	b.n	80068d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	09db      	lsrs	r3, r3, #7
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	2b7f      	cmp	r3, #127	; 0x7f
 80068d4:	d8f0      	bhi.n	80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ea:	4b34      	ldr	r3, [pc, #208]	; (80069bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	623b      	str	r3, [r7, #32]
 80068f0:	e00b      	b.n	800690a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	1c59      	adds	r1, r3, #1
 80068fa:	6279      	str	r1, [r7, #36]	; 0x24
 80068fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	09db      	lsrs	r3, r3, #7
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	2b7f      	cmp	r3, #127	; 0x7f
 800690e:	d8f0      	bhi.n	80068f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	627a      	str	r2, [r7, #36]	; 0x24
 8006916:	6a3a      	ldr	r2, [r7, #32]
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	4b25      	ldr	r3, [pc, #148]	; (80069bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e00b      	b.n	8006944 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	61f9      	str	r1, [r7, #28]
 8006936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	09db      	lsrs	r3, r3, #7
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b7f      	cmp	r3, #127	; 0x7f
 8006948:	d8f0      	bhi.n	800692c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	61fa      	str	r2, [r7, #28]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e00b      	b.n	800697c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	1c59      	adds	r1, r3, #1
 800696c:	6179      	str	r1, [r7, #20]
 800696e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	09db      	lsrs	r3, r3, #7
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b7f      	cmp	r3, #127	; 0x7f
 8006980:	d8f0      	bhi.n	8006964 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	617a      	str	r2, [r7, #20]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006992:	2218      	movs	r2, #24
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	68b8      	ldr	r0, [r7, #8]
 8006998:	f7ff fbf2 	bl	8006180 <_SendPacket>
  RECORD_END();
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069a2:	4b06      	ldr	r3, [pc, #24]	; (80069bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	4798      	blx	r3
  }
}
 80069b0:	bf00      	nop
 80069b2:	3730      	adds	r7, #48	; 0x30
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	200196ec 	.word	0x200196ec
 80069bc:	200196bc 	.word	0x200196bc

080069c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b092      	sub	sp, #72	; 0x48
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069c8:	f3ef 8311 	mrs	r3, BASEPRI
 80069cc:	f04f 0120 	mov.w	r1, #32
 80069d0:	f381 8811 	msr	BASEPRI, r1
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	486a      	ldr	r0, [pc, #424]	; (8006b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069d8:	f7ff fae5 	bl	8005fa6 <_PreparePacket>
 80069dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	647b      	str	r3, [r7, #68]	; 0x44
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4b66      	ldr	r3, [pc, #408]	; (8006b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
 80069f2:	e00b      	b.n	8006a0c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fa:	1c59      	adds	r1, r3, #1
 80069fc:	6479      	str	r1, [r7, #68]	; 0x44
 80069fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a08:	09db      	lsrs	r3, r3, #7
 8006a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a10:	d8f0      	bhi.n	80069f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	647a      	str	r2, [r7, #68]	; 0x44
 8006a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	4619      	mov	r1, r3
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fa51 	bl	8005f0c <_EncodeStr>
 8006a6a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a6c:	2209      	movs	r2, #9
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	6938      	ldr	r0, [r7, #16]
 8006a72:	f7ff fb85 	bl	8006180 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30
 8006a8a:	e00b      	b.n	8006aa4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	6379      	str	r1, [r7, #52]	; 0x34
 8006a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	09db      	lsrs	r3, r3, #7
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa8:	d8f0      	bhi.n	8006a8c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	637a      	str	r2, [r7, #52]	; 0x34
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac4:	e00b      	b.n	8006ade <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	09db      	lsrs	r3, r3, #7
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae2:	d8f0      	bhi.n	8006ac6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	623b      	str	r3, [r7, #32]
 8006afe:	e00b      	b.n	8006b18 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	6279      	str	r1, [r7, #36]	; 0x24
 8006b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	09db      	lsrs	r3, r3, #7
 8006b16:	623b      	str	r3, [r7, #32]
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1c:	d8f0      	bhi.n	8006b00 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	627a      	str	r2, [r7, #36]	; 0x24
 8006b24:	6a3a      	ldr	r2, [r7, #32]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	61fb      	str	r3, [r7, #28]
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e00b      	b.n	8006b50 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	61f9      	str	r1, [r7, #28]
 8006b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	09db      	lsrs	r3, r3, #7
 8006b4e:	61bb      	str	r3, [r7, #24]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b7f      	cmp	r3, #127	; 0x7f
 8006b54:	d8f0      	bhi.n	8006b38 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	61fa      	str	r2, [r7, #28]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b66:	2215      	movs	r2, #21
 8006b68:	68f9      	ldr	r1, [r7, #12]
 8006b6a:	6938      	ldr	r0, [r7, #16]
 8006b6c:	f7ff fb08 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f383 8811 	msr	BASEPRI, r3
}
 8006b76:	bf00      	nop
 8006b78:	3748      	adds	r7, #72	; 0x48
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	200196ec 	.word	0x200196ec
 8006b84:	200196bc 	.word	0x200196bc

08006b88 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b96:	6a1b      	ldr	r3, [r3, #32]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b9e:	4b03      	ldr	r3, [pc, #12]	; (8006bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4798      	blx	r3
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	200196bc 	.word	0x200196bc

08006bb0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d019      	beq.n	8006bf2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006bbe:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d014      	beq.n	8006bf2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4798      	blx	r3
 8006bd0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006bd4:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006bd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	f04f 0400 	mov.w	r4, #0
 8006be2:	0013      	movs	r3, r2
 8006be4:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006be6:	461a      	mov	r2, r3
 8006be8:	4601      	mov	r1, r0
 8006bea:	200d      	movs	r0, #13
 8006bec:	f7ff fc0a 	bl	8006404 <SEGGER_SYSVIEW_RecordU32x2>
 8006bf0:	e005      	b.n	8006bfe <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006bf2:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	200c      	movs	r0, #12
 8006bfa:	f7ff fbc7 	bl	800638c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd90      	pop	{r4, r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200196bc 	.word	0x200196bc
 8006c0c:	e0001004 	.word	0xe0001004

08006c10 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c16:	f3ef 8311 	mrs	r3, BASEPRI
 8006c1a:	f04f 0120 	mov.w	r1, #32
 8006c1e:	f381 8811 	msr	BASEPRI, r1
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	4819      	ldr	r0, [pc, #100]	; (8006c8c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c26:	f7ff f9be 	bl	8005fa6 <_PreparePacket>
 8006c2a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c30:	4b17      	ldr	r3, [pc, #92]	; (8006c90 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c38:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	e00b      	b.n	8006c5c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	1c59      	adds	r1, r3, #1
 8006c4c:	6179      	str	r1, [r7, #20]
 8006c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	09db      	lsrs	r3, r3, #7
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c60:	d8f0      	bhi.n	8006c44 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	617a      	str	r2, [r7, #20]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c72:	2202      	movs	r2, #2
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	68b8      	ldr	r0, [r7, #8]
 8006c78:	f7ff fa82 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f383 8811 	msr	BASEPRI, r3
}
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	200196ec 	.word	0x200196ec
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c9e:	f04f 0120 	mov.w	r1, #32
 8006ca2:	f381 8811 	msr	BASEPRI, r1
 8006ca6:	607b      	str	r3, [r7, #4]
 8006ca8:	4807      	ldr	r0, [pc, #28]	; (8006cc8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006caa:	f7ff f97c 	bl	8005fa6 <_PreparePacket>
 8006cae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6838      	ldr	r0, [r7, #0]
 8006cb6:	f7ff fa63 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f383 8811 	msr	BASEPRI, r3
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	200196ec 	.word	0x200196ec

08006ccc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd6:	f04f 0120 	mov.w	r1, #32
 8006cda:	f381 8811 	msr	BASEPRI, r1
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	4807      	ldr	r0, [pc, #28]	; (8006d00 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006ce2:	f7ff f960 	bl	8005fa6 <_PreparePacket>
 8006ce6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006ce8:	2212      	movs	r2, #18
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6838      	ldr	r0, [r7, #0]
 8006cee:	f7ff fa47 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
}
 8006cf8:	bf00      	nop
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200196ec 	.word	0x200196ec

08006d04 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d0e:	f04f 0120 	mov.w	r1, #32
 8006d12:	f381 8811 	msr	BASEPRI, r1
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	4807      	ldr	r0, [pc, #28]	; (8006d38 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d1a:	f7ff f944 	bl	8005fa6 <_PreparePacket>
 8006d1e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d20:	2211      	movs	r2, #17
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f7ff fa2b 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f383 8811 	msr	BASEPRI, r3
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200196ec 	.word	0x200196ec

08006d3c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d44:	f3ef 8311 	mrs	r3, BASEPRI
 8006d48:	f04f 0120 	mov.w	r1, #32
 8006d4c:	f381 8811 	msr	BASEPRI, r1
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	4819      	ldr	r0, [pc, #100]	; (8006db8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d54:	f7ff f927 	bl	8005fa6 <_PreparePacket>
 8006d58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	e00b      	b.n	8006d8a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	1c59      	adds	r1, r3, #1
 8006d7a:	61f9      	str	r1, [r7, #28]
 8006d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	09db      	lsrs	r3, r3, #7
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8e:	d8f0      	bhi.n	8006d72 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	61fa      	str	r2, [r7, #28]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006da0:	2208      	movs	r2, #8
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	6938      	ldr	r0, [r7, #16]
 8006da6:	f7ff f9eb 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f383 8811 	msr	BASEPRI, r3
}
 8006db0:	bf00      	nop
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	200196ec 	.word	0x200196ec
 8006dbc:	200196bc 	.word	0x200196bc

08006dc0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006dc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dcc:	f04f 0120 	mov.w	r1, #32
 8006dd0:	f381 8811 	msr	BASEPRI, r1
 8006dd4:	617b      	str	r3, [r7, #20]
 8006dd6:	4819      	ldr	r0, [pc, #100]	; (8006e3c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006dd8:	f7ff f8e5 	bl	8005fa6 <_PreparePacket>
 8006ddc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	e00b      	b.n	8006e0e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1c59      	adds	r1, r3, #1
 8006dfe:	61f9      	str	r1, [r7, #28]
 8006e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	09db      	lsrs	r3, r3, #7
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b7f      	cmp	r3, #127	; 0x7f
 8006e12:	d8f0      	bhi.n	8006df6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	61fa      	str	r2, [r7, #28]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e24:	2204      	movs	r2, #4
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	6938      	ldr	r0, [r7, #16]
 8006e2a:	f7ff f9a9 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f383 8811 	msr	BASEPRI, r3
}
 8006e34:	bf00      	nop
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	200196ec 	.word	0x200196ec
 8006e40:	200196bc 	.word	0x200196bc

08006e44 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e50:	f04f 0120 	mov.w	r1, #32
 8006e54:	f381 8811 	msr	BASEPRI, r1
 8006e58:	617b      	str	r3, [r7, #20]
 8006e5a:	4819      	ldr	r0, [pc, #100]	; (8006ec0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e5c:	f7ff f8a3 	bl	8005fa6 <_PreparePacket>
 8006e60:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e66:	4b17      	ldr	r3, [pc, #92]	; (8006ec4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	61fb      	str	r3, [r7, #28]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	e00b      	b.n	8006e92 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	1c59      	adds	r1, r3, #1
 8006e82:	61f9      	str	r1, [r7, #28]
 8006e84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	09db      	lsrs	r3, r3, #7
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b7f      	cmp	r3, #127	; 0x7f
 8006e96:	d8f0      	bhi.n	8006e7a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	61fa      	str	r2, [r7, #28]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	b2d2      	uxtb	r2, r2
 8006ea2:	701a      	strb	r2, [r3, #0]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ea8:	2206      	movs	r2, #6
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	6938      	ldr	r0, [r7, #16]
 8006eae:	f7ff f967 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f383 8811 	msr	BASEPRI, r3
}
 8006eb8:	bf00      	nop
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200196ec 	.word	0x200196ec
 8006ec4:	200196bc 	.word	0x200196bc

08006ec8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08a      	sub	sp, #40	; 0x28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed6:	f04f 0120 	mov.w	r1, #32
 8006eda:	f381 8811 	msr	BASEPRI, r1
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	4827      	ldr	r0, [pc, #156]	; (8006f80 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006ee2:	f7ff f860 	bl	8005fa6 <_PreparePacket>
 8006ee6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	623b      	str	r3, [r7, #32]
 8006efe:	e00b      	b.n	8006f18 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	6279      	str	r1, [r7, #36]	; 0x24
 8006f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	09db      	lsrs	r3, r3, #7
 8006f16:	623b      	str	r3, [r7, #32]
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1c:	d8f0      	bhi.n	8006f00 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	627a      	str	r2, [r7, #36]	; 0x24
 8006f24:	6a3a      	ldr	r2, [r7, #32]
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	61fb      	str	r3, [r7, #28]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	e00b      	b.n	8006f50 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	1c59      	adds	r1, r3, #1
 8006f40:	61f9      	str	r1, [r7, #28]
 8006f42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	09db      	lsrs	r3, r3, #7
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b7f      	cmp	r3, #127	; 0x7f
 8006f54:	d8f0      	bhi.n	8006f38 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	61fa      	str	r2, [r7, #28]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f66:	2207      	movs	r2, #7
 8006f68:	68f9      	ldr	r1, [r7, #12]
 8006f6a:	6938      	ldr	r0, [r7, #16]
 8006f6c:	f7ff f908 	bl	8006180 <_SendPacket>
  RECORD_END();
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f383 8811 	msr	BASEPRI, r3
}
 8006f76:	bf00      	nop
 8006f78:	3728      	adds	r7, #40	; 0x28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200196ec 	.word	0x200196ec
 8006f84:	200196bc 	.word	0x200196bc

08006f88 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006f90:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	1ad3      	subs	r3, r2, r3
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	200196bc 	.word	0x200196bc

08006fa8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08c      	sub	sp, #48	; 0x30
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006fb2:	4b3b      	ldr	r3, [pc, #236]	; (80070a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d06d      	beq.n	8007096 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006fba:	4b39      	ldr	r3, [pc, #228]	; (80070a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc4:	e008      	b.n	8006fd8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d3f2      	bcc.n	8006fc6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006fe0:	e000      	b.n	8006fe4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006fe2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d055      	beq.n	8007096 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fea:	f3ef 8311 	mrs	r3, BASEPRI
 8006fee:	f04f 0120 	mov.w	r1, #32
 8006ff2:	f381 8811 	msr	BASEPRI, r1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	482a      	ldr	r0, [pc, #168]	; (80070a4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ffa:	f7fe ffd4 	bl	8005fa6 <_PreparePacket>
 8006ffe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	623b      	str	r3, [r7, #32]
 800700c:	e00b      	b.n	8007026 <SEGGER_SYSVIEW_SendModule+0x7e>
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	6279      	str	r1, [r7, #36]	; 0x24
 8007018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	09db      	lsrs	r3, r3, #7
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	2b7f      	cmp	r3, #127	; 0x7f
 800702a:	d8f0      	bhi.n	800700e <SEGGER_SYSVIEW_SendModule+0x66>
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	627a      	str	r2, [r7, #36]	; 0x24
 8007032:	6a3a      	ldr	r2, [r7, #32]
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e00b      	b.n	8007060 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	1c59      	adds	r1, r3, #1
 8007050:	61f9      	str	r1, [r7, #28]
 8007052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	09db      	lsrs	r3, r3, #7
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	2b7f      	cmp	r3, #127	; 0x7f
 8007064:	d8f0      	bhi.n	8007048 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	61fa      	str	r2, [r7, #28]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2280      	movs	r2, #128	; 0x80
 800707c:	4619      	mov	r1, r3
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7fe ff44 	bl	8005f0c <_EncodeStr>
 8007084:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007086:	2216      	movs	r2, #22
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	6938      	ldr	r0, [r7, #16]
 800708c:	f7ff f878 	bl	8006180 <_SendPacket>
      RECORD_END();
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007096:	bf00      	nop
 8007098:	3730      	adds	r7, #48	; 0x30
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200196e4 	.word	0x200196e4
 80070a4:	200196ec 	.word	0x200196ec

080070a8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80070ae:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00f      	beq.n	80070d6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1f2      	bne.n	80070bc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200196e4 	.word	0x200196e4

080070e4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80070ea:	f3ef 8311 	mrs	r3, BASEPRI
 80070ee:	f04f 0120 	mov.w	r1, #32
 80070f2:	f381 8811 	msr	BASEPRI, r1
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	4817      	ldr	r0, [pc, #92]	; (8007158 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80070fa:	f7fe ff54 	bl	8005fa6 <_PreparePacket>
 80070fe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	4b14      	ldr	r3, [pc, #80]	; (800715c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	613b      	str	r3, [r7, #16]
 800710e:	e00b      	b.n	8007128 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	b2da      	uxtb	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	1c59      	adds	r1, r3, #1
 8007118:	6179      	str	r1, [r7, #20]
 800711a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	09db      	lsrs	r3, r3, #7
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b7f      	cmp	r3, #127	; 0x7f
 800712c:	d8f0      	bhi.n	8007110 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	617a      	str	r2, [r7, #20]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800713e:	221b      	movs	r2, #27
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	68b8      	ldr	r0, [r7, #8]
 8007144:	f7ff f81c 	bl	8006180 <_SendPacket>
  RECORD_END();
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f383 8811 	msr	BASEPRI, r3
}
 800714e:	bf00      	nop
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	200196ec 	.word	0x200196ec
 800715c:	200196e8 	.word	0x200196e8

08007160 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007168:	f3ef 8311 	mrs	r3, BASEPRI
 800716c:	f04f 0120 	mov.w	r1, #32
 8007170:	f381 8811 	msr	BASEPRI, r1
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	4827      	ldr	r0, [pc, #156]	; (8007214 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007178:	f7fe ff15 	bl	8005fa6 <_PreparePacket>
 800717c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800717e:	2280      	movs	r2, #128	; 0x80
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	6938      	ldr	r0, [r7, #16]
 8007184:	f7fe fec2 	bl	8005f0c <_EncodeStr>
 8007188:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
 800718e:	2301      	movs	r3, #1
 8007190:	623b      	str	r3, [r7, #32]
 8007192:	e00b      	b.n	80071ac <SEGGER_SYSVIEW_Warn+0x4c>
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	1c59      	adds	r1, r3, #1
 800719c:	6279      	str	r1, [r7, #36]	; 0x24
 800719e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	09db      	lsrs	r3, r3, #7
 80071aa:	623b      	str	r3, [r7, #32]
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2b7f      	cmp	r3, #127	; 0x7f
 80071b0:	d8f0      	bhi.n	8007194 <SEGGER_SYSVIEW_Warn+0x34>
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	627a      	str	r2, [r7, #36]	; 0x24
 80071b8:	6a3a      	ldr	r2, [r7, #32]
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	2300      	movs	r3, #0
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e00b      	b.n	80071e4 <SEGGER_SYSVIEW_Warn+0x84>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	1c59      	adds	r1, r3, #1
 80071d4:	61f9      	str	r1, [r7, #28]
 80071d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	09db      	lsrs	r3, r3, #7
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b7f      	cmp	r3, #127	; 0x7f
 80071e8:	d8f0      	bhi.n	80071cc <SEGGER_SYSVIEW_Warn+0x6c>
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	61fa      	str	r2, [r7, #28]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80071fa:	221a      	movs	r2, #26
 80071fc:	68f9      	ldr	r1, [r7, #12]
 80071fe:	6938      	ldr	r0, [r7, #16]
 8007200:	f7fe ffbe 	bl	8006180 <_SendPacket>
  RECORD_END();
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f383 8811 	msr	BASEPRI, r3
}
 800720a:	bf00      	nop
 800720c:	3728      	adds	r7, #40	; 0x28
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	200196ec 	.word	0x200196ec

08007218 <__errno>:
 8007218:	4b01      	ldr	r3, [pc, #4]	; (8007220 <__errno+0x8>)
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000014 	.word	0x20000014

08007224 <__libc_init_array>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4e0d      	ldr	r6, [pc, #52]	; (800725c <__libc_init_array+0x38>)
 8007228:	4c0d      	ldr	r4, [pc, #52]	; (8007260 <__libc_init_array+0x3c>)
 800722a:	1ba4      	subs	r4, r4, r6
 800722c:	10a4      	asrs	r4, r4, #2
 800722e:	2500      	movs	r5, #0
 8007230:	42a5      	cmp	r5, r4
 8007232:	d109      	bne.n	8007248 <__libc_init_array+0x24>
 8007234:	4e0b      	ldr	r6, [pc, #44]	; (8007264 <__libc_init_array+0x40>)
 8007236:	4c0c      	ldr	r4, [pc, #48]	; (8007268 <__libc_init_array+0x44>)
 8007238:	f000 fcca 	bl	8007bd0 <_init>
 800723c:	1ba4      	subs	r4, r4, r6
 800723e:	10a4      	asrs	r4, r4, #2
 8007240:	2500      	movs	r5, #0
 8007242:	42a5      	cmp	r5, r4
 8007244:	d105      	bne.n	8007252 <__libc_init_array+0x2e>
 8007246:	bd70      	pop	{r4, r5, r6, pc}
 8007248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800724c:	4798      	blx	r3
 800724e:	3501      	adds	r5, #1
 8007250:	e7ee      	b.n	8007230 <__libc_init_array+0xc>
 8007252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007256:	4798      	blx	r3
 8007258:	3501      	adds	r5, #1
 800725a:	e7f2      	b.n	8007242 <__libc_init_array+0x1e>
 800725c:	08007da4 	.word	0x08007da4
 8007260:	08007da4 	.word	0x08007da4
 8007264:	08007da4 	.word	0x08007da4
 8007268:	08007da8 	.word	0x08007da8

0800726c <memcmp>:
 800726c:	b530      	push	{r4, r5, lr}
 800726e:	2400      	movs	r4, #0
 8007270:	42a2      	cmp	r2, r4
 8007272:	d101      	bne.n	8007278 <memcmp+0xc>
 8007274:	2000      	movs	r0, #0
 8007276:	e007      	b.n	8007288 <memcmp+0x1c>
 8007278:	5d03      	ldrb	r3, [r0, r4]
 800727a:	3401      	adds	r4, #1
 800727c:	190d      	adds	r5, r1, r4
 800727e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007282:	42ab      	cmp	r3, r5
 8007284:	d0f4      	beq.n	8007270 <memcmp+0x4>
 8007286:	1b58      	subs	r0, r3, r5
 8007288:	bd30      	pop	{r4, r5, pc}

0800728a <memcpy>:
 800728a:	b510      	push	{r4, lr}
 800728c:	1e43      	subs	r3, r0, #1
 800728e:	440a      	add	r2, r1
 8007290:	4291      	cmp	r1, r2
 8007292:	d100      	bne.n	8007296 <memcpy+0xc>
 8007294:	bd10      	pop	{r4, pc}
 8007296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800729e:	e7f7      	b.n	8007290 <memcpy+0x6>

080072a0 <memset>:
 80072a0:	4402      	add	r2, r0
 80072a2:	4603      	mov	r3, r0
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d100      	bne.n	80072aa <memset+0xa>
 80072a8:	4770      	bx	lr
 80072aa:	f803 1b01 	strb.w	r1, [r3], #1
 80072ae:	e7f9      	b.n	80072a4 <memset+0x4>

080072b0 <srand>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <srand+0x38>)
 80072b4:	681c      	ldr	r4, [r3, #0]
 80072b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072b8:	4605      	mov	r5, r0
 80072ba:	b97b      	cbnz	r3, 80072dc <srand+0x2c>
 80072bc:	2018      	movs	r0, #24
 80072be:	f000 f89b 	bl	80073f8 <malloc>
 80072c2:	4a0a      	ldr	r2, [pc, #40]	; (80072ec <srand+0x3c>)
 80072c4:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <srand+0x40>)
 80072c6:	63a0      	str	r0, [r4, #56]	; 0x38
 80072c8:	e9c0 2300 	strd	r2, r3, [r0]
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <srand+0x44>)
 80072ce:	6083      	str	r3, [r0, #8]
 80072d0:	230b      	movs	r3, #11
 80072d2:	8183      	strh	r3, [r0, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	2300      	movs	r3, #0
 80072d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80072dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072de:	2200      	movs	r2, #0
 80072e0:	611d      	str	r5, [r3, #16]
 80072e2:	615a      	str	r2, [r3, #20]
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	bf00      	nop
 80072e8:	20000014 	.word	0x20000014
 80072ec:	abcd330e 	.word	0xabcd330e
 80072f0:	e66d1234 	.word	0xe66d1234
 80072f4:	0005deec 	.word	0x0005deec

080072f8 <rand>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <rand+0x50>)
 80072fc:	681c      	ldr	r4, [r3, #0]
 80072fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007300:	b97b      	cbnz	r3, 8007322 <rand+0x2a>
 8007302:	2018      	movs	r0, #24
 8007304:	f000 f878 	bl	80073f8 <malloc>
 8007308:	4a10      	ldr	r2, [pc, #64]	; (800734c <rand+0x54>)
 800730a:	4b11      	ldr	r3, [pc, #68]	; (8007350 <rand+0x58>)
 800730c:	63a0      	str	r0, [r4, #56]	; 0x38
 800730e:	e9c0 2300 	strd	r2, r3, [r0]
 8007312:	4b10      	ldr	r3, [pc, #64]	; (8007354 <rand+0x5c>)
 8007314:	6083      	str	r3, [r0, #8]
 8007316:	230b      	movs	r3, #11
 8007318:	8183      	strh	r3, [r0, #12]
 800731a:	2201      	movs	r2, #1
 800731c:	2300      	movs	r3, #0
 800731e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007322:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007324:	480c      	ldr	r0, [pc, #48]	; (8007358 <rand+0x60>)
 8007326:	690a      	ldr	r2, [r1, #16]
 8007328:	694b      	ldr	r3, [r1, #20]
 800732a:	4c0c      	ldr	r4, [pc, #48]	; (800735c <rand+0x64>)
 800732c:	4350      	muls	r0, r2
 800732e:	fb04 0003 	mla	r0, r4, r3, r0
 8007332:	fba2 2304 	umull	r2, r3, r2, r4
 8007336:	4403      	add	r3, r0
 8007338:	1c54      	adds	r4, r2, #1
 800733a:	f143 0500 	adc.w	r5, r3, #0
 800733e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8007342:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	20000014 	.word	0x20000014
 800734c:	abcd330e 	.word	0xabcd330e
 8007350:	e66d1234 	.word	0xe66d1234
 8007354:	0005deec 	.word	0x0005deec
 8007358:	5851f42d 	.word	0x5851f42d
 800735c:	4c957f2d 	.word	0x4c957f2d

08007360 <time>:
 8007360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <time+0x30>)
 8007364:	4604      	mov	r4, r0
 8007366:	2200      	movs	r2, #0
 8007368:	4669      	mov	r1, sp
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	f000 f832 	bl	80073d4 <_gettimeofday_r>
 8007370:	2800      	cmp	r0, #0
 8007372:	da05      	bge.n	8007380 <time+0x20>
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	e9cd 2300 	strd	r2, r3, [sp]
 8007380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007384:	b10c      	cbz	r4, 800738a <time+0x2a>
 8007386:	e9c4 0100 	strd	r0, r1, [r4]
 800738a:	b004      	add	sp, #16
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	20000014 	.word	0x20000014

08007394 <_vsiprintf_r>:
 8007394:	b500      	push	{lr}
 8007396:	b09b      	sub	sp, #108	; 0x6c
 8007398:	9100      	str	r1, [sp, #0]
 800739a:	9104      	str	r1, [sp, #16]
 800739c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073a0:	9105      	str	r1, [sp, #20]
 80073a2:	9102      	str	r1, [sp, #8]
 80073a4:	4905      	ldr	r1, [pc, #20]	; (80073bc <_vsiprintf_r+0x28>)
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	4669      	mov	r1, sp
 80073aa:	f000 f92f 	bl	800760c <_svfiprintf_r>
 80073ae:	9b00      	ldr	r3, [sp, #0]
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	b01b      	add	sp, #108	; 0x6c
 80073b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80073ba:	bf00      	nop
 80073bc:	ffff0208 	.word	0xffff0208

080073c0 <vsiprintf>:
 80073c0:	4613      	mov	r3, r2
 80073c2:	460a      	mov	r2, r1
 80073c4:	4601      	mov	r1, r0
 80073c6:	4802      	ldr	r0, [pc, #8]	; (80073d0 <vsiprintf+0x10>)
 80073c8:	6800      	ldr	r0, [r0, #0]
 80073ca:	f7ff bfe3 	b.w	8007394 <_vsiprintf_r>
 80073ce:	bf00      	nop
 80073d0:	20000014 	.word	0x20000014

080073d4 <_gettimeofday_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4c07      	ldr	r4, [pc, #28]	; (80073f4 <_gettimeofday_r+0x20>)
 80073d8:	2300      	movs	r3, #0
 80073da:	4605      	mov	r5, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	f000 fbed 	bl	8007bc0 <_gettimeofday>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d102      	bne.n	80073f0 <_gettimeofday_r+0x1c>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	b103      	cbz	r3, 80073f0 <_gettimeofday_r+0x1c>
 80073ee:	602b      	str	r3, [r5, #0]
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	bf00      	nop
 80073f4:	20019954 	.word	0x20019954

080073f8 <malloc>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	; (8007404 <malloc+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 b851 	b.w	80074a4 <_malloc_r>
 8007402:	bf00      	nop
 8007404:	20000014 	.word	0x20000014

08007408 <_free_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4605      	mov	r5, r0
 800740c:	2900      	cmp	r1, #0
 800740e:	d045      	beq.n	800749c <_free_r+0x94>
 8007410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007414:	1f0c      	subs	r4, r1, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfb8      	it	lt
 800741a:	18e4      	addlt	r4, r4, r3
 800741c:	f000 fb9f 	bl	8007b5e <__malloc_lock>
 8007420:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <_free_r+0x98>)
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	4610      	mov	r0, r2
 8007426:	b933      	cbnz	r3, 8007436 <_free_r+0x2e>
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	6014      	str	r4, [r2, #0]
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 bb95 	b.w	8007b60 <__malloc_unlock>
 8007436:	42a3      	cmp	r3, r4
 8007438:	d90c      	bls.n	8007454 <_free_r+0x4c>
 800743a:	6821      	ldr	r1, [r4, #0]
 800743c:	1862      	adds	r2, r4, r1
 800743e:	4293      	cmp	r3, r2
 8007440:	bf04      	itt	eq
 8007442:	681a      	ldreq	r2, [r3, #0]
 8007444:	685b      	ldreq	r3, [r3, #4]
 8007446:	6063      	str	r3, [r4, #4]
 8007448:	bf04      	itt	eq
 800744a:	1852      	addeq	r2, r2, r1
 800744c:	6022      	streq	r2, [r4, #0]
 800744e:	6004      	str	r4, [r0, #0]
 8007450:	e7ec      	b.n	800742c <_free_r+0x24>
 8007452:	4613      	mov	r3, r2
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	b10a      	cbz	r2, 800745c <_free_r+0x54>
 8007458:	42a2      	cmp	r2, r4
 800745a:	d9fa      	bls.n	8007452 <_free_r+0x4a>
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	1858      	adds	r0, r3, r1
 8007460:	42a0      	cmp	r0, r4
 8007462:	d10b      	bne.n	800747c <_free_r+0x74>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	4401      	add	r1, r0
 8007468:	1858      	adds	r0, r3, r1
 800746a:	4282      	cmp	r2, r0
 800746c:	6019      	str	r1, [r3, #0]
 800746e:	d1dd      	bne.n	800742c <_free_r+0x24>
 8007470:	6810      	ldr	r0, [r2, #0]
 8007472:	6852      	ldr	r2, [r2, #4]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	4401      	add	r1, r0
 8007478:	6019      	str	r1, [r3, #0]
 800747a:	e7d7      	b.n	800742c <_free_r+0x24>
 800747c:	d902      	bls.n	8007484 <_free_r+0x7c>
 800747e:	230c      	movs	r3, #12
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	e7d3      	b.n	800742c <_free_r+0x24>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	1821      	adds	r1, r4, r0
 8007488:	428a      	cmp	r2, r1
 800748a:	bf04      	itt	eq
 800748c:	6811      	ldreq	r1, [r2, #0]
 800748e:	6852      	ldreq	r2, [r2, #4]
 8007490:	6062      	str	r2, [r4, #4]
 8007492:	bf04      	itt	eq
 8007494:	1809      	addeq	r1, r1, r0
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	605c      	str	r4, [r3, #4]
 800749a:	e7c7      	b.n	800742c <_free_r+0x24>
 800749c:	bd38      	pop	{r3, r4, r5, pc}
 800749e:	bf00      	nop
 80074a0:	200197d0 	.word	0x200197d0

080074a4 <_malloc_r>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	1ccd      	adds	r5, r1, #3
 80074a8:	f025 0503 	bic.w	r5, r5, #3
 80074ac:	3508      	adds	r5, #8
 80074ae:	2d0c      	cmp	r5, #12
 80074b0:	bf38      	it	cc
 80074b2:	250c      	movcc	r5, #12
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	4606      	mov	r6, r0
 80074b8:	db01      	blt.n	80074be <_malloc_r+0x1a>
 80074ba:	42a9      	cmp	r1, r5
 80074bc:	d903      	bls.n	80074c6 <_malloc_r+0x22>
 80074be:	230c      	movs	r3, #12
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	2000      	movs	r0, #0
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	f000 fb4a 	bl	8007b5e <__malloc_lock>
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <_malloc_r+0xac>)
 80074cc:	6814      	ldr	r4, [r2, #0]
 80074ce:	4621      	mov	r1, r4
 80074d0:	b991      	cbnz	r1, 80074f8 <_malloc_r+0x54>
 80074d2:	4c20      	ldr	r4, [pc, #128]	; (8007554 <_malloc_r+0xb0>)
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	b91b      	cbnz	r3, 80074e0 <_malloc_r+0x3c>
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 fb17 	bl	8007b0c <_sbrk_r>
 80074de:	6020      	str	r0, [r4, #0]
 80074e0:	4629      	mov	r1, r5
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 fb12 	bl	8007b0c <_sbrk_r>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d124      	bne.n	8007536 <_malloc_r+0x92>
 80074ec:	230c      	movs	r3, #12
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	4630      	mov	r0, r6
 80074f2:	f000 fb35 	bl	8007b60 <__malloc_unlock>
 80074f6:	e7e4      	b.n	80074c2 <_malloc_r+0x1e>
 80074f8:	680b      	ldr	r3, [r1, #0]
 80074fa:	1b5b      	subs	r3, r3, r5
 80074fc:	d418      	bmi.n	8007530 <_malloc_r+0x8c>
 80074fe:	2b0b      	cmp	r3, #11
 8007500:	d90f      	bls.n	8007522 <_malloc_r+0x7e>
 8007502:	600b      	str	r3, [r1, #0]
 8007504:	50cd      	str	r5, [r1, r3]
 8007506:	18cc      	adds	r4, r1, r3
 8007508:	4630      	mov	r0, r6
 800750a:	f000 fb29 	bl	8007b60 <__malloc_unlock>
 800750e:	f104 000b 	add.w	r0, r4, #11
 8007512:	1d23      	adds	r3, r4, #4
 8007514:	f020 0007 	bic.w	r0, r0, #7
 8007518:	1ac3      	subs	r3, r0, r3
 800751a:	d0d3      	beq.n	80074c4 <_malloc_r+0x20>
 800751c:	425a      	negs	r2, r3
 800751e:	50e2      	str	r2, [r4, r3]
 8007520:	e7d0      	b.n	80074c4 <_malloc_r+0x20>
 8007522:	428c      	cmp	r4, r1
 8007524:	684b      	ldr	r3, [r1, #4]
 8007526:	bf16      	itet	ne
 8007528:	6063      	strne	r3, [r4, #4]
 800752a:	6013      	streq	r3, [r2, #0]
 800752c:	460c      	movne	r4, r1
 800752e:	e7eb      	b.n	8007508 <_malloc_r+0x64>
 8007530:	460c      	mov	r4, r1
 8007532:	6849      	ldr	r1, [r1, #4]
 8007534:	e7cc      	b.n	80074d0 <_malloc_r+0x2c>
 8007536:	1cc4      	adds	r4, r0, #3
 8007538:	f024 0403 	bic.w	r4, r4, #3
 800753c:	42a0      	cmp	r0, r4
 800753e:	d005      	beq.n	800754c <_malloc_r+0xa8>
 8007540:	1a21      	subs	r1, r4, r0
 8007542:	4630      	mov	r0, r6
 8007544:	f000 fae2 	bl	8007b0c <_sbrk_r>
 8007548:	3001      	adds	r0, #1
 800754a:	d0cf      	beq.n	80074ec <_malloc_r+0x48>
 800754c:	6025      	str	r5, [r4, #0]
 800754e:	e7db      	b.n	8007508 <_malloc_r+0x64>
 8007550:	200197d0 	.word	0x200197d0
 8007554:	200197d4 	.word	0x200197d4

08007558 <__ssputs_r>:
 8007558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	688e      	ldr	r6, [r1, #8]
 800755e:	429e      	cmp	r6, r3
 8007560:	4682      	mov	sl, r0
 8007562:	460c      	mov	r4, r1
 8007564:	4690      	mov	r8, r2
 8007566:	4699      	mov	r9, r3
 8007568:	d837      	bhi.n	80075da <__ssputs_r+0x82>
 800756a:	898a      	ldrh	r2, [r1, #12]
 800756c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007570:	d031      	beq.n	80075d6 <__ssputs_r+0x7e>
 8007572:	6825      	ldr	r5, [r4, #0]
 8007574:	6909      	ldr	r1, [r1, #16]
 8007576:	1a6f      	subs	r7, r5, r1
 8007578:	6965      	ldr	r5, [r4, #20]
 800757a:	2302      	movs	r3, #2
 800757c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007580:	fb95 f5f3 	sdiv	r5, r5, r3
 8007584:	f109 0301 	add.w	r3, r9, #1
 8007588:	443b      	add	r3, r7
 800758a:	429d      	cmp	r5, r3
 800758c:	bf38      	it	cc
 800758e:	461d      	movcc	r5, r3
 8007590:	0553      	lsls	r3, r2, #21
 8007592:	d530      	bpl.n	80075f6 <__ssputs_r+0x9e>
 8007594:	4629      	mov	r1, r5
 8007596:	f7ff ff85 	bl	80074a4 <_malloc_r>
 800759a:	4606      	mov	r6, r0
 800759c:	b950      	cbnz	r0, 80075b4 <__ssputs_r+0x5c>
 800759e:	230c      	movs	r3, #12
 80075a0:	f8ca 3000 	str.w	r3, [sl]
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075aa:	81a3      	strh	r3, [r4, #12]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b4:	463a      	mov	r2, r7
 80075b6:	6921      	ldr	r1, [r4, #16]
 80075b8:	f7ff fe67 	bl	800728a <memcpy>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	6126      	str	r6, [r4, #16]
 80075ca:	6165      	str	r5, [r4, #20]
 80075cc:	443e      	add	r6, r7
 80075ce:	1bed      	subs	r5, r5, r7
 80075d0:	6026      	str	r6, [r4, #0]
 80075d2:	60a5      	str	r5, [r4, #8]
 80075d4:	464e      	mov	r6, r9
 80075d6:	454e      	cmp	r6, r9
 80075d8:	d900      	bls.n	80075dc <__ssputs_r+0x84>
 80075da:	464e      	mov	r6, r9
 80075dc:	4632      	mov	r2, r6
 80075de:	4641      	mov	r1, r8
 80075e0:	6820      	ldr	r0, [r4, #0]
 80075e2:	f000 faa3 	bl	8007b2c <memmove>
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	1b9b      	subs	r3, r3, r6
 80075ea:	60a3      	str	r3, [r4, #8]
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	441e      	add	r6, r3
 80075f0:	6026      	str	r6, [r4, #0]
 80075f2:	2000      	movs	r0, #0
 80075f4:	e7dc      	b.n	80075b0 <__ssputs_r+0x58>
 80075f6:	462a      	mov	r2, r5
 80075f8:	f000 fab3 	bl	8007b62 <_realloc_r>
 80075fc:	4606      	mov	r6, r0
 80075fe:	2800      	cmp	r0, #0
 8007600:	d1e2      	bne.n	80075c8 <__ssputs_r+0x70>
 8007602:	6921      	ldr	r1, [r4, #16]
 8007604:	4650      	mov	r0, sl
 8007606:	f7ff feff 	bl	8007408 <_free_r>
 800760a:	e7c8      	b.n	800759e <__ssputs_r+0x46>

0800760c <_svfiprintf_r>:
 800760c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007610:	461d      	mov	r5, r3
 8007612:	898b      	ldrh	r3, [r1, #12]
 8007614:	061f      	lsls	r7, r3, #24
 8007616:	b09d      	sub	sp, #116	; 0x74
 8007618:	4680      	mov	r8, r0
 800761a:	460c      	mov	r4, r1
 800761c:	4616      	mov	r6, r2
 800761e:	d50f      	bpl.n	8007640 <_svfiprintf_r+0x34>
 8007620:	690b      	ldr	r3, [r1, #16]
 8007622:	b96b      	cbnz	r3, 8007640 <_svfiprintf_r+0x34>
 8007624:	2140      	movs	r1, #64	; 0x40
 8007626:	f7ff ff3d 	bl	80074a4 <_malloc_r>
 800762a:	6020      	str	r0, [r4, #0]
 800762c:	6120      	str	r0, [r4, #16]
 800762e:	b928      	cbnz	r0, 800763c <_svfiprintf_r+0x30>
 8007630:	230c      	movs	r3, #12
 8007632:	f8c8 3000 	str.w	r3, [r8]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	e0c8      	b.n	80077ce <_svfiprintf_r+0x1c2>
 800763c:	2340      	movs	r3, #64	; 0x40
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	2300      	movs	r3, #0
 8007642:	9309      	str	r3, [sp, #36]	; 0x24
 8007644:	2320      	movs	r3, #32
 8007646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800764a:	2330      	movs	r3, #48	; 0x30
 800764c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007650:	9503      	str	r5, [sp, #12]
 8007652:	f04f 0b01 	mov.w	fp, #1
 8007656:	4637      	mov	r7, r6
 8007658:	463d      	mov	r5, r7
 800765a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800765e:	b10b      	cbz	r3, 8007664 <_svfiprintf_r+0x58>
 8007660:	2b25      	cmp	r3, #37	; 0x25
 8007662:	d13e      	bne.n	80076e2 <_svfiprintf_r+0xd6>
 8007664:	ebb7 0a06 	subs.w	sl, r7, r6
 8007668:	d00b      	beq.n	8007682 <_svfiprintf_r+0x76>
 800766a:	4653      	mov	r3, sl
 800766c:	4632      	mov	r2, r6
 800766e:	4621      	mov	r1, r4
 8007670:	4640      	mov	r0, r8
 8007672:	f7ff ff71 	bl	8007558 <__ssputs_r>
 8007676:	3001      	adds	r0, #1
 8007678:	f000 80a4 	beq.w	80077c4 <_svfiprintf_r+0x1b8>
 800767c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800767e:	4453      	add	r3, sl
 8007680:	9309      	str	r3, [sp, #36]	; 0x24
 8007682:	783b      	ldrb	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 809d 	beq.w	80077c4 <_svfiprintf_r+0x1b8>
 800768a:	2300      	movs	r3, #0
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	9307      	str	r3, [sp, #28]
 8007698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800769c:	931a      	str	r3, [sp, #104]	; 0x68
 800769e:	462f      	mov	r7, r5
 80076a0:	2205      	movs	r2, #5
 80076a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076a6:	4850      	ldr	r0, [pc, #320]	; (80077e8 <_svfiprintf_r+0x1dc>)
 80076a8:	f7f8 fdea 	bl	8000280 <memchr>
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	b9d0      	cbnz	r0, 80076e6 <_svfiprintf_r+0xda>
 80076b0:	06d9      	lsls	r1, r3, #27
 80076b2:	bf44      	itt	mi
 80076b4:	2220      	movmi	r2, #32
 80076b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076ba:	071a      	lsls	r2, r3, #28
 80076bc:	bf44      	itt	mi
 80076be:	222b      	movmi	r2, #43	; 0x2b
 80076c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80076c4:	782a      	ldrb	r2, [r5, #0]
 80076c6:	2a2a      	cmp	r2, #42	; 0x2a
 80076c8:	d015      	beq.n	80076f6 <_svfiprintf_r+0xea>
 80076ca:	9a07      	ldr	r2, [sp, #28]
 80076cc:	462f      	mov	r7, r5
 80076ce:	2000      	movs	r0, #0
 80076d0:	250a      	movs	r5, #10
 80076d2:	4639      	mov	r1, r7
 80076d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d8:	3b30      	subs	r3, #48	; 0x30
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d94d      	bls.n	800777a <_svfiprintf_r+0x16e>
 80076de:	b1b8      	cbz	r0, 8007710 <_svfiprintf_r+0x104>
 80076e0:	e00f      	b.n	8007702 <_svfiprintf_r+0xf6>
 80076e2:	462f      	mov	r7, r5
 80076e4:	e7b8      	b.n	8007658 <_svfiprintf_r+0x4c>
 80076e6:	4a40      	ldr	r2, [pc, #256]	; (80077e8 <_svfiprintf_r+0x1dc>)
 80076e8:	1a80      	subs	r0, r0, r2
 80076ea:	fa0b f000 	lsl.w	r0, fp, r0
 80076ee:	4318      	orrs	r0, r3
 80076f0:	9004      	str	r0, [sp, #16]
 80076f2:	463d      	mov	r5, r7
 80076f4:	e7d3      	b.n	800769e <_svfiprintf_r+0x92>
 80076f6:	9a03      	ldr	r2, [sp, #12]
 80076f8:	1d11      	adds	r1, r2, #4
 80076fa:	6812      	ldr	r2, [r2, #0]
 80076fc:	9103      	str	r1, [sp, #12]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	db01      	blt.n	8007706 <_svfiprintf_r+0xfa>
 8007702:	9207      	str	r2, [sp, #28]
 8007704:	e004      	b.n	8007710 <_svfiprintf_r+0x104>
 8007706:	4252      	negs	r2, r2
 8007708:	f043 0302 	orr.w	r3, r3, #2
 800770c:	9207      	str	r2, [sp, #28]
 800770e:	9304      	str	r3, [sp, #16]
 8007710:	783b      	ldrb	r3, [r7, #0]
 8007712:	2b2e      	cmp	r3, #46	; 0x2e
 8007714:	d10c      	bne.n	8007730 <_svfiprintf_r+0x124>
 8007716:	787b      	ldrb	r3, [r7, #1]
 8007718:	2b2a      	cmp	r3, #42	; 0x2a
 800771a:	d133      	bne.n	8007784 <_svfiprintf_r+0x178>
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	1d1a      	adds	r2, r3, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	9203      	str	r2, [sp, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	bfb8      	it	lt
 8007728:	f04f 33ff 	movlt.w	r3, #4294967295
 800772c:	3702      	adds	r7, #2
 800772e:	9305      	str	r3, [sp, #20]
 8007730:	4d2e      	ldr	r5, [pc, #184]	; (80077ec <_svfiprintf_r+0x1e0>)
 8007732:	7839      	ldrb	r1, [r7, #0]
 8007734:	2203      	movs	r2, #3
 8007736:	4628      	mov	r0, r5
 8007738:	f7f8 fda2 	bl	8000280 <memchr>
 800773c:	b138      	cbz	r0, 800774e <_svfiprintf_r+0x142>
 800773e:	2340      	movs	r3, #64	; 0x40
 8007740:	1b40      	subs	r0, r0, r5
 8007742:	fa03 f000 	lsl.w	r0, r3, r0
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	4303      	orrs	r3, r0
 800774a:	3701      	adds	r7, #1
 800774c:	9304      	str	r3, [sp, #16]
 800774e:	7839      	ldrb	r1, [r7, #0]
 8007750:	4827      	ldr	r0, [pc, #156]	; (80077f0 <_svfiprintf_r+0x1e4>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	1c7e      	adds	r6, r7, #1
 800775a:	f7f8 fd91 	bl	8000280 <memchr>
 800775e:	2800      	cmp	r0, #0
 8007760:	d038      	beq.n	80077d4 <_svfiprintf_r+0x1c8>
 8007762:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <_svfiprintf_r+0x1e8>)
 8007764:	bb13      	cbnz	r3, 80077ac <_svfiprintf_r+0x1a0>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	3307      	adds	r3, #7
 800776a:	f023 0307 	bic.w	r3, r3, #7
 800776e:	3308      	adds	r3, #8
 8007770:	9303      	str	r3, [sp, #12]
 8007772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007774:	444b      	add	r3, r9
 8007776:	9309      	str	r3, [sp, #36]	; 0x24
 8007778:	e76d      	b.n	8007656 <_svfiprintf_r+0x4a>
 800777a:	fb05 3202 	mla	r2, r5, r2, r3
 800777e:	2001      	movs	r0, #1
 8007780:	460f      	mov	r7, r1
 8007782:	e7a6      	b.n	80076d2 <_svfiprintf_r+0xc6>
 8007784:	2300      	movs	r3, #0
 8007786:	3701      	adds	r7, #1
 8007788:	9305      	str	r3, [sp, #20]
 800778a:	4619      	mov	r1, r3
 800778c:	250a      	movs	r5, #10
 800778e:	4638      	mov	r0, r7
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	; 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_svfiprintf_r+0x196>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c8      	beq.n	8007730 <_svfiprintf_r+0x124>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c6      	b.n	8007730 <_svfiprintf_r+0x124>
 80077a2:	fb05 2101 	mla	r1, r5, r1, r2
 80077a6:	2301      	movs	r3, #1
 80077a8:	4607      	mov	r7, r0
 80077aa:	e7f0      	b.n	800778e <_svfiprintf_r+0x182>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4622      	mov	r2, r4
 80077b2:	4b11      	ldr	r3, [pc, #68]	; (80077f8 <_svfiprintf_r+0x1ec>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4640      	mov	r0, r8
 80077b8:	f3af 8000 	nop.w
 80077bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80077c0:	4681      	mov	r9, r0
 80077c2:	d1d6      	bne.n	8007772 <_svfiprintf_r+0x166>
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	065b      	lsls	r3, r3, #25
 80077c8:	f53f af35 	bmi.w	8007636 <_svfiprintf_r+0x2a>
 80077cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077ce:	b01d      	add	sp, #116	; 0x74
 80077d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d4:	ab03      	add	r3, sp, #12
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	4622      	mov	r2, r4
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <_svfiprintf_r+0x1ec>)
 80077dc:	a904      	add	r1, sp, #16
 80077de:	4640      	mov	r0, r8
 80077e0:	f000 f882 	bl	80078e8 <_printf_i>
 80077e4:	e7ea      	b.n	80077bc <_svfiprintf_r+0x1b0>
 80077e6:	bf00      	nop
 80077e8:	08007d66 	.word	0x08007d66
 80077ec:	08007d6c 	.word	0x08007d6c
 80077f0:	08007d70 	.word	0x08007d70
 80077f4:	00000000 	.word	0x00000000
 80077f8:	08007559 	.word	0x08007559

080077fc <_printf_common>:
 80077fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	4691      	mov	r9, r2
 8007802:	461f      	mov	r7, r3
 8007804:	688a      	ldr	r2, [r1, #8]
 8007806:	690b      	ldr	r3, [r1, #16]
 8007808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800780c:	4293      	cmp	r3, r2
 800780e:	bfb8      	it	lt
 8007810:	4613      	movlt	r3, r2
 8007812:	f8c9 3000 	str.w	r3, [r9]
 8007816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800781a:	4606      	mov	r6, r0
 800781c:	460c      	mov	r4, r1
 800781e:	b112      	cbz	r2, 8007826 <_printf_common+0x2a>
 8007820:	3301      	adds	r3, #1
 8007822:	f8c9 3000 	str.w	r3, [r9]
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	0699      	lsls	r1, r3, #26
 800782a:	bf42      	ittt	mi
 800782c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007830:	3302      	addmi	r3, #2
 8007832:	f8c9 3000 	strmi.w	r3, [r9]
 8007836:	6825      	ldr	r5, [r4, #0]
 8007838:	f015 0506 	ands.w	r5, r5, #6
 800783c:	d107      	bne.n	800784e <_printf_common+0x52>
 800783e:	f104 0a19 	add.w	sl, r4, #25
 8007842:	68e3      	ldr	r3, [r4, #12]
 8007844:	f8d9 2000 	ldr.w	r2, [r9]
 8007848:	1a9b      	subs	r3, r3, r2
 800784a:	42ab      	cmp	r3, r5
 800784c:	dc28      	bgt.n	80078a0 <_printf_common+0xa4>
 800784e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007852:	6822      	ldr	r2, [r4, #0]
 8007854:	3300      	adds	r3, #0
 8007856:	bf18      	it	ne
 8007858:	2301      	movne	r3, #1
 800785a:	0692      	lsls	r2, r2, #26
 800785c:	d42d      	bmi.n	80078ba <_printf_common+0xbe>
 800785e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007862:	4639      	mov	r1, r7
 8007864:	4630      	mov	r0, r6
 8007866:	47c0      	blx	r8
 8007868:	3001      	adds	r0, #1
 800786a:	d020      	beq.n	80078ae <_printf_common+0xb2>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	68e5      	ldr	r5, [r4, #12]
 8007870:	f8d9 2000 	ldr.w	r2, [r9]
 8007874:	f003 0306 	and.w	r3, r3, #6
 8007878:	2b04      	cmp	r3, #4
 800787a:	bf08      	it	eq
 800787c:	1aad      	subeq	r5, r5, r2
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	6922      	ldr	r2, [r4, #16]
 8007882:	bf0c      	ite	eq
 8007884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007888:	2500      	movne	r5, #0
 800788a:	4293      	cmp	r3, r2
 800788c:	bfc4      	itt	gt
 800788e:	1a9b      	subgt	r3, r3, r2
 8007890:	18ed      	addgt	r5, r5, r3
 8007892:	f04f 0900 	mov.w	r9, #0
 8007896:	341a      	adds	r4, #26
 8007898:	454d      	cmp	r5, r9
 800789a:	d11a      	bne.n	80078d2 <_printf_common+0xd6>
 800789c:	2000      	movs	r0, #0
 800789e:	e008      	b.n	80078b2 <_printf_common+0xb6>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4652      	mov	r2, sl
 80078a4:	4639      	mov	r1, r7
 80078a6:	4630      	mov	r0, r6
 80078a8:	47c0      	blx	r8
 80078aa:	3001      	adds	r0, #1
 80078ac:	d103      	bne.n	80078b6 <_printf_common+0xba>
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b6:	3501      	adds	r5, #1
 80078b8:	e7c3      	b.n	8007842 <_printf_common+0x46>
 80078ba:	18e1      	adds	r1, r4, r3
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	2030      	movs	r0, #48	; 0x30
 80078c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078c4:	4422      	add	r2, r4
 80078c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078ce:	3302      	adds	r3, #2
 80078d0:	e7c5      	b.n	800785e <_printf_common+0x62>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4622      	mov	r2, r4
 80078d6:	4639      	mov	r1, r7
 80078d8:	4630      	mov	r0, r6
 80078da:	47c0      	blx	r8
 80078dc:	3001      	adds	r0, #1
 80078de:	d0e6      	beq.n	80078ae <_printf_common+0xb2>
 80078e0:	f109 0901 	add.w	r9, r9, #1
 80078e4:	e7d8      	b.n	8007898 <_printf_common+0x9c>
	...

080078e8 <_printf_i>:
 80078e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80078f0:	460c      	mov	r4, r1
 80078f2:	7e09      	ldrb	r1, [r1, #24]
 80078f4:	b085      	sub	sp, #20
 80078f6:	296e      	cmp	r1, #110	; 0x6e
 80078f8:	4617      	mov	r7, r2
 80078fa:	4606      	mov	r6, r0
 80078fc:	4698      	mov	r8, r3
 80078fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007900:	f000 80b3 	beq.w	8007a6a <_printf_i+0x182>
 8007904:	d822      	bhi.n	800794c <_printf_i+0x64>
 8007906:	2963      	cmp	r1, #99	; 0x63
 8007908:	d036      	beq.n	8007978 <_printf_i+0x90>
 800790a:	d80a      	bhi.n	8007922 <_printf_i+0x3a>
 800790c:	2900      	cmp	r1, #0
 800790e:	f000 80b9 	beq.w	8007a84 <_printf_i+0x19c>
 8007912:	2958      	cmp	r1, #88	; 0x58
 8007914:	f000 8083 	beq.w	8007a1e <_printf_i+0x136>
 8007918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800791c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007920:	e032      	b.n	8007988 <_printf_i+0xa0>
 8007922:	2964      	cmp	r1, #100	; 0x64
 8007924:	d001      	beq.n	800792a <_printf_i+0x42>
 8007926:	2969      	cmp	r1, #105	; 0x69
 8007928:	d1f6      	bne.n	8007918 <_printf_i+0x30>
 800792a:	6820      	ldr	r0, [r4, #0]
 800792c:	6813      	ldr	r3, [r2, #0]
 800792e:	0605      	lsls	r5, r0, #24
 8007930:	f103 0104 	add.w	r1, r3, #4
 8007934:	d52a      	bpl.n	800798c <_printf_i+0xa4>
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	da03      	bge.n	8007946 <_printf_i+0x5e>
 800793e:	222d      	movs	r2, #45	; 0x2d
 8007940:	425b      	negs	r3, r3
 8007942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007946:	486f      	ldr	r0, [pc, #444]	; (8007b04 <_printf_i+0x21c>)
 8007948:	220a      	movs	r2, #10
 800794a:	e039      	b.n	80079c0 <_printf_i+0xd8>
 800794c:	2973      	cmp	r1, #115	; 0x73
 800794e:	f000 809d 	beq.w	8007a8c <_printf_i+0x1a4>
 8007952:	d808      	bhi.n	8007966 <_printf_i+0x7e>
 8007954:	296f      	cmp	r1, #111	; 0x6f
 8007956:	d020      	beq.n	800799a <_printf_i+0xb2>
 8007958:	2970      	cmp	r1, #112	; 0x70
 800795a:	d1dd      	bne.n	8007918 <_printf_i+0x30>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	f043 0320 	orr.w	r3, r3, #32
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	e003      	b.n	800796e <_printf_i+0x86>
 8007966:	2975      	cmp	r1, #117	; 0x75
 8007968:	d017      	beq.n	800799a <_printf_i+0xb2>
 800796a:	2978      	cmp	r1, #120	; 0x78
 800796c:	d1d4      	bne.n	8007918 <_printf_i+0x30>
 800796e:	2378      	movs	r3, #120	; 0x78
 8007970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007974:	4864      	ldr	r0, [pc, #400]	; (8007b08 <_printf_i+0x220>)
 8007976:	e055      	b.n	8007a24 <_printf_i+0x13c>
 8007978:	6813      	ldr	r3, [r2, #0]
 800797a:	1d19      	adds	r1, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6011      	str	r1, [r2, #0]
 8007980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007988:	2301      	movs	r3, #1
 800798a:	e08c      	b.n	8007aa6 <_printf_i+0x1be>
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6011      	str	r1, [r2, #0]
 8007990:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007994:	bf18      	it	ne
 8007996:	b21b      	sxthne	r3, r3
 8007998:	e7cf      	b.n	800793a <_printf_i+0x52>
 800799a:	6813      	ldr	r3, [r2, #0]
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	1d18      	adds	r0, r3, #4
 80079a0:	6010      	str	r0, [r2, #0]
 80079a2:	0628      	lsls	r0, r5, #24
 80079a4:	d501      	bpl.n	80079aa <_printf_i+0xc2>
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	e002      	b.n	80079b0 <_printf_i+0xc8>
 80079aa:	0668      	lsls	r0, r5, #25
 80079ac:	d5fb      	bpl.n	80079a6 <_printf_i+0xbe>
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	4854      	ldr	r0, [pc, #336]	; (8007b04 <_printf_i+0x21c>)
 80079b2:	296f      	cmp	r1, #111	; 0x6f
 80079b4:	bf14      	ite	ne
 80079b6:	220a      	movne	r2, #10
 80079b8:	2208      	moveq	r2, #8
 80079ba:	2100      	movs	r1, #0
 80079bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079c0:	6865      	ldr	r5, [r4, #4]
 80079c2:	60a5      	str	r5, [r4, #8]
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	f2c0 8095 	blt.w	8007af4 <_printf_i+0x20c>
 80079ca:	6821      	ldr	r1, [r4, #0]
 80079cc:	f021 0104 	bic.w	r1, r1, #4
 80079d0:	6021      	str	r1, [r4, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d13d      	bne.n	8007a52 <_printf_i+0x16a>
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	f040 808e 	bne.w	8007af8 <_printf_i+0x210>
 80079dc:	4665      	mov	r5, ip
 80079de:	2a08      	cmp	r2, #8
 80079e0:	d10b      	bne.n	80079fa <_printf_i+0x112>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	07db      	lsls	r3, r3, #31
 80079e6:	d508      	bpl.n	80079fa <_printf_i+0x112>
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	6862      	ldr	r2, [r4, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	bfde      	ittt	le
 80079f0:	2330      	movle	r3, #48	; 0x30
 80079f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079fa:	ebac 0305 	sub.w	r3, ip, r5
 80079fe:	6123      	str	r3, [r4, #16]
 8007a00:	f8cd 8000 	str.w	r8, [sp]
 8007a04:	463b      	mov	r3, r7
 8007a06:	aa03      	add	r2, sp, #12
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	f7ff fef6 	bl	80077fc <_printf_common>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d14d      	bne.n	8007ab0 <_printf_i+0x1c8>
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	b005      	add	sp, #20
 8007a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a1e:	4839      	ldr	r0, [pc, #228]	; (8007b04 <_printf_i+0x21c>)
 8007a20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	6821      	ldr	r1, [r4, #0]
 8007a28:	1d1d      	adds	r5, r3, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6015      	str	r5, [r2, #0]
 8007a2e:	060a      	lsls	r2, r1, #24
 8007a30:	d50b      	bpl.n	8007a4a <_printf_i+0x162>
 8007a32:	07ca      	lsls	r2, r1, #31
 8007a34:	bf44      	itt	mi
 8007a36:	f041 0120 	orrmi.w	r1, r1, #32
 8007a3a:	6021      	strmi	r1, [r4, #0]
 8007a3c:	b91b      	cbnz	r3, 8007a46 <_printf_i+0x15e>
 8007a3e:	6822      	ldr	r2, [r4, #0]
 8007a40:	f022 0220 	bic.w	r2, r2, #32
 8007a44:	6022      	str	r2, [r4, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	e7b7      	b.n	80079ba <_printf_i+0xd2>
 8007a4a:	064d      	lsls	r5, r1, #25
 8007a4c:	bf48      	it	mi
 8007a4e:	b29b      	uxthmi	r3, r3
 8007a50:	e7ef      	b.n	8007a32 <_printf_i+0x14a>
 8007a52:	4665      	mov	r5, ip
 8007a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a58:	fb02 3311 	mls	r3, r2, r1, r3
 8007a5c:	5cc3      	ldrb	r3, [r0, r3]
 8007a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007a62:	460b      	mov	r3, r1
 8007a64:	2900      	cmp	r1, #0
 8007a66:	d1f5      	bne.n	8007a54 <_printf_i+0x16c>
 8007a68:	e7b9      	b.n	80079de <_printf_i+0xf6>
 8007a6a:	6813      	ldr	r3, [r2, #0]
 8007a6c:	6825      	ldr	r5, [r4, #0]
 8007a6e:	6961      	ldr	r1, [r4, #20]
 8007a70:	1d18      	adds	r0, r3, #4
 8007a72:	6010      	str	r0, [r2, #0]
 8007a74:	0628      	lsls	r0, r5, #24
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	d501      	bpl.n	8007a7e <_printf_i+0x196>
 8007a7a:	6019      	str	r1, [r3, #0]
 8007a7c:	e002      	b.n	8007a84 <_printf_i+0x19c>
 8007a7e:	066a      	lsls	r2, r5, #25
 8007a80:	d5fb      	bpl.n	8007a7a <_printf_i+0x192>
 8007a82:	8019      	strh	r1, [r3, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	4665      	mov	r5, ip
 8007a8a:	e7b9      	b.n	8007a00 <_printf_i+0x118>
 8007a8c:	6813      	ldr	r3, [r2, #0]
 8007a8e:	1d19      	adds	r1, r3, #4
 8007a90:	6011      	str	r1, [r2, #0]
 8007a92:	681d      	ldr	r5, [r3, #0]
 8007a94:	6862      	ldr	r2, [r4, #4]
 8007a96:	2100      	movs	r1, #0
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f7f8 fbf1 	bl	8000280 <memchr>
 8007a9e:	b108      	cbz	r0, 8007aa4 <_printf_i+0x1bc>
 8007aa0:	1b40      	subs	r0, r0, r5
 8007aa2:	6060      	str	r0, [r4, #4]
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	6123      	str	r3, [r4, #16]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aae:	e7a7      	b.n	8007a00 <_printf_i+0x118>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	47c0      	blx	r8
 8007aba:	3001      	adds	r0, #1
 8007abc:	d0aa      	beq.n	8007a14 <_printf_i+0x12c>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	079b      	lsls	r3, r3, #30
 8007ac2:	d413      	bmi.n	8007aec <_printf_i+0x204>
 8007ac4:	68e0      	ldr	r0, [r4, #12]
 8007ac6:	9b03      	ldr	r3, [sp, #12]
 8007ac8:	4298      	cmp	r0, r3
 8007aca:	bfb8      	it	lt
 8007acc:	4618      	movlt	r0, r3
 8007ace:	e7a3      	b.n	8007a18 <_printf_i+0x130>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	464a      	mov	r2, r9
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	47c0      	blx	r8
 8007ada:	3001      	adds	r0, #1
 8007adc:	d09a      	beq.n	8007a14 <_printf_i+0x12c>
 8007ade:	3501      	adds	r5, #1
 8007ae0:	68e3      	ldr	r3, [r4, #12]
 8007ae2:	9a03      	ldr	r2, [sp, #12]
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	42ab      	cmp	r3, r5
 8007ae8:	dcf2      	bgt.n	8007ad0 <_printf_i+0x1e8>
 8007aea:	e7eb      	b.n	8007ac4 <_printf_i+0x1dc>
 8007aec:	2500      	movs	r5, #0
 8007aee:	f104 0919 	add.w	r9, r4, #25
 8007af2:	e7f5      	b.n	8007ae0 <_printf_i+0x1f8>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1ac      	bne.n	8007a52 <_printf_i+0x16a>
 8007af8:	7803      	ldrb	r3, [r0, #0]
 8007afa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007afe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b02:	e76c      	b.n	80079de <_printf_i+0xf6>
 8007b04:	08007d77 	.word	0x08007d77
 8007b08:	08007d88 	.word	0x08007d88

08007b0c <_sbrk_r>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4c06      	ldr	r4, [pc, #24]	; (8007b28 <_sbrk_r+0x1c>)
 8007b10:	2300      	movs	r3, #0
 8007b12:	4605      	mov	r5, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	f7fa fff2 	bl	8002b00 <_sbrk>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_sbrk_r+0x1a>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_sbrk_r+0x1a>
 8007b24:	602b      	str	r3, [r5, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20019954 	.word	0x20019954

08007b2c <memmove>:
 8007b2c:	4288      	cmp	r0, r1
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	eb01 0302 	add.w	r3, r1, r2
 8007b34:	d807      	bhi.n	8007b46 <memmove+0x1a>
 8007b36:	1e42      	subs	r2, r0, #1
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d00a      	beq.n	8007b52 <memmove+0x26>
 8007b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b44:	e7f8      	b.n	8007b38 <memmove+0xc>
 8007b46:	4283      	cmp	r3, r0
 8007b48:	d9f5      	bls.n	8007b36 <memmove+0xa>
 8007b4a:	1881      	adds	r1, r0, r2
 8007b4c:	1ad2      	subs	r2, r2, r3
 8007b4e:	42d3      	cmn	r3, r2
 8007b50:	d100      	bne.n	8007b54 <memmove+0x28>
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b5c:	e7f7      	b.n	8007b4e <memmove+0x22>

08007b5e <__malloc_lock>:
 8007b5e:	4770      	bx	lr

08007b60 <__malloc_unlock>:
 8007b60:	4770      	bx	lr

08007b62 <_realloc_r>:
 8007b62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b64:	4607      	mov	r7, r0
 8007b66:	4614      	mov	r4, r2
 8007b68:	460e      	mov	r6, r1
 8007b6a:	b921      	cbnz	r1, 8007b76 <_realloc_r+0x14>
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b72:	f7ff bc97 	b.w	80074a4 <_malloc_r>
 8007b76:	b922      	cbnz	r2, 8007b82 <_realloc_r+0x20>
 8007b78:	f7ff fc46 	bl	8007408 <_free_r>
 8007b7c:	4625      	mov	r5, r4
 8007b7e:	4628      	mov	r0, r5
 8007b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b82:	f000 f814 	bl	8007bae <_malloc_usable_size_r>
 8007b86:	42a0      	cmp	r0, r4
 8007b88:	d20f      	bcs.n	8007baa <_realloc_r+0x48>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7ff fc89 	bl	80074a4 <_malloc_r>
 8007b92:	4605      	mov	r5, r0
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d0f2      	beq.n	8007b7e <_realloc_r+0x1c>
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4622      	mov	r2, r4
 8007b9c:	f7ff fb75 	bl	800728a <memcpy>
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f7ff fc30 	bl	8007408 <_free_r>
 8007ba8:	e7e9      	b.n	8007b7e <_realloc_r+0x1c>
 8007baa:	4635      	mov	r5, r6
 8007bac:	e7e7      	b.n	8007b7e <_realloc_r+0x1c>

08007bae <_malloc_usable_size_r>:
 8007bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb2:	1f18      	subs	r0, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfbc      	itt	lt
 8007bb8:	580b      	ldrlt	r3, [r1, r0]
 8007bba:	18c0      	addlt	r0, r0, r3
 8007bbc:	4770      	bx	lr
	...

08007bc0 <_gettimeofday>:
 8007bc0:	4b02      	ldr	r3, [pc, #8]	; (8007bcc <_gettimeofday+0xc>)
 8007bc2:	2258      	movs	r2, #88	; 0x58
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	4770      	bx	lr
 8007bcc:	20019954 	.word	0x20019954

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	bf00      	nop
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
