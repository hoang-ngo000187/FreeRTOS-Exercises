
010Cnt_Sema_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000773c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a68  08007a68  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a70  08007a70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a70  08007a70  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000198dc  20000078  08007af0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019954  08007af0  00029954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aff0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003460  00000000  00000000  0003b098  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  0003e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  0003fa20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024403  00000000  00000000  00040db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112d5  00000000  00000000  000651b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d99e9  00000000  00000000  00076488  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014fe71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  0014feec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078b4 	.word	0x080078b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080078b4 	.word	0x080078b4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200198a8 	.word	0x200198a8

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b972 	b.w	800061c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9e08      	ldr	r6, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14b      	bne.n	80003f6 <__udivmoddi4+0xa6>
 800035e:	428a      	cmp	r2, r1
 8000360:	4615      	mov	r5, r2
 8000362:	d967      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0720 	rsb	r7, r2, #32
 800036e:	fa01 f302 	lsl.w	r3, r1, r2
 8000372:	fa20 f707 	lsr.w	r7, r0, r7
 8000376:	4095      	lsls	r5, r2
 8000378:	ea47 0803 	orr.w	r8, r7, r3
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbb8 f7fe 	udiv	r7, r8, lr
 8000388:	fa1f fc85 	uxth.w	ip, r5
 800038c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000390:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000394:	fb07 f10c 	mul.w	r1, r7, ip
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18eb      	adds	r3, r5, r3
 800039e:	f107 30ff 	add.w	r0, r7, #4294967295
 80003a2:	f080 811b 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8118 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003ac:	3f02      	subs	r7, #2
 80003ae:	442b      	add	r3, r5
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	192c      	adds	r4, r5, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8107 	bcs.w	80005e0 <__udivmoddi4+0x290>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	f240 8104 	bls.w	80005e0 <__udivmoddi4+0x290>
 80003d8:	3802      	subs	r0, #2
 80003da:	442c      	add	r4, r5
 80003dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003e0:	eba4 040c 	sub.w	r4, r4, ip
 80003e4:	2700      	movs	r7, #0
 80003e6:	b11e      	cbz	r6, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c6 4300 	strd	r4, r3, [r6]
 80003f0:	4639      	mov	r1, r7
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0xbe>
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	f000 80eb 	beq.w	80005d6 <__udivmoddi4+0x286>
 8000400:	2700      	movs	r7, #0
 8000402:	e9c6 0100 	strd	r0, r1, [r6]
 8000406:	4638      	mov	r0, r7
 8000408:	4639      	mov	r1, r7
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f783 	clz	r7, r3
 8000412:	2f00      	cmp	r7, #0
 8000414:	d147      	bne.n	80004a6 <__udivmoddi4+0x156>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0xd0>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80fa 	bhi.w	8000614 <__udivmoddi4+0x2c4>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0303 	sbc.w	r3, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	4698      	mov	r8, r3
 800042a:	2e00      	cmp	r6, #0
 800042c:	d0e0      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800042e:	e9c6 4800 	strd	r4, r8, [r6]
 8000432:	e7dd      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000434:	b902      	cbnz	r2, 8000438 <__udivmoddi4+0xe8>
 8000436:	deff      	udf	#255	; 0xff
 8000438:	fab2 f282 	clz	r2, r2
 800043c:	2a00      	cmp	r2, #0
 800043e:	f040 808f 	bne.w	8000560 <__udivmoddi4+0x210>
 8000442:	1b49      	subs	r1, r1, r5
 8000444:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000448:	fa1f f885 	uxth.w	r8, r5
 800044c:	2701      	movs	r7, #1
 800044e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000452:	0c23      	lsrs	r3, r4, #16
 8000454:	fb0e 111c 	mls	r1, lr, ip, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb08 f10c 	mul.w	r1, r8, ip
 8000460:	4299      	cmp	r1, r3
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x124>
 8000464:	18eb      	adds	r3, r5, r3
 8000466:	f10c 30ff 	add.w	r0, ip, #4294967295
 800046a:	d202      	bcs.n	8000472 <__udivmoddi4+0x122>
 800046c:	4299      	cmp	r1, r3
 800046e:	f200 80cd 	bhi.w	800060c <__udivmoddi4+0x2bc>
 8000472:	4684      	mov	ip, r0
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	b2a3      	uxth	r3, r4
 8000478:	fbb1 f0fe 	udiv	r0, r1, lr
 800047c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000480:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000484:	fb08 f800 	mul.w	r8, r8, r0
 8000488:	45a0      	cmp	r8, r4
 800048a:	d907      	bls.n	800049c <__udivmoddi4+0x14c>
 800048c:	192c      	adds	r4, r5, r4
 800048e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x14a>
 8000494:	45a0      	cmp	r8, r4
 8000496:	f200 80b6 	bhi.w	8000606 <__udivmoddi4+0x2b6>
 800049a:	4618      	mov	r0, r3
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004a4:	e79f      	b.n	80003e6 <__udivmoddi4+0x96>
 80004a6:	f1c7 0c20 	rsb	ip, r7, #32
 80004aa:	40bb      	lsls	r3, r7
 80004ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004b4:	fa01 f407 	lsl.w	r4, r1, r7
 80004b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004c4:	4325      	orrs	r5, r4
 80004c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ca:	0c2c      	lsrs	r4, r5, #16
 80004cc:	fb08 3319 	mls	r3, r8, r9, r3
 80004d0:	fa1f fa8e 	uxth.w	sl, lr
 80004d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004d8:	fb09 f40a 	mul.w	r4, r9, sl
 80004dc:	429c      	cmp	r4, r3
 80004de:	fa02 f207 	lsl.w	r2, r2, r7
 80004e2:	fa00 f107 	lsl.w	r1, r0, r7
 80004e6:	d90b      	bls.n	8000500 <__udivmoddi4+0x1b0>
 80004e8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f0:	f080 8087 	bcs.w	8000602 <__udivmoddi4+0x2b2>
 80004f4:	429c      	cmp	r4, r3
 80004f6:	f240 8084 	bls.w	8000602 <__udivmoddi4+0x2b2>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4473      	add	r3, lr
 8000500:	1b1b      	subs	r3, r3, r4
 8000502:	b2ad      	uxth	r5, r5
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3310 	mls	r3, r8, r0, r3
 800050c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000510:	fb00 fa0a 	mul.w	sl, r0, sl
 8000514:	45a2      	cmp	sl, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x1da>
 8000518:	eb1e 0404 	adds.w	r4, lr, r4
 800051c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000520:	d26b      	bcs.n	80005fa <__udivmoddi4+0x2aa>
 8000522:	45a2      	cmp	sl, r4
 8000524:	d969      	bls.n	80005fa <__udivmoddi4+0x2aa>
 8000526:	3802      	subs	r0, #2
 8000528:	4474      	add	r4, lr
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	fba0 8902 	umull	r8, r9, r0, r2
 8000532:	eba4 040a 	sub.w	r4, r4, sl
 8000536:	454c      	cmp	r4, r9
 8000538:	46c2      	mov	sl, r8
 800053a:	464b      	mov	r3, r9
 800053c:	d354      	bcc.n	80005e8 <__udivmoddi4+0x298>
 800053e:	d051      	beq.n	80005e4 <__udivmoddi4+0x294>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d069      	beq.n	8000618 <__udivmoddi4+0x2c8>
 8000544:	ebb1 050a 	subs.w	r5, r1, sl
 8000548:	eb64 0403 	sbc.w	r4, r4, r3
 800054c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000550:	40fd      	lsrs	r5, r7
 8000552:	40fc      	lsrs	r4, r7
 8000554:	ea4c 0505 	orr.w	r5, ip, r5
 8000558:	e9c6 5400 	strd	r5, r4, [r6]
 800055c:	2700      	movs	r7, #0
 800055e:	e747      	b.n	80003f0 <__udivmoddi4+0xa0>
 8000560:	f1c2 0320 	rsb	r3, r2, #32
 8000564:	fa20 f703 	lsr.w	r7, r0, r3
 8000568:	4095      	lsls	r5, r2
 800056a:	fa01 f002 	lsl.w	r0, r1, r2
 800056e:	fa21 f303 	lsr.w	r3, r1, r3
 8000572:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000576:	4338      	orrs	r0, r7
 8000578:	0c01      	lsrs	r1, r0, #16
 800057a:	fbb3 f7fe 	udiv	r7, r3, lr
 800057e:	fa1f f885 	uxth.w	r8, r5
 8000582:	fb0e 3317 	mls	r3, lr, r7, r3
 8000586:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058a:	fb07 f308 	mul.w	r3, r7, r8
 800058e:	428b      	cmp	r3, r1
 8000590:	fa04 f402 	lsl.w	r4, r4, r2
 8000594:	d907      	bls.n	80005a6 <__udivmoddi4+0x256>
 8000596:	1869      	adds	r1, r5, r1
 8000598:	f107 3cff 	add.w	ip, r7, #4294967295
 800059c:	d22f      	bcs.n	80005fe <__udivmoddi4+0x2ae>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d92d      	bls.n	80005fe <__udivmoddi4+0x2ae>
 80005a2:	3f02      	subs	r7, #2
 80005a4:	4429      	add	r1, r5
 80005a6:	1acb      	subs	r3, r1, r3
 80005a8:	b281      	uxth	r1, r0
 80005aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80005ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b6:	fb00 f308 	mul.w	r3, r0, r8
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x27e>
 80005be:	1869      	adds	r1, r5, r1
 80005c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005c4:	d217      	bcs.n	80005f6 <__udivmoddi4+0x2a6>
 80005c6:	428b      	cmp	r3, r1
 80005c8:	d915      	bls.n	80005f6 <__udivmoddi4+0x2a6>
 80005ca:	3802      	subs	r0, #2
 80005cc:	4429      	add	r1, r5
 80005ce:	1ac9      	subs	r1, r1, r3
 80005d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005d4:	e73b      	b.n	800044e <__udivmoddi4+0xfe>
 80005d6:	4637      	mov	r7, r6
 80005d8:	4630      	mov	r0, r6
 80005da:	e709      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005dc:	4607      	mov	r7, r0
 80005de:	e6e7      	b.n	80003b0 <__udivmoddi4+0x60>
 80005e0:	4618      	mov	r0, r3
 80005e2:	e6fb      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e4:	4541      	cmp	r1, r8
 80005e6:	d2ab      	bcs.n	8000540 <__udivmoddi4+0x1f0>
 80005e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ec:	eb69 020e 	sbc.w	r2, r9, lr
 80005f0:	3801      	subs	r0, #1
 80005f2:	4613      	mov	r3, r2
 80005f4:	e7a4      	b.n	8000540 <__udivmoddi4+0x1f0>
 80005f6:	4660      	mov	r0, ip
 80005f8:	e7e9      	b.n	80005ce <__udivmoddi4+0x27e>
 80005fa:	4618      	mov	r0, r3
 80005fc:	e795      	b.n	800052a <__udivmoddi4+0x1da>
 80005fe:	4667      	mov	r7, ip
 8000600:	e7d1      	b.n	80005a6 <__udivmoddi4+0x256>
 8000602:	4681      	mov	r9, r0
 8000604:	e77c      	b.n	8000500 <__udivmoddi4+0x1b0>
 8000606:	3802      	subs	r0, #2
 8000608:	442c      	add	r4, r5
 800060a:	e747      	b.n	800049c <__udivmoddi4+0x14c>
 800060c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000610:	442b      	add	r3, r5
 8000612:	e72f      	b.n	8000474 <__udivmoddi4+0x124>
 8000614:	4638      	mov	r0, r7
 8000616:	e708      	b.n	800042a <__udivmoddi4+0xda>
 8000618:	4637      	mov	r7, r6
 800061a:	e6e9      	b.n	80003f0 <__udivmoddi4+0xa0>

0800061c <__aeabi_idiv0>:
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop

08000620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_Init+0x40>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <HAL_Init+0x40>)
 800062a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800062e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_Init+0x40>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_Init+0x40>)
 8000636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800063a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_Init+0x40>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_Init+0x40>)
 8000642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f8d8 	bl	80007fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	2000      	movs	r0, #0
 8000650:	f002 fa16 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000654:	f002 f9a4 	bl	80029a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023c00 	.word	0x40023c00

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	200197d8 	.word	0x200197d8

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200197d8 	.word	0x200197d8

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0b      	blt.n	8000732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 021f 	and.w	r2, r3, #31
 8000720:	4907      	ldr	r1, [pc, #28]	; (8000740 <__NVIC_EnableIRQ+0x38>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	095b      	lsrs	r3, r3, #5
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e100 	.word	0xe000e100

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db0a      	blt.n	800076e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	440b      	add	r3, r1
 8000768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800076c:	e00a      	b.n	8000784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	440b      	add	r3, r1
 8000782:	761a      	strb	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f1c3 0307 	rsb	r3, r3, #7
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	bf28      	it	cs
 80007b6:	2304      	movcs	r3, #4
 80007b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d902      	bls.n	80007c8 <NVIC_EncodePriority+0x30>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b03      	subs	r3, #3
 80007c6:	e000      	b.n	80007ca <NVIC_EncodePriority+0x32>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	401a      	ands	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43d9      	mvns	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff4c 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000826:	f7ff ff61 	bl	80006ec <__NVIC_GetPriorityGrouping>
 800082a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	68b9      	ldr	r1, [r7, #8]
 8000830:	6978      	ldr	r0, [r7, #20]
 8000832:	f7ff ffb1 	bl	8000798 <NVIC_EncodePriority>
 8000836:	4602      	mov	r2, r0
 8000838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff80 	bl	8000744 <__NVIC_SetPriority>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff54 	bl	8000708 <__NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e16b      	b.n	8000b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000884:	2201      	movs	r2, #1
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	4013      	ands	r3, r2
 8000896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	429a      	cmp	r2, r3
 800089e:	f040 815a 	bne.w	8000b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00b      	beq.n	80008c2 <HAL_GPIO_Init+0x5a>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d007      	beq.n	80008c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b6:	2b11      	cmp	r3, #17
 80008b8:	d003      	beq.n	80008c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d130      	bne.n	8000924 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4013      	ands	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008f8:	2201      	movs	r2, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	f003 0201 	and.w	r2, r3, #1
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d003      	beq.n	8000964 <HAL_GPIO_Init+0xfc>
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b12      	cmp	r3, #18
 8000962:	d123      	bne.n	80009ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	08da      	lsrs	r2, r3, #3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3208      	adds	r2, #8
 800096c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	f003 0307 	and.w	r3, r3, #7
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	220f      	movs	r2, #15
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	691a      	ldr	r2, [r3, #16]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	08da      	lsrs	r2, r3, #3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3208      	adds	r2, #8
 80009a6:	69b9      	ldr	r1, [r7, #24]
 80009a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0203 	and.w	r2, r3, #3
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	f000 80b4 	beq.w	8000b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b5f      	ldr	r3, [pc, #380]	; (8000b70 <HAL_GPIO_Init+0x308>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a5e      	ldr	r2, [pc, #376]	; (8000b70 <HAL_GPIO_Init+0x308>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b5c      	ldr	r3, [pc, #368]	; (8000b70 <HAL_GPIO_Init+0x308>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a0a:	4a5a      	ldr	r2, [pc, #360]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <HAL_GPIO_Init+0x310>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d02b      	beq.n	8000a8e <HAL_GPIO_Init+0x226>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <HAL_GPIO_Init+0x314>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d025      	beq.n	8000a8a <HAL_GPIO_Init+0x222>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <HAL_GPIO_Init+0x318>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d01f      	beq.n	8000a86 <HAL_GPIO_Init+0x21e>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4e      	ldr	r2, [pc, #312]	; (8000b84 <HAL_GPIO_Init+0x31c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d019      	beq.n	8000a82 <HAL_GPIO_Init+0x21a>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4d      	ldr	r2, [pc, #308]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d013      	beq.n	8000a7e <HAL_GPIO_Init+0x216>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4c      	ldr	r2, [pc, #304]	; (8000b8c <HAL_GPIO_Init+0x324>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d00d      	beq.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a4b      	ldr	r2, [pc, #300]	; (8000b90 <HAL_GPIO_Init+0x328>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d007      	beq.n	8000a76 <HAL_GPIO_Init+0x20e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a4a      	ldr	r2, [pc, #296]	; (8000b94 <HAL_GPIO_Init+0x32c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d101      	bne.n	8000a72 <HAL_GPIO_Init+0x20a>
 8000a6e:	2307      	movs	r3, #7
 8000a70:	e00e      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a72:	2308      	movs	r3, #8
 8000a74:	e00c      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a76:	2306      	movs	r3, #6
 8000a78:	e00a      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	e008      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a7e:	2304      	movs	r3, #4
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e004      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e002      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x228>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	69fa      	ldr	r2, [r7, #28]
 8000a92:	f002 0203 	and.w	r2, r2, #3
 8000a96:	0092      	lsls	r2, r2, #2
 8000a98:	4093      	lsls	r3, r2
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa0:	4934      	ldr	r1, [pc, #208]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ad2:	4a31      	ldr	r2, [pc, #196]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000afc:	4a26      	ldr	r2, [pc, #152]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b50:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	f67f ae90 	bls.w	8000884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b64:	bf00      	nop
 8000b66:	3724      	adds	r7, #36	; 0x24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40021400 	.word	0x40021400
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40021c00 	.word	0x40021c00
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb8:	e003      	b.n	8000bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e25b      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d075      	beq.n	8000cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bee:	4ba3      	ldr	r3, [pc, #652]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d00c      	beq.n	8000c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bfa:	4ba0      	ldr	r3, [pc, #640]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d112      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4b9d      	ldr	r3, [pc, #628]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c12:	d10b      	bne.n	8000c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	4b99      	ldr	r3, [pc, #612]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d05b      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x108>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d157      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e236      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x74>
 8000c36:	4b91      	ldr	r3, [pc, #580]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a90      	ldr	r2, [pc, #576]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x98>
 8000c4e:	4b8b      	ldr	r3, [pc, #556]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a8a      	ldr	r2, [pc, #552]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b88      	ldr	r3, [pc, #544]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a87      	ldr	r2, [pc, #540]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xb0>
 8000c68:	4b84      	ldr	r3, [pc, #528]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a83      	ldr	r2, [pc, #524]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b81      	ldr	r3, [pc, #516]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a80      	ldr	r2, [pc, #512]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fd00 	bl	800068c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fcfc 	bl	800068c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	; 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e1fb      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	4b76      	ldr	r3, [pc, #472]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xc0>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fcec 	bl	800068c <HAL_GetTick>
 8000cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fce8 	bl	800068c <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	; 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e1e7      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0xe8>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d063      	beq.n	8000dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ce6:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 030c 	and.w	r3, r3, #12
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf2:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cfa:	2b08      	cmp	r3, #8
 8000cfc:	d11c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d116      	bne.n	8000d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0a:	4b5c      	ldr	r3, [pc, #368]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d005      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d001      	beq.n	8000d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e1bb      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d22:	4b56      	ldr	r3, [pc, #344]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4952      	ldr	r1, [pc, #328]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	e03a      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d40:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d46:	f7ff fca1 	bl	800068c <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc9d 	bl	800068c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e19c      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4940      	ldr	r1, [pc, #256]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	600b      	str	r3, [r1, #0]
 8000d80:	e015      	b.n	8000dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d82:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_RCC_OscConfig+0x2b0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc80 	bl	800068c <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc7c 	bl	800068c <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e17b      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	4b36      	ldr	r3, [pc, #216]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1f0      	bne.n	8000d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d030      	beq.n	8000e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d016      	beq.n	8000df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dc8:	f7ff fc60 	bl	800068c <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc5c 	bl	800068c <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e15b      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x200>
 8000dee:	e015      	b.n	8000e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <HAL_RCC_OscConfig+0x2b4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df6:	f7ff fc49 	bl	800068c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fc45 	bl	800068c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e144      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f0      	bne.n	8000dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a0 	beq.w	8000f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e56:	2301      	movs	r3, #1
 8000e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d121      	bne.n	8000eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_RCC_OscConfig+0x2b8>)
 8000e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fc0b 	bl	800068c <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e78:	e011      	b.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	42470000 	.word	0x42470000
 8000e84:	42470e80 	.word	0x42470e80
 8000e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e8c:	f7ff fbfe 	bl	800068c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e0fd      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9e:	4b81      	ldr	r3, [pc, #516]	; (80010a4 <HAL_RCC_OscConfig+0x4d4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d106      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2f0>
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb6:	4a7c      	ldr	r2, [pc, #496]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8000ebe:	e01c      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	d10c      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b77      	ldr	r3, [pc, #476]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ecc:	4a76      	ldr	r2, [pc, #472]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed4:	4b74      	ldr	r3, [pc, #464]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed8:	4a73      	ldr	r2, [pc, #460]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee0:	e00b      	b.n	8000efa <HAL_RCC_OscConfig+0x32a>
 8000ee2:	4b71      	ldr	r3, [pc, #452]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	4a70      	ldr	r2, [pc, #448]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
 8000eee:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef2:	4a6d      	ldr	r2, [pc, #436]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	f023 0304 	bic.w	r3, r3, #4
 8000ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d015      	beq.n	8000f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbc3 	bl	800068c <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f08:	e00a      	b.n	8000f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f7ff fbbf 	bl	800068c <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e0bc      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0ee      	beq.n	8000f0a <HAL_RCC_OscConfig+0x33a>
 8000f2c:	e014      	b.n	8000f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fbad 	bl	800068c <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f34:	e00a      	b.n	8000f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f36:	f7ff fba9 	bl	800068c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e0a6      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ee      	bne.n	8000f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d105      	bne.n	8000f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8092 	beq.w	8001098 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d05c      	beq.n	800103a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d141      	bne.n	800100c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f88:	4b48      	ldr	r3, [pc, #288]	; (80010ac <HAL_RCC_OscConfig+0x4dc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb7d 	bl	800068c <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb79 	bl	800068c <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e078      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	019b      	lsls	r3, r3, #6
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	041b      	lsls	r3, r3, #16
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	061b      	lsls	r3, r3, #24
 8000fd8:	4933      	ldr	r1, [pc, #204]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <HAL_RCC_OscConfig+0x4dc>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb52 	bl	800068c <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb4e 	bl	800068c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e04d      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x41c>
 800100a:	e045      	b.n	8001098 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_RCC_OscConfig+0x4dc>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fb3b 	bl	800068c <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff fb37 	bl	800068c <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e036      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x44a>
 8001038:	e02e      	b.n	8001098 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e029      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <HAL_RCC_OscConfig+0x4d8>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	429a      	cmp	r2, r3
 8001058:	d11c      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001064:	429a      	cmp	r2, r3
 8001066:	d115      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800106e:	4013      	ands	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001074:	4293      	cmp	r3, r2
 8001076:	d10d      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001082:	429a      	cmp	r2, r3
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	42470060 	.word	0x42470060

080010b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0cc      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d90c      	bls.n	80010ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0b8      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800110e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	494d      	ldr	r1, [pc, #308]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d044      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d119      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e07f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d003      	beq.n	800116e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800116a:	2b03      	cmp	r3, #3
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e06f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	4b3b      	ldr	r3, [pc, #236]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e067      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118e:	4b37      	ldr	r3, [pc, #220]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f023 0203 	bic.w	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4934      	ldr	r1, [pc, #208]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	4313      	orrs	r3, r2
 800119e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a0:	f7ff fa74 	bl	800068c <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	e00a      	b.n	80011be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a8:	f7ff fa70 	bl	800068c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e04f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 020c 	and.w	r2, r3, #12
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d1eb      	bne.n	80011a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d20c      	bcs.n	80011f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e032      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4916      	ldr	r1, [pc, #88]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	490e      	ldr	r1, [pc, #56]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	4313      	orrs	r3, r2
 8001234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001236:	f000 f821 	bl	800127c <HAL_RCC_GetSysClockFreq>
 800123a:	4601      	mov	r1, r0
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	fa21 f303 	lsr.w	r3, r1, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f001 fc12 	bl	8002a80 <HAL_InitTick>

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00
 800126c:	40023800 	.word	0x40023800
 8001270:	08007a10 	.word	0x08007a10
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d007      	beq.n	80012ae <HAL_RCC_GetSysClockFreq+0x32>
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d008      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x38>
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f040 80b4 	bne.w	8001410 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012a8:	4b5e      	ldr	r3, [pc, #376]	; (8001424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012aa:	60bb      	str	r3, [r7, #8]
       break;
 80012ac:	e0b3      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012ae:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012b0:	60bb      	str	r3, [r7, #8]
      break;
 80012b2:	e0b0      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012b4:	4b5a      	ldr	r3, [pc, #360]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012be:	4b58      	ldr	r3, [pc, #352]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d04a      	beq.n	8001360 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	099b      	lsrs	r3, r3, #6
 80012d0:	f04f 0400 	mov.w	r4, #0
 80012d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	ea03 0501 	and.w	r5, r3, r1
 80012e0:	ea04 0602 	and.w	r6, r4, r2
 80012e4:	4629      	mov	r1, r5
 80012e6:	4632      	mov	r2, r6
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	f04f 0400 	mov.w	r4, #0
 80012f0:	0154      	lsls	r4, r2, #5
 80012f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012f6:	014b      	lsls	r3, r1, #5
 80012f8:	4619      	mov	r1, r3
 80012fa:	4622      	mov	r2, r4
 80012fc:	1b49      	subs	r1, r1, r5
 80012fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	f04f 0400 	mov.w	r4, #0
 800130a:	0194      	lsls	r4, r2, #6
 800130c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001310:	018b      	lsls	r3, r1, #6
 8001312:	1a5b      	subs	r3, r3, r1
 8001314:	eb64 0402 	sbc.w	r4, r4, r2
 8001318:	f04f 0100 	mov.w	r1, #0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	00e2      	lsls	r2, r4, #3
 8001322:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001326:	00d9      	lsls	r1, r3, #3
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	195b      	adds	r3, r3, r5
 800132e:	eb44 0406 	adc.w	r4, r4, r6
 8001332:	f04f 0100 	mov.w	r1, #0
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	0262      	lsls	r2, r4, #9
 800133c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001340:	0259      	lsls	r1, r3, #9
 8001342:	460b      	mov	r3, r1
 8001344:	4614      	mov	r4, r2
 8001346:	4618      	mov	r0, r3
 8001348:	4621      	mov	r1, r4
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f04f 0400 	mov.w	r4, #0
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	f7fe ffe4 	bl	8000320 <__aeabi_uldivmod>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e049      	b.n	80013f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001360:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	f04f 0400 	mov.w	r4, #0
 800136a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	ea03 0501 	and.w	r5, r3, r1
 8001376:	ea04 0602 	and.w	r6, r4, r2
 800137a:	4629      	mov	r1, r5
 800137c:	4632      	mov	r2, r6
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	f04f 0400 	mov.w	r4, #0
 8001386:	0154      	lsls	r4, r2, #5
 8001388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800138c:	014b      	lsls	r3, r1, #5
 800138e:	4619      	mov	r1, r3
 8001390:	4622      	mov	r2, r4
 8001392:	1b49      	subs	r1, r1, r5
 8001394:	eb62 0206 	sbc.w	r2, r2, r6
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	f04f 0400 	mov.w	r4, #0
 80013a0:	0194      	lsls	r4, r2, #6
 80013a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013a6:	018b      	lsls	r3, r1, #6
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	eb64 0402 	sbc.w	r4, r4, r2
 80013ae:	f04f 0100 	mov.w	r1, #0
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	00e2      	lsls	r2, r4, #3
 80013b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013bc:	00d9      	lsls	r1, r3, #3
 80013be:	460b      	mov	r3, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	195b      	adds	r3, r3, r5
 80013c4:	eb44 0406 	adc.w	r4, r4, r6
 80013c8:	f04f 0100 	mov.w	r1, #0
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	02a2      	lsls	r2, r4, #10
 80013d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013d6:	0299      	lsls	r1, r3, #10
 80013d8:	460b      	mov	r3, r1
 80013da:	4614      	mov	r4, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0400 	mov.w	r4, #0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4623      	mov	r3, r4
 80013ea:	f7fe ff99 	bl	8000320 <__aeabi_uldivmod>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	3301      	adds	r3, #1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	fbb2 f3f3 	udiv	r3, r2, r3
 800140c:	60bb      	str	r3, [r7, #8]
      break;
 800140e:	e002      	b.n	8001416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001412:	60bb      	str	r3, [r7, #8]
      break;
 8001414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001416:	68bb      	ldr	r3, [r7, #8]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	00f42400 	.word	0x00f42400
 8001428:	007a1200 	.word	0x007a1200

0800142c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_RCC_GetHCLKFreq+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001448:	f7ff fff0 	bl	800142c <HAL_RCC_GetHCLKFreq>
 800144c:	4601      	mov	r1, r0
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	0a9b      	lsrs	r3, r3, #10
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	08007a20 	.word	0x08007a20

0800146c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001470:	f7ff ffdc 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001474:	4601      	mov	r1, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0b5b      	lsrs	r3, r3, #13
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	08007a20 	.word	0x08007a20

08001494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	220f      	movs	r2, #15
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_RCC_GetClockConfig+0x60>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 020f 	and.w	r2, r3, #15
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40023c00 	.word	0x40023c00

080014f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e01d      	b.n	8001546 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f815 	bl	800154e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3304      	adds	r3, #4
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f000 f968 	bl	800180c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0201 	orr.w	r2, r2, #1
 8001578:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b06      	cmp	r3, #6
 800158a:	d007      	beq.n	800159c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d122      	bne.n	8001606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d11b      	bne.n	8001606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f06f 0202 	mvn.w	r2, #2
 80015d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f8ee 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 80015f2:	e005      	b.n	8001600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f8e0 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8f1 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b04      	cmp	r3, #4
 8001612:	d122      	bne.n	800165a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b04      	cmp	r3, #4
 8001620:	d11b      	bne.n	800165a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0204 	mvn.w	r2, #4
 800162a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f8c4 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 8001646:	e005      	b.n	8001654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8b6 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8c7 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b08      	cmp	r3, #8
 8001666:	d122      	bne.n	80016ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b08      	cmp	r3, #8
 8001674:	d11b      	bne.n	80016ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f06f 0208 	mvn.w	r2, #8
 800167e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f89a 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 800169a:	e005      	b.n	80016a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f88c 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f89d 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d122      	bne.n	8001702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b10      	cmp	r3, #16
 80016c8:	d11b      	bne.n	8001702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0210 	mvn.w	r2, #16
 80016d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2208      	movs	r2, #8
 80016d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 f870 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 80016ee:	e005      	b.n	80016fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f862 	bl	80017ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f873 	bl	80017e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10e      	bne.n	800172e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d107      	bne.n	800172e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f06f 0201 	mvn.w	r2, #1
 8001726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f001 f91f 	bl	800296c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b80      	cmp	r3, #128	; 0x80
 800173a:	d10e      	bne.n	800175a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b80      	cmp	r3, #128	; 0x80
 8001748:	d107      	bne.n	800175a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f903 	bl	8001960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001764:	2b40      	cmp	r3, #64	; 0x40
 8001766:	d10e      	bne.n	8001786 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001772:	2b40      	cmp	r3, #64	; 0x40
 8001774:	d107      	bne.n	8001786 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800177e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f838 	bl	80017f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0320 	and.w	r3, r3, #32
 8001790:	2b20      	cmp	r3, #32
 8001792:	d10e      	bne.n	80017b2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d107      	bne.n	80017b2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f06f 0220 	mvn.w	r2, #32
 80017aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8cd 	bl	800194c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a40      	ldr	r2, [pc, #256]	; (8001920 <TIM_Base_SetConfig+0x114>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182a:	d00f      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a3d      	ldr	r2, [pc, #244]	; (8001924 <TIM_Base_SetConfig+0x118>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00b      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a3c      	ldr	r2, [pc, #240]	; (8001928 <TIM_Base_SetConfig+0x11c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <TIM_Base_SetConfig+0x120>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d003      	beq.n	800184c <TIM_Base_SetConfig+0x40>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3a      	ldr	r2, [pc, #232]	; (8001930 <TIM_Base_SetConfig+0x124>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d108      	bne.n	800185e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001852:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a2f      	ldr	r2, [pc, #188]	; (8001920 <TIM_Base_SetConfig+0x114>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d02b      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d027      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <TIM_Base_SetConfig+0x118>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d023      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a2b      	ldr	r2, [pc, #172]	; (8001928 <TIM_Base_SetConfig+0x11c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d01f      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a2a      	ldr	r2, [pc, #168]	; (800192c <TIM_Base_SetConfig+0x120>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d01b      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a29      	ldr	r2, [pc, #164]	; (8001930 <TIM_Base_SetConfig+0x124>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d017      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a28      	ldr	r2, [pc, #160]	; (8001934 <TIM_Base_SetConfig+0x128>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a27      	ldr	r2, [pc, #156]	; (8001938 <TIM_Base_SetConfig+0x12c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00f      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <TIM_Base_SetConfig+0x130>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00b      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a25      	ldr	r2, [pc, #148]	; (8001940 <TIM_Base_SetConfig+0x134>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <TIM_Base_SetConfig+0x138>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d003      	beq.n	80018be <TIM_Base_SetConfig+0xb2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a23      	ldr	r2, [pc, #140]	; (8001948 <TIM_Base_SetConfig+0x13c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d108      	bne.n	80018d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <TIM_Base_SetConfig+0x114>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <TIM_Base_SetConfig+0xf8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <TIM_Base_SetConfig+0x124>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d103      	bne.n	800190c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	615a      	str	r2, [r3, #20]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40010000 	.word	0x40010000
 8001924:	40000400 	.word	0x40000400
 8001928:	40000800 	.word	0x40000800
 800192c:	40000c00 	.word	0x40000c00
 8001930:	40010400 	.word	0x40010400
 8001934:	40014000 	.word	0x40014000
 8001938:	40014400 	.word	0x40014400
 800193c:	40014800 	.word	0x40014800
 8001940:	40001800 	.word	0x40001800
 8001944:	40001c00 	.word	0x40001c00
 8001948:	40002000 	.word	0x40002000

0800194c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e03f      	b.n	8001a06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 f828 	bl	80029f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f90b 	bl	8001bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b088      	sub	sp, #32
 8001a12:	af02      	add	r7, sp, #8
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b20      	cmp	r3, #32
 8001a2c:	f040 8083 	bne.w	8001b36 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <HAL_UART_Transmit+0x2e>
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e07b      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_UART_Transmit+0x40>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e074      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2221      	movs	r2, #33	; 0x21
 8001a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a64:	f7fe fe12 	bl	800068c <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a7e:	e042      	b.n	8001b06 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a96:	d122      	bne.n	8001ade <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f84c 	bl	8001b40 <UART_WaitOnFlagUntilTimeout>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e042      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ac4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	e017      	b.n	8001b06 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	e013      	b.n	8001b06 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f829 	bl	8001b40 <UART_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e01f      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1b7      	bne.n	8001a80 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f810 	bl	8001b40 <UART_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e006      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b50:	e02c      	b.n	8001bac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d028      	beq.n	8001bac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b60:	f7fe fd94 	bl	800068c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d21d      	bcs.n	8001bac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e00f      	b.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d0c3      	beq.n	8001b52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c16:	f023 030c 	bic.w	r3, r3, #12
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c42:	f040 818b 	bne.w	8001f5c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4ac1      	ldr	r2, [pc, #772]	; (8001f50 <UART_SetConfig+0x37c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d005      	beq.n	8001c5c <UART_SetConfig+0x88>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4abf      	ldr	r2, [pc, #764]	; (8001f54 <UART_SetConfig+0x380>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	f040 80bd 	bne.w	8001dd6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c5c:	f7ff fc06 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8001c60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	461d      	mov	r5, r3
 8001c66:	f04f 0600 	mov.w	r6, #0
 8001c6a:	46a8      	mov	r8, r5
 8001c6c:	46b1      	mov	r9, r6
 8001c6e:	eb18 0308 	adds.w	r3, r8, r8
 8001c72:	eb49 0409 	adc.w	r4, r9, r9
 8001c76:	4698      	mov	r8, r3
 8001c78:	46a1      	mov	r9, r4
 8001c7a:	eb18 0805 	adds.w	r8, r8, r5
 8001c7e:	eb49 0906 	adc.w	r9, r9, r6
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001c8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001c92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001c96:	4688      	mov	r8, r1
 8001c98:	4691      	mov	r9, r2
 8001c9a:	eb18 0005 	adds.w	r0, r8, r5
 8001c9e:	eb49 0106 	adc.w	r1, r9, r6
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	f04f 0600 	mov.w	r6, #0
 8001cac:	196b      	adds	r3, r5, r5
 8001cae:	eb46 0406 	adc.w	r4, r6, r6
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	f7fe fb33 	bl	8000320 <__aeabi_uldivmod>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	460c      	mov	r4, r1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4ba5      	ldr	r3, [pc, #660]	; (8001f58 <UART_SetConfig+0x384>)
 8001cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	461d      	mov	r5, r3
 8001cd0:	f04f 0600 	mov.w	r6, #0
 8001cd4:	46a9      	mov	r9, r5
 8001cd6:	46b2      	mov	sl, r6
 8001cd8:	eb19 0309 	adds.w	r3, r9, r9
 8001cdc:	eb4a 040a 	adc.w	r4, sl, sl
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	46a2      	mov	sl, r4
 8001ce4:	eb19 0905 	adds.w	r9, r9, r5
 8001ce8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001cfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d00:	4689      	mov	r9, r1
 8001d02:	4692      	mov	sl, r2
 8001d04:	eb19 0005 	adds.w	r0, r9, r5
 8001d08:	eb4a 0106 	adc.w	r1, sl, r6
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	461d      	mov	r5, r3
 8001d12:	f04f 0600 	mov.w	r6, #0
 8001d16:	196b      	adds	r3, r5, r5
 8001d18:	eb46 0406 	adc.w	r4, r6, r6
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4623      	mov	r3, r4
 8001d20:	f7fe fafe 	bl	8000320 <__aeabi_uldivmod>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b8b      	ldr	r3, [pc, #556]	; (8001f58 <UART_SetConfig+0x384>)
 8001d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001d30:	095b      	lsrs	r3, r3, #5
 8001d32:	2164      	movs	r1, #100	; 0x64
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	3332      	adds	r3, #50	; 0x32
 8001d3e:	4a86      	ldr	r2, [pc, #536]	; (8001f58 <UART_SetConfig+0x384>)
 8001d40:	fba2 2303 	umull	r2, r3, r2, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d4c:	4498      	add	r8, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	461d      	mov	r5, r3
 8001d52:	f04f 0600 	mov.w	r6, #0
 8001d56:	46a9      	mov	r9, r5
 8001d58:	46b2      	mov	sl, r6
 8001d5a:	eb19 0309 	adds.w	r3, r9, r9
 8001d5e:	eb4a 040a 	adc.w	r4, sl, sl
 8001d62:	4699      	mov	r9, r3
 8001d64:	46a2      	mov	sl, r4
 8001d66:	eb19 0905 	adds.w	r9, r9, r5
 8001d6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d82:	4689      	mov	r9, r1
 8001d84:	4692      	mov	sl, r2
 8001d86:	eb19 0005 	adds.w	r0, r9, r5
 8001d8a:	eb4a 0106 	adc.w	r1, sl, r6
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	461d      	mov	r5, r3
 8001d94:	f04f 0600 	mov.w	r6, #0
 8001d98:	196b      	adds	r3, r5, r5
 8001d9a:	eb46 0406 	adc.w	r4, r6, r6
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fabd 	bl	8000320 <__aeabi_uldivmod>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <UART_SetConfig+0x384>)
 8001dae:	fba3 1302 	umull	r1, r3, r3, r2
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2164      	movs	r1, #100	; 0x64
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	4a65      	ldr	r2, [pc, #404]	; (8001f58 <UART_SetConfig+0x384>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	f003 0207 	and.w	r2, r3, #7
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4442      	add	r2, r8
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	e26f      	b.n	80022b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dd6:	f7ff fb35 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8001dda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	461d      	mov	r5, r3
 8001de0:	f04f 0600 	mov.w	r6, #0
 8001de4:	46a8      	mov	r8, r5
 8001de6:	46b1      	mov	r9, r6
 8001de8:	eb18 0308 	adds.w	r3, r8, r8
 8001dec:	eb49 0409 	adc.w	r4, r9, r9
 8001df0:	4698      	mov	r8, r3
 8001df2:	46a1      	mov	r9, r4
 8001df4:	eb18 0805 	adds.w	r8, r8, r5
 8001df8:	eb49 0906 	adc.w	r9, r9, r6
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e10:	4688      	mov	r8, r1
 8001e12:	4691      	mov	r9, r2
 8001e14:	eb18 0005 	adds.w	r0, r8, r5
 8001e18:	eb49 0106 	adc.w	r1, r9, r6
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	461d      	mov	r5, r3
 8001e22:	f04f 0600 	mov.w	r6, #0
 8001e26:	196b      	adds	r3, r5, r5
 8001e28:	eb46 0406 	adc.w	r4, r6, r6
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4623      	mov	r3, r4
 8001e30:	f7fe fa76 	bl	8000320 <__aeabi_uldivmod>
 8001e34:	4603      	mov	r3, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <UART_SetConfig+0x384>)
 8001e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	461d      	mov	r5, r3
 8001e4a:	f04f 0600 	mov.w	r6, #0
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	46b2      	mov	sl, r6
 8001e52:	eb19 0309 	adds.w	r3, r9, r9
 8001e56:	eb4a 040a 	adc.w	r4, sl, sl
 8001e5a:	4699      	mov	r9, r3
 8001e5c:	46a2      	mov	sl, r4
 8001e5e:	eb19 0905 	adds.w	r9, r9, r5
 8001e62:	eb4a 0a06 	adc.w	sl, sl, r6
 8001e66:	f04f 0100 	mov.w	r1, #0
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001e7a:	4689      	mov	r9, r1
 8001e7c:	4692      	mov	sl, r2
 8001e7e:	eb19 0005 	adds.w	r0, r9, r5
 8001e82:	eb4a 0106 	adc.w	r1, sl, r6
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	461d      	mov	r5, r3
 8001e8c:	f04f 0600 	mov.w	r6, #0
 8001e90:	196b      	adds	r3, r5, r5
 8001e92:	eb46 0406 	adc.w	r4, r6, r6
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	f7fe fa41 	bl	8000320 <__aeabi_uldivmod>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	460c      	mov	r4, r1
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <UART_SetConfig+0x384>)
 8001ea6:	fba3 1302 	umull	r1, r3, r3, r2
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2164      	movs	r1, #100	; 0x64
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	3332      	adds	r3, #50	; 0x32
 8001eb8:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <UART_SetConfig+0x384>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ec6:	4498      	add	r8, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	461d      	mov	r5, r3
 8001ecc:	f04f 0600 	mov.w	r6, #0
 8001ed0:	46a9      	mov	r9, r5
 8001ed2:	46b2      	mov	sl, r6
 8001ed4:	eb19 0309 	adds.w	r3, r9, r9
 8001ed8:	eb4a 040a 	adc.w	r4, sl, sl
 8001edc:	4699      	mov	r9, r3
 8001ede:	46a2      	mov	sl, r4
 8001ee0:	eb19 0905 	adds.w	r9, r9, r5
 8001ee4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ef4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001efc:	4689      	mov	r9, r1
 8001efe:	4692      	mov	sl, r2
 8001f00:	eb19 0005 	adds.w	r0, r9, r5
 8001f04:	eb4a 0106 	adc.w	r1, sl, r6
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	f04f 0600 	mov.w	r6, #0
 8001f12:	196b      	adds	r3, r5, r5
 8001f14:	eb46 0406 	adc.w	r4, r6, r6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	f7fe fa00 	bl	8000320 <__aeabi_uldivmod>
 8001f20:	4603      	mov	r3, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <UART_SetConfig+0x384>)
 8001f28:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	2164      	movs	r1, #100	; 0x64
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <UART_SetConfig+0x384>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	f003 0207 	and.w	r2, r3, #7
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4442      	add	r2, r8
 8001f4c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001f4e:	e1b2      	b.n	80022b6 <UART_SetConfig+0x6e2>
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4ad7      	ldr	r2, [pc, #860]	; (80022c0 <UART_SetConfig+0x6ec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d005      	beq.n	8001f72 <UART_SetConfig+0x39e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4ad6      	ldr	r2, [pc, #856]	; (80022c4 <UART_SetConfig+0x6f0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f040 80d1 	bne.w	8002114 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f72:	f7ff fa7b 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8001f76:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	f04f 0b00 	mov.w	fp, #0
 8001f80:	46d0      	mov	r8, sl
 8001f82:	46d9      	mov	r9, fp
 8001f84:	eb18 0308 	adds.w	r3, r8, r8
 8001f88:	eb49 0409 	adc.w	r4, r9, r9
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	46a1      	mov	r9, r4
 8001f90:	eb18 080a 	adds.w	r8, r8, sl
 8001f94:	eb49 090b 	adc.w	r9, r9, fp
 8001f98:	f04f 0100 	mov.w	r1, #0
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fa4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fa8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fac:	4688      	mov	r8, r1
 8001fae:	4691      	mov	r9, r2
 8001fb0:	eb1a 0508 	adds.w	r5, sl, r8
 8001fb4:	eb4b 0609 	adc.w	r6, fp, r9
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	f04f 0400 	mov.w	r4, #0
 8001fca:	0094      	lsls	r4, r2, #2
 8001fcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001fd0:	008b      	lsls	r3, r1, #2
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	4631      	mov	r1, r6
 8001fda:	f7fe f9a1 	bl	8000320 <__aeabi_uldivmod>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4bb8      	ldr	r3, [pc, #736]	; (80022c8 <UART_SetConfig+0x6f4>)
 8001fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	469b      	mov	fp, r3
 8001ff4:	f04f 0c00 	mov.w	ip, #0
 8001ff8:	46d9      	mov	r9, fp
 8001ffa:	46e2      	mov	sl, ip
 8001ffc:	eb19 0309 	adds.w	r3, r9, r9
 8002000:	eb4a 040a 	adc.w	r4, sl, sl
 8002004:	4699      	mov	r9, r3
 8002006:	46a2      	mov	sl, r4
 8002008:	eb19 090b 	adds.w	r9, r9, fp
 800200c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800201c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002020:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002024:	4689      	mov	r9, r1
 8002026:	4692      	mov	sl, r2
 8002028:	eb1b 0509 	adds.w	r5, fp, r9
 800202c:	eb4c 060a 	adc.w	r6, ip, sl
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f04f 0400 	mov.w	r4, #0
 8002042:	0094      	lsls	r4, r2, #2
 8002044:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002048:	008b      	lsls	r3, r1, #2
 800204a:	461a      	mov	r2, r3
 800204c:	4623      	mov	r3, r4
 800204e:	4628      	mov	r0, r5
 8002050:	4631      	mov	r1, r6
 8002052:	f7fe f965 	bl	8000320 <__aeabi_uldivmod>
 8002056:	4603      	mov	r3, r0
 8002058:	460c      	mov	r4, r1
 800205a:	461a      	mov	r2, r3
 800205c:	4b9a      	ldr	r3, [pc, #616]	; (80022c8 <UART_SetConfig+0x6f4>)
 800205e:	fba3 1302 	umull	r1, r3, r3, r2
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2164      	movs	r1, #100	; 0x64
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	3332      	adds	r3, #50	; 0x32
 8002070:	4a95      	ldr	r2, [pc, #596]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002072:	fba2 2303 	umull	r2, r3, r2, r3
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800207c:	4498      	add	r8, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	469b      	mov	fp, r3
 8002082:	f04f 0c00 	mov.w	ip, #0
 8002086:	46d9      	mov	r9, fp
 8002088:	46e2      	mov	sl, ip
 800208a:	eb19 0309 	adds.w	r3, r9, r9
 800208e:	eb4a 040a 	adc.w	r4, sl, sl
 8002092:	4699      	mov	r9, r3
 8002094:	46a2      	mov	sl, r4
 8002096:	eb19 090b 	adds.w	r9, r9, fp
 800209a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020b2:	4689      	mov	r9, r1
 80020b4:	4692      	mov	sl, r2
 80020b6:	eb1b 0509 	adds.w	r5, fp, r9
 80020ba:	eb4c 060a 	adc.w	r6, ip, sl
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	f04f 0400 	mov.w	r4, #0
 80020d0:	0094      	lsls	r4, r2, #2
 80020d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80020d6:	008b      	lsls	r3, r1, #2
 80020d8:	461a      	mov	r2, r3
 80020da:	4623      	mov	r3, r4
 80020dc:	4628      	mov	r0, r5
 80020de:	4631      	mov	r1, r6
 80020e0:	f7fe f91e 	bl	8000320 <__aeabi_uldivmod>
 80020e4:	4603      	mov	r3, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <UART_SetConfig+0x6f4>)
 80020ec:	fba3 1302 	umull	r1, r3, r3, r2
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	2164      	movs	r1, #100	; 0x64
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	3332      	adds	r3, #50	; 0x32
 80020fe:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4442      	add	r2, r8
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e0d0      	b.n	80022b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002114:	f7ff f996 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8002118:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	469a      	mov	sl, r3
 800211e:	f04f 0b00 	mov.w	fp, #0
 8002122:	46d0      	mov	r8, sl
 8002124:	46d9      	mov	r9, fp
 8002126:	eb18 0308 	adds.w	r3, r8, r8
 800212a:	eb49 0409 	adc.w	r4, r9, r9
 800212e:	4698      	mov	r8, r3
 8002130:	46a1      	mov	r9, r4
 8002132:	eb18 080a 	adds.w	r8, r8, sl
 8002136:	eb49 090b 	adc.w	r9, r9, fp
 800213a:	f04f 0100 	mov.w	r1, #0
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002146:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800214a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800214e:	4688      	mov	r8, r1
 8002150:	4691      	mov	r9, r2
 8002152:	eb1a 0508 	adds.w	r5, sl, r8
 8002156:	eb4b 0609 	adc.w	r6, fp, r9
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	0094      	lsls	r4, r2, #2
 800216e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002172:	008b      	lsls	r3, r1, #2
 8002174:	461a      	mov	r2, r3
 8002176:	4623      	mov	r3, r4
 8002178:	4628      	mov	r0, r5
 800217a:	4631      	mov	r1, r6
 800217c:	f7fe f8d0 	bl	8000320 <__aeabi_uldivmod>
 8002180:	4603      	mov	r3, r0
 8002182:	460c      	mov	r4, r1
 8002184:	461a      	mov	r2, r3
 8002186:	4b50      	ldr	r3, [pc, #320]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002188:	fba3 2302 	umull	r2, r3, r3, r2
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	469b      	mov	fp, r3
 8002196:	f04f 0c00 	mov.w	ip, #0
 800219a:	46d9      	mov	r9, fp
 800219c:	46e2      	mov	sl, ip
 800219e:	eb19 0309 	adds.w	r3, r9, r9
 80021a2:	eb4a 040a 	adc.w	r4, sl, sl
 80021a6:	4699      	mov	r9, r3
 80021a8:	46a2      	mov	sl, r4
 80021aa:	eb19 090b 	adds.w	r9, r9, fp
 80021ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80021b2:	f04f 0100 	mov.w	r1, #0
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021c6:	4689      	mov	r9, r1
 80021c8:	4692      	mov	sl, r2
 80021ca:	eb1b 0509 	adds.w	r5, fp, r9
 80021ce:	eb4c 060a 	adc.w	r6, ip, sl
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	f04f 0400 	mov.w	r4, #0
 80021e4:	0094      	lsls	r4, r2, #2
 80021e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021ea:	008b      	lsls	r3, r1, #2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	4628      	mov	r0, r5
 80021f2:	4631      	mov	r1, r6
 80021f4:	f7fe f894 	bl	8000320 <__aeabi_uldivmod>
 80021f8:	4603      	mov	r3, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002200:	fba3 1302 	umull	r1, r3, r3, r2
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	2164      	movs	r1, #100	; 0x64
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	3332      	adds	r3, #50	; 0x32
 8002212:	4a2d      	ldr	r2, [pc, #180]	; (80022c8 <UART_SetConfig+0x6f4>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221e:	4498      	add	r8, r3
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	469b      	mov	fp, r3
 8002224:	f04f 0c00 	mov.w	ip, #0
 8002228:	46d9      	mov	r9, fp
 800222a:	46e2      	mov	sl, ip
 800222c:	eb19 0309 	adds.w	r3, r9, r9
 8002230:	eb4a 040a 	adc.w	r4, sl, sl
 8002234:	4699      	mov	r9, r3
 8002236:	46a2      	mov	sl, r4
 8002238:	eb19 090b 	adds.w	r9, r9, fp
 800223c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002240:	f04f 0100 	mov.w	r1, #0
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800224c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002250:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002254:	4689      	mov	r9, r1
 8002256:	4692      	mov	sl, r2
 8002258:	eb1b 0509 	adds.w	r5, fp, r9
 800225c:	eb4c 060a 	adc.w	r6, ip, sl
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0094      	lsls	r4, r2, #2
 8002274:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	461a      	mov	r2, r3
 800227c:	4623      	mov	r3, r4
 800227e:	4628      	mov	r0, r5
 8002280:	4631      	mov	r1, r6
 8002282:	f7fe f84d 	bl	8000320 <__aeabi_uldivmod>
 8002286:	4603      	mov	r3, r0
 8002288:	460c      	mov	r4, r1
 800228a:	461a      	mov	r2, r3
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <UART_SetConfig+0x6f4>)
 800228e:	fba3 1302 	umull	r1, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2164      	movs	r1, #100	; 0x64
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	; 0x32
 80022a0:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <UART_SetConfig+0x6f4>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	f003 020f 	and.w	r2, r3, #15
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4442      	add	r2, r8
 80022b2:	609a      	str	r2, [r3, #8]
}
 80022b4:	e7ff      	b.n	80022b6 <UART_SetConfig+0x6e2>
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c0:	40011000 	.word	0x40011000
 80022c4:	40011400 	.word	0x40011400
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <__NVIC_EnableIRQ>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPendingIRQ>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0c      	blt.n	8002334 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_SetPendingIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	3340      	adds	r3, #64	; 0x40
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239e:	f7fe f93f 	bl	8000620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a2:	f000 f855 	bl	8002450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a6:	f000 f8e7 	bl	8002578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023aa:	f000 f8bb 	bl	8002524 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printmsg("Demo of usage of counting semaphore\r\n");
 80023ae:	4822      	ldr	r0, [pc, #136]	; (8002438 <main+0xa0>)
 80023b0:	f000 fab6 	bl	8002920 <printmsg>

  /*The semaphore is created to have a maximum count value of 10, and an initial count value of 0.*/
  xCountingSemaphore = xSemaphoreCreateCounting(10, 0);
 80023b4:	2100      	movs	r1, #0
 80023b6:	200a      	movs	r0, #10
 80023b8:	f000 fdec 	bl	8002f94 <xQueueCreateCountingSemaphore>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <main+0xa4>)
 80023c0:	601a      	str	r2, [r3, #0]

  if( xCountingSemaphore != NULL )
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <main+0xa4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d035      	beq.n	8002436 <main+0x9e>
  {
	  /* Enable the button interrupt and set its priority. */
	  SetupSoftwareInterrupt();
 80023ca:	f000 fa9d 	bl	8002908 <SetupSoftwareInterrupt>

	  /* Create the 'handler' task.  This is the task that will be synchronized
		with the interrupt.  The handler task is created with a lower priority than Periodic Task */
	  status = xTaskCreate(HandlerTask_handler, "Handler", 500, NULL, 1, NULL );
 80023ce:	2300      	movs	r3, #0
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	2301      	movs	r3, #1
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023dc:	4918      	ldr	r1, [pc, #96]	; (8002440 <main+0xa8>)
 80023de:	4819      	ldr	r0, [pc, #100]	; (8002444 <main+0xac>)
 80023e0:	f001 fa32 	bl	8003848 <xTaskCreate>
 80023e4:	60f8      	str	r0, [r7, #12]
	  configASSERT(status == pdPASS);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d009      	beq.n	8002400 <main+0x68>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	e7fe      	b.n	80023fe <main+0x66>

	  /* Create the task that will periodically generate a software interrupt.
		This is created with a higher priority than the handler task to ensure it will
		get preempted each time the handler task exist the Blocked state. */
	  status = xTaskCreate(PeriodicTask_handler, "Periodic", 500, NULL, 3, NULL );
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2303      	movs	r3, #3
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800240e:	490e      	ldr	r1, [pc, #56]	; (8002448 <main+0xb0>)
 8002410:	480e      	ldr	r0, [pc, #56]	; (800244c <main+0xb4>)
 8002412:	f001 fa19 	bl	8003848 <xTaskCreate>
 8002416:	60f8      	str	r0, [r7, #12]
	  configASSERT(status == pdPASS);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d009      	beq.n	8002432 <main+0x9a>
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	e7fe      	b.n	8002430 <main+0x98>

	  /* Start the scheduler so the created tasks start executing. */
	  vTaskStartScheduler();
 8002432:	f001 fbd9 	bl	8003be8 <vTaskStartScheduler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002436:	e7fe      	b.n	8002436 <main+0x9e>
 8002438:	080078cc 	.word	0x080078cc
 800243c:	200197e0 	.word	0x200197e0
 8002440:	080078f4 	.word	0x080078f4
 8002444:	08002861 	.word	0x08002861
 8002448:	080078fc 	.word	0x080078fc
 800244c:	08002835 	.word	0x08002835

08002450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b094      	sub	sp, #80	; 0x50
 8002454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002456:	f107 0320 	add.w	r3, r7, #32
 800245a:	2230      	movs	r2, #48	; 0x30
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f004 fe24 	bl	80070ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <SystemClock_Config+0xcc>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <SystemClock_Config+0xcc>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002482:	6413      	str	r3, [r2, #64]	; 0x40
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <SystemClock_Config+0xcc>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <SystemClock_Config+0xd0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a21      	ldr	r2, [pc, #132]	; (8002520 <SystemClock_Config+0xd0>)
 800249a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <SystemClock_Config+0xd0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ac:	2302      	movs	r3, #2
 80024ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b4:	2310      	movs	r3, #16
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024b8:	2302      	movs	r3, #2
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024bc:	2300      	movs	r3, #0
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024c0:	2308      	movs	r3, #8
 80024c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80024c4:	2332      	movs	r3, #50	; 0x32
 80024c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024c8:	2304      	movs	r3, #4
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024cc:	2307      	movs	r3, #7
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d0:	f107 0320 	add.w	r3, r7, #32
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fb7b 	bl	8000bd0 <HAL_RCC_OscConfig>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024e0:	f000 fa56 	bl	8002990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024e4:	230f      	movs	r3, #15
 80024e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80024f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fdd4 	bl	80010b0 <HAL_RCC_ClockConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800250e:	f000 fa3f 	bl	8002990 <Error_Handler>
  }
}
 8002512:	bf00      	nop
 8002514:	3750      	adds	r7, #80	; 0x50
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <MX_USART2_UART_Init+0x50>)
 800252c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <MX_USART2_UART_Init+0x4c>)
 800255c:	f7ff fa0a 	bl	8001974 <HAL_UART_Init>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002566:	f000 fa13 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200197e8 	.word	0x200197e8
 8002574:	40004400 	.word	0x40004400

08002578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	60da      	str	r2, [r3, #12]
 800258c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	4ba1      	ldr	r3, [pc, #644]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4aa0      	ldr	r2, [pc, #640]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b9e      	ldr	r3, [pc, #632]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	4b9a      	ldr	r3, [pc, #616]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a99      	ldr	r2, [pc, #612]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b97      	ldr	r3, [pc, #604]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b93      	ldr	r3, [pc, #588]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a92      	ldr	r2, [pc, #584]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b90      	ldr	r3, [pc, #576]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b8c      	ldr	r3, [pc, #560]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a8b      	ldr	r2, [pc, #556]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <MX_GPIO_Init+0x2a0>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b85      	ldr	r3, [pc, #532]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a84      	ldr	r2, [pc, #528]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b82      	ldr	r3, [pc, #520]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	4b7e      	ldr	r3, [pc, #504]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a7d      	ldr	r2, [pc, #500]	; (8002818 <MX_GPIO_Init+0x2a0>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <MX_GPIO_Init+0x2a0>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	2108      	movs	r1, #8
 800263a:	4878      	ldr	r0, [pc, #480]	; (800281c <MX_GPIO_Init+0x2a4>)
 800263c:	f7fe faae 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	2101      	movs	r1, #1
 8002644:	4876      	ldr	r0, [pc, #472]	; (8002820 <MX_GPIO_Init+0x2a8>)
 8002646:	f7fe faa9 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800264a:	2200      	movs	r2, #0
 800264c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002650:	4874      	ldr	r0, [pc, #464]	; (8002824 <MX_GPIO_Init+0x2ac>)
 8002652:	f7fe faa3 	bl	8000b9c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002656:	2308      	movs	r3, #8
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265a:	2301      	movs	r3, #1
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002666:	f107 031c 	add.w	r3, r7, #28
 800266a:	4619      	mov	r1, r3
 800266c:	486b      	ldr	r0, [pc, #428]	; (800281c <MX_GPIO_Init+0x2a4>)
 800266e:	f7fe f8fb 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002676:	2301      	movs	r3, #1
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	4619      	mov	r1, r3
 8002688:	4865      	ldr	r0, [pc, #404]	; (8002820 <MX_GPIO_Init+0x2a8>)
 800268a:	f7fe f8ed 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800268e:	2308      	movs	r3, #8
 8002690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800269e:	2305      	movs	r3, #5
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	485d      	ldr	r0, [pc, #372]	; (8002820 <MX_GPIO_Init+0x2a8>)
 80026aa:	f7fe f8dd 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026b2:	4b5d      	ldr	r3, [pc, #372]	; (8002828 <MX_GPIO_Init+0x2b0>)
 80026b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	485a      	ldr	r0, [pc, #360]	; (800282c <MX_GPIO_Init+0x2b4>)
 80026c2:	f7fe f8d1 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80026c6:	2310      	movs	r3, #16
 80026c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d6:	2306      	movs	r3, #6
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4852      	ldr	r0, [pc, #328]	; (800282c <MX_GPIO_Init+0x2b4>)
 80026e2:	f7fe f8c1 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80026e6:	23e0      	movs	r3, #224	; 0xe0
 80026e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026f6:	2305      	movs	r3, #5
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4619      	mov	r1, r3
 8002700:	484a      	ldr	r0, [pc, #296]	; (800282c <MX_GPIO_Init+0x2b4>)
 8002702:	f7fe f8b1 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002706:	2304      	movs	r3, #4
 8002708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270a:	2300      	movs	r3, #0
 800270c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	4845      	ldr	r0, [pc, #276]	; (8002830 <MX_GPIO_Init+0x2b8>)
 800271a:	f7fe f8a5 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800271e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002730:	2305      	movs	r3, #5
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	4619      	mov	r1, r3
 800273a:	483d      	ldr	r0, [pc, #244]	; (8002830 <MX_GPIO_Init+0x2b8>)
 800273c:	f7fe f894 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002740:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002744:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2301      	movs	r3, #1
 8002748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	4832      	ldr	r0, [pc, #200]	; (8002824 <MX_GPIO_Init+0x2ac>)
 800275a:	f7fe f885 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800275e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002770:	2306      	movs	r3, #6
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4619      	mov	r1, r3
 800277a:	4829      	ldr	r0, [pc, #164]	; (8002820 <MX_GPIO_Init+0x2a8>)
 800277c:	f7fe f874 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4825      	ldr	r0, [pc, #148]	; (800282c <MX_GPIO_Init+0x2b4>)
 8002796:	f7fe f867 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800279a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800279e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027ac:	230a      	movs	r3, #10
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	481d      	ldr	r0, [pc, #116]	; (800282c <MX_GPIO_Init+0x2b4>)
 80027b8:	f7fe f856 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80027bc:	2320      	movs	r3, #32
 80027be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	4619      	mov	r1, r3
 80027ce:	4815      	ldr	r0, [pc, #84]	; (8002824 <MX_GPIO_Init+0x2ac>)
 80027d0:	f7fe f84a 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80027d4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80027d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027da:	2312      	movs	r3, #18
 80027dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027de:	2301      	movs	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e6:	2304      	movs	r3, #4
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	480f      	ldr	r0, [pc, #60]	; (8002830 <MX_GPIO_Init+0x2b8>)
 80027f2:	f7fe f839 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_GPIO_Init+0x2b0>)
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <MX_GPIO_Init+0x2a4>)
 800280a:	f7fe f82d 	bl	8000868 <HAL_GPIO_Init>

}
 800280e:	bf00      	nop
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	40021000 	.word	0x40021000
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	10120000 	.word	0x10120000
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400

08002834 <PeriodicTask_handler>:

/* USER CODE BEGIN 4 */
static void PeriodicTask_handler(void *pvParameters)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* This task is just used to 'simulate' an interrupt.
		 * This is done by periodically generating a software interrupt. */
		vTaskDelay(pdMS_TO_TICKS(500));
 800283c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002840:	f001 f99a 	bl	8003b78 <vTaskDelay>

		printmsg("Periodic task - Pending the interrupt.\r\n");
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <PeriodicTask_handler+0x24>)
 8002846:	f000 f86b 	bl	8002920 <printmsg>
		 //pend the interrupt
		NVIC_SetPendingIRQ(EXTI15_10_IRQn);
 800284a:	2028      	movs	r0, #40	; 0x28
 800284c:	f7ff fd5c 	bl	8002308 <__NVIC_SetPendingIRQ>

		printmsg("Periodic task - Resuming.\r\n");
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <PeriodicTask_handler+0x28>)
 8002852:	f000 f865 	bl	8002920 <printmsg>
		vTaskDelay(pdMS_TO_TICKS(500));
 8002856:	e7f1      	b.n	800283c <PeriodicTask_handler+0x8>
 8002858:	08007908 	.word	0x08007908
 800285c:	08007934 	.word	0x08007934

08002860 <HandlerTask_handler>:
	}
}

static void HandlerTask_handler(void *pvParameters)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
		/* Use the semaphore to wait for the event.  The semaphore was created
		before the scheduler was started so before this task ran for the first
		time.  The task blocks indefinitely meaning this function call will only
		return once the semaphore has been successfully obtained - so there is no
		need to check the returned value. */
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HandlerTask_handler+0x20>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fd7b 	bl	800336c <xQueueSemaphoreTake>

		/* To get here the event must have occurred.  Process the event (in this
		case we just print out a message). */
		printmsg("Handler task - Processing event.\r\n");
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <HandlerTask_handler+0x24>)
 8002878:	f000 f852 	bl	8002920 <printmsg>
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 800287c:	e7f4      	b.n	8002868 <HandlerTask_handler+0x8>
 800287e:	bf00      	nop
 8002880:	200197e0 	.word	0x200197e0
 8002884:	08007950 	.word	0x08007950

08002888 <EXTI15_10_IRQHandler>:
	}
}

void EXTI15_10_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]

	printmsg("==>Button_Handler\r\n");
 8002892:	481a      	ldr	r0, [pc, #104]	; (80028fc <EXTI15_10_IRQHandler+0x74>)
 8002894:	f000 f844 	bl	8002920 <printmsg>

	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <EXTI15_10_IRQHandler+0x78>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1d3a      	adds	r2, r7, #4
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fba4 	bl	8002fee <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <EXTI15_10_IRQHandler+0x78>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1d3a      	adds	r2, r7, #4
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fb9d 	bl	8002fee <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <EXTI15_10_IRQHandler+0x78>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1d3a      	adds	r2, r7, #4
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb96 	bl	8002fee <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80028c2:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <EXTI15_10_IRQHandler+0x78>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1d3a      	adds	r2, r7, #4
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fb8f 	bl	8002fee <xQueueGiveFromISR>
	xSemaphoreGiveFromISR( xCountingSemaphore, &xHigherPriorityTaskWoken );
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <EXTI15_10_IRQHandler+0x78>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1d3a      	adds	r2, r7, #4
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fb88 	bl	8002fee <xQueueGiveFromISR>

	/*NOTE: The syntax for forcing a context switch within an ISR varies between
    FreeRTOS ports.  The portEND_SWITCHING_ISR() macro is provided as part of
    the Cortex M3 port layer for this purpose.  taskYIELD() must never be called
    from an ISR! */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <EXTI15_10_IRQHandler+0x6c>
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <EXTI15_10_IRQHandler+0x7c>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	08007974 	.word	0x08007974
 8002900:	200197e0 	.word	0x200197e0
 8002904:	e000ed04 	.word	0xe000ed04

08002908 <SetupSoftwareInterrupt>:

static void SetupSoftwareInterrupt()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0

	/* The interrupt service routine uses an (interrupt safe) FreeRTOS API
	function so the interrupt priority must be at or below the priority defined
	by configSYSCALL_INTERRUPT_PRIORITY. */

	NVIC_SetPriority( EXTI15_10_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY );
 800290c:	2105      	movs	r1, #5
 800290e:	2028      	movs	r0, #40	; 0x28
 8002910:	f7ff fd18 	bl	8002344 <__NVIC_SetPriority>

	/* Enable the interrupt. */
	NVIC_EnableIRQ( EXTI15_10_IRQn );
 8002914:	2028      	movs	r0, #40	; 0x28
 8002916:	f7ff fcd9 	bl	80022cc <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <printmsg>:

void printmsg(char *format,...)
{
 8002920:	b40f      	push	{r0, r1, r2, r3}
 8002922:	b580      	push	{r7, lr}
 8002924:	b096      	sub	sp, #88	; 0x58
 8002926:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_END
	char str[80];

	va_list args;
	va_start(args, format);
 8002928:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800292c:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fbd6 	bl	80070e8 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800293c:	f107 0308 	add.w	r3, r7, #8
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fc8f 	bl	8000264 <strlen>
 8002946:	4603      	mov	r3, r0
 8002948:	b29a      	uxth	r2, r3
 800294a:	f107 0108 	add.w	r1, r7, #8
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <printmsg+0x48>)
 8002954:	f7ff f85b 	bl	8001a0e <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8002958:	bf00      	nop
 800295a:	3758      	adds	r7, #88	; 0x58
 800295c:	46bd      	mov	sp, r7
 800295e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002962:	b004      	add	sp, #16
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	200197e8 	.word	0x200197e8

0800296c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800297e:	f7fd fe71 	bl	8000664 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40001000 	.word	0x40001000

08002990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_MspInit+0x4c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_MspInit+0x4c>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_MspInit+0x4c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_MspInit+0x4c>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_MspInit+0x4c>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_MspInit+0x4c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80029de:	f002 fc47 	bl	8005270 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_UART_MspInit+0x84>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d12b      	bne.n	8002a6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_UART_MspInit+0x88>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a5a:	2307      	movs	r3, #7
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	f107 0314 	add.w	r3, r7, #20
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <HAL_UART_MspInit+0x8c>)
 8002a66:	f7fd feff 	bl	8000868 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a6a:	bf00      	nop
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40004400 	.word	0x40004400
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020000 	.word	0x40020000

08002a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	2036      	movs	r0, #54	; 0x36
 8002a96:	f7fd febd 	bl	8000814 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002a9a:	2036      	movs	r0, #54	; 0x36
 8002a9c:	f7fd fed6 	bl	800084c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <HAL_InitTick+0xa4>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4a1e      	ldr	r2, [pc, #120]	; (8002b24 <HAL_InitTick+0xa4>)
 8002aaa:	f043 0310 	orr.w	r3, r3, #16
 8002aae:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_InitTick+0xa4>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002abc:	f107 0210 	add.w	r2, r7, #16
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fce4 	bl	8001494 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002acc:	f7fe fcba 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <HAL_InitTick+0xa8>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9b      	lsrs	r3, r3, #18
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_InitTick+0xac>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <HAL_InitTick+0xb0>)
 8002ae8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_InitTick+0xac>)
 8002aec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_InitTick+0xac>)
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_InitTick+0xac>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_InitTick+0xac>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <HAL_InitTick+0xac>)
 8002b06:	f7fe fcf7 	bl	80014f8 <HAL_TIM_Base_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <HAL_InitTick+0xac>)
 8002b12:	f7fe fd26 	bl	8001562 <HAL_TIM_Base_Start_IT>
 8002b16:	4603      	mov	r3, r0
 8002b18:	e000      	b.n	8002b1c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3730      	adds	r7, #48	; 0x30
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	431bde83 	.word	0x431bde83
 8002b2c:	20019828 	.word	0x20019828
 8002b30:	40001000 	.word	0x40001000

08002b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM6_DAC_IRQHandler+0x10>)
 8002b6e:	f7fe fd1c 	bl	80015aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20019828 	.word	0x20019828

08002b7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <_sbrk+0x50>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <_sbrk+0x16>
		heap_end = &end;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <_sbrk+0x50>)
 8002b8e:	4a10      	ldr	r2, [pc, #64]	; (8002bd0 <_sbrk+0x54>)
 8002b90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <_sbrk+0x50>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <_sbrk+0x50>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	466a      	mov	r2, sp
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d907      	bls.n	8002bb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ba6:	f004 fa3d 	bl	8007024 <__errno>
 8002baa:	4602      	mov	r2, r0
 8002bac:	230c      	movs	r3, #12
 8002bae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	e006      	b.n	8002bc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <_sbrk+0x50>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <_sbrk+0x50>)
 8002bc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000094 	.word	0x20000094
 8002bd0:	20019958 	.word	0x20019958

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <SystemInit+0x28>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <SystemInit+0x28>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <SystemInit+0x28>)
 8002bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bee:	609a      	str	r2, [r3, #8]
#endif
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c06:	e003      	b.n	8002c10 <LoopCopyDataInit>

08002c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c0e:	3104      	adds	r1, #4

08002c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c18:	d3f6      	bcc.n	8002c08 <CopyDataInit>
  ldr  r2, =_sbss
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c1c:	e002      	b.n	8002c24 <LoopFillZerobss>

08002c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c20:	f842 3b04 	str.w	r3, [r2], #4

08002c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c28:	d3f9      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c2a:	f7ff ffd3 	bl	8002bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f004 f9ff 	bl	8007030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c32:	f7ff fbb1 	bl	8002398 <main>
  bx  lr    
 8002c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c3c:	08007a78 	.word	0x08007a78
  ldr  r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c44:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002c48:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002c4c:	20019954 	.word	0x20019954

08002c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC_IRQHandler>

08002c52 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f103 0208 	add.w	r2, r3, #8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 0208 	add.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d103      	bne.n	8002ccc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e00c      	b.n	8002ce6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <vListInsert+0x2e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d2f6      	bcs.n	8002cd4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6892      	ldr	r2, [r2, #8]
 8002d34:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6852      	ldr	r2, [r2, #4]
 8002d3e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d103      	bne.n	8002d52 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	1e5a      	subs	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <xQueueGenericReset+0x2c>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	e7fe      	b.n	8002d9e <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d063      	beq.n	8002e6e <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d05f      	beq.n	8002e6e <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	2000      	movs	r0, #0
 8002db8:	fba2 1203 	umull	r1, r2, r2, r3
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	f04f 0400 	mov.w	r4, #0
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d000      	beq.n	8002dce <xQueueGenericReset+0x5a>
 8002dcc:	2001      	movs	r0, #1
 8002dce:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d14c      	bne.n	8002e6e <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 8002dd4:	f002 fac6 	bl	8005364 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	6939      	ldr	r1, [r7, #16]
 8002de2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	441a      	add	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2200      	movs	r2, #0
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	3b01      	subs	r3, #1
 8002e06:	6939      	ldr	r1, [r7, #16]
 8002e08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	441a      	add	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	22ff      	movs	r2, #255	; 0xff
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d114      	bne.n	8002e54 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01a      	beq.n	8002e68 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3310      	adds	r3, #16
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 fa40 	bl	80042bc <xTaskRemoveFromEventList>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d012      	beq.n	8002e68 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <xQueueGenericReset+0x124>)
 8002e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	e009      	b.n	8002e68 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	3310      	adds	r3, #16
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fefa 	bl	8002c52 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3324      	adds	r3, #36	; 0x24
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fef5 	bl	8002c52 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002e68:	f002 faaa 	bl	80053c0 <vPortExitCritical>
 8002e6c:	e001      	b.n	8002e72 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <xQueueGenericReset+0x118>
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	e7fe      	b.n	8002e8a <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002e8c:	697b      	ldr	r3, [r7, #20]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000ed04 	.word	0xe000ed04

08002e9c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d034      	beq.n	8002f1e <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	fba2 1203 	umull	r1, r2, r2, r3
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	f04f 0400 	mov.w	r4, #0
 8002ec6:	0013      	movs	r3, r2
 8002ec8:	2400      	movs	r4, #0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d000      	beq.n	8002ed0 <xQueueGenericCreate+0x34>
 8002ece:	2001      	movs	r0, #1
 8002ed0:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d123      	bne.n	8002f1e <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002ede:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002ee2:	d81c      	bhi.n	8002f1e <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	3350      	adds	r3, #80	; 0x50
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 fb56 	bl	80055a4 <pvPortMalloc>
 8002ef8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3350      	adds	r3, #80	; 0x50
 8002f08:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f0a:	79fa      	ldrb	r2, [r7, #7]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f813 	bl	8002f42 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002f1c:	e00c      	b.n	8002f38 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <xQueueGenericCreate+0x9c>
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	e7fe      	b.n	8002f36 <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002f38:	69fb      	ldr	r3, [r7, #28]
    }
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3724      	adds	r7, #36	; 0x24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd90      	pop	{r4, r7, pc}

08002f42 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e002      	b.n	8002f64 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f70:	2101      	movs	r1, #1
 8002f72:	69b8      	ldr	r0, [r7, #24]
 8002f74:	f7ff fefe 	bl	8002d74 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	2073      	movs	r0, #115	; 0x73
 8002f88:	f003 f99c 	bl	80062c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d010      	beq.n	8002fca <xQueueCreateCountingSemaphore+0x36>
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d80c      	bhi.n	8002fca <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff71 	bl	8002e9c <xQueueGenericCreate>
 8002fba:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <xQueueCreateCountingSemaphore+0x50>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8002fc8:	e00c      	b.n	8002fe4 <xQueueCreateCountingSemaphore+0x50>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <xQueueCreateCountingSemaphore+0x50>
 8002fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	e7fe      	b.n	8002fe2 <xQueueCreateCountingSemaphore+0x4e>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    }
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08e      	sub	sp, #56	; 0x38
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <xQueueGiveFromISR+0x28>
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	e7fe      	b.n	8003014 <xQueueGiveFromISR+0x26>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <xQueueGiveFromISR+0x44>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	e7fe      	b.n	8003030 <xQueueGiveFromISR+0x42>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <xQueueGiveFromISR+0x54>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueGiveFromISR+0x58>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueGiveFromISR+0x5a>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <xQueueGiveFromISR+0x72>
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e7fe      	b.n	800305e <xQueueGiveFromISR+0x70>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003060:	f002 fa62 	bl	8005528 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003064:	f3ef 8211 	mrs	r2, BASEPRI
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	617a      	str	r2, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800307c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308c:	429a      	cmp	r2, r3
 800308e:	d243      	bcs.n	8003118 <xQueueGiveFromISR+0x12a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fe79 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80030a2:	4601      	mov	r1, r0
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	2060      	movs	r0, #96	; 0x60
 80030aa:	f003 f8b1 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80030b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d112      	bne.n	80030e6 <xQueueGiveFromISR+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d024      	beq.n	8003112 <xQueueGiveFromISR+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f8f5 	bl	80042bc <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01c      	beq.n	8003112 <xQueueGiveFromISR+0x124>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <xQueueGiveFromISR+0x124>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e015      	b.n	8003112 <xQueueGiveFromISR+0x124>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80030e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030ea:	2b7f      	cmp	r3, #127	; 0x7f
 80030ec:	d109      	bne.n	8003102 <xQueueGiveFromISR+0x114>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	e7fe      	b.n	8003100 <xQueueGiveFromISR+0x112>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003106:	3301      	adds	r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	b25a      	sxtb	r2, r3
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003112:	2301      	movs	r3, #1
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
 8003116:	e00b      	b.n	8003130 <xQueueGiveFromISR+0x142>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	4618      	mov	r0, r3
 800311c:	f003 fe3a 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003120:	4601      	mov	r1, r0
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	2060      	movs	r0, #96	; 0x60
 8003128:	f003 f872 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800312c:	2300      	movs	r3, #0
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800313c:	4618      	mov	r0, r3
 800313e:	3738      	adds	r7, #56	; 0x38
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b08f      	sub	sp, #60	; 0x3c
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <xQueueReceive+0x2e>
        __asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	e7fe      	b.n	8003170 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d103      	bne.n	8003180 <xQueueReceive+0x3c>
 8003178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <xQueueReceive+0x40>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <xQueueReceive+0x42>
 8003184:	2300      	movs	r3, #0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <xQueueReceive+0x5a>
 800318a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	e7fe      	b.n	800319c <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800319e:	f001 fa9b 	bl	80046d8 <xTaskGetSchedulerState>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <xQueueReceive+0x6a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <xQueueReceive+0x6e>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <xQueueReceive+0x70>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <xQueueReceive+0x88>
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e7fe      	b.n	80031ca <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031cc:	f002 f8ca 	bl	8005364 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d031      	beq.n	8003240 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031e0:	f000 fa1a 	bl	8003618 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fdd4 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80031ec:	4604      	mov	r4, r0
 80031ee:	2000      	movs	r0, #0
 80031f0:	f003 fdd0 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80031f4:	4601      	mov	r1, r0
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	2301      	movs	r3, #1
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	460a      	mov	r2, r1
 8003200:	4621      	mov	r1, r4
 8003202:	205c      	movs	r0, #92	; 0x5c
 8003204:	f003 f8d4 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00f      	beq.n	8003238 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	3310      	adds	r3, #16
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f84d 	bl	80042bc <xTaskRemoveFromEventList>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003228:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <xQueueReceive+0x224>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003238:	f002 f8c2 	bl	80053c0 <vPortExitCritical>
                return pdPASS;
 800323c:	2301      	movs	r3, #1
 800323e:	e08e      	b.n	800335e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d115      	bne.n	8003272 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003246:	f002 f8bb 	bl	80053c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fda1 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003252:	4604      	mov	r4, r0
 8003254:	2000      	movs	r0, #0
 8003256:	f003 fd9d 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 800325a:	4601      	mov	r1, r0
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	2301      	movs	r3, #1
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	460a      	mov	r2, r1
 8003266:	4621      	mov	r1, r4
 8003268:	205c      	movs	r0, #92	; 0x5c
 800326a:	f003 f8a1 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800326e:	2300      	movs	r3, #0
 8003270:	e075      	b.n	800335e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d106      	bne.n	8003286 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003278:	f107 0310 	add.w	r3, r7, #16
 800327c:	4618      	mov	r0, r3
 800327e:	f001 f8f5 	bl	800446c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003282:	2301      	movs	r3, #1
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003286:	f002 f89b 	bl	80053c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800328a:	f000 fd0d 	bl	8003ca8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800328e:	f002 f869 	bl	8005364 <vPortEnterCritical>
 8003292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003298:	b25b      	sxtb	r3, r3
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d103      	bne.n	80032a8 <xQueueReceive+0x164>
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d103      	bne.n	80032be <xQueueReceive+0x17a>
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032be:	f002 f87f 	bl	80053c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032c2:	1d3a      	adds	r2, r7, #4
 80032c4:	f107 0310 	add.w	r3, r7, #16
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 f8e4 	bl	8004498 <xTaskCheckForTimeOut>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d124      	bne.n	8003320 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d8:	f000 fa16 	bl	8003708 <prvIsQueueEmpty>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d018      	beq.n	8003314 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	3324      	adds	r3, #36	; 0x24
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 ff7a 	bl	80041e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80032f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f2:	f000 f9b7 	bl	8003664 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80032f6:	f000 fce5 	bl	8003cc4 <xTaskResumeAll>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f47f af65 	bne.w	80031cc <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <xQueueReceive+0x224>)
 8003304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	e75b      	b.n	80031cc <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003316:	f000 f9a5 	bl	8003664 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800331a:	f000 fcd3 	bl	8003cc4 <xTaskResumeAll>
 800331e:	e755      	b.n	80031cc <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003322:	f000 f99f 	bl	8003664 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003326:	f000 fccd 	bl	8003cc4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800332c:	f000 f9ec 	bl	8003708 <prvIsQueueEmpty>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f43f af4a 	beq.w	80031cc <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	4618      	mov	r0, r3
 800333c:	f003 fd2a 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003340:	4604      	mov	r4, r0
 8003342:	2000      	movs	r0, #0
 8003344:	f003 fd26 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003348:	4601      	mov	r1, r0
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	2301      	movs	r3, #1
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	460a      	mov	r2, r1
 8003354:	4621      	mov	r1, r4
 8003356:	205c      	movs	r0, #92	; 0x5c
 8003358:	f003 f82a 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800335c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800335e:	4618      	mov	r0, r3
 8003360:	3734      	adds	r7, #52	; 0x34
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b091      	sub	sp, #68	; 0x44
 8003370:	af02      	add	r7, sp, #8
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003376:	2300      	movs	r3, #0
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800337e:	2300      	movs	r3, #0
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <xQueueSemaphoreTake+0x30>
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	623b      	str	r3, [r7, #32]
 800339a:	e7fe      	b.n	800339a <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <xQueueSemaphoreTake+0x4c>
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e7fe      	b.n	80033b6 <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033b8:	f001 f98e 	bl	80046d8 <xTaskGetSchedulerState>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <xQueueSemaphoreTake+0x5c>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <xQueueSemaphoreTake+0x60>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <xQueueSemaphoreTake+0x62>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <xQueueSemaphoreTake+0x7a>
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e7fe      	b.n	80033e4 <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80033e6:	f001 ffbd 	bl	8005364 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <xQueueSemaphoreTake+0xf8>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 fccb 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80033fe:	4604      	mov	r4, r0
 8003400:	2000      	movs	r0, #0
 8003402:	f003 fcc7 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003406:	4601      	mov	r1, r0
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	2301      	movs	r3, #1
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	460a      	mov	r2, r1
 8003412:	4621      	mov	r1, r4
 8003414:	205c      	movs	r0, #92	; 0x5c
 8003416:	f002 ffcb 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <xQueueSemaphoreTake+0xc8>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800342a:	f001 fadb 	bl	80049e4 <pvTaskIncrementMutexHeldCount>
 800342e:	4602      	mov	r2, r0
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00f      	beq.n	800345c <xQueueSemaphoreTake+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343e:	3310      	adds	r3, #16
 8003440:	4618      	mov	r0, r3
 8003442:	f000 ff3b 	bl	80042bc <xTaskRemoveFromEventList>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d007      	beq.n	800345c <xQueueSemaphoreTake+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800344c:	4b65      	ldr	r3, [pc, #404]	; (80035e4 <xQueueSemaphoreTake+0x278>)
 800344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800345c:	f001 ffb0 	bl	80053c0 <vPortExitCritical>
                return pdPASS;
 8003460:	2301      	movs	r3, #1
 8003462:	e0ba      	b.n	80035da <xQueueSemaphoreTake+0x26e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d122      	bne.n	80034b0 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <xQueueSemaphoreTake+0x118>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e7fe      	b.n	8003482 <xQueueSemaphoreTake+0x116>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003484:	f001 ff9c 	bl	80053c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	4618      	mov	r0, r3
 800348c:	f003 fc82 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003490:	4604      	mov	r4, r0
 8003492:	2000      	movs	r0, #0
 8003494:	f003 fc7e 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 8003498:	4601      	mov	r1, r0
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	460a      	mov	r2, r1
 80034a4:	4621      	mov	r1, r4
 80034a6:	205c      	movs	r0, #92	; 0x5c
 80034a8:	f002 ff82 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e094      	b.n	80035da <xQueueSemaphoreTake+0x26e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034b6:	f107 030c 	add.w	r3, r7, #12
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 ffd6 	bl	800446c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034c4:	f001 ff7c 	bl	80053c0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034c8:	f000 fbee 	bl	8003ca8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034cc:	f001 ff4a 	bl	8005364 <vPortEnterCritical>
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d103      	bne.n	80034e6 <xQueueSemaphoreTake+0x17a>
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f2:	d103      	bne.n	80034fc <xQueueSemaphoreTake+0x190>
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034fc:	f001 ff60 	bl	80053c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003500:	463a      	mov	r2, r7
 8003502:	f107 030c 	add.w	r3, r7, #12
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ffc5 	bl	8004498 <xTaskCheckForTimeOut>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d132      	bne.n	800357a <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003516:	f000 f8f7 	bl	8003708 <prvIsQueueEmpty>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d026      	beq.n	800356e <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003528:	f001 ff1c 	bl	8005364 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f8ef 	bl	8004714 <xTaskPriorityInherit>
 8003536:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003538:	f001 ff42 	bl	80053c0 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353e:	3324      	adds	r3, #36	; 0x24
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fe4d 	bl	80041e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800354a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800354c:	f000 f88a 	bl	8003664 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003550:	f000 fbb8 	bl	8003cc4 <xTaskResumeAll>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f47f af45 	bne.w	80033e6 <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 800355c:	4b21      	ldr	r3, [pc, #132]	; (80035e4 <xQueueSemaphoreTake+0x278>)
 800355e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	e73b      	b.n	80033e6 <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800356e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003570:	f000 f878 	bl	8003664 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003574:	f000 fba6 	bl	8003cc4 <xTaskResumeAll>
 8003578:	e735      	b.n	80033e6 <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800357a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800357c:	f000 f872 	bl	8003664 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003580:	f000 fba0 	bl	8003cc4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003586:	f000 f8bf 	bl	8003708 <prvIsQueueEmpty>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	f43f af2a 	beq.w	80033e6 <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003598:	f001 fee4 	bl	8005364 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800359c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800359e:	f000 f823 	bl	80035e8 <prvGetDisinheritPriorityAfterTimeout>
 80035a2:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 f95a 	bl	8004864 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80035b0:	f001 ff06 	bl	80053c0 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 fbec 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80035bc:	4604      	mov	r4, r0
 80035be:	2000      	movs	r0, #0
 80035c0:	f003 fbe8 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80035c4:	4601      	mov	r1, r0
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	2301      	movs	r3, #1
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	460a      	mov	r2, r1
 80035d0:	4621      	mov	r1, r4
 80035d2:	205c      	movs	r0, #92	; 0x5c
 80035d4:	f002 feec 	bl	80063b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80035d8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80035da:	4618      	mov	r0, r3
 80035dc:	373c      	adds	r7, #60	; 0x3c
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1c3 0305 	rsb	r3, r3, #5
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e001      	b.n	800360a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800360a:	68fb      	ldr	r3, [r7, #12]
    }
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d018      	beq.n	800365c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	441a      	add	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	d303      	bcc.n	800364c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68d9      	ldr	r1, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	461a      	mov	r2, r3
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f003 fd1d 	bl	8007096 <memcpy>
    }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800366c:	f001 fe7a 	bl	8005364 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003676:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003678:	e011      	b.n	800369e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d012      	beq.n	80036a8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3324      	adds	r3, #36	; 0x24
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fe18 	bl	80042bc <xTaskRemoveFromEventList>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003692:	f000 ff65 	bl	8004560 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	3b01      	subs	r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800369e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	dce9      	bgt.n	800367a <prvUnlockQueue+0x16>
 80036a6:	e000      	b.n	80036aa <prvUnlockQueue+0x46>
                        break;
 80036a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	22ff      	movs	r2, #255	; 0xff
 80036ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80036b2:	f001 fe85 	bl	80053c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80036b6:	f001 fe55 	bl	8005364 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036c2:	e011      	b.n	80036e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d012      	beq.n	80036f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3310      	adds	r3, #16
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fdf3 	bl	80042bc <xTaskRemoveFromEventList>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80036dc:	f000 ff40 	bl	8004560 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	dce9      	bgt.n	80036c4 <prvUnlockQueue+0x60>
 80036f0:	e000      	b.n	80036f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80036f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80036fc:	f001 fe60 	bl	80053c0 <vPortExitCritical>
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003710:	f001 fe28 	bl	8005364 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800371c:	2301      	movs	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	e001      	b.n	8003726 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003726:	f001 fe4b 	bl	80053c0 <vPortExitCritical>

    return xReturn;
 800372a:	68fb      	ldr	r3, [r7, #12]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <vQueueAddToRegistry+0x24>
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e7fe      	b.n	8003756 <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d024      	beq.n	80037ac <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e01e      	b.n	80037a6 <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <vQueueAddToRegistry+0xa8>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d105      	bne.n	8003784 <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4a17      	ldr	r2, [pc, #92]	; (80037dc <vQueueAddToRegistry+0xa8>)
 800377e:	4413      	add	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
                    break;
 8003782:	e013      	b.n	80037ac <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10a      	bne.n	80037a0 <vQueueAddToRegistry+0x6c>
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <vQueueAddToRegistry+0xa8>)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <vQueueAddToRegistry+0xa8>)
 800379c:	4413      	add	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	3301      	adds	r3, #1
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b07      	cmp	r3, #7
 80037aa:	d9dd      	bls.n	8003768 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00f      	beq.n	80037d2 <vQueueAddToRegistry+0x9e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f003 fae7 	bl	8006d94 <SEGGER_SYSVIEW_ShrinkId>
 80037c6:	4601      	mov	r1, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	2071      	movs	r0, #113	; 0x71
 80037ce:	f002 fd1f 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20019868 	.word	0x20019868

080037e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80037f0:	f001 fdb8 	bl	8005364 <vPortEnterCritical>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d103      	bne.n	800380a <vQueueWaitForMessageRestricted+0x2a>
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003810:	b25b      	sxtb	r3, r3
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d103      	bne.n	8003820 <vQueueWaitForMessageRestricted+0x40>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003820:	f001 fdce 	bl	80053c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fcf9 	bl	800422c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff12 	bl	8003664 <prvUnlockQueue>
    }
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af04      	add	r7, sp, #16
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fea1 	bl	80055a4 <pvPortMalloc>
 8003862:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800386a:	2058      	movs	r0, #88	; 0x58
 800386c:	f001 fe9a 	bl	80055a4 <pvPortMalloc>
 8003870:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
 800387e:	e005      	b.n	800388c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003880:	6978      	ldr	r0, [r7, #20]
 8003882:	f001 ff6b 	bl	800575c <vPortFree>
 8003886:	e001      	b.n	800388c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	2300      	movs	r3, #0
 8003896:	9303      	str	r3, [sp, #12]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9302      	str	r3, [sp, #8]
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f80e 	bl	80038ca <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80038ae:	69f8      	ldr	r0, [r7, #28]
 80038b0:	f000 f8ae 	bl	8003a10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80038b4:	2301      	movs	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	e002      	b.n	80038c0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80038c0:	69bb      	ldr	r3, [r7, #24]
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	461a      	mov	r2, r3
 80038e2:	21a5      	movs	r1, #165	; 0xa5
 80038e4:	f003 fbe2 	bl	80070ac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038f2:	3b01      	subs	r3, #1
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f023 0307 	bic.w	r3, r3, #7
 8003900:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <prvInitialiseNewTask+0x56>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e7fe      	b.n	800391e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01f      	beq.n	8003966 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003926:	2300      	movs	r3, #0
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e012      	b.n	8003952 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	7819      	ldrb	r1, [r3, #0]
 8003934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	3334      	adds	r3, #52	; 0x34
 800393c:	460a      	mov	r2, r1
 800393e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3301      	adds	r3, #1
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b09      	cmp	r3, #9
 8003956:	d9e9      	bls.n	800392c <prvInitialiseNewTask+0x62>
 8003958:	e000      	b.n	800395c <prvInitialiseNewTask+0x92>
            {
                break;
 800395a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003964:	e003      	b.n	800396e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2b04      	cmp	r3, #4
 8003972:	d909      	bls.n	8003988 <prvInitialiseNewTask+0xbe>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e7fe      	b.n	8003986 <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	2b04      	cmp	r3, #4
 800398c:	d901      	bls.n	8003992 <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398e:	2304      	movs	r3, #4
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003996:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	3304      	adds	r3, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f972 	bl	8002c92 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	3318      	adds	r3, #24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff f96d 	bl	8002c92 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039bc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c0:	f1c3 0205 	rsb	r2, r3, #5
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	3350      	adds	r3, #80	; 0x50
 80039d2:	2204      	movs	r2, #4
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 fb68 	bl	80070ac <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	3354      	adds	r3, #84	; 0x54
 80039e0:	2201      	movs	r2, #1
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fb61 	bl	80070ac <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	69b8      	ldr	r0, [r7, #24]
 80039f0:	f001 fb18 	bl	8005024 <pxPortInitialiseStack>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a06:	bf00      	nop
 8003a08:	3720      	adds	r7, #32
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003a10:	b5b0      	push	{r4, r5, r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003a18:	f001 fca4 	bl	8005364 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003a1c:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <prvAddNewTaskToReadyList+0x14c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3301      	adds	r3, #1
 8003a22:	4a4e      	ldr	r2, [pc, #312]	; (8003b5c <prvAddNewTaskToReadyList+0x14c>)
 8003a24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003a26:	4b4e      	ldr	r3, [pc, #312]	; (8003b60 <prvAddNewTaskToReadyList+0x150>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003a2e:	4a4c      	ldr	r2, [pc, #304]	; (8003b60 <prvAddNewTaskToReadyList+0x150>)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a34:	4b49      	ldr	r3, [pc, #292]	; (8003b5c <prvAddNewTaskToReadyList+0x14c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d110      	bne.n	8003a5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003a3c:	f000 fdb4 	bl	80045a8 <prvInitialiseTaskLists>
 8003a40:	e00d      	b.n	8003a5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003a42:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <prvAddNewTaskToReadyList+0x154>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a4a:	4b45      	ldr	r3, [pc, #276]	; (8003b60 <prvAddNewTaskToReadyList+0x150>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d802      	bhi.n	8003a5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003a58:	4a41      	ldr	r2, [pc, #260]	; (8003b60 <prvAddNewTaskToReadyList+0x150>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003a5e:	4b42      	ldr	r3, [pc, #264]	; (8003b68 <prvAddNewTaskToReadyList+0x158>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a40      	ldr	r2, [pc, #256]	; (8003b68 <prvAddNewTaskToReadyList+0x158>)
 8003a66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a68:	4b3f      	ldr	r3, [pc, #252]	; (8003b68 <prvAddNewTaskToReadyList+0x158>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <prvAddNewTaskToReadyList+0x94>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 f865 	bl	8006b48 <SEGGER_SYSVIEW_OnTaskCreate>
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	461d      	mov	r5, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461c      	mov	r4, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	1ae3      	subs	r3, r4, r3
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	f001 ff78 	bl	8005994 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 f8d2 	bl	8006c50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <prvAddNewTaskToReadyList+0x15c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <prvAddNewTaskToReadyList+0x15c>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	492b      	ldr	r1, [pc, #172]	; (8003b70 <prvAddNewTaskToReadyList+0x160>)
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3304      	adds	r3, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	3204      	adds	r2, #4
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <prvAddNewTaskToReadyList+0x160>)
 8003b02:	441a      	add	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	615a      	str	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4918      	ldr	r1, [pc, #96]	; (8003b70 <prvAddNewTaskToReadyList+0x160>)
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	4814      	ldr	r0, [pc, #80]	; (8003b70 <prvAddNewTaskToReadyList+0x160>)
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003b2a:	f001 fc49 	bl	80053c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <prvAddNewTaskToReadyList+0x154>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <prvAddNewTaskToReadyList+0x150>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d207      	bcs.n	8003b54 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <prvAddNewTaskToReadyList+0x164>)
 8003b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b54:	bf00      	nop
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5c:	20000170 	.word	0x20000170
 8003b60:	20000098 	.word	0x20000098
 8003b64:	2000017c 	.word	0x2000017c
 8003b68:	2000018c 	.word	0x2000018c
 8003b6c:	20000178 	.word	0x20000178
 8003b70:	2000009c 	.word	0x2000009c
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01a      	beq.n	8003bc0 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003b8a:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <vTaskDelay+0x68>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <vTaskDelay+0x2e>
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	e7fe      	b.n	8003ba4 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8003ba6:	f000 f87f 	bl	8003ca8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	2023      	movs	r0, #35	; 0x23
 8003bae:	f002 faf3 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 ff29 	bl	8004a0c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003bba:	f000 f883 	bl	8003cc4 <xTaskResumeAll>
 8003bbe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d107      	bne.n	8003bd6 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <vTaskDelay+0x6c>)
 8003bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000198 	.word	0x20000198
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <vTaskStartScheduler+0xa0>)
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2282      	movs	r2, #130	; 0x82
 8003bfa:	4924      	ldr	r1, [pc, #144]	; (8003c8c <vTaskStartScheduler+0xa4>)
 8003bfc:	4824      	ldr	r0, [pc, #144]	; (8003c90 <vTaskStartScheduler+0xa8>)
 8003bfe:	f7ff fe23 	bl	8003848 <xTaskCreate>
 8003c02:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d102      	bne.n	8003c10 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003c0a:	f000 ff8b 	bl	8004b24 <xTimerCreateTimerTask>
 8003c0e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d123      	bne.n	8003c5e <vTaskStartScheduler+0x76>
 8003c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <vTaskStartScheduler+0xac>)
 8003c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <vTaskStartScheduler+0xb0>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <vTaskStartScheduler+0xb4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003c3c:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <vTaskStartScheduler+0xb8>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <vTaskStartScheduler+0xa0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d102      	bne.n	8003c4e <vTaskStartScheduler+0x66>
 8003c48:	f002 ff62 	bl	8006b10 <SEGGER_SYSVIEW_OnIdle>
 8003c4c:	e004      	b.n	8003c58 <vTaskStartScheduler+0x70>
 8003c4e:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <vTaskStartScheduler+0xb8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f002 ffba 	bl	8006bcc <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003c58:	f001 fa6c 	bl	8005134 <xPortStartScheduler>
 8003c5c:	e00d      	b.n	8003c7a <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d109      	bne.n	8003c7a <vTaskStartScheduler+0x92>
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	607b      	str	r3, [r7, #4]
 8003c78:	e7fe      	b.n	8003c78 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <vTaskStartScheduler+0xbc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000194 	.word	0x20000194
 8003c8c:	08007988 	.word	0x08007988
 8003c90:	08004579 	.word	0x08004579
 8003c94:	20000190 	.word	0x20000190
 8003c98:	2000017c 	.word	0x2000017c
 8003c9c:	20000174 	.word	0x20000174
 8003ca0:	20000098 	.word	0x20000098
 8003ca4:	2000000c 	.word	0x2000000c

08003ca8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <vTaskSuspendAll+0x18>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <vTaskSuspendAll+0x18>)
 8003cb4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	20000198 	.word	0x20000198

08003cc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003cd2:	4b72      	ldr	r3, [pc, #456]	; (8003e9c <xTaskResumeAll+0x1d8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <xTaskResumeAll+0x2a>
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	e7fe      	b.n	8003cec <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003cee:	f001 fb39 	bl	8005364 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <xTaskResumeAll+0x1d8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <xTaskResumeAll+0x1d8>)
 8003cfa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfc:	4b67      	ldr	r3, [pc, #412]	; (8003e9c <xTaskResumeAll+0x1d8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 80c4 	bne.w	8003e8e <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d06:	4b66      	ldr	r3, [pc, #408]	; (8003ea0 <xTaskResumeAll+0x1dc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80bf 	beq.w	8003e8e <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d10:	e08e      	b.n	8003e30 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d12:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <xTaskResumeAll+0x1e0>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	6a12      	ldr	r2, [r2, #32]
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	69d2      	ldr	r2, [r2, #28]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d103      	bne.n	8003d48 <xTaskResumeAll+0x84>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	6a1a      	ldr	r2, [r3, #32]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	6892      	ldr	r2, [r2, #8]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d103      	bne.n	8003d86 <xTaskResumeAll+0xc2>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f002 ff59 	bl	8006c50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <xTaskResumeAll+0x1e4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	4a3e      	ldr	r2, [pc, #248]	; (8003ea8 <xTaskResumeAll+0x1e4>)
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	493d      	ldr	r1, [pc, #244]	; (8003eac <xTaskResumeAll+0x1e8>)
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	3204      	adds	r2, #4
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	1d1a      	adds	r2, r3, #4
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4a2e      	ldr	r2, [pc, #184]	; (8003eac <xTaskResumeAll+0x1e8>)
 8003df4:	441a      	add	r2, r3
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	615a      	str	r2, [r3, #20]
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	492b      	ldr	r1, [pc, #172]	; (8003eac <xTaskResumeAll+0x1e8>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1c59      	adds	r1, r3, #1
 8003e0e:	4827      	ldr	r0, [pc, #156]	; (8003eac <xTaskResumeAll+0x1e8>)
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4403      	add	r3, r0
 8003e1a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <xTaskResumeAll+0x1ec>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d302      	bcc.n	8003e30 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <xTaskResumeAll+0x1f0>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <xTaskResumeAll+0x1e0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f47f af6c 	bne.w	8003d12 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003e40:	f000 fc2e 	bl	80046a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e44:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <xTaskResumeAll+0x1f4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003e50:	f000 f846 	bl	8003ee0 <xTaskIncrementTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <xTaskResumeAll+0x1f0>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f1      	bne.n	8003e50 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8003e6c:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <xTaskResumeAll+0x1f4>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <xTaskResumeAll+0x1f0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <xTaskResumeAll+0x1f8>)
 8003e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003e8e:	f001 fa97 	bl	80053c0 <vPortExitCritical>

    return xAlreadyYielded;
 8003e92:	69bb      	ldr	r3, [r7, #24]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000198 	.word	0x20000198
 8003ea0:	20000170 	.word	0x20000170
 8003ea4:	20000130 	.word	0x20000130
 8003ea8:	20000178 	.word	0x20000178
 8003eac:	2000009c 	.word	0x2000009c
 8003eb0:	20000098 	.word	0x20000098
 8003eb4:	20000184 	.word	0x20000184
 8003eb8:	20000180 	.word	0x20000180
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <xTaskGetTickCount+0x1c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000174 	.word	0x20000174

08003ee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eea:	4b7f      	ldr	r3, [pc, #508]	; (80040e8 <xTaskIncrementTick+0x208>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80ef 	bne.w	80040d2 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ef4:	4b7d      	ldr	r3, [pc, #500]	; (80040ec <xTaskIncrementTick+0x20c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003efc:	4a7b      	ldr	r2, [pc, #492]	; (80040ec <xTaskIncrementTick+0x20c>)
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11f      	bne.n	8003f48 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003f08:	4b79      	ldr	r3, [pc, #484]	; (80040f0 <xTaskIncrementTick+0x210>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <xTaskIncrementTick+0x46>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	607b      	str	r3, [r7, #4]
 8003f24:	e7fe      	b.n	8003f24 <xTaskIncrementTick+0x44>
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <xTaskIncrementTick+0x210>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	4b71      	ldr	r3, [pc, #452]	; (80040f4 <xTaskIncrementTick+0x214>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a6f      	ldr	r2, [pc, #444]	; (80040f0 <xTaskIncrementTick+0x210>)
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4a6f      	ldr	r2, [pc, #444]	; (80040f4 <xTaskIncrementTick+0x214>)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <xTaskIncrementTick+0x218>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4a6d      	ldr	r2, [pc, #436]	; (80040f8 <xTaskIncrementTick+0x218>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	f000 fbac 	bl	80046a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003f48:	4b6c      	ldr	r3, [pc, #432]	; (80040fc <xTaskIncrementTick+0x21c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	f0c0 80aa 	bcc.w	80040a8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f54:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <xTaskIncrementTick+0x210>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d104      	bne.n	8003f68 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5e:	4b67      	ldr	r3, [pc, #412]	; (80040fc <xTaskIncrementTick+0x21c>)
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	601a      	str	r2, [r3, #0]
                    break;
 8003f66:	e09f      	b.n	80040a8 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f68:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <xTaskIncrementTick+0x210>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d203      	bcs.n	8003f88 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003f80:	4a5e      	ldr	r2, [pc, #376]	; (80040fc <xTaskIncrementTick+0x21c>)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003f86:	e08f      	b.n	80040a8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	68d2      	ldr	r2, [r2, #12]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	6892      	ldr	r2, [r2, #8]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d103      	bne.n	8003fb6 <xTaskIncrementTick+0xd6>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	615a      	str	r2, [r3, #20]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	1e5a      	subs	r2, r3, #1
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d01e      	beq.n	800400c <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	6a12      	ldr	r2, [r2, #32]
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	69d2      	ldr	r2, [r2, #28]
 8003fe6:	605a      	str	r2, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	3318      	adds	r3, #24
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d103      	bne.n	8003ffc <xTaskIncrementTick+0x11c>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	2200      	movs	r2, #0
 8004000:	629a      	str	r2, [r3, #40]	; 0x28
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4618      	mov	r0, r3
 8004010:	f002 fe1e 	bl	8006c50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	4b38      	ldr	r3, [pc, #224]	; (8004100 <xTaskIncrementTick+0x220>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	4a37      	ldr	r2, [pc, #220]	; (8004100 <xTaskIncrementTick+0x220>)
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	4936      	ldr	r1, [pc, #216]	; (8004104 <xTaskIncrementTick+0x224>)
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3304      	adds	r3, #4
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	3204      	adds	r2, #4
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <xTaskIncrementTick+0x224>)
 800406a:	441a      	add	r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	615a      	str	r2, [r3, #20]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	4923      	ldr	r1, [pc, #140]	; (8004104 <xTaskIncrementTick+0x224>)
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	1c59      	adds	r1, r3, #1
 8004084:	481f      	ldr	r0, [pc, #124]	; (8004104 <xTaskIncrementTick+0x224>)
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4403      	add	r3, r0
 8004090:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <xTaskIncrementTick+0x228>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	f4ff af59 	bcc.w	8003f54 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a6:	e755      	b.n	8003f54 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <xTaskIncrementTick+0x228>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ae:	4915      	ldr	r1, [pc, #84]	; (8004104 <xTaskIncrementTick+0x224>)
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d901      	bls.n	80040c4 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <xTaskIncrementTick+0x22c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	e004      	b.n	80040dc <xTaskIncrementTick+0x1fc>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80040d2:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <xTaskIncrementTick+0x230>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3301      	adds	r3, #1
 80040d8:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <xTaskIncrementTick+0x230>)
 80040da:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000198 	.word	0x20000198
 80040ec:	20000174 	.word	0x20000174
 80040f0:	20000128 	.word	0x20000128
 80040f4:	2000012c 	.word	0x2000012c
 80040f8:	20000188 	.word	0x20000188
 80040fc:	20000190 	.word	0x20000190
 8004100:	20000178 	.word	0x20000178
 8004104:	2000009c 	.word	0x2000009c
 8004108:	20000098 	.word	0x20000098
 800410c:	20000184 	.word	0x20000184
 8004110:	20000180 	.word	0x20000180

08004114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411a:	4b2c      	ldr	r3, [pc, #176]	; (80041cc <vTaskSwitchContext+0xb8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004122:	4b2b      	ldr	r3, [pc, #172]	; (80041d0 <vTaskSwitchContext+0xbc>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004128:	e04c      	b.n	80041c4 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800412a:	4b29      	ldr	r3, [pc, #164]	; (80041d0 <vTaskSwitchContext+0xbc>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <vTaskSwitchContext+0xc0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	f1c3 031f 	rsb	r3, r3, #31
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	4924      	ldr	r1, [pc, #144]	; (80041d8 <vTaskSwitchContext+0xc4>)
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <vTaskSwitchContext+0x5a>
        __asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e7fe      	b.n	800416c <vTaskSwitchContext+0x58>
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <vTaskSwitchContext+0xc4>)
 800417a:	4413      	add	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	3308      	adds	r3, #8
 8004190:	429a      	cmp	r2, r3
 8004192:	d104      	bne.n	800419e <vTaskSwitchContext+0x8a>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a0d      	ldr	r2, [pc, #52]	; (80041dc <vTaskSwitchContext+0xc8>)
 80041a6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <vTaskSwitchContext+0xc8>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <vTaskSwitchContext+0xcc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d102      	bne.n	80041ba <vTaskSwitchContext+0xa6>
 80041b4:	f002 fcac 	bl	8006b10 <SEGGER_SYSVIEW_OnIdle>
}
 80041b8:	e004      	b.n	80041c4 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <vTaskSwitchContext+0xc8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f002 fd04 	bl	8006bcc <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80041c4:	bf00      	nop
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000198 	.word	0x20000198
 80041d0:	20000184 	.word	0x20000184
 80041d4:	20000178 	.word	0x20000178
 80041d8:	2000009c 	.word	0x2000009c
 80041dc:	20000098 	.word	0x20000098
 80041e0:	20000194 	.word	0x20000194

080041e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <vTaskPlaceOnEventList+0x24>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e7fe      	b.n	8004206 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004208:	4b07      	ldr	r3, [pc, #28]	; (8004228 <vTaskPlaceOnEventList+0x44>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3318      	adds	r3, #24
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fe fd4b 	bl	8002cac <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004216:	2101      	movs	r1, #1
 8004218:	6838      	ldr	r0, [r7, #0]
 800421a:	f000 fbf7 	bl	8004a0c <prvAddCurrentTaskToDelayedList>
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000098 	.word	0x20000098

0800422c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <vTaskPlaceOnEventListRestricted+0x26>
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	e7fe      	b.n	8004250 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	61da      	str	r2, [r3, #28]
 8004260:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	621a      	str	r2, [r3, #32]
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	3218      	adds	r2, #24
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f103 0218 	add.w	r2, r3, #24
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80042a0:	2024      	movs	r0, #36	; 0x24
 80042a2:	f001 ff5b 	bl	800615c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	68b8      	ldr	r0, [r7, #8]
 80042aa:	f000 fbaf 	bl	8004a0c <prvAddCurrentTaskToDelayedList>
    }
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000098 	.word	0x20000098

080042bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <xTaskRemoveFromEventList+0x2a>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e7fe      	b.n	80042e4 <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	6a12      	ldr	r2, [r2, #32]
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	69d2      	ldr	r2, [r2, #28]
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	3318      	adds	r3, #24
 8004308:	429a      	cmp	r2, r3
 800430a:	d103      	bne.n	8004314 <xTaskRemoveFromEventList+0x58>
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	; 0x28
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	1e5a      	subs	r2, r3, #1
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004324:	4b4b      	ldr	r3, [pc, #300]	; (8004454 <xTaskRemoveFromEventList+0x198>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d162      	bne.n	80043f2 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	6a3a      	ldr	r2, [r7, #32]
 8004338:	68d2      	ldr	r2, [r2, #12]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	6892      	ldr	r2, [r2, #8]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	3304      	adds	r3, #4
 800434e:	429a      	cmp	r2, r3
 8004350:	d103      	bne.n	800435a <xTaskRemoveFromEventList+0x9e>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	2200      	movs	r2, #0
 800435e:	615a      	str	r2, [r3, #20]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	4618      	mov	r0, r3
 800436e:	f002 fc6f 	bl	8006c50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	2201      	movs	r2, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	4b37      	ldr	r3, [pc, #220]	; (8004458 <xTaskRemoveFromEventList+0x19c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4313      	orrs	r3, r2
 8004380:	4a35      	ldr	r2, [pc, #212]	; (8004458 <xTaskRemoveFromEventList+0x19c>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4934      	ldr	r1, [pc, #208]	; (800445c <xTaskRemoveFromEventList+0x1a0>)
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3304      	adds	r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	6a3a      	ldr	r2, [r7, #32]
 80043ae:	3204      	adds	r2, #4
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4a25      	ldr	r2, [pc, #148]	; (800445c <xTaskRemoveFromEventList+0x1a0>)
 80043c8:	441a      	add	r2, r3
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	615a      	str	r2, [r3, #20]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d2:	4922      	ldr	r1, [pc, #136]	; (800445c <xTaskRemoveFromEventList+0x1a0>)
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	1c59      	adds	r1, r3, #1
 80043e2:	481e      	ldr	r0, [pc, #120]	; (800445c <xTaskRemoveFromEventList+0x1a0>)
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	6019      	str	r1, [r3, #0]
 80043f0:	e01b      	b.n	800442a <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043f2:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <xTaskRemoveFromEventList+0x1a4>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	61da      	str	r2, [r3, #28]
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	621a      	str	r2, [r3, #32]
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	3218      	adds	r2, #24
 800440e:	605a      	str	r2, [r3, #4]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f103 0218 	add.w	r2, r3, #24
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	4a10      	ldr	r2, [pc, #64]	; (8004460 <xTaskRemoveFromEventList+0x1a4>)
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <xTaskRemoveFromEventList+0x1a4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <xTaskRemoveFromEventList+0x1a4>)
 8004428:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <xTaskRemoveFromEventList+0x1a8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	429a      	cmp	r2, r3
 8004436:	d905      	bls.n	8004444 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <xTaskRemoveFromEventList+0x1ac>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e001      	b.n	8004448 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800444a:	4618      	mov	r0, r3
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000198 	.word	0x20000198
 8004458:	20000178 	.word	0x20000178
 800445c:	2000009c 	.word	0x2000009c
 8004460:	20000130 	.word	0x20000130
 8004464:	20000098 	.word	0x20000098
 8004468:	20000184 	.word	0x20000184

0800446c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <vTaskInternalSetTimeOutState+0x24>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <vTaskInternalSetTimeOutState+0x28>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	605a      	str	r2, [r3, #4]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	20000188 	.word	0x20000188
 8004494:	20000174 	.word	0x20000174

08004498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <xTaskCheckForTimeOut+0x24>
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	e7fe      	b.n	80044ba <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <xTaskCheckForTimeOut+0x3e>
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	e7fe      	b.n	80044d4 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80044d6:	f000 ff45 	bl	8005364 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80044da:	4b1f      	ldr	r3, [pc, #124]	; (8004558 <xTaskCheckForTimeOut+0xc0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f2:	d102      	bne.n	80044fa <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e026      	b.n	8004548 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <xTaskCheckForTimeOut+0xc4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d00a      	beq.n	800451c <xTaskCheckForTimeOut+0x84>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	d305      	bcc.n	800451c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004510:	2301      	movs	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	e015      	b.n	8004548 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	429a      	cmp	r2, r3
 8004524:	d20b      	bcs.n	800453e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	1ad2      	subs	r2, r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff9a 	bl	800446c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e004      	b.n	8004548 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004544:	2301      	movs	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004548:	f000 ff3a 	bl	80053c0 <vPortExitCritical>

    return xReturn;
 800454c:	69fb      	ldr	r3, [r7, #28]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000174 	.word	0x20000174
 800455c:	20000188 	.word	0x20000188

08004560 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <vTaskMissedYield+0x14>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000184 	.word	0x20000184

08004578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004580:	f000 f852 	bl	8004628 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <prvIdleTask+0x28>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d9f9      	bls.n	8004580 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <prvIdleTask+0x2c>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800459c:	e7f0      	b.n	8004580 <prvIdleTask+0x8>
 800459e:	bf00      	nop
 80045a0:	2000009c 	.word	0x2000009c
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	e00c      	b.n	80045ce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <prvInitialiseTaskLists+0x60>)
 80045c0:	4413      	add	r3, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe fb45 	bl	8002c52 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3301      	adds	r3, #1
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d9ef      	bls.n	80045b4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80045d4:	480d      	ldr	r0, [pc, #52]	; (800460c <prvInitialiseTaskLists+0x64>)
 80045d6:	f7fe fb3c 	bl	8002c52 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80045da:	480d      	ldr	r0, [pc, #52]	; (8004610 <prvInitialiseTaskLists+0x68>)
 80045dc:	f7fe fb39 	bl	8002c52 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80045e0:	480c      	ldr	r0, [pc, #48]	; (8004614 <prvInitialiseTaskLists+0x6c>)
 80045e2:	f7fe fb36 	bl	8002c52 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80045e6:	480c      	ldr	r0, [pc, #48]	; (8004618 <prvInitialiseTaskLists+0x70>)
 80045e8:	f7fe fb33 	bl	8002c52 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80045ec:	480b      	ldr	r0, [pc, #44]	; (800461c <prvInitialiseTaskLists+0x74>)
 80045ee:	f7fe fb30 	bl	8002c52 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <prvInitialiseTaskLists+0x78>)
 80045f4:	4a05      	ldr	r2, [pc, #20]	; (800460c <prvInitialiseTaskLists+0x64>)
 80045f6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <prvInitialiseTaskLists+0x7c>)
 80045fa:	4a05      	ldr	r2, [pc, #20]	; (8004610 <prvInitialiseTaskLists+0x68>)
 80045fc:	601a      	str	r2, [r3, #0]
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000009c 	.word	0x2000009c
 800460c:	20000100 	.word	0x20000100
 8004610:	20000114 	.word	0x20000114
 8004614:	20000130 	.word	0x20000130
 8004618:	20000144 	.word	0x20000144
 800461c:	2000015c 	.word	0x2000015c
 8004620:	20000128 	.word	0x20000128
 8004624:	2000012c 	.word	0x2000012c

08004628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800462e:	e019      	b.n	8004664 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004630:	f000 fe98 	bl	8005364 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004634:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <prvCheckTasksWaitingTermination+0x4c>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4618      	mov	r0, r3
 8004642:	f7fe fb6c 	bl	8002d1e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <prvCheckTasksWaitingTermination+0x50>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <prvCheckTasksWaitingTermination+0x50>)
 800464e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <prvCheckTasksWaitingTermination+0x54>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <prvCheckTasksWaitingTermination+0x54>)
 8004658:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800465a:	f000 feb1 	bl	80053c0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f80e 	bl	8004680 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <prvCheckTasksWaitingTermination+0x54>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e1      	bne.n	8004630 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000144 	.word	0x20000144
 8004678:	20000170 	.word	0x20000170
 800467c:	20000158 	.word	0x20000158

08004680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f865 	bl	800575c <vPortFree>
                vPortFree( pxTCB );
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 f862 	bl	800575c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <prvResetNextTaskUnblockTime+0x30>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <prvResetNextTaskUnblockTime+0x34>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80046b6:	e005      	b.n	80046c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <prvResetNextTaskUnblockTime+0x30>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <prvResetNextTaskUnblockTime+0x34>)
 80046c2:	6013      	str	r3, [r2, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000128 	.word	0x20000128
 80046d4:	20000190 	.word	0x20000190

080046d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80046de:	4b0b      	ldr	r3, [pc, #44]	; (800470c <xTaskGetSchedulerState+0x34>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d102      	bne.n	80046ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80046e6:	2301      	movs	r3, #1
 80046e8:	607b      	str	r3, [r7, #4]
 80046ea:	e008      	b.n	80046fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ec:	4b08      	ldr	r3, [pc, #32]	; (8004710 <xTaskGetSchedulerState+0x38>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80046f4:	2302      	movs	r3, #2
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	e001      	b.n	80046fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80046fa:	2300      	movs	r3, #0
 80046fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80046fe:	687b      	ldr	r3, [r7, #4]
    }
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	2000017c 	.word	0x2000017c
 8004710:	20000198 	.word	0x20000198

08004714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 8090 	beq.w	800484c <xTaskPriorityInherit+0x138>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004730:	4b49      	ldr	r3, [pc, #292]	; (8004858 <xTaskPriorityInherit+0x144>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	429a      	cmp	r2, r3
 8004738:	d27f      	bcs.n	800483a <xTaskPriorityInherit+0x126>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	db06      	blt.n	8004750 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <xTaskPriorityInherit+0x144>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f1c3 0205 	rsb	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4a3e      	ldr	r2, [pc, #248]	; (800485c <xTaskPriorityInherit+0x148>)
 8004762:	4413      	add	r3, r2
 8004764:	4299      	cmp	r1, r3
 8004766:	d15b      	bne.n	8004820 <xTaskPriorityInherit+0x10c>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3304      	adds	r3, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fad6 	bl	8002d1e <uxListRemove>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	2201      	movs	r2, #1
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <xTaskPriorityInherit+0x14c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4013      	ands	r3, r2
 800478a:	4a35      	ldr	r2, [pc, #212]	; (8004860 <xTaskPriorityInherit+0x14c>)
 800478c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800478e:	4b32      	ldr	r3, [pc, #200]	; (8004858 <xTaskPriorityInherit+0x144>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4618      	mov	r0, r3
 800479c:	f002 fa58 	bl	8006c50 <SEGGER_SYSVIEW_OnTaskStartReady>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <xTaskPriorityInherit+0x14c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <xTaskPriorityInherit+0x14c>)
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b6:	4929      	ldr	r1, [pc, #164]	; (800485c <xTaskPriorityInherit+0x148>)
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	3304      	adds	r3, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	609a      	str	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	3204      	adds	r2, #4
 80047de:	605a      	str	r2, [r3, #4]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <xTaskPriorityInherit+0x148>)
 80047f6:	441a      	add	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	615a      	str	r2, [r3, #20]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	4916      	ldr	r1, [pc, #88]	; (800485c <xTaskPriorityInherit+0x148>)
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	4812      	ldr	r0, [pc, #72]	; (800485c <xTaskPriorityInherit+0x148>)
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4403      	add	r3, r0
 800481c:	6019      	str	r1, [r3, #0]
 800481e:	e004      	b.n	800482a <xTaskPriorityInherit+0x116>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004820:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <xTaskPriorityInherit+0x144>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4619      	mov	r1, r3
 800482e:	2049      	movs	r0, #73	; 0x49
 8004830:	f001 fcb2 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e008      	b.n	800484c <xTaskPriorityInherit+0x138>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <xTaskPriorityInherit+0x144>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d201      	bcs.n	800484c <xTaskPriorityInherit+0x138>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004848:	2301      	movs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800484c:	697b      	ldr	r3, [r7, #20]
    }
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000098 	.word	0x20000098
 800485c:	2000009c 	.word	0x2000009c
 8004860:	20000178 	.word	0x20000178

08004864 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004872:	2301      	movs	r3, #1
 8004874:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a9 	beq.w	80049d0 <vTaskPriorityDisinheritAfterTimeout+0x16c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e7fe      	b.n	8004898 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d902      	bls.n	80048aa <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
 80048a8:	e002      	b.n	80048b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	429a      	cmp	r2, r3
 80048b8:	f000 808a 	beq.w	80049d0 <vTaskPriorityDisinheritAfterTimeout+0x16c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	f040 8084 	bne.w	80049d0 <vTaskPriorityDisinheritAfterTimeout+0x16c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80048c8:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d109      	bne.n	80048e6 <vTaskPriorityDisinheritAfterTimeout+0x82>
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e7fe      	b.n	80048e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	204a      	movs	r0, #74	; 0x4a
 80048ec:	f001 fc54 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	db04      	blt.n	800490e <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	f1c3 0205 	rsb	r2, r3, #5
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	6959      	ldr	r1, [r3, #20]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4a2f      	ldr	r2, [pc, #188]	; (80049dc <vTaskPriorityDisinheritAfterTimeout+0x178>)
 800491e:	4413      	add	r3, r2
 8004920:	4299      	cmp	r1, r3
 8004922:	d155      	bne.n	80049d0 <vTaskPriorityDisinheritAfterTimeout+0x16c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	3304      	adds	r3, #4
 8004928:	4618      	mov	r0, r3
 800492a:	f7fe f9f8 	bl	8002d1e <uxListRemove>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	2201      	movs	r2, #1
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43da      	mvns	r2, r3
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4013      	ands	r3, r2
 8004946:	4a26      	ldr	r2, [pc, #152]	; (80049e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004948:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	4618      	mov	r0, r3
 800494e:	f002 f97f 	bl	8006c50 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	2201      	movs	r2, #1
 8004958:	409a      	lsls	r2, r3
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	491c      	ldr	r1, [pc, #112]	; (80049dc <vTaskPriorityDisinheritAfterTimeout+0x178>)
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3304      	adds	r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	3204      	adds	r2, #4
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4a0d      	ldr	r2, [pc, #52]	; (80049dc <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80049a8:	441a      	add	r2, r3
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	615a      	str	r2, [r3, #20]
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	490a      	ldr	r1, [pc, #40]	; (80049dc <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	4806      	ldr	r0, [pc, #24]	; (80049dc <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4403      	add	r3, r0
 80049ce:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80049d0:	bf00      	nop
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000098 	.word	0x20000098
 80049dc:	2000009c 	.word	0x2000009c
 80049e0:	20000178 	.word	0x20000178

080049e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <pvTaskIncrementMutexHeldCount+0x24>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <pvTaskIncrementMutexHeldCount+0x24>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f6:	3201      	adds	r2, #1
 80049f8:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80049fa:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <pvTaskIncrementMutexHeldCount+0x24>)
 80049fc:	681b      	ldr	r3, [r3, #0]
    }
 80049fe:	4618      	mov	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000098 	.word	0x20000098

08004a0c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a16:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe f97b 	bl	8002d1e <uxListRemove>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10b      	bne.n	8004a46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a2e:	4b37      	ldr	r3, [pc, #220]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	2201      	movs	r2, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x104>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4013      	ands	r3, r2
 8004a42:	4a33      	ldr	r2, [pc, #204]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x104>)
 8004a44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d124      	bne.n	8004a98 <prvAddCurrentTaskToDelayedList+0x8c>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d021      	beq.n	8004a98 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a54:	4b2f      	ldr	r3, [pc, #188]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x108>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	60da      	str	r2, [r3, #12]
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	3204      	adds	r2, #4
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1d1a      	adds	r2, r3, #4
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x108>)
 8004a88:	615a      	str	r2, [r3, #20]
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x108>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <prvAddCurrentTaskToDelayedList+0x108>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004a96:	e032      	b.n	8004afe <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d20f      	bcs.n	8004ad0 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f002 f90c 	bl	8006cd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004abc:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fe f8ef 	bl	8002cac <vListInsert>
}
 8004ace:	e016      	b.n	8004afe <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f002 f8fc 	bl	8006cd4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <prvAddCurrentTaskToDelayedList+0x110>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x100>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7fe f8df 	bl	8002cac <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <prvAddCurrentTaskToDelayedList+0x114>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d202      	bcs.n	8004afe <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvAddCurrentTaskToDelayedList+0x114>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6013      	str	r3, [r2, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000174 	.word	0x20000174
 8004b0c:	20000098 	.word	0x20000098
 8004b10:	20000178 	.word	0x20000178
 8004b14:	2000015c 	.word	0x2000015c
 8004b18:	2000012c 	.word	0x2000012c
 8004b1c:	20000128 	.word	0x20000128
 8004b20:	20000190 	.word	0x20000190

08004b24 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004b2e:	f000 fa43 	bl	8004fb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <xTimerCreateTimerTask+0x54>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <xTimerCreateTimerTask+0x58>)
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	2302      	movs	r3, #2
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b48:	490d      	ldr	r1, [pc, #52]	; (8004b80 <xTimerCreateTimerTask+0x5c>)
 8004b4a:	480e      	ldr	r0, [pc, #56]	; (8004b84 <xTimerCreateTimerTask+0x60>)
 8004b4c:	f7fe fe7c 	bl	8003848 <xTaskCreate>
 8004b50:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <xTimerCreateTimerTask+0x48>
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	e7fe      	b.n	8004b6a <xTimerCreateTimerTask+0x46>
        return xReturn;
 8004b6c:	687b      	ldr	r3, [r7, #4]
    }
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200001cc 	.word	0x200001cc
 8004b7c:	200001d0 	.word	0x200001d0
 8004b80:	08007990 	.word	0x08007990
 8004b84:	08004c29 	.word	0x08004c29

08004b88 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004b94:	e008      	b.n	8004ba8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	18d1      	adds	r1, r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f8db 	bl	8004d70 <prvInsertTimerInActiveList>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1ea      	bne.n	8004b96 <prvReloadTimer+0xe>
        }
    }
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd2:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <prvProcessExpiredTimer+0x5c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe f89c 	bl	8002d1e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	6879      	ldr	r1, [r7, #4]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff ffc5 	bl	8004b88 <prvReloadTimer>
 8004bfe:	e008      	b.n	8004c12 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	4798      	blx	r3
    }
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	200001c4 	.word	0x200001c4

08004c28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c30:	f107 0308 	add.w	r3, r7, #8
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f857 	bl	8004ce8 <prvGetNextExpireTime>
 8004c3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f803 	bl	8004c4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c46:	f000 f8d5 	bl	8004df4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c4a:	e7f1      	b.n	8004c30 <prvTimerTask+0x8>

08004c4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004c56:	f7ff f827 	bl	8003ca8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f866 	bl	8004d30 <prvSampleTimeNow>
 8004c64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d130      	bne.n	8004cce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <prvProcessTimerOrBlockTask+0x3c>
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d806      	bhi.n	8004c88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004c7a:	f7ff f823 	bl	8003cc4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7ff ffa1 	bl	8004bc8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004c86:	e024      	b.n	8004cd2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <prvProcessTimerOrBlockTask+0x90>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <prvProcessTimerOrBlockTask+0x50>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <prvProcessTimerOrBlockTask+0x52>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <prvProcessTimerOrBlockTask+0x94>)
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7fe fd97 	bl	80037e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004cb2:	f7ff f807 	bl	8003cc4 <xTaskResumeAll>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <prvProcessTimerOrBlockTask+0x98>)
 8004cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
    }
 8004ccc:	e001      	b.n	8004cd2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004cce:	f7fe fff9 	bl	8003cc4 <xTaskResumeAll>
    }
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200001c8 	.word	0x200001c8
 8004ce0:	200001cc 	.word	0x200001cc
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <prvGetNextExpireTime+0x44>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <prvGetNextExpireTime+0x16>
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	e000      	b.n	8004d00 <prvGetNextExpireTime+0x18>
 8004cfe:	2200      	movs	r2, #0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d105      	bne.n	8004d18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <prvGetNextExpireTime+0x44>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e001      	b.n	8004d1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
    }
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	200001c4 	.word	0x200001c4

08004d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004d38:	f7ff f8c2 	bl	8003ec0 <xTaskGetTickCount>
 8004d3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d3e:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <prvSampleTimeNow+0x3c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d205      	bcs.n	8004d54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d48:	f000 f910 	bl	8004f6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004d5a:	4a04      	ldr	r2, [pc, #16]	; (8004d6c <prvSampleTimeNow+0x3c>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004d60:	68fb      	ldr	r3, [r7, #12]
    }
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200001d4 	.word	0x200001d4

08004d70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d812      	bhi.n	8004dbc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	1ad2      	subs	r2, r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d302      	bcc.n	8004daa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e01b      	b.n	8004de2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <prvInsertTimerInActiveList+0x7c>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fd ff79 	bl	8002cac <vListInsert>
 8004dba:	e012      	b.n	8004de2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d206      	bcs.n	8004dd2 <prvInsertTimerInActiveList+0x62>
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e007      	b.n	8004de2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvInsertTimerInActiveList+0x80>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4610      	mov	r0, r2
 8004dde:	f7fd ff65 	bl	8002cac <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004de2:	697b      	ldr	r3, [r7, #20]
    }
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	200001c8 	.word	0x200001c8
 8004df0:	200001c4 	.word	0x200001c4

08004df4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dfa:	e0a5      	b.n	8004f48 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f2c0 80a1 	blt.w	8004f46 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	3304      	adds	r3, #4
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd ff82 	bl	8002d1e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff ff87 	bl	8004d30 <prvSampleTimeNow>
 8004e22:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	f200 808d 	bhi.w	8004f48 <prvProcessReceivedCommands+0x154>
 8004e2e:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <prvProcessReceivedCommands+0x40>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e59 	.word	0x08004e59
 8004e3c:	08004ec1 	.word	0x08004ec1
 8004e40:	08004ed5 	.word	0x08004ed5
 8004e44:	08004f1d 	.word	0x08004f1d
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e59 	.word	0x08004e59
 8004e50:	08004ec1 	.word	0x08004ec1
 8004e54:	08004ed5 	.word	0x08004ed5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	18d1      	adds	r1, r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	69f8      	ldr	r0, [r7, #28]
 8004e78:	f7ff ff7a 	bl	8004d70 <prvInsertTimerInActiveList>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d062      	beq.n	8004f48 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	4413      	add	r3, r2
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	69f8      	ldr	r0, [r7, #28]
 8004e9e:	f7ff fe73 	bl	8004b88 <prvReloadTimer>
 8004ea2:	e008      	b.n	8004eb6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	69f8      	ldr	r0, [r7, #28]
 8004ebc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004ebe:	e043      	b.n	8004f48 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004ed2:	e039      	b.n	8004f48 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <prvProcessReceivedCommands+0x114>
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e7fe      	b.n	8004f06 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	699a      	ldr	r2, [r3, #24]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	18d1      	adds	r1, r2, r3
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	69f8      	ldr	r0, [r7, #28]
 8004f16:	f7ff ff2b 	bl	8004d70 <prvInsertTimerInActiveList>
                        break;
 8004f1a:	e015      	b.n	8004f48 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8004f2a:	69f8      	ldr	r0, [r7, #28]
 8004f2c:	f000 fc16 	bl	800575c <vPortFree>
 8004f30:	e00a      	b.n	8004f48 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f44:	e000      	b.n	8004f48 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004f46:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <prvProcessReceivedCommands+0x174>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f107 0108 	add.w	r1, r7, #8
 8004f50:	2200      	movs	r2, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f8f6 	bl	8003144 <xQueueReceive>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f47f af4e 	bne.w	8004dfc <prvProcessReceivedCommands+0x8>
        }
    }
 8004f60:	bf00      	nop
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	200001cc 	.word	0x200001cc

08004f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f72:	e009      	b.n	8004f88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f82:	6838      	ldr	r0, [r7, #0]
 8004f84:	f7ff fe20 	bl	8004bc8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004f98:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <prvSwitchTimerLists+0x48>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <prvSwitchTimerLists+0x44>)
 8004f9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <prvSwitchTimerLists+0x48>)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6013      	str	r3, [r2, #0]
    }
 8004fa6:	bf00      	nop
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200001c4 	.word	0x200001c4
 8004fb4:	200001c8 	.word	0x200001c8

08004fb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004fbc:	f000 f9d2 	bl	8005364 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004fc0:	4b12      	ldr	r3, [pc, #72]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004fc8:	4811      	ldr	r0, [pc, #68]	; (8005010 <prvCheckForValidListAndQueue+0x58>)
 8004fca:	f7fd fe42 	bl	8002c52 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004fce:	4811      	ldr	r0, [pc, #68]	; (8005014 <prvCheckForValidListAndQueue+0x5c>)
 8004fd0:	f7fd fe3f 	bl	8002c52 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <prvCheckForValidListAndQueue+0x60>)
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <prvCheckForValidListAndQueue+0x58>)
 8004fd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <prvCheckForValidListAndQueue+0x64>)
 8004fdc:	4a0d      	ldr	r2, [pc, #52]	; (8005014 <prvCheckForValidListAndQueue+0x5c>)
 8004fde:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	210c      	movs	r1, #12
 8004fe4:	200a      	movs	r0, #10
 8004fe6:	f7fd ff59 	bl	8002e9c <xQueueGenericCreate>
 8004fea:	4602      	mov	r2, r0
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004fee:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <prvCheckForValidListAndQueue+0x54>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4908      	ldr	r1, [pc, #32]	; (8005020 <prvCheckForValidListAndQueue+0x68>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fb98 	bl	8003734 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005004:	f000 f9dc 	bl	80053c0 <vPortExitCritical>
    }
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200001cc 	.word	0x200001cc
 8005010:	2000019c 	.word	0x2000019c
 8005014:	200001b0 	.word	0x200001b0
 8005018:	200001c4 	.word	0x200001c4
 800501c:	200001c8 	.word	0x200001c8
 8005020:	08007998 	.word	0x08007998

08005024 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b04      	subs	r3, #4
 8005034:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800503c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3b04      	subs	r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3b04      	subs	r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <pxPortInitialiseStack+0x64>)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3b14      	subs	r3, #20
 800505e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3b04      	subs	r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f06f 0202 	mvn.w	r2, #2
 8005072:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b20      	subs	r3, #32
 8005078:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800507a:	68fb      	ldr	r3, [r7, #12]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	0800508d 	.word	0x0800508d

0800508c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005096:	4b11      	ldr	r3, [pc, #68]	; (80050dc <prvTaskExitError+0x50>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d009      	beq.n	80050b4 <prvTaskExitError+0x28>
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	e7fe      	b.n	80050b2 <prvTaskExitError+0x26>
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80050c6:	bf00      	nop
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0fc      	beq.n	80050c8 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000010 	.word	0x20000010

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	4770      	bx	lr
 80050fc:	f3af 8000 	nop.w

08005100 <pxCurrentTCBConst2>:
 8005100:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005108:	4808      	ldr	r0, [pc, #32]	; (800512c <prvPortStartFirstTask+0x24>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8814 	msr	CONTROL, r0
 800511a:	b662      	cpsie	i
 800511c:	b661      	cpsie	f
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	df00      	svc	0
 8005128:	bf00      	nop
 800512a:	0000      	.short	0x0000
 800512c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop

08005134 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800513a:	4b44      	ldr	r3, [pc, #272]	; (800524c <xPortStartScheduler+0x118>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a44      	ldr	r2, [pc, #272]	; (8005250 <xPortStartScheduler+0x11c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d109      	bne.n	8005158 <xPortStartScheduler+0x24>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e7fe      	b.n	8005156 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005158:	4b3c      	ldr	r3, [pc, #240]	; (800524c <xPortStartScheduler+0x118>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3d      	ldr	r2, [pc, #244]	; (8005254 <xPortStartScheduler+0x120>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d109      	bne.n	8005176 <xPortStartScheduler+0x42>
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e7fe      	b.n	8005174 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005176:	4b38      	ldr	r3, [pc, #224]	; (8005258 <xPortStartScheduler+0x124>)
 8005178:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <xPortStartScheduler+0x128>)
 800519c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <xPortStartScheduler+0x12c>)
 80051a0:	2207      	movs	r2, #7
 80051a2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051a4:	e009      	b.n	80051ba <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80051a6:	4b2e      	ldr	r3, [pc, #184]	; (8005260 <xPortStartScheduler+0x12c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	4a2c      	ldr	r2, [pc, #176]	; (8005260 <xPortStartScheduler+0x12c>)
 80051ae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d0ef      	beq.n	80051a6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051c6:	4b26      	ldr	r3, [pc, #152]	; (8005260 <xPortStartScheduler+0x12c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f1c3 0307 	rsb	r3, r3, #7
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d009      	beq.n	80051e6 <xPortStartScheduler+0xb2>
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	e7fe      	b.n	80051e4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051e6:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <xPortStartScheduler+0x12c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <xPortStartScheduler+0x12c>)
 80051ee:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <xPortStartScheduler+0x12c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f8:	4a19      	ldr	r2, [pc, #100]	; (8005260 <xPortStartScheduler+0x12c>)
 80051fa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005204:	4b17      	ldr	r3, [pc, #92]	; (8005264 <xPortStartScheduler+0x130>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a16      	ldr	r2, [pc, #88]	; (8005264 <xPortStartScheduler+0x130>)
 800520a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800520e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <xPortStartScheduler+0x130>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <xPortStartScheduler+0x130>)
 8005216:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800521a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800521c:	f000 f954 	bl	80054c8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <xPortStartScheduler+0x134>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005226:	f000 f973 	bl	8005510 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <xPortStartScheduler+0x138>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a0f      	ldr	r2, [pc, #60]	; (800526c <xPortStartScheduler+0x138>)
 8005230:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005234:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005236:	f7ff ff67 	bl	8005108 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800523a:	f7fe ff6b 	bl	8004114 <vTaskSwitchContext>
    prvTaskExitError();
 800523e:	f7ff ff25 	bl	800508c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	e000ed00 	.word	0xe000ed00
 8005250:	410fc271 	.word	0x410fc271
 8005254:	410fc270 	.word	0x410fc270
 8005258:	e000e400 	.word	0xe000e400
 800525c:	200001d8 	.word	0x200001d8
 8005260:	200001dc 	.word	0x200001dc
 8005264:	e000ed20 	.word	0xe000ed20
 8005268:	20000010 	.word	0x20000010
 800526c:	e000ef34 	.word	0xe000ef34

08005270 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005276:	4b35      	ldr	r3, [pc, #212]	; (800534c <vInitPrioGroupValue+0xdc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a35      	ldr	r2, [pc, #212]	; (8005350 <vInitPrioGroupValue+0xe0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d109      	bne.n	8005294 <vInitPrioGroupValue+0x24>
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e7fe      	b.n	8005292 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005294:	4b2d      	ldr	r3, [pc, #180]	; (800534c <vInitPrioGroupValue+0xdc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <vInitPrioGroupValue+0xe4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d109      	bne.n	80052b2 <vInitPrioGroupValue+0x42>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e7fe      	b.n	80052b0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052b2:	4b29      	ldr	r3, [pc, #164]	; (8005358 <vInitPrioGroupValue+0xe8>)
 80052b4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b21      	ldr	r3, [pc, #132]	; (800535c <vInitPrioGroupValue+0xec>)
 80052d8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <vInitPrioGroupValue+0xf0>)
 80052dc:	2207      	movs	r2, #7
 80052de:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e0:	e009      	b.n	80052f6 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 80052e2:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <vInitPrioGroupValue+0xf0>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <vInitPrioGroupValue+0xf0>)
 80052ea:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d0ef      	beq.n	80052e2 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <vInitPrioGroupValue+0xf0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1c3 0307 	rsb	r3, r3, #7
 800530a:	2b04      	cmp	r3, #4
 800530c:	d009      	beq.n	8005322 <vInitPrioGroupValue+0xb2>
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	e7fe      	b.n	8005320 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <vInitPrioGroupValue+0xf0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <vInitPrioGroupValue+0xf0>)
 800532a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <vInitPrioGroupValue+0xf0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005334:	4a0a      	ldr	r2, [pc, #40]	; (8005360 <vInitPrioGroupValue+0xf0>)
 8005336:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	b2da      	uxtb	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	e000ed00 	.word	0xe000ed00
 8005350:	410fc271 	.word	0x410fc271
 8005354:	410fc270 	.word	0x410fc270
 8005358:	e000e400 	.word	0xe000e400
 800535c:	200001d8 	.word	0x200001d8
 8005360:	200001dc 	.word	0x200001dc

08005364 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortEnterCritical+0x54>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a0d      	ldr	r2, [pc, #52]	; (80053b8 <vPortEnterCritical+0x54>)
 8005384:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <vPortEnterCritical+0x54>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10e      	bne.n	80053ac <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <vPortEnterCritical+0x58>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <vPortEnterCritical+0x48>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	e7fe      	b.n	80053aa <vPortEnterCritical+0x46>
    }
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	20000010 	.word	0x20000010
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80053c6:	4b11      	ldr	r3, [pc, #68]	; (800540c <vPortExitCritical+0x4c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <vPortExitCritical+0x22>
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e7fe      	b.n	80053e0 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <vPortExitCritical+0x4c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	4a08      	ldr	r2, [pc, #32]	; (800540c <vPortExitCritical+0x4c>)
 80053ea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <vPortExitCritical+0x4c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <vPortExitCritical+0x3e>
 80053f4:	2300      	movs	r3, #0
 80053f6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000010 	.word	0x20000010

08005410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005410:	f3ef 8009 	mrs	r0, PSP
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	4b15      	ldr	r3, [pc, #84]	; (8005470 <pxCurrentTCBConst>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	f01e 0f10 	tst.w	lr, #16
 8005420:	bf08      	it	eq
 8005422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542a:	6010      	str	r0, [r2, #0]
 800542c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005434:	f380 8811 	msr	BASEPRI, r0
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f7fe fe68 	bl	8004114 <vTaskSwitchContext>
 8005444:	f04f 0000 	mov.w	r0, #0
 8005448:	f380 8811 	msr	BASEPRI, r0
 800544c:	bc09      	pop	{r0, r3}
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005456:	f01e 0f10 	tst.w	lr, #16
 800545a:	bf08      	it	eq
 800545c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005460:	f380 8809 	msr	PSP, r0
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst>:
 8005470:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
        __asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005490:	f001 fac4 	bl	8006a1c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005494:	f7fe fd24 	bl	8003ee0 <xTaskIncrementTick>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d006      	beq.n	80054ac <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800549e:	f001 fb1b 	bl	8006ad8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <SysTick_Handler+0x4c>)
 80054a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e001      	b.n	80054b0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80054ac:	f001 faf8 	bl	8006aa0 <SEGGER_SYSVIEW_RecordExitISR>
 80054b0:	2300      	movs	r3, #0
 80054b2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <vPortSetupTimerInterrupt+0x34>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <vPortSetupTimerInterrupt+0x38>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054d8:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <vPortSetupTimerInterrupt+0x3c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <vPortSetupTimerInterrupt+0x40>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	4a09      	ldr	r2, [pc, #36]	; (800550c <vPortSetupTimerInterrupt+0x44>)
 80054e6:	3b01      	subs	r3, #1
 80054e8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ea:	4b04      	ldr	r3, [pc, #16]	; (80054fc <vPortSetupTimerInterrupt+0x34>)
 80054ec:	2207      	movs	r2, #7
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	bf00      	nop
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000e010 	.word	0xe000e010
 8005500:	e000e018 	.word	0xe000e018
 8005504:	20000008 	.word	0x20000008
 8005508:	10624dd3 	.word	0x10624dd3
 800550c:	e000e014 	.word	0xe000e014

08005510 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005510:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005520 <vPortEnableVFP+0x10>
 8005514:	6801      	ldr	r1, [r0, #0]
 8005516:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800551a:	6001      	str	r1, [r0, #0]
 800551c:	4770      	bx	lr
 800551e:	0000      	.short	0x0000
 8005520:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop

08005528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800552e:	f3ef 8305 	mrs	r3, IPSR
 8005532:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d913      	bls.n	8005562 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800553a:	4a16      	ldr	r2, [pc, #88]	; (8005594 <vPortValidateInterruptPriority+0x6c>)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005544:	4b14      	ldr	r3, [pc, #80]	; (8005598 <vPortValidateInterruptPriority+0x70>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	7afa      	ldrb	r2, [r7, #11]
 800554a:	429a      	cmp	r2, r3
 800554c:	d209      	bcs.n	8005562 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	e7fe      	b.n	8005560 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005562:	4b0e      	ldr	r3, [pc, #56]	; (800559c <vPortValidateInterruptPriority+0x74>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556a:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <vPortValidateInterruptPriority+0x78>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d909      	bls.n	8005586 <vPortValidateInterruptPriority+0x5e>
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	e7fe      	b.n	8005584 <vPortValidateInterruptPriority+0x5c>
    }
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000e3f0 	.word	0xe000e3f0
 8005598:	200001d8 	.word	0x200001d8
 800559c:	e000ed0c 	.word	0xe000ed0c
 80055a0:	200001dc 	.word	0x200001dc

080055a4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80055b0:	f7fe fb7a 	bl	8003ca8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80055b4:	4b63      	ldr	r3, [pc, #396]	; (8005744 <pvPortMalloc+0x1a0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80055bc:	f000 f92e 	bl	800581c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055c0:	4b61      	ldr	r3, [pc, #388]	; (8005748 <pvPortMalloc+0x1a4>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 80a5 	bne.w	8005718 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02c      	beq.n	800562e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80055d4:	2208      	movs	r2, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d226      	bcs.n	800562e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80055e0:	2208      	movs	r2, #8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f023 0307 	bic.w	r3, r3, #7
 80055f8:	3308      	adds	r3, #8
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d213      	bcs.n	8005628 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f023 0307 	bic.w	r3, r3, #7
 8005606:	3308      	adds	r3, #8
 8005608:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00f      	beq.n	8005634 <pvPortMalloc+0x90>
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e7fe      	b.n	8005626 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800562c:	e002      	b.n	8005634 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	607b      	str	r3, [r7, #4]
 8005632:	e000      	b.n	8005636 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005634:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d06d      	beq.n	8005718 <pvPortMalloc+0x174>
 800563c:	4b43      	ldr	r3, [pc, #268]	; (800574c <pvPortMalloc+0x1a8>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d868      	bhi.n	8005718 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005646:	4b42      	ldr	r3, [pc, #264]	; (8005750 <pvPortMalloc+0x1ac>)
 8005648:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800564a:	4b41      	ldr	r3, [pc, #260]	; (8005750 <pvPortMalloc+0x1ac>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005650:	e004      	b.n	800565c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	d903      	bls.n	800566e <pvPortMalloc+0xca>
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f1      	bne.n	8005652 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800566e:	4b35      	ldr	r3, [pc, #212]	; (8005744 <pvPortMalloc+0x1a0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	429a      	cmp	r2, r3
 8005676:	d04f      	beq.n	8005718 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2208      	movs	r2, #8
 800567e:	4413      	add	r3, r2
 8005680:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	2308      	movs	r3, #8
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	429a      	cmp	r2, r3
 8005698:	d91e      	bls.n	80056d8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4413      	add	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <pvPortMalloc+0x11c>
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	e7fe      	b.n	80056be <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	1ad2      	subs	r2, r2, r3
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056d2:	69b8      	ldr	r0, [r7, #24]
 80056d4:	f000 f904 	bl	80058e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d8:	4b1c      	ldr	r3, [pc, #112]	; (800574c <pvPortMalloc+0x1a8>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1a      	ldr	r2, [pc, #104]	; (800574c <pvPortMalloc+0x1a8>)
 80056e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056e6:	4b19      	ldr	r3, [pc, #100]	; (800574c <pvPortMalloc+0x1a8>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <pvPortMalloc+0x1b0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d203      	bcs.n	80056fa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <pvPortMalloc+0x1a8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a17      	ldr	r2, [pc, #92]	; (8005754 <pvPortMalloc+0x1b0>)
 80056f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <pvPortMalloc+0x1a4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	431a      	orrs	r2, r3
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <pvPortMalloc+0x1b4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a10      	ldr	r2, [pc, #64]	; (8005758 <pvPortMalloc+0x1b4>)
 8005716:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005718:	f7fe fad4 	bl	8003cc4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <pvPortMalloc+0x196>
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e7fe      	b.n	8005738 <pvPortMalloc+0x194>
    return pvReturn;
 800573a:	69fb      	ldr	r3, [r7, #28]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3728      	adds	r7, #40	; 0x28
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	200191e8 	.word	0x200191e8
 8005748:	200191fc 	.word	0x200191fc
 800574c:	200191ec 	.word	0x200191ec
 8005750:	200191e0 	.word	0x200191e0
 8005754:	200191f0 	.word	0x200191f0
 8005758:	200191f4 	.word	0x200191f4

0800575c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04b      	beq.n	8005806 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800576e:	2308      	movs	r3, #8
 8005770:	425b      	negs	r3, r3
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4413      	add	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b23      	ldr	r3, [pc, #140]	; (8005810 <vPortFree+0xb4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d109      	bne.n	800579e <vPortFree+0x42>
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e7fe      	b.n	800579c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <vPortFree+0x5e>
 80057a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	e7fe      	b.n	80057b8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <vPortFree+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01e      	beq.n	8005806 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11a      	bne.n	8005806 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <vPortFree+0xb4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	43db      	mvns	r3, r3
 80057da:	401a      	ands	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80057e0:	f7fe fa62 	bl	8003ca8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <vPortFree+0xb8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4413      	add	r3, r2
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <vPortFree+0xb8>)
 80057f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057f2:	6938      	ldr	r0, [r7, #16]
 80057f4:	f000 f874 	bl	80058e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <vPortFree+0xbc>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	4a06      	ldr	r2, [pc, #24]	; (8005818 <vPortFree+0xbc>)
 8005800:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005802:	f7fe fa5f 	bl	8003cc4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005806:	bf00      	nop
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	200191fc 	.word	0x200191fc
 8005814:	200191ec 	.word	0x200191ec
 8005818:	200191f8 	.word	0x200191f8

0800581c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005822:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8005826:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005828:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <prvHeapInit+0xac>)
 800582a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00c      	beq.n	8005850 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3307      	adds	r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0307 	bic.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <prvHeapInit+0xac>)
 800584c:	4413      	add	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005854:	4a1d      	ldr	r2, [pc, #116]	; (80058cc <prvHeapInit+0xb0>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800585a:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <prvHeapInit+0xb0>)
 800585c:	2200      	movs	r2, #0
 800585e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	4413      	add	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005868:	2208      	movs	r2, #8
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0307 	bic.w	r3, r3, #7
 8005876:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <prvHeapInit+0xb4>)
 800587c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <prvHeapInit+0xb4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2200      	movs	r2, #0
 8005884:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <prvHeapInit+0xb4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <prvHeapInit+0xb4>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a0a      	ldr	r2, [pc, #40]	; (80058d4 <prvHeapInit+0xb8>)
 80058aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <prvHeapInit+0xbc>)
 80058b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <prvHeapInit+0xc0>)
 80058b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058ba:	601a      	str	r2, [r3, #0]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	200001e0 	.word	0x200001e0
 80058cc:	200191e0 	.word	0x200191e0
 80058d0:	200191e8 	.word	0x200191e8
 80058d4:	200191f0 	.word	0x200191f0
 80058d8:	200191ec 	.word	0x200191ec
 80058dc:	200191fc 	.word	0x200191fc

080058e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058e8:	4b28      	ldr	r3, [pc, #160]	; (800598c <prvInsertBlockIntoFreeList+0xac>)
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e002      	b.n	80058f4 <prvInsertBlockIntoFreeList+0x14>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d8f7      	bhi.n	80058ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	429a      	cmp	r2, r3
 800590e:	d108      	bne.n	8005922 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	441a      	add	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	441a      	add	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d118      	bne.n	8005968 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b15      	ldr	r3, [pc, #84]	; (8005990 <prvInsertBlockIntoFreeList+0xb0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d00d      	beq.n	800595e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	441a      	add	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	e008      	b.n	8005970 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800595e:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <prvInsertBlockIntoFreeList+0xb0>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e003      	b.n	8005970 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	429a      	cmp	r2, r3
 8005976:	d002      	beq.n	800597e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800597e:	bf00      	nop
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	200191e0 	.word	0x200191e0
 8005990:	200191e8 	.word	0x200191e8

08005994 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80059a2:	2205      	movs	r2, #5
 80059a4:	492b      	ldr	r1, [pc, #172]	; (8005a54 <SYSVIEW_AddTask+0xc0>)
 80059a6:	68b8      	ldr	r0, [r7, #8]
 80059a8:	f001 fb66 	bl	8007078 <memcmp>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d04b      	beq.n	8005a4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80059b2:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b07      	cmp	r3, #7
 80059b8:	d903      	bls.n	80059c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80059ba:	4828      	ldr	r0, [pc, #160]	; (8005a5c <SYSVIEW_AddTask+0xc8>)
 80059bc:	f001 fad6 	bl	8006f6c <SEGGER_SYSVIEW_Warn>
    return;
 80059c0:	e044      	b.n	8005a4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80059c2:	4b25      	ldr	r3, [pc, #148]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	4926      	ldr	r1, [pc, #152]	; (8005a60 <SYSVIEW_AddTask+0xcc>)
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4921      	ldr	r1, [pc, #132]	; (8005a60 <SYSVIEW_AddTask+0xcc>)
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3304      	adds	r3, #4
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	491b      	ldr	r1, [pc, #108]	; (8005a60 <SYSVIEW_AddTask+0xcc>)
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	3308      	adds	r3, #8
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4916      	ldr	r1, [pc, #88]	; (8005a60 <SYSVIEW_AddTask+0xcc>)
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	330c      	adds	r3, #12
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4910      	ldr	r1, [pc, #64]	; (8005a60 <SYSVIEW_AddTask+0xcc>)
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3310      	adds	r3, #16
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <SYSVIEW_AddTask+0xc4>)
 8005a36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f80e 	bl	8005a64 <SYSVIEW_SendTaskInfo>
 8005a48:	e000      	b.n	8005a4c <SYSVIEW_AddTask+0xb8>
    return;
 8005a4a:	bf00      	nop

}
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	080079a0 	.word	0x080079a0
 8005a58:	200192a0 	.word	0x200192a0
 8005a5c:	080079a8 	.word	0x080079a8
 8005a60:	20019200 	.word	0x20019200

08005a64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005a72:	f107 0314 	add.w	r3, r7, #20
 8005a76:	2214      	movs	r2, #20
 8005a78:	2100      	movs	r1, #0
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f001 fb16 	bl	80070ac <memset>
  TaskInfo.TaskID     = TaskID;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 fe97 	bl	80067cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005a9e:	bf00      	nop
 8005aa0:	3728      	adds	r7, #40	; 0x28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005aae:	4b1e      	ldr	r3, [pc, #120]	; (8005b28 <USART2_IRQHandler+0x80>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d011      	beq.n	8005ae2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <USART2_IRQHandler+0x84>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 030b 	and.w	r3, r3, #11
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <USART2_IRQHandler+0x88>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005ad8:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <USART2_IRQHandler+0x88>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	79fa      	ldrb	r2, [r7, #7]
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01a      	beq.n	8005b22 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <USART2_IRQHandler+0x8c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d015      	beq.n	8005b20 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <USART2_IRQHandler+0x8c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	1dfa      	adds	r2, r7, #7
 8005afa:	4610      	mov	r0, r2
 8005afc:	4798      	blx	r3
 8005afe:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <USART2_IRQHandler+0x90>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a0b      	ldr	r2, [pc, #44]	; (8005b38 <USART2_IRQHandler+0x90>)
 8005b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e006      	b.n	8005b22 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005b14:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <USART2_IRQHandler+0x80>)
 8005b16:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005b18:	79fa      	ldrb	r2, [r7, #7]
 8005b1a:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <USART2_IRQHandler+0x84>)
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e000      	b.n	8005b22 <USART2_IRQHandler+0x7a>
      return;
 8005b20:	bf00      	nop
    }
  }
}
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40004400 	.word	0x40004400
 8005b2c:	40004404 	.word	0x40004404
 8005b30:	200192a4 	.word	0x200192a4
 8005b34:	200192a8 	.word	0x200192a8
 8005b38:	4000440c 	.word	0x4000440c

08005b3c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	4000440c 	.word	0x4000440c

08005b5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <_DoInit+0x98>)
 8005b64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2203      	movs	r2, #3
 8005b6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2203      	movs	r2, #3
 8005b70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <_DoInit+0x9c>)
 8005b76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a20      	ldr	r2, [pc, #128]	; (8005bfc <_DoInit+0xa0>)
 8005b7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <_DoInit+0x9c>)
 8005b9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <_DoInit+0xa4>)
 8005ba2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3307      	adds	r3, #7
 8005bc0:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <_DoInit+0xa8>)
 8005bc2:	6810      	ldr	r0, [r2, #0]
 8005bc4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005bc6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a0e      	ldr	r2, [pc, #56]	; (8005c08 <_DoInit+0xac>)
 8005bce:	6810      	ldr	r0, [r2, #0]
 8005bd0:	6018      	str	r0, [r3, #0]
 8005bd2:	8891      	ldrh	r1, [r2, #4]
 8005bd4:	7992      	ldrb	r2, [r2, #6]
 8005bd6:	8099      	strh	r1, [r3, #4]
 8005bd8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005bda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005be4:	f3bf 8f5f 	dmb	sy
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	200198a8 	.word	0x200198a8
 8005bf8:	080079f8 	.word	0x080079f8
 8005bfc:	200192ac 	.word	0x200192ac
 8005c00:	200196ac 	.word	0x200196ac
 8005c04:	08007a04 	.word	0x08007a04
 8005c08:	08007a08 	.word	0x08007a08

08005c0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08c      	sub	sp, #48	; 0x30
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005c18:	4b3e      	ldr	r3, [pc, #248]	; (8005d14 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <SEGGER_RTT_ReadNoLock+0x1e>
 8005c26:	f7ff ff99 	bl	8005b5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4413      	add	r3, r2
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	3360      	adds	r3, #96	; 0x60
 8005c36:	4a37      	ldr	r2, [pc, #220]	; (8005d14 <SEGGER_RTT_ReadNoLock+0x108>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d92b      	bls.n	8005cb0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4293      	cmp	r3, r2
 8005c68:	bf28      	it	cs
 8005c6a:	4613      	movcs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	4413      	add	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	6939      	ldr	r1, [r7, #16]
 8005c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c7e:	f001 fa0a 	bl	8007096 <memcpy>
    NumBytesRead += NumBytesRem;
 8005c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d101      	bne.n	8005cb0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005cac:	2300      	movs	r3, #0
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	bf28      	it	cs
 8005cc0:	4613      	movcs	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d019      	beq.n	8005cfe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	4413      	add	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	6939      	ldr	r1, [r7, #16]
 8005cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cda:	f001 f9dc 	bl	8007096 <memcpy>
    NumBytesRead += NumBytesRem;
 8005cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4413      	add	r3, r2
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3730      	adds	r7, #48	; 0x30
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	200198a8 	.word	0x200198a8

08005d18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005d28:	e002      	b.n	8005d30 <_EncodeStr+0x18>
    Len++;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f6      	bne.n	8005d2a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d901      	bls.n	8005d48 <_EncodeStr+0x30>
    Len = Limit;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2bfe      	cmp	r3, #254	; 0xfe
 8005d4c:	d806      	bhi.n	8005d5c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	60fa      	str	r2, [r7, #12]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	e011      	b.n	8005d80 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	60fa      	str	r2, [r7, #12]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	60fa      	str	r2, [r7, #12]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	0a19      	lsrs	r1, r3, #8
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	60fa      	str	r2, [r7, #12]
 8005d7c:	b2ca      	uxtb	r2, r1
 8005d7e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005d84:	e00a      	b.n	8005d9c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	1c53      	adds	r3, r2, #1
 8005d8a:	60bb      	str	r3, [r7, #8]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1c59      	adds	r1, r3, #1
 8005d90:	60f9      	str	r1, [r7, #12]
 8005d92:	7812      	ldrb	r2, [r2, #0]
 8005d94:	701a      	strb	r2, [r3, #0]
    n++;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3f0      	bcc.n	8005d86 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005da4:	68fb      	ldr	r3, [r7, #12]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3304      	adds	r3, #4
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
	...

08005dcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005dd2:	4b33      	ldr	r3, [pc, #204]	; (8005ea0 <_HandleIncomingPacket+0xd4>)
 8005dd4:	7e1b      	ldrb	r3, [r3, #24]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	1cfb      	adds	r3, r7, #3
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7ff ff15 	bl	8005c0c <SEGGER_RTT_ReadNoLock>
 8005de2:	4603      	mov	r3, r0
 8005de4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	dd4d      	ble.n	8005e88 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d022      	beq.n	8005e38 <_HandleIncomingPacket+0x6c>
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	dc0b      	bgt.n	8005e0e <_HandleIncomingPacket+0x42>
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d015      	beq.n	8005e26 <_HandleIncomingPacket+0x5a>
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	dc02      	bgt.n	8005e04 <_HandleIncomingPacket+0x38>
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d00e      	beq.n	8005e20 <_HandleIncomingPacket+0x54>
 8005e02:	e034      	b.n	8005e6e <_HandleIncomingPacket+0xa2>
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d011      	beq.n	8005e2c <_HandleIncomingPacket+0x60>
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d012      	beq.n	8005e32 <_HandleIncomingPacket+0x66>
 8005e0c:	e02f      	b.n	8005e6e <_HandleIncomingPacket+0xa2>
 8005e0e:	2b07      	cmp	r3, #7
 8005e10:	d018      	beq.n	8005e44 <_HandleIncomingPacket+0x78>
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	db13      	blt.n	8005e3e <_HandleIncomingPacket+0x72>
 8005e16:	2b7f      	cmp	r3, #127	; 0x7f
 8005e18:	d038      	beq.n	8005e8c <_HandleIncomingPacket+0xc0>
 8005e1a:	2b80      	cmp	r3, #128	; 0x80
 8005e1c:	d015      	beq.n	8005e4a <_HandleIncomingPacket+0x7e>
 8005e1e:	e026      	b.n	8005e6e <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005e20:	f000 fb58 	bl	80064d4 <SEGGER_SYSVIEW_Start>
      break;
 8005e24:	e037      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005e26:	f000 fc11 	bl	800664c <SEGGER_SYSVIEW_Stop>
      break;
 8005e2a:	e034      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005e2c:	f000 fdc6 	bl	80069bc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005e30:	e031      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005e32:	f000 fdaf 	bl	8006994 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005e36:	e02e      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005e38:	f000 fc2e 	bl	8006698 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005e3c:	e02b      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005e3e:	f001 f857 	bl	8006ef0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005e42:	e028      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005e44:	f001 f836 	bl	8006eb4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005e48:	e025      	b.n	8005e96 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e4a:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <_HandleIncomingPacket+0xd4>)
 8005e4c:	7e1b      	ldrb	r3, [r3, #24]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	1cfb      	adds	r3, r7, #3
 8005e52:	2201      	movs	r2, #1
 8005e54:	4619      	mov	r1, r3
 8005e56:	f7ff fed9 	bl	8005c0c <SEGGER_RTT_ReadNoLock>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	dd15      	ble.n	8005e90 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ffa4 	bl	8006db4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005e6c:	e010      	b.n	8005e90 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da0e      	bge.n	8005e94 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <_HandleIncomingPacket+0xd4>)
 8005e78:	7e1b      	ldrb	r3, [r3, #24]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	1cfb      	adds	r3, r7, #3
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4619      	mov	r1, r3
 8005e82:	f7ff fec3 	bl	8005c0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005e86:	e005      	b.n	8005e94 <_HandleIncomingPacket+0xc8>
    }
  }
 8005e88:	bf00      	nop
 8005e8a:	e004      	b.n	8005e96 <_HandleIncomingPacket+0xca>
      break;
 8005e8c:	bf00      	nop
 8005e8e:	e002      	b.n	8005e96 <_HandleIncomingPacket+0xca>
      break;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <_HandleIncomingPacket+0xca>
      break;
 8005e94:	bf00      	nop
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	200196bc 	.word	0x200196bc

08005ea4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08c      	sub	sp, #48	; 0x30
 8005ea8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005eaa:	2301      	movs	r3, #1
 8005eac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb8:	4b32      	ldr	r3, [pc, #200]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ebe:	e00b      	b.n	8005ed8 <_TrySendOverflowPacket+0x34>
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec6:	1c59      	adds	r1, r3, #1
 8005ec8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	09db      	lsrs	r3, r3, #7
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	2b7f      	cmp	r3, #127	; 0x7f
 8005edc:	d8f0      	bhi.n	8005ec0 <_TrySendOverflowPacket+0x1c>
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005eee:	4b26      	ldr	r3, [pc, #152]	; (8005f88 <_TrySendOverflowPacket+0xe4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ef4:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	623b      	str	r3, [r7, #32]
 8005f06:	e00b      	b.n	8005f20 <_TrySendOverflowPacket+0x7c>
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	1c59      	adds	r1, r3, #1
 8005f10:	6279      	str	r1, [r7, #36]	; 0x24
 8005f12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	09db      	lsrs	r3, r3, #7
 8005f1e:	623b      	str	r3, [r7, #32]
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b7f      	cmp	r3, #127	; 0x7f
 8005f24:	d8f0      	bhi.n	8005f08 <_TrySendOverflowPacket+0x64>
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	627a      	str	r2, [r7, #36]	; 0x24
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	1d3b      	adds	r3, r7, #4
 8005f46:	4619      	mov	r1, r3
 8005f48:	f7fa f942 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005f50:	f7ff fdf4 	bl	8005b3c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f5a:	4a0a      	ldr	r2, [pc, #40]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005f60:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e004      	b.n	8005f78 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	3301      	adds	r3, #1
 8005f74:	4a03      	ldr	r2, [pc, #12]	; (8005f84 <_TrySendOverflowPacket+0xe0>)
 8005f76:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005f78:	693b      	ldr	r3, [r7, #16]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	; 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200196bc 	.word	0x200196bc
 8005f88:	e0001004 	.word	0xe0001004

08005f8c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005f98:	4b6d      	ldr	r3, [pc, #436]	; (8006150 <_SendPacket+0x1c4>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d010      	beq.n	8005fc2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	; (8006150 <_SendPacket+0x1c4>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80a5 	beq.w	80060f4 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005faa:	4b69      	ldr	r3, [pc, #420]	; (8006150 <_SendPacket+0x1c4>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d109      	bne.n	8005fc6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005fb2:	f7ff ff77 	bl	8005ea4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005fb6:	4b66      	ldr	r3, [pc, #408]	; (8006150 <_SendPacket+0x1c4>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	f040 809c 	bne.w	80060f8 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005fc0:	e001      	b.n	8005fc6 <_SendPacket+0x3a>
    goto Send;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <_SendPacket+0x3c>
Send:
 8005fc6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b1f      	cmp	r3, #31
 8005fcc:	d809      	bhi.n	8005fe2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005fce:	4b60      	ldr	r3, [pc, #384]	; (8006150 <_SendPacket+0x1c4>)
 8005fd0:	69da      	ldr	r2, [r3, #28]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 808d 	bne.w	80060fc <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b17      	cmp	r3, #23
 8005fe6:	d807      	bhi.n	8005ff8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e03d      	b.n	8006074 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b7f      	cmp	r3, #127	; 0x7f
 8006004:	d912      	bls.n	800602c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	09da      	lsrs	r2, r3, #7
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3b01      	subs	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	3a01      	subs	r2, #1
 800601e:	60fa      	str	r2, [r7, #12]
 8006020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e006      	b.n	800603a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3b01      	subs	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b7f      	cmp	r3, #127	; 0x7f
 800603e:	d912      	bls.n	8006066 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	09da      	lsrs	r2, r3, #7
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3b01      	subs	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	3a01      	subs	r2, #1
 8006058:	60fa      	str	r2, [r7, #12]
 800605a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800605e:	b2da      	uxtb	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e006      	b.n	8006074 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3b01      	subs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	b2da      	uxtb	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006074:	4b37      	ldr	r3, [pc, #220]	; (8006154 <_SendPacket+0x1c8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800607a:	4b35      	ldr	r3, [pc, #212]	; (8006150 <_SendPacket+0x1c4>)
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	e00b      	b.n	80060a6 <_SendPacket+0x11a>
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1c59      	adds	r1, r3, #1
 8006096:	6279      	str	r1, [r7, #36]	; 0x24
 8006098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	09db      	lsrs	r3, r3, #7
 80060a4:	623b      	str	r3, [r7, #32]
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	2b7f      	cmp	r3, #127	; 0x7f
 80060aa:	d8f0      	bhi.n	800608e <_SendPacket+0x102>
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	627a      	str	r2, [r7, #36]	; 0x24
 80060b2:	6a3a      	ldr	r2, [r7, #32]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80060bc:	4b24      	ldr	r3, [pc, #144]	; (8006150 <_SendPacket+0x1c4>)
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	4618      	mov	r0, r3
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	f7fa f880 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060d0:	4603      	mov	r3, r0
 80060d2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80060d4:	f7ff fd32 	bl	8005b3c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060de:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <_SendPacket+0x1c4>)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	60d3      	str	r3, [r2, #12]
 80060e4:	e00b      	b.n	80060fe <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80060e6:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <_SendPacket+0x1c4>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	4b18      	ldr	r3, [pc, #96]	; (8006150 <_SendPacket+0x1c4>)
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e004      	b.n	80060fe <_SendPacket+0x172>
    goto SendDone;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <_SendPacket+0x172>
      goto SendDone;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <_SendPacket+0x172>
      goto SendDone;
 80060fc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80060fe:	4b14      	ldr	r3, [pc, #80]	; (8006150 <_SendPacket+0x1c4>)
 8006100:	7e1b      	ldrb	r3, [r3, #24]
 8006102:	4619      	mov	r1, r3
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <_SendPacket+0x1cc>)
 8006106:	460b      	mov	r3, r1
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	440b      	add	r3, r1
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	4413      	add	r3, r2
 8006110:	336c      	adds	r3, #108	; 0x6c
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <_SendPacket+0x1c4>)
 8006116:	7e1b      	ldrb	r3, [r3, #24]
 8006118:	4618      	mov	r0, r3
 800611a:	490f      	ldr	r1, [pc, #60]	; (8006158 <_SendPacket+0x1cc>)
 800611c:	4603      	mov	r3, r0
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	4403      	add	r3, r0
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	440b      	add	r3, r1
 8006126:	3370      	adds	r3, #112	; 0x70
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d00b      	beq.n	8006146 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <_SendPacket+0x1c4>)
 8006130:	789b      	ldrb	r3, [r3, #2]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006136:	4b06      	ldr	r3, [pc, #24]	; (8006150 <_SendPacket+0x1c4>)
 8006138:	2201      	movs	r2, #1
 800613a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800613c:	f7ff fe46 	bl	8005dcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006140:	4b03      	ldr	r3, [pc, #12]	; (8006150 <_SendPacket+0x1c4>)
 8006142:	2200      	movs	r2, #0
 8006144:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006146:	bf00      	nop
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200196bc 	.word	0x200196bc
 8006154:	e0001004 	.word	0xe0001004
 8006158:	200198a8 	.word	0x200198a8

0800615c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006164:	f3ef 8311 	mrs	r3, BASEPRI
 8006168:	f04f 0120 	mov.w	r1, #32
 800616c:	f381 8811 	msr	BASEPRI, r1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	4808      	ldr	r0, [pc, #32]	; (8006194 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006174:	f7ff fe1d 	bl	8005db2 <_PreparePacket>
 8006178:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	68b8      	ldr	r0, [r7, #8]
 8006180:	f7ff ff04 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f383 8811 	msr	BASEPRI, r3
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200196ec 	.word	0x200196ec

08006198 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061a2:	f3ef 8311 	mrs	r3, BASEPRI
 80061a6:	f04f 0120 	mov.w	r1, #32
 80061aa:	f381 8811 	msr	BASEPRI, r1
 80061ae:	617b      	str	r3, [r7, #20]
 80061b0:	4816      	ldr	r0, [pc, #88]	; (800620c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061b2:	f7ff fdfe 	bl	8005db2 <_PreparePacket>
 80061b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	61bb      	str	r3, [r7, #24]
 80061c4:	e00b      	b.n	80061de <SEGGER_SYSVIEW_RecordU32+0x46>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	1c59      	adds	r1, r3, #1
 80061ce:	61f9      	str	r1, [r7, #28]
 80061d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d4:	b2d2      	uxtb	r2, r2
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b7f      	cmp	r3, #127	; 0x7f
 80061e2:	d8f0      	bhi.n	80061c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	61fa      	str	r2, [r7, #28]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	6938      	ldr	r0, [r7, #16]
 80061fa:	f7ff fec7 	bl	8005f8c <_SendPacket>
  RECORD_END();
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f383 8811 	msr	BASEPRI, r3
}
 8006204:	bf00      	nop
 8006206:	3720      	adds	r7, #32
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	200196ec 	.word	0x200196ec

08006210 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	; 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800621c:	f3ef 8311 	mrs	r3, BASEPRI
 8006220:	f04f 0120 	mov.w	r1, #32
 8006224:	f381 8811 	msr	BASEPRI, r1
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	4825      	ldr	r0, [pc, #148]	; (80062c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800622c:	f7ff fdc1 	bl	8005db2 <_PreparePacket>
 8006230:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	62bb      	str	r3, [r7, #40]	; 0x28
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	b2da      	uxtb	r2, r3
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	62f9      	str	r1, [r7, #44]	; 0x2c
 800624a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	2b7f      	cmp	r3, #127	; 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	6279      	str	r1, [r7, #36]	; 0x24
 8006282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b7f      	cmp	r3, #127	; 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	627a      	str	r2, [r7, #36]	; 0x24
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	6979      	ldr	r1, [r7, #20]
 80062aa:	69b8      	ldr	r0, [r7, #24]
 80062ac:	f7ff fe6e 	bl	8005f8c <_SendPacket>
  RECORD_END();
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	f383 8811 	msr	BASEPRI, r3
}
 80062b6:	bf00      	nop
 80062b8:	3730      	adds	r7, #48	; 0x30
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	200196ec 	.word	0x200196ec

080062c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062d2:	f3ef 8311 	mrs	r3, BASEPRI
 80062d6:	f04f 0120 	mov.w	r1, #32
 80062da:	f381 8811 	msr	BASEPRI, r1
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	4832      	ldr	r0, [pc, #200]	; (80063ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062e2:	f7ff fd66 	bl	8005db2 <_PreparePacket>
 80062e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	633b      	str	r3, [r7, #48]	; 0x30
 80062f4:	e00b      	b.n	800630e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	1c59      	adds	r1, r3, #1
 80062fe:	6379      	str	r1, [r7, #52]	; 0x34
 8006300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2b7f      	cmp	r3, #127	; 0x7f
 8006312:	d8f0      	bhi.n	80062f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	637a      	str	r2, [r7, #52]	; 0x34
 800631a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
 800632c:	e00b      	b.n	8006346 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800634c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	627b      	str	r3, [r7, #36]	; 0x24
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	623b      	str	r3, [r7, #32]
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	6279      	str	r1, [r7, #36]	; 0x24
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	627a      	str	r2, [r7, #36]	; 0x24
 800638a:	6a3a      	ldr	r2, [r7, #32]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	6979      	ldr	r1, [r7, #20]
 8006398:	69b8      	ldr	r0, [r7, #24]
 800639a:	f7ff fdf7 	bl	8005f8c <_SendPacket>
  RECORD_END();
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
 80063a6:	3738      	adds	r7, #56	; 0x38
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	200196ec 	.word	0x200196ec

080063b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b090      	sub	sp, #64	; 0x40
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	f04f 0120 	mov.w	r1, #32
 80063c6:	f381 8811 	msr	BASEPRI, r1
 80063ca:	61fb      	str	r3, [r7, #28]
 80063cc:	4840      	ldr	r0, [pc, #256]	; (80064d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063ce:	f7ff fcf0 	bl	8005db2 <_PreparePacket>
 80063d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e0:	e00b      	b.n	80063fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e8:	1c59      	adds	r1, r3, #1
 80063ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	09db      	lsrs	r3, r3, #7
 80063f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	2b7f      	cmp	r3, #127	; 0x7f
 80063fe:	d8f0      	bhi.n	80063e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006408:	b2d2      	uxtb	r2, r2
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	637b      	str	r3, [r7, #52]	; 0x34
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
 8006418:	e00b      	b.n	8006432 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	1c59      	adds	r1, r3, #1
 8006422:	6379      	str	r1, [r7, #52]	; 0x34
 8006424:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	09db      	lsrs	r3, r3, #7
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	2b7f      	cmp	r3, #127	; 0x7f
 8006436:	d8f0      	bhi.n	800641a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	637a      	str	r2, [r7, #52]	; 0x34
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006450:	e00b      	b.n	800646a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	b2da      	uxtb	r2, r3
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	1c59      	adds	r1, r3, #1
 800645a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800645c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	09db      	lsrs	r3, r3, #7
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	2b7f      	cmp	r3, #127	; 0x7f
 800646e:	d8f0      	bhi.n	8006452 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	627b      	str	r3, [r7, #36]	; 0x24
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	6279      	str	r1, [r7, #36]	; 0x24
 8006494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	627a      	str	r2, [r7, #36]	; 0x24
 80064ae:	6a3a      	ldr	r2, [r7, #32]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	69b8      	ldr	r0, [r7, #24]
 80064be:	f7ff fd65 	bl	8005f8c <_SendPacket>
  RECORD_END();
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	f383 8811 	msr	BASEPRI, r3
}
 80064c8:	bf00      	nop
 80064ca:	3740      	adds	r7, #64	; 0x40
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	200196ec 	.word	0x200196ec

080064d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08c      	sub	sp, #48	; 0x30
 80064d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064da:	4b59      	ldr	r3, [pc, #356]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064e0:	f3ef 8311 	mrs	r3, BASEPRI
 80064e4:	f04f 0120 	mov.w	r1, #32
 80064e8:	f381 8811 	msr	BASEPRI, r1
 80064ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064ee:	4b54      	ldr	r3, [pc, #336]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	220a      	movs	r2, #10
 80064f4:	4953      	ldr	r1, [pc, #332]	; (8006644 <SEGGER_SYSVIEW_Start+0x170>)
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7f9 fe6a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006502:	f7ff fb1b 	bl	8005b3c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006506:	200a      	movs	r0, #10
 8006508:	f7ff fe28 	bl	800615c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800650c:	f3ef 8311 	mrs	r3, BASEPRI
 8006510:	f04f 0120 	mov.w	r1, #32
 8006514:	f381 8811 	msr	BASEPRI, r1
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	484b      	ldr	r0, [pc, #300]	; (8006648 <SEGGER_SYSVIEW_Start+0x174>)
 800651c:	f7ff fc49 	bl	8005db2 <_PreparePacket>
 8006520:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006530:	e00b      	b.n	800654a <SEGGER_SYSVIEW_Start+0x76>
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800653c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	09db      	lsrs	r3, r3, #7
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	2b7f      	cmp	r3, #127	; 0x7f
 800654e:	d8f0      	bhi.n	8006532 <SEGGER_SYSVIEW_Start+0x5e>
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
 8006564:	4b36      	ldr	r3, [pc, #216]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	e00b      	b.n	8006584 <SEGGER_SYSVIEW_Start+0xb0>
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	6279      	str	r1, [r7, #36]	; 0x24
 8006576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	2b7f      	cmp	r3, #127	; 0x7f
 8006588:	d8f0      	bhi.n	800656c <SEGGER_SYSVIEW_Start+0x98>
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	627a      	str	r2, [r7, #36]	; 0x24
 8006590:	6a3a      	ldr	r2, [r7, #32]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	61fb      	str	r3, [r7, #28]
 800659e:	4b28      	ldr	r3, [pc, #160]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	e00b      	b.n	80065be <SEGGER_SYSVIEW_Start+0xea>
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	61f9      	str	r1, [r7, #28]
 80065b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	09db      	lsrs	r3, r3, #7
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	2b7f      	cmp	r3, #127	; 0x7f
 80065c2:	d8f0      	bhi.n	80065a6 <SEGGER_SYSVIEW_Start+0xd2>
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	61fa      	str	r2, [r7, #28]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	2300      	movs	r3, #0
 80065da:	613b      	str	r3, [r7, #16]
 80065dc:	e00b      	b.n	80065f6 <SEGGER_SYSVIEW_Start+0x122>
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	6179      	str	r1, [r7, #20]
 80065e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	09db      	lsrs	r3, r3, #7
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b7f      	cmp	r3, #127	; 0x7f
 80065fa:	d8f0      	bhi.n	80065de <SEGGER_SYSVIEW_Start+0x10a>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1c5a      	adds	r2, r3, #1
 8006600:	617a      	str	r2, [r7, #20]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800660c:	2218      	movs	r2, #24
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff fcbb 	bl	8005f8c <_SendPacket>
      RECORD_END();
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800661c:	4b08      	ldr	r3, [pc, #32]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <SEGGER_SYSVIEW_Start+0x16c>)
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800662a:	f000 f9c7 	bl	80069bc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800662e:	f000 f9b1 	bl	8006994 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006632:	f000 fc5d 	bl	8006ef0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006636:	bf00      	nop
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200196bc 	.word	0x200196bc
 8006644:	08007a28 	.word	0x08007a28
 8006648:	200196ec 	.word	0x200196ec

0800664c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006652:	f3ef 8311 	mrs	r3, BASEPRI
 8006656:	f04f 0120 	mov.w	r1, #32
 800665a:	f381 8811 	msr	BASEPRI, r1
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	480b      	ldr	r0, [pc, #44]	; (8006690 <SEGGER_SYSVIEW_Stop+0x44>)
 8006662:	f7ff fba6 	bl	8005db2 <_PreparePacket>
 8006666:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <SEGGER_SYSVIEW_Stop+0x48>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006670:	220b      	movs	r2, #11
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6838      	ldr	r0, [r7, #0]
 8006676:	f7ff fc89 	bl	8005f8c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <SEGGER_SYSVIEW_Stop+0x48>)
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f383 8811 	msr	BASEPRI, r3
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	200196ec 	.word	0x200196ec
 8006694:	200196bc 	.word	0x200196bc

08006698 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	; 0x30
 800669c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	f04f 0120 	mov.w	r1, #32
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	4845      	ldr	r0, [pc, #276]	; (80067c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ae:	f7ff fb80 	bl	8005db2 <_PreparePacket>
 80066b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066bc:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c2:	e00b      	b.n	80066dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	09db      	lsrs	r3, r3, #7
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	2b7f      	cmp	r3, #127	; 0x7f
 80066e0:	d8f0      	bhi.n	80066c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	623b      	str	r3, [r7, #32]
 80066fc:	e00b      	b.n	8006716 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	1c59      	adds	r1, r3, #1
 8006706:	6279      	str	r1, [r7, #36]	; 0x24
 8006708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	09db      	lsrs	r3, r3, #7
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2b7f      	cmp	r3, #127	; 0x7f
 800671a:	d8f0      	bhi.n	80066fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	627a      	str	r2, [r7, #36]	; 0x24
 8006722:	6a3a      	ldr	r2, [r7, #32]
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e00b      	b.n	8006750 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	61f9      	str	r1, [r7, #28]
 8006742:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	09db      	lsrs	r3, r3, #7
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b7f      	cmp	r3, #127	; 0x7f
 8006754:	d8f0      	bhi.n	8006738 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	61fa      	str	r2, [r7, #28]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	e00b      	b.n	8006788 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	1c59      	adds	r1, r3, #1
 8006778:	6179      	str	r1, [r7, #20]
 800677a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	09db      	lsrs	r3, r3, #7
 8006786:	613b      	str	r3, [r7, #16]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b7f      	cmp	r3, #127	; 0x7f
 800678c:	d8f0      	bhi.n	8006770 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	617a      	str	r2, [r7, #20]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800679e:	2218      	movs	r2, #24
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	68b8      	ldr	r0, [r7, #8]
 80067a4:	f7ff fbf2 	bl	8005f8c <_SendPacket>
  RECORD_END();
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	4798      	blx	r3
  }
}
 80067bc:	bf00      	nop
 80067be:	3730      	adds	r7, #48	; 0x30
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200196ec 	.word	0x200196ec
 80067c8:	200196bc 	.word	0x200196bc

080067cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b092      	sub	sp, #72	; 0x48
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067d4:	f3ef 8311 	mrs	r3, BASEPRI
 80067d8:	f04f 0120 	mov.w	r1, #32
 80067dc:	f381 8811 	msr	BASEPRI, r1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	486a      	ldr	r0, [pc, #424]	; (800698c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067e4:	f7ff fae5 	bl	8005db2 <_PreparePacket>
 80067e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b66      	ldr	r3, [pc, #408]	; (8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
 80067fe:	e00b      	b.n	8006818 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006802:	b2da      	uxtb	r2, r3
 8006804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006806:	1c59      	adds	r1, r3, #1
 8006808:	6479      	str	r1, [r7, #68]	; 0x44
 800680a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006814:	09db      	lsrs	r3, r3, #7
 8006816:	643b      	str	r3, [r7, #64]	; 0x40
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	2b7f      	cmp	r3, #127	; 0x7f
 800681c:	d8f0      	bhi.n	8006800 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800681e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	647a      	str	r2, [r7, #68]	; 0x44
 8006824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	63bb      	str	r3, [r7, #56]	; 0x38
 8006838:	e00b      	b.n	8006852 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	b2da      	uxtb	r2, r3
 800683e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006840:	1c59      	adds	r1, r3, #1
 8006842:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684e:	09db      	lsrs	r3, r3, #7
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	2b7f      	cmp	r3, #127	; 0x7f
 8006856:	d8f0      	bhi.n	800683a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800685e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006860:	b2d2      	uxtb	r2, r2
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	4619      	mov	r1, r3
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff fa51 	bl	8005d18 <_EncodeStr>
 8006876:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006878:	2209      	movs	r2, #9
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	6938      	ldr	r0, [r7, #16]
 800687e:	f7ff fb85 	bl	8005f8c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b40      	ldr	r3, [pc, #256]	; (8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	6379      	str	r1, [r7, #52]	; 0x34
 80068a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2b7f      	cmp	r3, #127	; 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	637a      	str	r2, [r7, #52]	; 0x34
 80068bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d0:	e00b      	b.n	80068ea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ec:	2b7f      	cmp	r3, #127	; 0x7f
 80068ee:	d8f0      	bhi.n	80068d2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	6279      	str	r1, [r7, #36]	; 0x24
 8006916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	623b      	str	r3, [r7, #32]
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	2b7f      	cmp	r3, #127	; 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	627a      	str	r2, [r7, #36]	; 0x24
 8006930:	6a3a      	ldr	r2, [r7, #32]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	61fb      	str	r3, [r7, #28]
 800693e:	2300      	movs	r3, #0
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e00b      	b.n	800695c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	61f9      	str	r1, [r7, #28]
 800694e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	09db      	lsrs	r3, r3, #7
 800695a:	61bb      	str	r3, [r7, #24]
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	2b7f      	cmp	r3, #127	; 0x7f
 8006960:	d8f0      	bhi.n	8006944 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	61fa      	str	r2, [r7, #28]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006972:	2215      	movs	r2, #21
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f7ff fb08 	bl	8005f8c <_SendPacket>
  RECORD_END();
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f383 8811 	msr	BASEPRI, r3
}
 8006982:	bf00      	nop
 8006984:	3748      	adds	r7, #72	; 0x48
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200196ec 	.word	0x200196ec
 8006990:	200196bc 	.word	0x200196bc

08006994 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006998:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069a0:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069aa:	4b03      	ldr	r3, [pc, #12]	; (80069b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4798      	blx	r3
  }
}
 80069b2:	bf00      	nop
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200196bc 	.word	0x200196bc

080069bc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80069bc:	b590      	push	{r4, r7, lr}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80069c2:	4b14      	ldr	r3, [pc, #80]	; (8006a14 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d019      	beq.n	80069fe <SEGGER_SYSVIEW_RecordSystime+0x42>
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d014      	beq.n	80069fe <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4798      	blx	r3
 80069dc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069e0:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	f04f 0400 	mov.w	r4, #0
 80069ee:	0013      	movs	r3, r2
 80069f0:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069f2:	461a      	mov	r2, r3
 80069f4:	4601      	mov	r1, r0
 80069f6:	200d      	movs	r0, #13
 80069f8:	f7ff fc0a 	bl	8006210 <SEGGER_SYSVIEW_RecordU32x2>
 80069fc:	e005      	b.n	8006a0a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80069fe:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	200c      	movs	r0, #12
 8006a06:	f7ff fbc7 	bl	8006198 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd90      	pop	{r4, r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200196bc 	.word	0x200196bc
 8006a18:	e0001004 	.word	0xe0001004

08006a1c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a22:	f3ef 8311 	mrs	r3, BASEPRI
 8006a26:	f04f 0120 	mov.w	r1, #32
 8006a2a:	f381 8811 	msr	BASEPRI, r1
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	4819      	ldr	r0, [pc, #100]	; (8006a98 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a32:	f7ff f9be 	bl	8005db2 <_PreparePacket>
 8006a36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a3c:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a44:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	6179      	str	r1, [r7, #20]
 8006a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	617a      	str	r2, [r7, #20]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a7e:	2202      	movs	r2, #2
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	68b8      	ldr	r0, [r7, #8]
 8006a84:	f7ff fa82 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f383 8811 	msr	BASEPRI, r3
}
 8006a8e:	bf00      	nop
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200196ec 	.word	0x200196ec
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aaa:	f04f 0120 	mov.w	r1, #32
 8006aae:	f381 8811 	msr	BASEPRI, r1
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	4807      	ldr	r0, [pc, #28]	; (8006ad4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ab6:	f7ff f97c 	bl	8005db2 <_PreparePacket>
 8006aba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006abc:	2203      	movs	r2, #3
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6838      	ldr	r0, [r7, #0]
 8006ac2:	f7ff fa63 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f383 8811 	msr	BASEPRI, r3
}
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200196ec 	.word	0x200196ec

08006ad8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ade:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae2:	f04f 0120 	mov.w	r1, #32
 8006ae6:	f381 8811 	msr	BASEPRI, r1
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	4807      	ldr	r0, [pc, #28]	; (8006b0c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006aee:	f7ff f960 	bl	8005db2 <_PreparePacket>
 8006af2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006af4:	2212      	movs	r2, #18
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6838      	ldr	r0, [r7, #0]
 8006afa:	f7ff fa47 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f383 8811 	msr	BASEPRI, r3
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200196ec 	.word	0x200196ec

08006b10 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b16:	f3ef 8311 	mrs	r3, BASEPRI
 8006b1a:	f04f 0120 	mov.w	r1, #32
 8006b1e:	f381 8811 	msr	BASEPRI, r1
 8006b22:	607b      	str	r3, [r7, #4]
 8006b24:	4807      	ldr	r0, [pc, #28]	; (8006b44 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b26:	f7ff f944 	bl	8005db2 <_PreparePacket>
 8006b2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b2c:	2211      	movs	r2, #17
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6838      	ldr	r0, [r7, #0]
 8006b32:	f7ff fa2b 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f383 8811 	msr	BASEPRI, r3
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200196ec 	.word	0x200196ec

08006b48 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b50:	f3ef 8311 	mrs	r3, BASEPRI
 8006b54:	f04f 0120 	mov.w	r1, #32
 8006b58:	f381 8811 	msr	BASEPRI, r1
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	4819      	ldr	r0, [pc, #100]	; (8006bc4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006b60:	f7ff f927 	bl	8005db2 <_PreparePacket>
 8006b64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b6a:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	61f9      	str	r1, [r7, #28]
 8006b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	61fa      	str	r2, [r7, #28]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006bac:	2208      	movs	r2, #8
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	6938      	ldr	r0, [r7, #16]
 8006bb2:	f7ff f9eb 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200196ec 	.word	0x200196ec
 8006bc8:	200196bc 	.word	0x200196bc

08006bcc <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd8:	f04f 0120 	mov.w	r1, #32
 8006bdc:	f381 8811 	msr	BASEPRI, r1
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	4819      	ldr	r0, [pc, #100]	; (8006c48 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006be4:	f7ff f8e5 	bl	8005db2 <_PreparePacket>
 8006be8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bee:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	e00b      	b.n	8006c1a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	1c59      	adds	r1, r3, #1
 8006c0a:	61f9      	str	r1, [r7, #28]
 8006c0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	09db      	lsrs	r3, r3, #7
 8006c18:	61bb      	str	r3, [r7, #24]
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c1e:	d8f0      	bhi.n	8006c02 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	61fa      	str	r2, [r7, #28]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c30:	2204      	movs	r2, #4
 8006c32:	68f9      	ldr	r1, [r7, #12]
 8006c34:	6938      	ldr	r0, [r7, #16]
 8006c36:	f7ff f9a9 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f383 8811 	msr	BASEPRI, r3
}
 8006c40:	bf00      	nop
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	200196ec 	.word	0x200196ec
 8006c4c:	200196bc 	.word	0x200196bc

08006c50 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c58:	f3ef 8311 	mrs	r3, BASEPRI
 8006c5c:	f04f 0120 	mov.w	r1, #32
 8006c60:	f381 8811 	msr	BASEPRI, r1
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	4819      	ldr	r0, [pc, #100]	; (8006ccc <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c68:	f7ff f8a3 	bl	8005db2 <_PreparePacket>
 8006c6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c72:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e00b      	b.n	8006c9e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	1c59      	adds	r1, r3, #1
 8006c8e:	61f9      	str	r1, [r7, #28]
 8006c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	09db      	lsrs	r3, r3, #7
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca2:	d8f0      	bhi.n	8006c86 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	61fa      	str	r2, [r7, #28]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006cb4:	2206      	movs	r2, #6
 8006cb6:	68f9      	ldr	r1, [r7, #12]
 8006cb8:	6938      	ldr	r0, [r7, #16]
 8006cba:	f7ff f967 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f383 8811 	msr	BASEPRI, r3
}
 8006cc4:	bf00      	nop
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200196ec 	.word	0x200196ec
 8006cd0:	200196bc 	.word	0x200196bc

08006cd4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	; 0x28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cde:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce2:	f04f 0120 	mov.w	r1, #32
 8006ce6:	f381 8811 	msr	BASEPRI, r1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	4827      	ldr	r0, [pc, #156]	; (8006d8c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006cee:	f7ff f860 	bl	8005db2 <_PreparePacket>
 8006cf2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cf8:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	e00b      	b.n	8006d24 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	6279      	str	r1, [r7, #36]	; 0x24
 8006d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d1a:	b2d2      	uxtb	r2, r2
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	09db      	lsrs	r3, r3, #7
 8006d22:	623b      	str	r3, [r7, #32]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2b7f      	cmp	r3, #127	; 0x7f
 8006d28:	d8f0      	bhi.n	8006d0c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e00b      	b.n	8006d5c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	61f9      	str	r1, [r7, #28]
 8006d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	09db      	lsrs	r3, r3, #7
 8006d5a:	61bb      	str	r3, [r7, #24]
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d60:	d8f0      	bhi.n	8006d44 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	61fa      	str	r2, [r7, #28]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006d72:	2207      	movs	r2, #7
 8006d74:	68f9      	ldr	r1, [r7, #12]
 8006d76:	6938      	ldr	r0, [r7, #16]
 8006d78:	f7ff f908 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f383 8811 	msr	BASEPRI, r3
}
 8006d82:	bf00      	nop
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200196ec 	.word	0x200196ec
 8006d90:	200196bc 	.word	0x200196bc

08006d94 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d9c:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	1ad3      	subs	r3, r2, r3
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	200196bc 	.word	0x200196bc

08006db4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08c      	sub	sp, #48	; 0x30
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006dbe:	4b3b      	ldr	r3, [pc, #236]	; (8006eac <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d06d      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006dc6:	4b39      	ldr	r3, [pc, #228]	; (8006eac <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006dcc:	2300      	movs	r3, #0
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd0:	e008      	b.n	8006de4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	3301      	adds	r3, #1
 8006de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d3f2      	bcc.n	8006dd2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006dec:	e000      	b.n	8006df0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006dee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d055      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006df6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfa:	f04f 0120 	mov.w	r1, #32
 8006dfe:	f381 8811 	msr	BASEPRI, r1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	482a      	ldr	r0, [pc, #168]	; (8006eb0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006e06:	f7fe ffd4 	bl	8005db2 <_PreparePacket>
 8006e0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	e00b      	b.n	8006e32 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	1c59      	adds	r1, r3, #1
 8006e22:	6279      	str	r1, [r7, #36]	; 0x24
 8006e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	09db      	lsrs	r3, r3, #7
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	2b7f      	cmp	r3, #127	; 0x7f
 8006e36:	d8f0      	bhi.n	8006e1a <SEGGER_SYSVIEW_SendModule+0x66>
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e3e:	6a3a      	ldr	r2, [r7, #32]
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	e00b      	b.n	8006e6c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c59      	adds	r1, r3, #1
 8006e5c:	61f9      	str	r1, [r7, #28]
 8006e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	09db      	lsrs	r3, r3, #7
 8006e6a:	61bb      	str	r3, [r7, #24]
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e70:	d8f0      	bhi.n	8006e54 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	61fa      	str	r2, [r7, #28]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2280      	movs	r2, #128	; 0x80
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f7fe ff44 	bl	8005d18 <_EncodeStr>
 8006e90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e92:	2216      	movs	r2, #22
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6938      	ldr	r0, [r7, #16]
 8006e98:	f7ff f878 	bl	8005f8c <_SendPacket>
      RECORD_END();
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3730      	adds	r7, #48	; 0x30
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200196e4 	.word	0x200196e4
 8006eb0:	200196ec 	.word	0x200196ec

08006eb4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006eba:	4b0c      	ldr	r3, [pc, #48]	; (8006eec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00f      	beq.n	8006ee2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f2      	bne.n	8006ec8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	200196e4 	.word	0x200196e4

08006ef0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8006efa:	f04f 0120 	mov.w	r1, #32
 8006efe:	f381 8811 	msr	BASEPRI, r1
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	4817      	ldr	r0, [pc, #92]	; (8006f64 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f06:	f7fe ff54 	bl	8005db2 <_PreparePacket>
 8006f0a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	e00b      	b.n	8006f34 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	6179      	str	r1, [r7, #20]
 8006f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	09db      	lsrs	r3, r3, #7
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	2b7f      	cmp	r3, #127	; 0x7f
 8006f38:	d8f0      	bhi.n	8006f1c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	617a      	str	r2, [r7, #20]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f4a:	221b      	movs	r2, #27
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	68b8      	ldr	r0, [r7, #8]
 8006f50:	f7ff f81c 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f383 8811 	msr	BASEPRI, r3
}
 8006f5a:	bf00      	nop
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200196ec 	.word	0x200196ec
 8006f68:	200196e8 	.word	0x200196e8

08006f6c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f74:	f3ef 8311 	mrs	r3, BASEPRI
 8006f78:	f04f 0120 	mov.w	r1, #32
 8006f7c:	f381 8811 	msr	BASEPRI, r1
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	4827      	ldr	r0, [pc, #156]	; (8007020 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f84:	f7fe ff15 	bl	8005db2 <_PreparePacket>
 8006f88:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f7fe fec2 	bl	8005d18 <_EncodeStr>
 8006f94:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	e00b      	b.n	8006fb8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	1c59      	adds	r1, r3, #1
 8006fa8:	6279      	str	r1, [r7, #36]	; 0x24
 8006faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	09db      	lsrs	r3, r3, #7
 8006fb6:	623b      	str	r3, [r7, #32]
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbc:	d8f0      	bhi.n	8006fa0 <SEGGER_SYSVIEW_Warn+0x34>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	61fb      	str	r3, [r7, #28]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e00b      	b.n	8006ff0 <SEGGER_SYSVIEW_Warn+0x84>
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	61f9      	str	r1, [r7, #28]
 8006fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	09db      	lsrs	r3, r3, #7
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff4:	d8f0      	bhi.n	8006fd8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	61fa      	str	r2, [r7, #28]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007006:	221a      	movs	r2, #26
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	6938      	ldr	r0, [r7, #16]
 800700c:	f7fe ffbe 	bl	8005f8c <_SendPacket>
  RECORD_END();
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f383 8811 	msr	BASEPRI, r3
}
 8007016:	bf00      	nop
 8007018:	3728      	adds	r7, #40	; 0x28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200196ec 	.word	0x200196ec

08007024 <__errno>:
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <__errno+0x8>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000014 	.word	0x20000014

08007030 <__libc_init_array>:
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	4e0d      	ldr	r6, [pc, #52]	; (8007068 <__libc_init_array+0x38>)
 8007034:	4c0d      	ldr	r4, [pc, #52]	; (800706c <__libc_init_array+0x3c>)
 8007036:	1ba4      	subs	r4, r4, r6
 8007038:	10a4      	asrs	r4, r4, #2
 800703a:	2500      	movs	r5, #0
 800703c:	42a5      	cmp	r5, r4
 800703e:	d109      	bne.n	8007054 <__libc_init_array+0x24>
 8007040:	4e0b      	ldr	r6, [pc, #44]	; (8007070 <__libc_init_array+0x40>)
 8007042:	4c0c      	ldr	r4, [pc, #48]	; (8007074 <__libc_init_array+0x44>)
 8007044:	f000 fc36 	bl	80078b4 <_init>
 8007048:	1ba4      	subs	r4, r4, r6
 800704a:	10a4      	asrs	r4, r4, #2
 800704c:	2500      	movs	r5, #0
 800704e:	42a5      	cmp	r5, r4
 8007050:	d105      	bne.n	800705e <__libc_init_array+0x2e>
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007058:	4798      	blx	r3
 800705a:	3501      	adds	r5, #1
 800705c:	e7ee      	b.n	800703c <__libc_init_array+0xc>
 800705e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007062:	4798      	blx	r3
 8007064:	3501      	adds	r5, #1
 8007066:	e7f2      	b.n	800704e <__libc_init_array+0x1e>
 8007068:	08007a70 	.word	0x08007a70
 800706c:	08007a70 	.word	0x08007a70
 8007070:	08007a70 	.word	0x08007a70
 8007074:	08007a74 	.word	0x08007a74

08007078 <memcmp>:
 8007078:	b530      	push	{r4, r5, lr}
 800707a:	2400      	movs	r4, #0
 800707c:	42a2      	cmp	r2, r4
 800707e:	d101      	bne.n	8007084 <memcmp+0xc>
 8007080:	2000      	movs	r0, #0
 8007082:	e007      	b.n	8007094 <memcmp+0x1c>
 8007084:	5d03      	ldrb	r3, [r0, r4]
 8007086:	3401      	adds	r4, #1
 8007088:	190d      	adds	r5, r1, r4
 800708a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800708e:	42ab      	cmp	r3, r5
 8007090:	d0f4      	beq.n	800707c <memcmp+0x4>
 8007092:	1b58      	subs	r0, r3, r5
 8007094:	bd30      	pop	{r4, r5, pc}

08007096 <memcpy>:
 8007096:	b510      	push	{r4, lr}
 8007098:	1e43      	subs	r3, r0, #1
 800709a:	440a      	add	r2, r1
 800709c:	4291      	cmp	r1, r2
 800709e:	d100      	bne.n	80070a2 <memcpy+0xc>
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	e7f7      	b.n	800709c <memcpy+0x6>

080070ac <memset>:
 80070ac:	4402      	add	r2, r0
 80070ae:	4603      	mov	r3, r0
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d100      	bne.n	80070b6 <memset+0xa>
 80070b4:	4770      	bx	lr
 80070b6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ba:	e7f9      	b.n	80070b0 <memset+0x4>

080070bc <_vsiprintf_r>:
 80070bc:	b500      	push	{lr}
 80070be:	b09b      	sub	sp, #108	; 0x6c
 80070c0:	9100      	str	r1, [sp, #0]
 80070c2:	9104      	str	r1, [sp, #16]
 80070c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070c8:	9105      	str	r1, [sp, #20]
 80070ca:	9102      	str	r1, [sp, #8]
 80070cc:	4905      	ldr	r1, [pc, #20]	; (80070e4 <_vsiprintf_r+0x28>)
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	4669      	mov	r1, sp
 80070d2:	f000 f86d 	bl	80071b0 <_svfiprintf_r>
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	b01b      	add	sp, #108	; 0x6c
 80070de:	f85d fb04 	ldr.w	pc, [sp], #4
 80070e2:	bf00      	nop
 80070e4:	ffff0208 	.word	0xffff0208

080070e8 <vsiprintf>:
 80070e8:	4613      	mov	r3, r2
 80070ea:	460a      	mov	r2, r1
 80070ec:	4601      	mov	r1, r0
 80070ee:	4802      	ldr	r0, [pc, #8]	; (80070f8 <vsiprintf+0x10>)
 80070f0:	6800      	ldr	r0, [r0, #0]
 80070f2:	f7ff bfe3 	b.w	80070bc <_vsiprintf_r>
 80070f6:	bf00      	nop
 80070f8:	20000014 	.word	0x20000014

080070fc <__ssputs_r>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	688e      	ldr	r6, [r1, #8]
 8007102:	429e      	cmp	r6, r3
 8007104:	4682      	mov	sl, r0
 8007106:	460c      	mov	r4, r1
 8007108:	4690      	mov	r8, r2
 800710a:	4699      	mov	r9, r3
 800710c:	d837      	bhi.n	800717e <__ssputs_r+0x82>
 800710e:	898a      	ldrh	r2, [r1, #12]
 8007110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007114:	d031      	beq.n	800717a <__ssputs_r+0x7e>
 8007116:	6825      	ldr	r5, [r4, #0]
 8007118:	6909      	ldr	r1, [r1, #16]
 800711a:	1a6f      	subs	r7, r5, r1
 800711c:	6965      	ldr	r5, [r4, #20]
 800711e:	2302      	movs	r3, #2
 8007120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007124:	fb95 f5f3 	sdiv	r5, r5, r3
 8007128:	f109 0301 	add.w	r3, r9, #1
 800712c:	443b      	add	r3, r7
 800712e:	429d      	cmp	r5, r3
 8007130:	bf38      	it	cc
 8007132:	461d      	movcc	r5, r3
 8007134:	0553      	lsls	r3, r2, #21
 8007136:	d530      	bpl.n	800719a <__ssputs_r+0x9e>
 8007138:	4629      	mov	r1, r5
 800713a:	f000 fb21 	bl	8007780 <_malloc_r>
 800713e:	4606      	mov	r6, r0
 8007140:	b950      	cbnz	r0, 8007158 <__ssputs_r+0x5c>
 8007142:	230c      	movs	r3, #12
 8007144:	f8ca 3000 	str.w	r3, [sl]
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	463a      	mov	r2, r7
 800715a:	6921      	ldr	r1, [r4, #16]
 800715c:	f7ff ff9b 	bl	8007096 <memcpy>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	6126      	str	r6, [r4, #16]
 800716e:	6165      	str	r5, [r4, #20]
 8007170:	443e      	add	r6, r7
 8007172:	1bed      	subs	r5, r5, r7
 8007174:	6026      	str	r6, [r4, #0]
 8007176:	60a5      	str	r5, [r4, #8]
 8007178:	464e      	mov	r6, r9
 800717a:	454e      	cmp	r6, r9
 800717c:	d900      	bls.n	8007180 <__ssputs_r+0x84>
 800717e:	464e      	mov	r6, r9
 8007180:	4632      	mov	r2, r6
 8007182:	4641      	mov	r1, r8
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	f000 fa93 	bl	80076b0 <memmove>
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	60a3      	str	r3, [r4, #8]
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	441e      	add	r6, r3
 8007194:	6026      	str	r6, [r4, #0]
 8007196:	2000      	movs	r0, #0
 8007198:	e7dc      	b.n	8007154 <__ssputs_r+0x58>
 800719a:	462a      	mov	r2, r5
 800719c:	f000 fb4a 	bl	8007834 <_realloc_r>
 80071a0:	4606      	mov	r6, r0
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d1e2      	bne.n	800716c <__ssputs_r+0x70>
 80071a6:	6921      	ldr	r1, [r4, #16]
 80071a8:	4650      	mov	r0, sl
 80071aa:	f000 fa9b 	bl	80076e4 <_free_r>
 80071ae:	e7c8      	b.n	8007142 <__ssputs_r+0x46>

080071b0 <_svfiprintf_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	461d      	mov	r5, r3
 80071b6:	898b      	ldrh	r3, [r1, #12]
 80071b8:	061f      	lsls	r7, r3, #24
 80071ba:	b09d      	sub	sp, #116	; 0x74
 80071bc:	4680      	mov	r8, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	4616      	mov	r6, r2
 80071c2:	d50f      	bpl.n	80071e4 <_svfiprintf_r+0x34>
 80071c4:	690b      	ldr	r3, [r1, #16]
 80071c6:	b96b      	cbnz	r3, 80071e4 <_svfiprintf_r+0x34>
 80071c8:	2140      	movs	r1, #64	; 0x40
 80071ca:	f000 fad9 	bl	8007780 <_malloc_r>
 80071ce:	6020      	str	r0, [r4, #0]
 80071d0:	6120      	str	r0, [r4, #16]
 80071d2:	b928      	cbnz	r0, 80071e0 <_svfiprintf_r+0x30>
 80071d4:	230c      	movs	r3, #12
 80071d6:	f8c8 3000 	str.w	r3, [r8]
 80071da:	f04f 30ff 	mov.w	r0, #4294967295
 80071de:	e0c8      	b.n	8007372 <_svfiprintf_r+0x1c2>
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	6163      	str	r3, [r4, #20]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9309      	str	r3, [sp, #36]	; 0x24
 80071e8:	2320      	movs	r3, #32
 80071ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071ee:	2330      	movs	r3, #48	; 0x30
 80071f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071f4:	9503      	str	r5, [sp, #12]
 80071f6:	f04f 0b01 	mov.w	fp, #1
 80071fa:	4637      	mov	r7, r6
 80071fc:	463d      	mov	r5, r7
 80071fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007202:	b10b      	cbz	r3, 8007208 <_svfiprintf_r+0x58>
 8007204:	2b25      	cmp	r3, #37	; 0x25
 8007206:	d13e      	bne.n	8007286 <_svfiprintf_r+0xd6>
 8007208:	ebb7 0a06 	subs.w	sl, r7, r6
 800720c:	d00b      	beq.n	8007226 <_svfiprintf_r+0x76>
 800720e:	4653      	mov	r3, sl
 8007210:	4632      	mov	r2, r6
 8007212:	4621      	mov	r1, r4
 8007214:	4640      	mov	r0, r8
 8007216:	f7ff ff71 	bl	80070fc <__ssputs_r>
 800721a:	3001      	adds	r0, #1
 800721c:	f000 80a4 	beq.w	8007368 <_svfiprintf_r+0x1b8>
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	4453      	add	r3, sl
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	783b      	ldrb	r3, [r7, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 809d 	beq.w	8007368 <_svfiprintf_r+0x1b8>
 800722e:	2300      	movs	r3, #0
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9307      	str	r3, [sp, #28]
 800723c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007240:	931a      	str	r3, [sp, #104]	; 0x68
 8007242:	462f      	mov	r7, r5
 8007244:	2205      	movs	r2, #5
 8007246:	f817 1b01 	ldrb.w	r1, [r7], #1
 800724a:	4850      	ldr	r0, [pc, #320]	; (800738c <_svfiprintf_r+0x1dc>)
 800724c:	f7f9 f818 	bl	8000280 <memchr>
 8007250:	9b04      	ldr	r3, [sp, #16]
 8007252:	b9d0      	cbnz	r0, 800728a <_svfiprintf_r+0xda>
 8007254:	06d9      	lsls	r1, r3, #27
 8007256:	bf44      	itt	mi
 8007258:	2220      	movmi	r2, #32
 800725a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800725e:	071a      	lsls	r2, r3, #28
 8007260:	bf44      	itt	mi
 8007262:	222b      	movmi	r2, #43	; 0x2b
 8007264:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007268:	782a      	ldrb	r2, [r5, #0]
 800726a:	2a2a      	cmp	r2, #42	; 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xea>
 800726e:	9a07      	ldr	r2, [sp, #28]
 8007270:	462f      	mov	r7, r5
 8007272:	2000      	movs	r0, #0
 8007274:	250a      	movs	r5, #10
 8007276:	4639      	mov	r1, r7
 8007278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727c:	3b30      	subs	r3, #48	; 0x30
 800727e:	2b09      	cmp	r3, #9
 8007280:	d94d      	bls.n	800731e <_svfiprintf_r+0x16e>
 8007282:	b1b8      	cbz	r0, 80072b4 <_svfiprintf_r+0x104>
 8007284:	e00f      	b.n	80072a6 <_svfiprintf_r+0xf6>
 8007286:	462f      	mov	r7, r5
 8007288:	e7b8      	b.n	80071fc <_svfiprintf_r+0x4c>
 800728a:	4a40      	ldr	r2, [pc, #256]	; (800738c <_svfiprintf_r+0x1dc>)
 800728c:	1a80      	subs	r0, r0, r2
 800728e:	fa0b f000 	lsl.w	r0, fp, r0
 8007292:	4318      	orrs	r0, r3
 8007294:	9004      	str	r0, [sp, #16]
 8007296:	463d      	mov	r5, r7
 8007298:	e7d3      	b.n	8007242 <_svfiprintf_r+0x92>
 800729a:	9a03      	ldr	r2, [sp, #12]
 800729c:	1d11      	adds	r1, r2, #4
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	db01      	blt.n	80072aa <_svfiprintf_r+0xfa>
 80072a6:	9207      	str	r2, [sp, #28]
 80072a8:	e004      	b.n	80072b4 <_svfiprintf_r+0x104>
 80072aa:	4252      	negs	r2, r2
 80072ac:	f043 0302 	orr.w	r3, r3, #2
 80072b0:	9207      	str	r2, [sp, #28]
 80072b2:	9304      	str	r3, [sp, #16]
 80072b4:	783b      	ldrb	r3, [r7, #0]
 80072b6:	2b2e      	cmp	r3, #46	; 0x2e
 80072b8:	d10c      	bne.n	80072d4 <_svfiprintf_r+0x124>
 80072ba:	787b      	ldrb	r3, [r7, #1]
 80072bc:	2b2a      	cmp	r3, #42	; 0x2a
 80072be:	d133      	bne.n	8007328 <_svfiprintf_r+0x178>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfb8      	it	lt
 80072cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80072d0:	3702      	adds	r7, #2
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	4d2e      	ldr	r5, [pc, #184]	; (8007390 <_svfiprintf_r+0x1e0>)
 80072d6:	7839      	ldrb	r1, [r7, #0]
 80072d8:	2203      	movs	r2, #3
 80072da:	4628      	mov	r0, r5
 80072dc:	f7f8 ffd0 	bl	8000280 <memchr>
 80072e0:	b138      	cbz	r0, 80072f2 <_svfiprintf_r+0x142>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	1b40      	subs	r0, r0, r5
 80072e6:	fa03 f000 	lsl.w	r0, r3, r0
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	4303      	orrs	r3, r0
 80072ee:	3701      	adds	r7, #1
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	7839      	ldrb	r1, [r7, #0]
 80072f4:	4827      	ldr	r0, [pc, #156]	; (8007394 <_svfiprintf_r+0x1e4>)
 80072f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072fa:	2206      	movs	r2, #6
 80072fc:	1c7e      	adds	r6, r7, #1
 80072fe:	f7f8 ffbf 	bl	8000280 <memchr>
 8007302:	2800      	cmp	r0, #0
 8007304:	d038      	beq.n	8007378 <_svfiprintf_r+0x1c8>
 8007306:	4b24      	ldr	r3, [pc, #144]	; (8007398 <_svfiprintf_r+0x1e8>)
 8007308:	bb13      	cbnz	r3, 8007350 <_svfiprintf_r+0x1a0>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	3307      	adds	r3, #7
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	3308      	adds	r3, #8
 8007314:	9303      	str	r3, [sp, #12]
 8007316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007318:	444b      	add	r3, r9
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	e76d      	b.n	80071fa <_svfiprintf_r+0x4a>
 800731e:	fb05 3202 	mla	r2, r5, r2, r3
 8007322:	2001      	movs	r0, #1
 8007324:	460f      	mov	r7, r1
 8007326:	e7a6      	b.n	8007276 <_svfiprintf_r+0xc6>
 8007328:	2300      	movs	r3, #0
 800732a:	3701      	adds	r7, #1
 800732c:	9305      	str	r3, [sp, #20]
 800732e:	4619      	mov	r1, r3
 8007330:	250a      	movs	r5, #10
 8007332:	4638      	mov	r0, r7
 8007334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007338:	3a30      	subs	r2, #48	; 0x30
 800733a:	2a09      	cmp	r2, #9
 800733c:	d903      	bls.n	8007346 <_svfiprintf_r+0x196>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0c8      	beq.n	80072d4 <_svfiprintf_r+0x124>
 8007342:	9105      	str	r1, [sp, #20]
 8007344:	e7c6      	b.n	80072d4 <_svfiprintf_r+0x124>
 8007346:	fb05 2101 	mla	r1, r5, r1, r2
 800734a:	2301      	movs	r3, #1
 800734c:	4607      	mov	r7, r0
 800734e:	e7f0      	b.n	8007332 <_svfiprintf_r+0x182>
 8007350:	ab03      	add	r3, sp, #12
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	4622      	mov	r2, r4
 8007356:	4b11      	ldr	r3, [pc, #68]	; (800739c <_svfiprintf_r+0x1ec>)
 8007358:	a904      	add	r1, sp, #16
 800735a:	4640      	mov	r0, r8
 800735c:	f3af 8000 	nop.w
 8007360:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007364:	4681      	mov	r9, r0
 8007366:	d1d6      	bne.n	8007316 <_svfiprintf_r+0x166>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	065b      	lsls	r3, r3, #25
 800736c:	f53f af35 	bmi.w	80071da <_svfiprintf_r+0x2a>
 8007370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007372:	b01d      	add	sp, #116	; 0x74
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007378:	ab03      	add	r3, sp, #12
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4622      	mov	r2, r4
 800737e:	4b07      	ldr	r3, [pc, #28]	; (800739c <_svfiprintf_r+0x1ec>)
 8007380:	a904      	add	r1, sp, #16
 8007382:	4640      	mov	r0, r8
 8007384:	f000 f882 	bl	800748c <_printf_i>
 8007388:	e7ea      	b.n	8007360 <_svfiprintf_r+0x1b0>
 800738a:	bf00      	nop
 800738c:	08007a32 	.word	0x08007a32
 8007390:	08007a38 	.word	0x08007a38
 8007394:	08007a3c 	.word	0x08007a3c
 8007398:	00000000 	.word	0x00000000
 800739c:	080070fd 	.word	0x080070fd

080073a0 <_printf_common>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	4691      	mov	r9, r2
 80073a6:	461f      	mov	r7, r3
 80073a8:	688a      	ldr	r2, [r1, #8]
 80073aa:	690b      	ldr	r3, [r1, #16]
 80073ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bfb8      	it	lt
 80073b4:	4613      	movlt	r3, r2
 80073b6:	f8c9 3000 	str.w	r3, [r9]
 80073ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073be:	4606      	mov	r6, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	b112      	cbz	r2, 80073ca <_printf_common+0x2a>
 80073c4:	3301      	adds	r3, #1
 80073c6:	f8c9 3000 	str.w	r3, [r9]
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	0699      	lsls	r1, r3, #26
 80073ce:	bf42      	ittt	mi
 80073d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80073d4:	3302      	addmi	r3, #2
 80073d6:	f8c9 3000 	strmi.w	r3, [r9]
 80073da:	6825      	ldr	r5, [r4, #0]
 80073dc:	f015 0506 	ands.w	r5, r5, #6
 80073e0:	d107      	bne.n	80073f2 <_printf_common+0x52>
 80073e2:	f104 0a19 	add.w	sl, r4, #25
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	f8d9 2000 	ldr.w	r2, [r9]
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	42ab      	cmp	r3, r5
 80073f0:	dc28      	bgt.n	8007444 <_printf_common+0xa4>
 80073f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	3300      	adds	r3, #0
 80073fa:	bf18      	it	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	0692      	lsls	r2, r2, #26
 8007400:	d42d      	bmi.n	800745e <_printf_common+0xbe>
 8007402:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007406:	4639      	mov	r1, r7
 8007408:	4630      	mov	r0, r6
 800740a:	47c0      	blx	r8
 800740c:	3001      	adds	r0, #1
 800740e:	d020      	beq.n	8007452 <_printf_common+0xb2>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	68e5      	ldr	r5, [r4, #12]
 8007414:	f8d9 2000 	ldr.w	r2, [r9]
 8007418:	f003 0306 	and.w	r3, r3, #6
 800741c:	2b04      	cmp	r3, #4
 800741e:	bf08      	it	eq
 8007420:	1aad      	subeq	r5, r5, r2
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	6922      	ldr	r2, [r4, #16]
 8007426:	bf0c      	ite	eq
 8007428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800742c:	2500      	movne	r5, #0
 800742e:	4293      	cmp	r3, r2
 8007430:	bfc4      	itt	gt
 8007432:	1a9b      	subgt	r3, r3, r2
 8007434:	18ed      	addgt	r5, r5, r3
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	341a      	adds	r4, #26
 800743c:	454d      	cmp	r5, r9
 800743e:	d11a      	bne.n	8007476 <_printf_common+0xd6>
 8007440:	2000      	movs	r0, #0
 8007442:	e008      	b.n	8007456 <_printf_common+0xb6>
 8007444:	2301      	movs	r3, #1
 8007446:	4652      	mov	r2, sl
 8007448:	4639      	mov	r1, r7
 800744a:	4630      	mov	r0, r6
 800744c:	47c0      	blx	r8
 800744e:	3001      	adds	r0, #1
 8007450:	d103      	bne.n	800745a <_printf_common+0xba>
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745a:	3501      	adds	r5, #1
 800745c:	e7c3      	b.n	80073e6 <_printf_common+0x46>
 800745e:	18e1      	adds	r1, r4, r3
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	2030      	movs	r0, #48	; 0x30
 8007464:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007468:	4422      	add	r2, r4
 800746a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800746e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007472:	3302      	adds	r3, #2
 8007474:	e7c5      	b.n	8007402 <_printf_common+0x62>
 8007476:	2301      	movs	r3, #1
 8007478:	4622      	mov	r2, r4
 800747a:	4639      	mov	r1, r7
 800747c:	4630      	mov	r0, r6
 800747e:	47c0      	blx	r8
 8007480:	3001      	adds	r0, #1
 8007482:	d0e6      	beq.n	8007452 <_printf_common+0xb2>
 8007484:	f109 0901 	add.w	r9, r9, #1
 8007488:	e7d8      	b.n	800743c <_printf_common+0x9c>
	...

0800748c <_printf_i>:
 800748c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007490:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007494:	460c      	mov	r4, r1
 8007496:	7e09      	ldrb	r1, [r1, #24]
 8007498:	b085      	sub	sp, #20
 800749a:	296e      	cmp	r1, #110	; 0x6e
 800749c:	4617      	mov	r7, r2
 800749e:	4606      	mov	r6, r0
 80074a0:	4698      	mov	r8, r3
 80074a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a4:	f000 80b3 	beq.w	800760e <_printf_i+0x182>
 80074a8:	d822      	bhi.n	80074f0 <_printf_i+0x64>
 80074aa:	2963      	cmp	r1, #99	; 0x63
 80074ac:	d036      	beq.n	800751c <_printf_i+0x90>
 80074ae:	d80a      	bhi.n	80074c6 <_printf_i+0x3a>
 80074b0:	2900      	cmp	r1, #0
 80074b2:	f000 80b9 	beq.w	8007628 <_printf_i+0x19c>
 80074b6:	2958      	cmp	r1, #88	; 0x58
 80074b8:	f000 8083 	beq.w	80075c2 <_printf_i+0x136>
 80074bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80074c4:	e032      	b.n	800752c <_printf_i+0xa0>
 80074c6:	2964      	cmp	r1, #100	; 0x64
 80074c8:	d001      	beq.n	80074ce <_printf_i+0x42>
 80074ca:	2969      	cmp	r1, #105	; 0x69
 80074cc:	d1f6      	bne.n	80074bc <_printf_i+0x30>
 80074ce:	6820      	ldr	r0, [r4, #0]
 80074d0:	6813      	ldr	r3, [r2, #0]
 80074d2:	0605      	lsls	r5, r0, #24
 80074d4:	f103 0104 	add.w	r1, r3, #4
 80074d8:	d52a      	bpl.n	8007530 <_printf_i+0xa4>
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da03      	bge.n	80074ea <_printf_i+0x5e>
 80074e2:	222d      	movs	r2, #45	; 0x2d
 80074e4:	425b      	negs	r3, r3
 80074e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80074ea:	486f      	ldr	r0, [pc, #444]	; (80076a8 <_printf_i+0x21c>)
 80074ec:	220a      	movs	r2, #10
 80074ee:	e039      	b.n	8007564 <_printf_i+0xd8>
 80074f0:	2973      	cmp	r1, #115	; 0x73
 80074f2:	f000 809d 	beq.w	8007630 <_printf_i+0x1a4>
 80074f6:	d808      	bhi.n	800750a <_printf_i+0x7e>
 80074f8:	296f      	cmp	r1, #111	; 0x6f
 80074fa:	d020      	beq.n	800753e <_printf_i+0xb2>
 80074fc:	2970      	cmp	r1, #112	; 0x70
 80074fe:	d1dd      	bne.n	80074bc <_printf_i+0x30>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	f043 0320 	orr.w	r3, r3, #32
 8007506:	6023      	str	r3, [r4, #0]
 8007508:	e003      	b.n	8007512 <_printf_i+0x86>
 800750a:	2975      	cmp	r1, #117	; 0x75
 800750c:	d017      	beq.n	800753e <_printf_i+0xb2>
 800750e:	2978      	cmp	r1, #120	; 0x78
 8007510:	d1d4      	bne.n	80074bc <_printf_i+0x30>
 8007512:	2378      	movs	r3, #120	; 0x78
 8007514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007518:	4864      	ldr	r0, [pc, #400]	; (80076ac <_printf_i+0x220>)
 800751a:	e055      	b.n	80075c8 <_printf_i+0x13c>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	1d19      	adds	r1, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6011      	str	r1, [r2, #0]
 8007524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800752c:	2301      	movs	r3, #1
 800752e:	e08c      	b.n	800764a <_printf_i+0x1be>
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6011      	str	r1, [r2, #0]
 8007534:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007538:	bf18      	it	ne
 800753a:	b21b      	sxthne	r3, r3
 800753c:	e7cf      	b.n	80074de <_printf_i+0x52>
 800753e:	6813      	ldr	r3, [r2, #0]
 8007540:	6825      	ldr	r5, [r4, #0]
 8007542:	1d18      	adds	r0, r3, #4
 8007544:	6010      	str	r0, [r2, #0]
 8007546:	0628      	lsls	r0, r5, #24
 8007548:	d501      	bpl.n	800754e <_printf_i+0xc2>
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	e002      	b.n	8007554 <_printf_i+0xc8>
 800754e:	0668      	lsls	r0, r5, #25
 8007550:	d5fb      	bpl.n	800754a <_printf_i+0xbe>
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	4854      	ldr	r0, [pc, #336]	; (80076a8 <_printf_i+0x21c>)
 8007556:	296f      	cmp	r1, #111	; 0x6f
 8007558:	bf14      	ite	ne
 800755a:	220a      	movne	r2, #10
 800755c:	2208      	moveq	r2, #8
 800755e:	2100      	movs	r1, #0
 8007560:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007564:	6865      	ldr	r5, [r4, #4]
 8007566:	60a5      	str	r5, [r4, #8]
 8007568:	2d00      	cmp	r5, #0
 800756a:	f2c0 8095 	blt.w	8007698 <_printf_i+0x20c>
 800756e:	6821      	ldr	r1, [r4, #0]
 8007570:	f021 0104 	bic.w	r1, r1, #4
 8007574:	6021      	str	r1, [r4, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d13d      	bne.n	80075f6 <_printf_i+0x16a>
 800757a:	2d00      	cmp	r5, #0
 800757c:	f040 808e 	bne.w	800769c <_printf_i+0x210>
 8007580:	4665      	mov	r5, ip
 8007582:	2a08      	cmp	r2, #8
 8007584:	d10b      	bne.n	800759e <_printf_i+0x112>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07db      	lsls	r3, r3, #31
 800758a:	d508      	bpl.n	800759e <_printf_i+0x112>
 800758c:	6923      	ldr	r3, [r4, #16]
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	bfde      	ittt	le
 8007594:	2330      	movle	r3, #48	; 0x30
 8007596:	f805 3c01 	strble.w	r3, [r5, #-1]
 800759a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800759e:	ebac 0305 	sub.w	r3, ip, r5
 80075a2:	6123      	str	r3, [r4, #16]
 80075a4:	f8cd 8000 	str.w	r8, [sp]
 80075a8:	463b      	mov	r3, r7
 80075aa:	aa03      	add	r2, sp, #12
 80075ac:	4621      	mov	r1, r4
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff fef6 	bl	80073a0 <_printf_common>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d14d      	bne.n	8007654 <_printf_i+0x1c8>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	b005      	add	sp, #20
 80075be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075c2:	4839      	ldr	r0, [pc, #228]	; (80076a8 <_printf_i+0x21c>)
 80075c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80075c8:	6813      	ldr	r3, [r2, #0]
 80075ca:	6821      	ldr	r1, [r4, #0]
 80075cc:	1d1d      	adds	r5, r3, #4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6015      	str	r5, [r2, #0]
 80075d2:	060a      	lsls	r2, r1, #24
 80075d4:	d50b      	bpl.n	80075ee <_printf_i+0x162>
 80075d6:	07ca      	lsls	r2, r1, #31
 80075d8:	bf44      	itt	mi
 80075da:	f041 0120 	orrmi.w	r1, r1, #32
 80075de:	6021      	strmi	r1, [r4, #0]
 80075e0:	b91b      	cbnz	r3, 80075ea <_printf_i+0x15e>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	f022 0220 	bic.w	r2, r2, #32
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	2210      	movs	r2, #16
 80075ec:	e7b7      	b.n	800755e <_printf_i+0xd2>
 80075ee:	064d      	lsls	r5, r1, #25
 80075f0:	bf48      	it	mi
 80075f2:	b29b      	uxthmi	r3, r3
 80075f4:	e7ef      	b.n	80075d6 <_printf_i+0x14a>
 80075f6:	4665      	mov	r5, ip
 80075f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80075fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007600:	5cc3      	ldrb	r3, [r0, r3]
 8007602:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007606:	460b      	mov	r3, r1
 8007608:	2900      	cmp	r1, #0
 800760a:	d1f5      	bne.n	80075f8 <_printf_i+0x16c>
 800760c:	e7b9      	b.n	8007582 <_printf_i+0xf6>
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	6961      	ldr	r1, [r4, #20]
 8007614:	1d18      	adds	r0, r3, #4
 8007616:	6010      	str	r0, [r2, #0]
 8007618:	0628      	lsls	r0, r5, #24
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	d501      	bpl.n	8007622 <_printf_i+0x196>
 800761e:	6019      	str	r1, [r3, #0]
 8007620:	e002      	b.n	8007628 <_printf_i+0x19c>
 8007622:	066a      	lsls	r2, r5, #25
 8007624:	d5fb      	bpl.n	800761e <_printf_i+0x192>
 8007626:	8019      	strh	r1, [r3, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	4665      	mov	r5, ip
 800762e:	e7b9      	b.n	80075a4 <_printf_i+0x118>
 8007630:	6813      	ldr	r3, [r2, #0]
 8007632:	1d19      	adds	r1, r3, #4
 8007634:	6011      	str	r1, [r2, #0]
 8007636:	681d      	ldr	r5, [r3, #0]
 8007638:	6862      	ldr	r2, [r4, #4]
 800763a:	2100      	movs	r1, #0
 800763c:	4628      	mov	r0, r5
 800763e:	f7f8 fe1f 	bl	8000280 <memchr>
 8007642:	b108      	cbz	r0, 8007648 <_printf_i+0x1bc>
 8007644:	1b40      	subs	r0, r0, r5
 8007646:	6060      	str	r0, [r4, #4]
 8007648:	6863      	ldr	r3, [r4, #4]
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	2300      	movs	r3, #0
 800764e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007652:	e7a7      	b.n	80075a4 <_printf_i+0x118>
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	462a      	mov	r2, r5
 8007658:	4639      	mov	r1, r7
 800765a:	4630      	mov	r0, r6
 800765c:	47c0      	blx	r8
 800765e:	3001      	adds	r0, #1
 8007660:	d0aa      	beq.n	80075b8 <_printf_i+0x12c>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	079b      	lsls	r3, r3, #30
 8007666:	d413      	bmi.n	8007690 <_printf_i+0x204>
 8007668:	68e0      	ldr	r0, [r4, #12]
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	4298      	cmp	r0, r3
 800766e:	bfb8      	it	lt
 8007670:	4618      	movlt	r0, r3
 8007672:	e7a3      	b.n	80075bc <_printf_i+0x130>
 8007674:	2301      	movs	r3, #1
 8007676:	464a      	mov	r2, r9
 8007678:	4639      	mov	r1, r7
 800767a:	4630      	mov	r0, r6
 800767c:	47c0      	blx	r8
 800767e:	3001      	adds	r0, #1
 8007680:	d09a      	beq.n	80075b8 <_printf_i+0x12c>
 8007682:	3501      	adds	r5, #1
 8007684:	68e3      	ldr	r3, [r4, #12]
 8007686:	9a03      	ldr	r2, [sp, #12]
 8007688:	1a9b      	subs	r3, r3, r2
 800768a:	42ab      	cmp	r3, r5
 800768c:	dcf2      	bgt.n	8007674 <_printf_i+0x1e8>
 800768e:	e7eb      	b.n	8007668 <_printf_i+0x1dc>
 8007690:	2500      	movs	r5, #0
 8007692:	f104 0919 	add.w	r9, r4, #25
 8007696:	e7f5      	b.n	8007684 <_printf_i+0x1f8>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1ac      	bne.n	80075f6 <_printf_i+0x16a>
 800769c:	7803      	ldrb	r3, [r0, #0]
 800769e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a6:	e76c      	b.n	8007582 <_printf_i+0xf6>
 80076a8:	08007a43 	.word	0x08007a43
 80076ac:	08007a54 	.word	0x08007a54

080076b0 <memmove>:
 80076b0:	4288      	cmp	r0, r1
 80076b2:	b510      	push	{r4, lr}
 80076b4:	eb01 0302 	add.w	r3, r1, r2
 80076b8:	d807      	bhi.n	80076ca <memmove+0x1a>
 80076ba:	1e42      	subs	r2, r0, #1
 80076bc:	4299      	cmp	r1, r3
 80076be:	d00a      	beq.n	80076d6 <memmove+0x26>
 80076c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076c8:	e7f8      	b.n	80076bc <memmove+0xc>
 80076ca:	4283      	cmp	r3, r0
 80076cc:	d9f5      	bls.n	80076ba <memmove+0xa>
 80076ce:	1881      	adds	r1, r0, r2
 80076d0:	1ad2      	subs	r2, r2, r3
 80076d2:	42d3      	cmn	r3, r2
 80076d4:	d100      	bne.n	80076d8 <memmove+0x28>
 80076d6:	bd10      	pop	{r4, pc}
 80076d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076e0:	e7f7      	b.n	80076d2 <memmove+0x22>
	...

080076e4 <_free_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4605      	mov	r5, r0
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d045      	beq.n	8007778 <_free_r+0x94>
 80076ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076f0:	1f0c      	subs	r4, r1, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfb8      	it	lt
 80076f6:	18e4      	addlt	r4, r4, r3
 80076f8:	f000 f8d2 	bl	80078a0 <__malloc_lock>
 80076fc:	4a1f      	ldr	r2, [pc, #124]	; (800777c <_free_r+0x98>)
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	4610      	mov	r0, r2
 8007702:	b933      	cbnz	r3, 8007712 <_free_r+0x2e>
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	6014      	str	r4, [r2, #0]
 8007708:	4628      	mov	r0, r5
 800770a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800770e:	f000 b8c8 	b.w	80078a2 <__malloc_unlock>
 8007712:	42a3      	cmp	r3, r4
 8007714:	d90c      	bls.n	8007730 <_free_r+0x4c>
 8007716:	6821      	ldr	r1, [r4, #0]
 8007718:	1862      	adds	r2, r4, r1
 800771a:	4293      	cmp	r3, r2
 800771c:	bf04      	itt	eq
 800771e:	681a      	ldreq	r2, [r3, #0]
 8007720:	685b      	ldreq	r3, [r3, #4]
 8007722:	6063      	str	r3, [r4, #4]
 8007724:	bf04      	itt	eq
 8007726:	1852      	addeq	r2, r2, r1
 8007728:	6022      	streq	r2, [r4, #0]
 800772a:	6004      	str	r4, [r0, #0]
 800772c:	e7ec      	b.n	8007708 <_free_r+0x24>
 800772e:	4613      	mov	r3, r2
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	b10a      	cbz	r2, 8007738 <_free_r+0x54>
 8007734:	42a2      	cmp	r2, r4
 8007736:	d9fa      	bls.n	800772e <_free_r+0x4a>
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	1858      	adds	r0, r3, r1
 800773c:	42a0      	cmp	r0, r4
 800773e:	d10b      	bne.n	8007758 <_free_r+0x74>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	4401      	add	r1, r0
 8007744:	1858      	adds	r0, r3, r1
 8007746:	4282      	cmp	r2, r0
 8007748:	6019      	str	r1, [r3, #0]
 800774a:	d1dd      	bne.n	8007708 <_free_r+0x24>
 800774c:	6810      	ldr	r0, [r2, #0]
 800774e:	6852      	ldr	r2, [r2, #4]
 8007750:	605a      	str	r2, [r3, #4]
 8007752:	4401      	add	r1, r0
 8007754:	6019      	str	r1, [r3, #0]
 8007756:	e7d7      	b.n	8007708 <_free_r+0x24>
 8007758:	d902      	bls.n	8007760 <_free_r+0x7c>
 800775a:	230c      	movs	r3, #12
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	e7d3      	b.n	8007708 <_free_r+0x24>
 8007760:	6820      	ldr	r0, [r4, #0]
 8007762:	1821      	adds	r1, r4, r0
 8007764:	428a      	cmp	r2, r1
 8007766:	bf04      	itt	eq
 8007768:	6811      	ldreq	r1, [r2, #0]
 800776a:	6852      	ldreq	r2, [r2, #4]
 800776c:	6062      	str	r2, [r4, #4]
 800776e:	bf04      	itt	eq
 8007770:	1809      	addeq	r1, r1, r0
 8007772:	6021      	streq	r1, [r4, #0]
 8007774:	605c      	str	r4, [r3, #4]
 8007776:	e7c7      	b.n	8007708 <_free_r+0x24>
 8007778:	bd38      	pop	{r3, r4, r5, pc}
 800777a:	bf00      	nop
 800777c:	200197d0 	.word	0x200197d0

08007780 <_malloc_r>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	1ccd      	adds	r5, r1, #3
 8007784:	f025 0503 	bic.w	r5, r5, #3
 8007788:	3508      	adds	r5, #8
 800778a:	2d0c      	cmp	r5, #12
 800778c:	bf38      	it	cc
 800778e:	250c      	movcc	r5, #12
 8007790:	2d00      	cmp	r5, #0
 8007792:	4606      	mov	r6, r0
 8007794:	db01      	blt.n	800779a <_malloc_r+0x1a>
 8007796:	42a9      	cmp	r1, r5
 8007798:	d903      	bls.n	80077a2 <_malloc_r+0x22>
 800779a:	230c      	movs	r3, #12
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	2000      	movs	r0, #0
 80077a0:	bd70      	pop	{r4, r5, r6, pc}
 80077a2:	f000 f87d 	bl	80078a0 <__malloc_lock>
 80077a6:	4a21      	ldr	r2, [pc, #132]	; (800782c <_malloc_r+0xac>)
 80077a8:	6814      	ldr	r4, [r2, #0]
 80077aa:	4621      	mov	r1, r4
 80077ac:	b991      	cbnz	r1, 80077d4 <_malloc_r+0x54>
 80077ae:	4c20      	ldr	r4, [pc, #128]	; (8007830 <_malloc_r+0xb0>)
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	b91b      	cbnz	r3, 80077bc <_malloc_r+0x3c>
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f863 	bl	8007880 <_sbrk_r>
 80077ba:	6020      	str	r0, [r4, #0]
 80077bc:	4629      	mov	r1, r5
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 f85e 	bl	8007880 <_sbrk_r>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d124      	bne.n	8007812 <_malloc_r+0x92>
 80077c8:	230c      	movs	r3, #12
 80077ca:	6033      	str	r3, [r6, #0]
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 f868 	bl	80078a2 <__malloc_unlock>
 80077d2:	e7e4      	b.n	800779e <_malloc_r+0x1e>
 80077d4:	680b      	ldr	r3, [r1, #0]
 80077d6:	1b5b      	subs	r3, r3, r5
 80077d8:	d418      	bmi.n	800780c <_malloc_r+0x8c>
 80077da:	2b0b      	cmp	r3, #11
 80077dc:	d90f      	bls.n	80077fe <_malloc_r+0x7e>
 80077de:	600b      	str	r3, [r1, #0]
 80077e0:	50cd      	str	r5, [r1, r3]
 80077e2:	18cc      	adds	r4, r1, r3
 80077e4:	4630      	mov	r0, r6
 80077e6:	f000 f85c 	bl	80078a2 <__malloc_unlock>
 80077ea:	f104 000b 	add.w	r0, r4, #11
 80077ee:	1d23      	adds	r3, r4, #4
 80077f0:	f020 0007 	bic.w	r0, r0, #7
 80077f4:	1ac3      	subs	r3, r0, r3
 80077f6:	d0d3      	beq.n	80077a0 <_malloc_r+0x20>
 80077f8:	425a      	negs	r2, r3
 80077fa:	50e2      	str	r2, [r4, r3]
 80077fc:	e7d0      	b.n	80077a0 <_malloc_r+0x20>
 80077fe:	428c      	cmp	r4, r1
 8007800:	684b      	ldr	r3, [r1, #4]
 8007802:	bf16      	itet	ne
 8007804:	6063      	strne	r3, [r4, #4]
 8007806:	6013      	streq	r3, [r2, #0]
 8007808:	460c      	movne	r4, r1
 800780a:	e7eb      	b.n	80077e4 <_malloc_r+0x64>
 800780c:	460c      	mov	r4, r1
 800780e:	6849      	ldr	r1, [r1, #4]
 8007810:	e7cc      	b.n	80077ac <_malloc_r+0x2c>
 8007812:	1cc4      	adds	r4, r0, #3
 8007814:	f024 0403 	bic.w	r4, r4, #3
 8007818:	42a0      	cmp	r0, r4
 800781a:	d005      	beq.n	8007828 <_malloc_r+0xa8>
 800781c:	1a21      	subs	r1, r4, r0
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f82e 	bl	8007880 <_sbrk_r>
 8007824:	3001      	adds	r0, #1
 8007826:	d0cf      	beq.n	80077c8 <_malloc_r+0x48>
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	e7db      	b.n	80077e4 <_malloc_r+0x64>
 800782c:	200197d0 	.word	0x200197d0
 8007830:	200197d4 	.word	0x200197d4

08007834 <_realloc_r>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	4607      	mov	r7, r0
 8007838:	4614      	mov	r4, r2
 800783a:	460e      	mov	r6, r1
 800783c:	b921      	cbnz	r1, 8007848 <_realloc_r+0x14>
 800783e:	4611      	mov	r1, r2
 8007840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007844:	f7ff bf9c 	b.w	8007780 <_malloc_r>
 8007848:	b922      	cbnz	r2, 8007854 <_realloc_r+0x20>
 800784a:	f7ff ff4b 	bl	80076e4 <_free_r>
 800784e:	4625      	mov	r5, r4
 8007850:	4628      	mov	r0, r5
 8007852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007854:	f000 f826 	bl	80078a4 <_malloc_usable_size_r>
 8007858:	42a0      	cmp	r0, r4
 800785a:	d20f      	bcs.n	800787c <_realloc_r+0x48>
 800785c:	4621      	mov	r1, r4
 800785e:	4638      	mov	r0, r7
 8007860:	f7ff ff8e 	bl	8007780 <_malloc_r>
 8007864:	4605      	mov	r5, r0
 8007866:	2800      	cmp	r0, #0
 8007868:	d0f2      	beq.n	8007850 <_realloc_r+0x1c>
 800786a:	4631      	mov	r1, r6
 800786c:	4622      	mov	r2, r4
 800786e:	f7ff fc12 	bl	8007096 <memcpy>
 8007872:	4631      	mov	r1, r6
 8007874:	4638      	mov	r0, r7
 8007876:	f7ff ff35 	bl	80076e4 <_free_r>
 800787a:	e7e9      	b.n	8007850 <_realloc_r+0x1c>
 800787c:	4635      	mov	r5, r6
 800787e:	e7e7      	b.n	8007850 <_realloc_r+0x1c>

08007880 <_sbrk_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4c06      	ldr	r4, [pc, #24]	; (800789c <_sbrk_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4605      	mov	r5, r0
 8007888:	4608      	mov	r0, r1
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	f7fb f976 	bl	8002b7c <_sbrk>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_sbrk_r+0x1a>
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	b103      	cbz	r3, 800789a <_sbrk_r+0x1a>
 8007898:	602b      	str	r3, [r5, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	20019950 	.word	0x20019950

080078a0 <__malloc_lock>:
 80078a0:	4770      	bx	lr

080078a2 <__malloc_unlock>:
 80078a2:	4770      	bx	lr

080078a4 <_malloc_usable_size_r>:
 80078a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a8:	1f18      	subs	r0, r3, #4
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	bfbc      	itt	lt
 80078ae:	580b      	ldrlt	r3, [r1, r0]
 80078b0:	18c0      	addlt	r0, r0, r3
 80078b2:	4770      	bx	lr

080078b4 <_init>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr

080078c0 <_fini>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	bf00      	nop
 80078c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c6:	bc08      	pop	{r3}
 80078c8:	469e      	mov	lr, r3
 80078ca:	4770      	bx	lr
