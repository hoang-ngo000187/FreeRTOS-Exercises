
008Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006674  08006674  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800667c  0800667c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001928c  20000018  0800669c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200192a4  0800669c  000292a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014efa  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e2c  00000000  00000000  00034f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  00037d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  00038fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022abb  00000000  00000000  0003a098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f0dd  00000000  00000000  0005cb53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d74f9  00000000  00000000  0006bc30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd4  00000000  00000000  001431a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006524 	.word	0x08006524

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08006524 	.word	0x08006524

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8d8 	bl	80006ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f002 fdd0 	bl	80030a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f002 fd40 	bl	8002f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	200191a0 	.word	0x200191a0

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200191a0 	.word	0x200191a0

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff4c 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006d6:	f7ff ff61 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	6978      	ldr	r0, [r7, #20]
 80006e2:	f7ff ffb1 	bl	8000648 <NVIC_EncodePriority>
 80006e6:	4602      	mov	r2, r0
 80006e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff80 	bl	80005f4 <__NVIC_SetPriority>
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff54 	bl	80005b8 <__NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b02      	cmp	r3, #2
 800072a:	d004      	beq.n	8000736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00c      	b.n	8000750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2205      	movs	r2, #5
 800073a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f022 0201 	bic.w	r2, r2, #1
 800074c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	e16b      	b.n	8000a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000778:	2201      	movs	r2, #1
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	429a      	cmp	r2, r3
 8000792:	f040 815a 	bne.w	8000a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d00b      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d007      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007aa:	2b11      	cmp	r3, #17
 80007ac:	d003      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b12      	cmp	r3, #18
 80007b4:	d130      	bne.n	8000818 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2203      	movs	r2, #3
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	4013      	ands	r3, r2
 80007cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	4313      	orrs	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ec:	2201      	movs	r2, #1
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	f003 0201 	and.w	r2, r3, #1
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4313      	orrs	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2203      	movs	r2, #3
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4013      	ands	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0xfc>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d123      	bne.n	80008a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	08da      	lsrs	r2, r3, #3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3208      	adds	r2, #8
 8000860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	220f      	movs	r2, #15
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4313      	orrs	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	08da      	lsrs	r2, r3, #3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3208      	adds	r2, #8
 800089a:	69b9      	ldr	r1, [r7, #24]
 800089c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2203      	movs	r2, #3
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0203 	and.w	r2, r3, #3
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80b4 	beq.w	8000a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b5f      	ldr	r3, [pc, #380]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a5e      	ldr	r2, [pc, #376]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008fe:	4a5a      	ldr	r2, [pc, #360]	; (8000a68 <HAL_GPIO_Init+0x30c>)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3302      	adds	r3, #2
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	220f      	movs	r2, #15
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a51      	ldr	r2, [pc, #324]	; (8000a6c <HAL_GPIO_Init+0x310>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d02b      	beq.n	8000982 <HAL_GPIO_Init+0x226>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <HAL_GPIO_Init+0x314>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d025      	beq.n	800097e <HAL_GPIO_Init+0x222>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <HAL_GPIO_Init+0x318>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d01f      	beq.n	800097a <HAL_GPIO_Init+0x21e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4e      	ldr	r2, [pc, #312]	; (8000a78 <HAL_GPIO_Init+0x31c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <HAL_GPIO_Init+0x21a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <HAL_GPIO_Init+0x320>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d013      	beq.n	8000972 <HAL_GPIO_Init+0x216>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4c      	ldr	r2, [pc, #304]	; (8000a80 <HAL_GPIO_Init+0x324>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00d      	beq.n	800096e <HAL_GPIO_Init+0x212>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <HAL_GPIO_Init+0x328>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x20e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <HAL_GPIO_Init+0x32c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_GPIO_Init+0x20a>
 8000962:	2307      	movs	r3, #7
 8000964:	e00e      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000966:	2308      	movs	r3, #8
 8000968:	e00c      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800096a:	2306      	movs	r3, #6
 800096c:	e00a      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800096e:	2305      	movs	r3, #5
 8000970:	e008      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000972:	2304      	movs	r3, #4
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000976:	2303      	movs	r3, #3
 8000978:	e004      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800097a:	2302      	movs	r3, #2
 800097c:	e002      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000982:	2300      	movs	r3, #0
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	f002 0203 	and.w	r2, r2, #3
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	4093      	lsls	r3, r2
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000994:	4934      	ldr	r1, [pc, #208]	; (8000a68 <HAL_GPIO_Init+0x30c>)
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009c6:	4a31      	ldr	r2, [pc, #196]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009f0:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	f67f ae90 	bls.w	8000778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3724      	adds	r7, #36	; 0x24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40021400 	.word	0x40021400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40021c00 	.word	0x40021c00
 8000a8c:	40013c00 	.word	0x40013c00

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000aac:	e003      	b.n	8000ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	619a      	str	r2, [r3, #24]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e25b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d075      	beq.n	8000bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ae2:	4ba3      	ldr	r3, [pc, #652]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d00c      	beq.n	8000b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aee:	4ba0      	ldr	r3, [pc, #640]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d112      	bne.n	8000b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000afa:	4b9d      	ldr	r3, [pc, #628]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b06:	d10b      	bne.n	8000b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b08:	4b99      	ldr	r3, [pc, #612]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d05b      	beq.n	8000bcc <HAL_RCC_OscConfig+0x108>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d157      	bne.n	8000bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e236      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b28:	d106      	bne.n	8000b38 <HAL_RCC_OscConfig+0x74>
 8000b2a:	4b91      	ldr	r3, [pc, #580]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a90      	ldr	r2, [pc, #576]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e01d      	b.n	8000b74 <HAL_RCC_OscConfig+0xb0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b40:	d10c      	bne.n	8000b5c <HAL_RCC_OscConfig+0x98>
 8000b42:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a8a      	ldr	r2, [pc, #552]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e00b      	b.n	8000b74 <HAL_RCC_OscConfig+0xb0>
 8000b5c:	4b84      	ldr	r3, [pc, #528]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a83      	ldr	r2, [pc, #524]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b81      	ldr	r3, [pc, #516]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a80      	ldr	r2, [pc, #512]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fcde 	bl	800053c <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fcda 	bl	800053c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1fb      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0xc0>
 8000ba2:	e014      	b.n	8000bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fcca 	bl	800053c <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fcc6 	bl	800053c <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e1e7      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bbe:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0xe8>
 8000bca:	e000      	b.n	8000bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d063      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bda:	4b65      	ldr	r3, [pc, #404]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00b      	beq.n	8000bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d11c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bf2:	4b5f      	ldr	r3, [pc, #380]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d116      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <HAL_RCC_OscConfig+0x152>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e1bb      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4952      	ldr	r1, [pc, #328]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2a:	e03a      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d020      	beq.n	8000c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c34:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_RCC_OscConfig+0x2b0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fc7f 	bl	800053c <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c42:	f7ff fc7b 	bl	800053c <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e19c      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f0      	beq.n	8000c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4940      	ldr	r1, [pc, #256]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e015      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <HAL_RCC_OscConfig+0x2b0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc5e 	bl	800053c <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c84:	f7ff fc5a 	bl	800053c <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e17b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d030      	beq.n	8000d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d016      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_RCC_OscConfig+0x2b4>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fc3e 	bl	800053c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fc3a 	bl	800053c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e15b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x200>
 8000ce2:	e015      	b.n	8000d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_RCC_OscConfig+0x2b4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cea:	f7ff fc27 	bl	800053c <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fc23 	bl	800053c <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e144      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f0      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80a0 	beq.w	8000e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10f      	bne.n	8000d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d121      	bne.n	8000d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d66:	f7ff fbe9 	bl	800053c <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6c:	e011      	b.n	8000d92 <HAL_RCC_OscConfig+0x2ce>
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	42470000 	.word	0x42470000
 8000d78:	42470e80 	.word	0x42470e80
 8000d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d80:	f7ff fbdc 	bl	800053c <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e0fd      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <HAL_RCC_OscConfig+0x4d4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d106      	bne.n	8000db4 <HAL_RCC_OscConfig+0x2f0>
 8000da6:	4b7d      	ldr	r3, [pc, #500]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000daa:	4a7c      	ldr	r2, [pc, #496]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6713      	str	r3, [r2, #112]	; 0x70
 8000db2:	e01c      	b.n	8000dee <HAL_RCC_OscConfig+0x32a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d10c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x312>
 8000dbc:	4b77      	ldr	r3, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc0:	4a76      	ldr	r2, [pc, #472]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8000dc8:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dcc:	4a73      	ldr	r2, [pc, #460]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd4:	e00b      	b.n	8000dee <HAL_RCC_OscConfig+0x32a>
 8000dd6:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dda:	4a70      	ldr	r2, [pc, #448]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6713      	str	r3, [r2, #112]	; 0x70
 8000de2:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de6:	4a6d      	ldr	r2, [pc, #436]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d015      	beq.n	8000e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df6:	f7ff fba1 	bl	800053c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fb9d 	bl	800053c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e0bc      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0ee      	beq.n	8000dfe <HAL_RCC_OscConfig+0x33a>
 8000e20:	e014      	b.n	8000e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fb8b 	bl	800053c <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fb87 	bl	800053c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0a6      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1ee      	bne.n	8000e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8092 	beq.w	8000f8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d05c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d141      	bne.n	8000f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb5b 	bl	800053c <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb57 	bl	800053c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e078      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	085b      	lsrs	r3, r3, #1
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	061b      	lsls	r3, r3, #24
 8000ecc:	4933      	ldr	r1, [pc, #204]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fb30 	bl	800053c <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff fb2c 	bl	800053c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e04d      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x41c>
 8000efe:	e045      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb19 	bl	800053c <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fb15 	bl	800053c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e036      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x44a>
 8000f2c:	e02e      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e029      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d11c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d115      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f62:	4013      	ands	r3, r2
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d10d      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d106      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d001      	beq.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	42470060 	.word	0x42470060

08000fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0cc      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d90c      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0b8      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800101a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	494d      	ldr	r1, [pc, #308]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	4313      	orrs	r3, r2
 800102c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d044      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d119      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d003      	beq.n	8001062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800105e:	2b03      	cmp	r3, #3
 8001060:	d107      	bne.n	8001072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e06f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e067      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 0203 	bic.w	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4934      	ldr	r1, [pc, #208]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	4313      	orrs	r3, r2
 8001092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001094:	f7ff fa52 	bl	800053c <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109c:	f7ff fa4e 	bl	800053c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e04f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 020c 	and.w	r2, r3, #12
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d1eb      	bne.n	800109c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d20c      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e032      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4916      	ldr	r1, [pc, #88]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	4313      	orrs	r3, r2
 8001108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	4313      	orrs	r3, r2
 8001128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112a:	f000 f821 	bl	8001170 <HAL_RCC_GetSysClockFreq>
 800112e:	4601      	mov	r1, r0
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	fa21 f303 	lsr.w	r3, r1, r3
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_RCC_ClockConfig+0x1c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f001 ffaa 	bl	80030a4 <HAL_InitTick>

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00
 8001160:	40023800 	.word	0x40023800
 8001164:	0800665c 	.word	0x0800665c
 8001168:	20000008 	.word	0x20000008
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d007      	beq.n	80011a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001192:	2b08      	cmp	r3, #8
 8001194:	d008      	beq.n	80011a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80b4 	bne.w	8001304 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800119e:	60bb      	str	r3, [r7, #8]
       break;
 80011a0:	e0b3      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80011a4:	60bb      	str	r3, [r7, #8]
      break;
 80011a6:	e0b0      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011be:	4b55      	ldr	r3, [pc, #340]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	ea03 0501 	and.w	r5, r3, r1
 80011d4:	ea04 0602 	and.w	r6, r4, r2
 80011d8:	4629      	mov	r1, r5
 80011da:	4632      	mov	r2, r6
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	f04f 0400 	mov.w	r4, #0
 80011e4:	0154      	lsls	r4, r2, #5
 80011e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ea:	014b      	lsls	r3, r1, #5
 80011ec:	4619      	mov	r1, r3
 80011ee:	4622      	mov	r2, r4
 80011f0:	1b49      	subs	r1, r1, r5
 80011f2:	eb62 0206 	sbc.w	r2, r2, r6
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f04f 0400 	mov.w	r4, #0
 80011fe:	0194      	lsls	r4, r2, #6
 8001200:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001204:	018b      	lsls	r3, r1, #6
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	eb64 0402 	sbc.w	r4, r4, r2
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	00e2      	lsls	r2, r4, #3
 8001216:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800121a:	00d9      	lsls	r1, r3, #3
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	195b      	adds	r3, r3, r5
 8001222:	eb44 0406 	adc.w	r4, r4, r6
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	0262      	lsls	r2, r4, #9
 8001230:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001234:	0259      	lsls	r1, r3, #9
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0400 	mov.w	r4, #0
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	f7fe ffc2 	bl	80001d0 <__aeabi_uldivmod>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e049      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	099b      	lsrs	r3, r3, #6
 800125a:	f04f 0400 	mov.w	r4, #0
 800125e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	ea03 0501 	and.w	r5, r3, r1
 800126a:	ea04 0602 	and.w	r6, r4, r2
 800126e:	4629      	mov	r1, r5
 8001270:	4632      	mov	r2, r6
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	0154      	lsls	r4, r2, #5
 800127c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001280:	014b      	lsls	r3, r1, #5
 8001282:	4619      	mov	r1, r3
 8001284:	4622      	mov	r2, r4
 8001286:	1b49      	subs	r1, r1, r5
 8001288:	eb62 0206 	sbc.w	r2, r2, r6
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	0194      	lsls	r4, r2, #6
 8001296:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800129a:	018b      	lsls	r3, r1, #6
 800129c:	1a5b      	subs	r3, r3, r1
 800129e:	eb64 0402 	sbc.w	r4, r4, r2
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	00e2      	lsls	r2, r4, #3
 80012ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012b0:	00d9      	lsls	r1, r3, #3
 80012b2:	460b      	mov	r3, r1
 80012b4:	4614      	mov	r4, r2
 80012b6:	195b      	adds	r3, r3, r5
 80012b8:	eb44 0406 	adc.w	r4, r4, r6
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	02a2      	lsls	r2, r4, #10
 80012c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012ca:	0299      	lsls	r1, r3, #10
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f04f 0400 	mov.w	r4, #0
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	f7fe ff77 	bl	80001d0 <__aeabi_uldivmod>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	3301      	adds	r3, #1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	60bb      	str	r3, [r7, #8]
      break;
 8001302:	e002      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001306:	60bb      	str	r3, [r7, #8]
      break;
 8001308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800130a:	68bb      	ldr	r3, [r7, #8]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	00f42400 	.word	0x00f42400
 800131c:	007a1200 	.word	0x007a1200

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_RCC_GetHCLKFreq+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800133c:	f7ff fff0 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001340:	4601      	mov	r1, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_GetPCLK1Freq+0x24>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	0800666c 	.word	0x0800666c

08001360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001364:	f7ff ffdc 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001368:	4601      	mov	r1, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0b5b      	lsrs	r3, r3, #13
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	0800666c 	.word	0x0800666c

08001388 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	220f      	movs	r2, #15
 8001396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_RCC_GetClockConfig+0x60>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 020f 	and.w	r2, r3, #15
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001410:	2b00      	cmp	r3, #0
 8001412:	d035      	beq.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001414:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800141a:	f7ff f88f 	bl	800053c <HAL_GetTick>
 800141e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001422:	f7ff f88b 	bl	800053c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0b0      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	019a      	lsls	r2, r3, #6
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	071b      	lsls	r3, r3, #28
 800144c:	4955      	ldr	r1, [pc, #340]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800144e:	4313      	orrs	r3, r2
 8001450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800145a:	f7ff f86f 	bl	800053c <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001462:	f7ff f86b 	bl	800053c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e090      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8083 	beq.w	8001594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b6:	f7ff f841 	bl	800053c <HAL_GetTick>
 80014ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff f83d 	bl	800053c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e062      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02f      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d028      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001502:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001510:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d114      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f80b 	bl	800053c <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f807 	bl	800053c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e02a      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ee      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001558:	d10d      	bne.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800156a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e005      	b.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800157c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001580:	6093      	str	r3, [r2, #8]
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001590:	4313      	orrs	r3, r2
 8001592:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	42470068 	.word	0x42470068
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000
 80015ac:	42470e40 	.word	0x42470e40

080015b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e083      	b.n	80016ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7f5b      	ldrb	r3, [r3, #29]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 fd00 	bl	8002fd8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	22ca      	movs	r2, #202	; 0xca
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2253      	movs	r2, #83	; 0x53
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f897 	bl	8001722 <RTC_EnterInitMode>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2204      	movs	r2, #4
 8001606:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e05e      	b.n	80016ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800161a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800161e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6899      	ldr	r1, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68d2      	ldr	r2, [r2, #12]
 8001646:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	041a      	lsls	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10e      	bne.n	8001698 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f829 	bl	80016d2 <HAL_RTC_WaitForSynchro>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e018      	b.n	80016ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ee:	f7fe ff25 	bl	800053c <HAL_GetTick>
 80016f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80016f4:	e009      	b.n	800170a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80016f6:	f7fe ff21 	bl	800053c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001704:	d901      	bls.n	800170a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e007      	b.n	800171a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ee      	beq.n	80016f6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d119      	bne.n	8001770 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001746:	f7fe fef9 	bl	800053c <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800174c:	e009      	b.n	8001762 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800174e:	f7fe fef5 	bl	800053c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175c:	d901      	bls.n	8001762 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e007      	b.n	8001772 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ee      	beq.n	800174e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01d      	b.n	80017c8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f815 	bl	80017d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f000 f967 	bl	8001a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b06      	cmp	r3, #6
 800180c:	d007      	beq.n	800181e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d122      	bne.n	8001888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b02      	cmp	r3, #2
 800184e:	d11b      	bne.n	8001888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0202 	mvn.w	r2, #2
 8001858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8ee 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8e0 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f8f1 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d122      	bne.n	80018dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d11b      	bne.n	80018dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0204 	mvn.w	r2, #4
 80018ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8c4 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 80018c8:	e005      	b.n	80018d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8b6 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f8c7 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d122      	bne.n	8001930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d11b      	bne.n	8001930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0208 	mvn.w	r2, #8
 8001900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2204      	movs	r2, #4
 8001906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f89a 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 800191c:	e005      	b.n	800192a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f88c 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f89d 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b10      	cmp	r3, #16
 800193c:	d122      	bne.n	8001984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b10      	cmp	r3, #16
 800194a:	d11b      	bne.n	8001984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0210 	mvn.w	r2, #16
 8001954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f870 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8001970:	e005      	b.n	800197e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f862 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f873 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10e      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0201 	mvn.w	r2, #1
 80019a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f001 fad2 	bl	8002f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b80      	cmp	r3, #128	; 0x80
 80019bc:	d10e      	bne.n	80019dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d107      	bne.n	80019dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f902 	bl	8001be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d107      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f838 	bl	8001a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	d107      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0220 	mvn.w	r2, #32
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8cc 	bl	8001bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d00f      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <TIM_Base_SetConfig+0x118>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00b      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <TIM_Base_SetConfig+0x11c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <TIM_Base_SetConfig+0x120>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d02b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d027      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <TIM_Base_SetConfig+0x118>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d023      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <TIM_Base_SetConfig+0x11c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <TIM_Base_SetConfig+0x120>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d017      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <TIM_Base_SetConfig+0x128>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <TIM_Base_SetConfig+0x12c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00f      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <TIM_Base_SetConfig+0x130>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <TIM_Base_SetConfig+0x134>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <TIM_Base_SetConfig+0x138>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <TIM_Base_SetConfig+0x13c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <TIM_Base_SetConfig+0xf8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d103      	bne.n	8001b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	615a      	str	r2, [r3, #20]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800
 8001bc0:	40001800 	.word	0x40001800
 8001bc4:	40001c00 	.word	0x40001c00
 8001bc8:	40002000 	.word	0x40002000

08001bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e03f      	b.n	8001c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f001 f9f2 	bl	8003004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fab3 	bl	80021a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b20      	cmp	r3, #32
 8001ca6:	d140      	bne.n	8001d2a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_UART_Receive_IT+0x26>
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e039      	b.n	8001d2c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_UART_Receive_IT+0x38>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e032      	b.n	8001d2c <HAL_UART_Receive_IT+0x9e>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	88fa      	ldrh	r2, [r7, #6]
 8001cde:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2222      	movs	r2, #34	; 0x22
 8001cea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d04:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0220 	orr.w	r2, r2, #32
 8001d24:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
  }
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_UART_IRQHandler+0x52>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f98c 	bl	80020a0 <UART_Receive_IT>
      return;
 8001d88:	e0d1      	b.n	8001f2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80b0 	beq.w	8001ef2 <HAL_UART_IRQHandler+0x1ba>
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_UART_IRQHandler+0x70>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80a5 	beq.w	8001ef2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_UART_IRQHandler+0x90>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_UART_IRQHandler+0xb0>
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	f043 0202 	orr.w	r2, r3, #2
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_UART_IRQHandler+0xd0>
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	f043 0204 	orr.w	r2, r3, #4
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00f      	beq.n	8001e32 <HAL_UART_IRQHandler+0xfa>
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d104      	bne.n	8001e26 <HAL_UART_IRQHandler+0xee>
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	f043 0208 	orr.w	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d078      	beq.n	8001f2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_UART_IRQHandler+0x11c>
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f926 	bl	80020a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_UART_IRQHandler+0x144>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d031      	beq.n	8001ee0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f86f 	bl	8001f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d123      	bne.n	8001ed8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_UART_IRQHandler+0x1fc>)
 8001eae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fc2f 	bl	8000718 <HAL_DMA_Abort_IT>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ece:	e00e      	b.n	8001eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f83b 	bl	8001f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed6:	e00a      	b.n	8001eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f837 	bl	8001f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ede:	e006      	b.n	8001eee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f833 	bl	8001f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001eec:	e01e      	b.n	8001f2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eee:	bf00      	nop
    return;
 8001ef0:	e01c      	b.n	8001f2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_UART_IRQHandler+0x1d6>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f85c 	bl	8001fc4 <UART_Transmit_IT>
    return;
 8001f0c:	e00f      	b.n	8001f2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_UART_IRQHandler+0x1f6>
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8a4 	bl	8002070 <UART_EndTransmit_IT>
    return;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8001f2c:	bf00      	nop
  }
}
 8001f2e:	3720      	adds	r7, #32
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	08001f9d 	.word	0x08001f9d

08001f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff ffc8 	bl	8001f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b21      	cmp	r3, #33	; 0x21
 8001fd6:	d144      	bne.n	8002062 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe0:	d11a      	bne.n	8002018 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ff6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	1c9a      	adds	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	621a      	str	r2, [r3, #32]
 800200a:	e00e      	b.n	800202a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	621a      	str	r2, [r3, #32]
 8002016:	e008      	b.n	800202a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	1c59      	adds	r1, r3, #1
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6211      	str	r1, [r2, #32]
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4619      	mov	r1, r3
 8002038:	84d1      	strh	r1, [r2, #38]	; 0x26
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10f      	bne.n	800205e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002086:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ff51 	bl	8001f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b22      	cmp	r3, #34	; 0x22
 80020b2:	d171      	bne.n	8002198 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020bc:	d123      	bne.n	8002106 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10e      	bne.n	80020ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	1c9a      	adds	r2, r3, #2
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
 80020e8:	e029      	b.n	800213e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
 8002104:	e01b      	b.n	800213e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6858      	ldr	r0, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	1c59      	adds	r1, r3, #1
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6291      	str	r1, [r2, #40]	; 0x28
 800211e:	b2c2      	uxtb	r2, r0
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	e00c      	b.n	800213e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	1c58      	adds	r0, r3, #1
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	6288      	str	r0, [r1, #40]	; 0x28
 8002136:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4619      	mov	r1, r3
 800214c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800214e:	2b00      	cmp	r3, #0
 8002150:	d120      	bne.n	8002194 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0220 	bic.w	r2, r2, #32
 8002160:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fe96 	bl	8002ebc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	e002      	b.n	800219a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002198:	2302      	movs	r3, #2
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021e6:	f023 030c 	bic.w	r3, r3, #12
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	430b      	orrs	r3, r1
 80021f2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002212:	f040 818b 	bne.w	800252c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4ac1      	ldr	r2, [pc, #772]	; (8002520 <UART_SetConfig+0x37c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d005      	beq.n	800222c <UART_SetConfig+0x88>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4abf      	ldr	r2, [pc, #764]	; (8002524 <UART_SetConfig+0x380>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80bd 	bne.w	80023a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800222c:	f7ff f898 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 8002230:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	461d      	mov	r5, r3
 8002236:	f04f 0600 	mov.w	r6, #0
 800223a:	46a8      	mov	r8, r5
 800223c:	46b1      	mov	r9, r6
 800223e:	eb18 0308 	adds.w	r3, r8, r8
 8002242:	eb49 0409 	adc.w	r4, r9, r9
 8002246:	4698      	mov	r8, r3
 8002248:	46a1      	mov	r9, r4
 800224a:	eb18 0805 	adds.w	r8, r8, r5
 800224e:	eb49 0906 	adc.w	r9, r9, r6
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800225e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002262:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002266:	4688      	mov	r8, r1
 8002268:	4691      	mov	r9, r2
 800226a:	eb18 0005 	adds.w	r0, r8, r5
 800226e:	eb49 0106 	adc.w	r1, r9, r6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	461d      	mov	r5, r3
 8002278:	f04f 0600 	mov.w	r6, #0
 800227c:	196b      	adds	r3, r5, r5
 800227e:	eb46 0406 	adc.w	r4, r6, r6
 8002282:	461a      	mov	r2, r3
 8002284:	4623      	mov	r3, r4
 8002286:	f7fd ffa3 	bl	80001d0 <__aeabi_uldivmod>
 800228a:	4603      	mov	r3, r0
 800228c:	460c      	mov	r4, r1
 800228e:	461a      	mov	r2, r3
 8002290:	4ba5      	ldr	r3, [pc, #660]	; (8002528 <UART_SetConfig+0x384>)
 8002292:	fba3 2302 	umull	r2, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	461d      	mov	r5, r3
 80022a0:	f04f 0600 	mov.w	r6, #0
 80022a4:	46a9      	mov	r9, r5
 80022a6:	46b2      	mov	sl, r6
 80022a8:	eb19 0309 	adds.w	r3, r9, r9
 80022ac:	eb4a 040a 	adc.w	r4, sl, sl
 80022b0:	4699      	mov	r9, r3
 80022b2:	46a2      	mov	sl, r4
 80022b4:	eb19 0905 	adds.w	r9, r9, r5
 80022b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d0:	4689      	mov	r9, r1
 80022d2:	4692      	mov	sl, r2
 80022d4:	eb19 0005 	adds.w	r0, r9, r5
 80022d8:	eb4a 0106 	adc.w	r1, sl, r6
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	461d      	mov	r5, r3
 80022e2:	f04f 0600 	mov.w	r6, #0
 80022e6:	196b      	adds	r3, r5, r5
 80022e8:	eb46 0406 	adc.w	r4, r6, r6
 80022ec:	461a      	mov	r2, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	f7fd ff6e 	bl	80001d0 <__aeabi_uldivmod>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <UART_SetConfig+0x384>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	2164      	movs	r1, #100	; 0x64
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	3332      	adds	r3, #50	; 0x32
 800230e:	4a86      	ldr	r2, [pc, #536]	; (8002528 <UART_SetConfig+0x384>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800231c:	4498      	add	r8, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	461d      	mov	r5, r3
 8002322:	f04f 0600 	mov.w	r6, #0
 8002326:	46a9      	mov	r9, r5
 8002328:	46b2      	mov	sl, r6
 800232a:	eb19 0309 	adds.w	r3, r9, r9
 800232e:	eb4a 040a 	adc.w	r4, sl, sl
 8002332:	4699      	mov	r9, r3
 8002334:	46a2      	mov	sl, r4
 8002336:	eb19 0905 	adds.w	r9, r9, r5
 800233a:	eb4a 0a06 	adc.w	sl, sl, r6
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800234a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800234e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002352:	4689      	mov	r9, r1
 8002354:	4692      	mov	sl, r2
 8002356:	eb19 0005 	adds.w	r0, r9, r5
 800235a:	eb4a 0106 	adc.w	r1, sl, r6
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	461d      	mov	r5, r3
 8002364:	f04f 0600 	mov.w	r6, #0
 8002368:	196b      	adds	r3, r5, r5
 800236a:	eb46 0406 	adc.w	r4, r6, r6
 800236e:	461a      	mov	r2, r3
 8002370:	4623      	mov	r3, r4
 8002372:	f7fd ff2d 	bl	80001d0 <__aeabi_uldivmod>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	461a      	mov	r2, r3
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <UART_SetConfig+0x384>)
 800237e:	fba3 1302 	umull	r1, r3, r3, r2
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2164      	movs	r1, #100	; 0x64
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	4a65      	ldr	r2, [pc, #404]	; (8002528 <UART_SetConfig+0x384>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f003 0207 	and.w	r2, r3, #7
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4442      	add	r2, r8
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	e26f      	b.n	8002886 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a6:	f7fe ffc7 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 80023aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	461d      	mov	r5, r3
 80023b0:	f04f 0600 	mov.w	r6, #0
 80023b4:	46a8      	mov	r8, r5
 80023b6:	46b1      	mov	r9, r6
 80023b8:	eb18 0308 	adds.w	r3, r8, r8
 80023bc:	eb49 0409 	adc.w	r4, r9, r9
 80023c0:	4698      	mov	r8, r3
 80023c2:	46a1      	mov	r9, r4
 80023c4:	eb18 0805 	adds.w	r8, r8, r5
 80023c8:	eb49 0906 	adc.w	r9, r9, r6
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023e0:	4688      	mov	r8, r1
 80023e2:	4691      	mov	r9, r2
 80023e4:	eb18 0005 	adds.w	r0, r8, r5
 80023e8:	eb49 0106 	adc.w	r1, r9, r6
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	461d      	mov	r5, r3
 80023f2:	f04f 0600 	mov.w	r6, #0
 80023f6:	196b      	adds	r3, r5, r5
 80023f8:	eb46 0406 	adc.w	r4, r6, r6
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f7fd fee6 	bl	80001d0 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	461a      	mov	r2, r3
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <UART_SetConfig+0x384>)
 800240c:	fba3 2302 	umull	r2, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	461d      	mov	r5, r3
 800241a:	f04f 0600 	mov.w	r6, #0
 800241e:	46a9      	mov	r9, r5
 8002420:	46b2      	mov	sl, r6
 8002422:	eb19 0309 	adds.w	r3, r9, r9
 8002426:	eb4a 040a 	adc.w	r4, sl, sl
 800242a:	4699      	mov	r9, r3
 800242c:	46a2      	mov	sl, r4
 800242e:	eb19 0905 	adds.w	r9, r9, r5
 8002432:	eb4a 0a06 	adc.w	sl, sl, r6
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002442:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002446:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800244a:	4689      	mov	r9, r1
 800244c:	4692      	mov	sl, r2
 800244e:	eb19 0005 	adds.w	r0, r9, r5
 8002452:	eb4a 0106 	adc.w	r1, sl, r6
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	461d      	mov	r5, r3
 800245c:	f04f 0600 	mov.w	r6, #0
 8002460:	196b      	adds	r3, r5, r5
 8002462:	eb46 0406 	adc.w	r4, r6, r6
 8002466:	461a      	mov	r2, r3
 8002468:	4623      	mov	r3, r4
 800246a:	f7fd feb1 	bl	80001d0 <__aeabi_uldivmod>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	461a      	mov	r2, r3
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <UART_SetConfig+0x384>)
 8002476:	fba3 1302 	umull	r1, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2164      	movs	r1, #100	; 0x64
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	3332      	adds	r3, #50	; 0x32
 8002488:	4a27      	ldr	r2, [pc, #156]	; (8002528 <UART_SetConfig+0x384>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002496:	4498      	add	r8, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	461d      	mov	r5, r3
 800249c:	f04f 0600 	mov.w	r6, #0
 80024a0:	46a9      	mov	r9, r5
 80024a2:	46b2      	mov	sl, r6
 80024a4:	eb19 0309 	adds.w	r3, r9, r9
 80024a8:	eb4a 040a 	adc.w	r4, sl, sl
 80024ac:	4699      	mov	r9, r3
 80024ae:	46a2      	mov	sl, r4
 80024b0:	eb19 0905 	adds.w	r9, r9, r5
 80024b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80024b8:	f04f 0100 	mov.w	r1, #0
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024cc:	4689      	mov	r9, r1
 80024ce:	4692      	mov	sl, r2
 80024d0:	eb19 0005 	adds.w	r0, r9, r5
 80024d4:	eb4a 0106 	adc.w	r1, sl, r6
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	461d      	mov	r5, r3
 80024de:	f04f 0600 	mov.w	r6, #0
 80024e2:	196b      	adds	r3, r5, r5
 80024e4:	eb46 0406 	adc.w	r4, r6, r6
 80024e8:	461a      	mov	r2, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	f7fd fe70 	bl	80001d0 <__aeabi_uldivmod>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <UART_SetConfig+0x384>)
 80024f8:	fba3 1302 	umull	r1, r3, r3, r2
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	2164      	movs	r1, #100	; 0x64
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	3332      	adds	r3, #50	; 0x32
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <UART_SetConfig+0x384>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	f003 0207 	and.w	r2, r3, #7
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4442      	add	r2, r8
 800251c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800251e:	e1b2      	b.n	8002886 <UART_SetConfig+0x6e2>
 8002520:	40011000 	.word	0x40011000
 8002524:	40011400 	.word	0x40011400
 8002528:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4ad7      	ldr	r2, [pc, #860]	; (8002890 <UART_SetConfig+0x6ec>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d005      	beq.n	8002542 <UART_SetConfig+0x39e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4ad6      	ldr	r2, [pc, #856]	; (8002894 <UART_SetConfig+0x6f0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	f040 80d1 	bne.w	80026e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002542:	f7fe ff0d 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 8002546:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	469a      	mov	sl, r3
 800254c:	f04f 0b00 	mov.w	fp, #0
 8002550:	46d0      	mov	r8, sl
 8002552:	46d9      	mov	r9, fp
 8002554:	eb18 0308 	adds.w	r3, r8, r8
 8002558:	eb49 0409 	adc.w	r4, r9, r9
 800255c:	4698      	mov	r8, r3
 800255e:	46a1      	mov	r9, r4
 8002560:	eb18 080a 	adds.w	r8, r8, sl
 8002564:	eb49 090b 	adc.w	r9, r9, fp
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002574:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002578:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800257c:	4688      	mov	r8, r1
 800257e:	4691      	mov	r9, r2
 8002580:	eb1a 0508 	adds.w	r5, sl, r8
 8002584:	eb4b 0609 	adc.w	r6, fp, r9
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f04f 0400 	mov.w	r4, #0
 800259a:	0094      	lsls	r4, r2, #2
 800259c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a0:	008b      	lsls	r3, r1, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	4631      	mov	r1, r6
 80025aa:	f7fd fe11 	bl	80001d0 <__aeabi_uldivmod>
 80025ae:	4603      	mov	r3, r0
 80025b0:	460c      	mov	r4, r1
 80025b2:	461a      	mov	r2, r3
 80025b4:	4bb8      	ldr	r3, [pc, #736]	; (8002898 <UART_SetConfig+0x6f4>)
 80025b6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	469b      	mov	fp, r3
 80025c4:	f04f 0c00 	mov.w	ip, #0
 80025c8:	46d9      	mov	r9, fp
 80025ca:	46e2      	mov	sl, ip
 80025cc:	eb19 0309 	adds.w	r3, r9, r9
 80025d0:	eb4a 040a 	adc.w	r4, sl, sl
 80025d4:	4699      	mov	r9, r3
 80025d6:	46a2      	mov	sl, r4
 80025d8:	eb19 090b 	adds.w	r9, r9, fp
 80025dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f4:	4689      	mov	r9, r1
 80025f6:	4692      	mov	sl, r2
 80025f8:	eb1b 0509 	adds.w	r5, fp, r9
 80025fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	f04f 0400 	mov.w	r4, #0
 8002612:	0094      	lsls	r4, r2, #2
 8002614:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002618:	008b      	lsls	r3, r1, #2
 800261a:	461a      	mov	r2, r3
 800261c:	4623      	mov	r3, r4
 800261e:	4628      	mov	r0, r5
 8002620:	4631      	mov	r1, r6
 8002622:	f7fd fdd5 	bl	80001d0 <__aeabi_uldivmod>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	461a      	mov	r2, r3
 800262c:	4b9a      	ldr	r3, [pc, #616]	; (8002898 <UART_SetConfig+0x6f4>)
 800262e:	fba3 1302 	umull	r1, r3, r3, r2
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	2164      	movs	r1, #100	; 0x64
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	3332      	adds	r3, #50	; 0x32
 8002640:	4a95      	ldr	r2, [pc, #596]	; (8002898 <UART_SetConfig+0x6f4>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	4498      	add	r8, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	469b      	mov	fp, r3
 8002652:	f04f 0c00 	mov.w	ip, #0
 8002656:	46d9      	mov	r9, fp
 8002658:	46e2      	mov	sl, ip
 800265a:	eb19 0309 	adds.w	r3, r9, r9
 800265e:	eb4a 040a 	adc.w	r4, sl, sl
 8002662:	4699      	mov	r9, r3
 8002664:	46a2      	mov	sl, r4
 8002666:	eb19 090b 	adds.w	r9, r9, fp
 800266a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800267a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800267e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002682:	4689      	mov	r9, r1
 8002684:	4692      	mov	sl, r2
 8002686:	eb1b 0509 	adds.w	r5, fp, r9
 800268a:	eb4c 060a 	adc.w	r6, ip, sl
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4619      	mov	r1, r3
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f04f 0400 	mov.w	r4, #0
 80026a0:	0094      	lsls	r4, r2, #2
 80026a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026a6:	008b      	lsls	r3, r1, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4623      	mov	r3, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	4631      	mov	r1, r6
 80026b0:	f7fd fd8e 	bl	80001d0 <__aeabi_uldivmod>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b77      	ldr	r3, [pc, #476]	; (8002898 <UART_SetConfig+0x6f4>)
 80026bc:	fba3 1302 	umull	r1, r3, r3, r2
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	2164      	movs	r1, #100	; 0x64
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	3332      	adds	r3, #50	; 0x32
 80026ce:	4a72      	ldr	r2, [pc, #456]	; (8002898 <UART_SetConfig+0x6f4>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4442      	add	r2, r8
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e0d0      	b.n	8002886 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80026e4:	f7fe fe28 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 80026e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	469a      	mov	sl, r3
 80026ee:	f04f 0b00 	mov.w	fp, #0
 80026f2:	46d0      	mov	r8, sl
 80026f4:	46d9      	mov	r9, fp
 80026f6:	eb18 0308 	adds.w	r3, r8, r8
 80026fa:	eb49 0409 	adc.w	r4, r9, r9
 80026fe:	4698      	mov	r8, r3
 8002700:	46a1      	mov	r9, r4
 8002702:	eb18 080a 	adds.w	r8, r8, sl
 8002706:	eb49 090b 	adc.w	r9, r9, fp
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002716:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800271a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800271e:	4688      	mov	r8, r1
 8002720:	4691      	mov	r9, r2
 8002722:	eb1a 0508 	adds.w	r5, sl, r8
 8002726:	eb4b 0609 	adc.w	r6, fp, r9
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	0094      	lsls	r4, r2, #2
 800273e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002742:	008b      	lsls	r3, r1, #2
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	4628      	mov	r0, r5
 800274a:	4631      	mov	r1, r6
 800274c:	f7fd fd40 	bl	80001d0 <__aeabi_uldivmod>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	461a      	mov	r2, r3
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <UART_SetConfig+0x6f4>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	469b      	mov	fp, r3
 8002766:	f04f 0c00 	mov.w	ip, #0
 800276a:	46d9      	mov	r9, fp
 800276c:	46e2      	mov	sl, ip
 800276e:	eb19 0309 	adds.w	r3, r9, r9
 8002772:	eb4a 040a 	adc.w	r4, sl, sl
 8002776:	4699      	mov	r9, r3
 8002778:	46a2      	mov	sl, r4
 800277a:	eb19 090b 	adds.w	r9, r9, fp
 800277e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800278e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002796:	4689      	mov	r9, r1
 8002798:	4692      	mov	sl, r2
 800279a:	eb1b 0509 	adds.w	r5, fp, r9
 800279e:	eb4c 060a 	adc.w	r6, ip, sl
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	f04f 0400 	mov.w	r4, #0
 80027b4:	0094      	lsls	r4, r2, #2
 80027b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ba:	008b      	lsls	r3, r1, #2
 80027bc:	461a      	mov	r2, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	4628      	mov	r0, r5
 80027c2:	4631      	mov	r1, r6
 80027c4:	f7fd fd04 	bl	80001d0 <__aeabi_uldivmod>
 80027c8:	4603      	mov	r3, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <UART_SetConfig+0x6f4>)
 80027d0:	fba3 1302 	umull	r1, r3, r3, r2
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	2164      	movs	r1, #100	; 0x64
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	3332      	adds	r3, #50	; 0x32
 80027e2:	4a2d      	ldr	r2, [pc, #180]	; (8002898 <UART_SetConfig+0x6f4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ee:	4498      	add	r8, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	469b      	mov	fp, r3
 80027f4:	f04f 0c00 	mov.w	ip, #0
 80027f8:	46d9      	mov	r9, fp
 80027fa:	46e2      	mov	sl, ip
 80027fc:	eb19 0309 	adds.w	r3, r9, r9
 8002800:	eb4a 040a 	adc.w	r4, sl, sl
 8002804:	4699      	mov	r9, r3
 8002806:	46a2      	mov	sl, r4
 8002808:	eb19 090b 	adds.w	r9, r9, fp
 800280c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002810:	f04f 0100 	mov.w	r1, #0
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800281c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002824:	4689      	mov	r9, r1
 8002826:	4692      	mov	sl, r2
 8002828:	eb1b 0509 	adds.w	r5, fp, r9
 800282c:	eb4c 060a 	adc.w	r6, ip, sl
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	0094      	lsls	r4, r2, #2
 8002844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002848:	008b      	lsls	r3, r1, #2
 800284a:	461a      	mov	r2, r3
 800284c:	4623      	mov	r3, r4
 800284e:	4628      	mov	r0, r5
 8002850:	4631      	mov	r1, r6
 8002852:	f7fd fcbd 	bl	80001d0 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	461a      	mov	r2, r3
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <UART_SetConfig+0x6f4>)
 800285e:	fba3 1302 	umull	r1, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2164      	movs	r1, #100	; 0x64
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	3332      	adds	r3, #50	; 0x32
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <UART_SetConfig+0x6f4>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	095b      	lsrs	r3, r3, #5
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4442      	add	r2, r8
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	e7ff      	b.n	8002886 <UART_SetConfig+0x6e2>
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002890:	40011000 	.word	0x40011000
 8002894:	40011400 	.word	0x40011400
 8002898:	51eb851f 	.word	0x51eb851f

0800289c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a2:	f7fd fe15 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028a6:	f000 f8d9 	bl	8002a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028aa:	f000 f9a9 	bl	8002c00 <MX_GPIO_Init>
  MX_RTC_Init();
 80028ae:	f000 f957 	bl	8002b60 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80028b2:	f000 f97b 	bl	8002bac <MX_USART2_UART_Init>
  
  /* USER CODE BEGIN 2 */
	status = xTaskCreate(handler_menu_task, "Menu_Task", 250, NULL, 2, &handle_menu_task);
 80028b6:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <main+0x174>)
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2302      	movs	r3, #2
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	22fa      	movs	r2, #250	; 0xfa
 80028c2:	4954      	ldr	r1, [pc, #336]	; (8002a14 <main+0x178>)
 80028c4:	4854      	ldr	r0, [pc, #336]	; (8002a18 <main+0x17c>)
 80028c6:	f001 fc43 	bl	8004150 <xTaskCreate>
 80028ca:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d009      	beq.n	80028e6 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e7fe      	b.n	80028e4 <main+0x48>

  status = xTaskCreate(handler_led_task, "LED_Task", 250, NULL, 2, &handle_led_task);
 80028e6:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <main+0x180>)
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2302      	movs	r3, #2
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	22fa      	movs	r2, #250	; 0xfa
 80028f2:	494b      	ldr	r1, [pc, #300]	; (8002a20 <main+0x184>)
 80028f4:	484b      	ldr	r0, [pc, #300]	; (8002a24 <main+0x188>)
 80028f6:	f001 fc2b 	bl	8004150 <xTaskCreate>
 80028fa:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d009      	beq.n	8002916 <main+0x7a>
 8002902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002906:	f383 8811 	msr	BASEPRI, r3
 800290a:	f3bf 8f6f 	isb	sy
 800290e:	f3bf 8f4f 	dsb	sy
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e7fe      	b.n	8002914 <main+0x78>

	status = xTaskCreate(handler_rtc_task, "RTC_Task", 250, NULL, 2, &handle_rtc_task);
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <main+0x18c>)
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2302      	movs	r3, #2
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	22fa      	movs	r2, #250	; 0xfa
 8002922:	4942      	ldr	r1, [pc, #264]	; (8002a2c <main+0x190>)
 8002924:	4842      	ldr	r0, [pc, #264]	; (8002a30 <main+0x194>)
 8002926:	f001 fc13 	bl	8004150 <xTaskCreate>
 800292a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d009      	beq.n	8002946 <main+0xaa>
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e7fe      	b.n	8002944 <main+0xa8>

  status = xTaskCreate(handler_print_task, "Print_Task", 250, NULL, 2, &handle_print_task);
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <main+0x198>)
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	22fa      	movs	r2, #250	; 0xfa
 8002952:	4939      	ldr	r1, [pc, #228]	; (8002a38 <main+0x19c>)
 8002954:	4839      	ldr	r0, [pc, #228]	; (8002a3c <main+0x1a0>)
 8002956:	f001 fbfb 	bl	8004150 <xTaskCreate>
 800295a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d009      	beq.n	8002976 <main+0xda>
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e7fe      	b.n	8002974 <main+0xd8>
	
  status = xTaskCreate(handler_cmd_task, "Command_handler_Task", 250, NULL, 2, &handle_cmd_task);
 8002976:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <main+0x1a4>)
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	22fa      	movs	r2, #250	; 0xfa
 8002982:	4930      	ldr	r1, [pc, #192]	; (8002a44 <main+0x1a8>)
 8002984:	4830      	ldr	r0, [pc, #192]	; (8002a48 <main+0x1ac>)
 8002986:	f001 fbe3 	bl	8004150 <xTaskCreate>
 800298a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d009      	beq.n	80029a6 <main+0x10a>
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	e7fe      	b.n	80029a4 <main+0x108>

  q_data = xQueueCreate(10, sizeof(char));
 80029a6:	2200      	movs	r2, #0
 80029a8:	2101      	movs	r1, #1
 80029aa:	200a      	movs	r0, #10
 80029ac:	f000 fe7e 	bl	80036ac <xQueueGenericCreate>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b26      	ldr	r3, [pc, #152]	; (8002a4c <main+0x1b0>)
 80029b4:	601a      	str	r2, [r3, #0]
  configASSERT(q_data != NULL);
 80029b6:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <main+0x1b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <main+0x136>
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	e7fe      	b.n	80029d0 <main+0x134>
  
  q_print = xQueueCreate(10, sizeof(size_t));
 80029d2:	2200      	movs	r2, #0
 80029d4:	2104      	movs	r1, #4
 80029d6:	200a      	movs	r0, #10
 80029d8:	f000 fe68 	bl	80036ac <xQueueGenericCreate>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <main+0x1b4>)
 80029e0:	601a      	str	r2, [r3, #0]
  configASSERT(q_print != NULL);
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <main+0x1b4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <main+0x162>
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	e7fe      	b.n	80029fc <main+0x160>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 80029fe:	2201      	movs	r2, #1
 8002a00:	4914      	ldr	r1, [pc, #80]	; (8002a54 <main+0x1b8>)
 8002a02:	4815      	ldr	r0, [pc, #84]	; (8002a58 <main+0x1bc>)
 8002a04:	f7ff f943 	bl	8001c8e <HAL_UART_Receive_IT>
  
  vTaskStartScheduler();
 8002a08:	f001 fd1c 	bl	8004444 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <main+0x170>
 8002a0e:	bf00      	nop
 8002a10:	200191b0 	.word	0x200191b0
 8002a14:	0800653c 	.word	0x0800653c
 8002a18:	080031e1 	.word	0x080031e1
 8002a1c:	200191dc 	.word	0x200191dc
 8002a20:	08006548 	.word	0x08006548
 8002a24:	080032c1 	.word	0x080032c1
 8002a28:	200191a4 	.word	0x200191a4
 8002a2c:	08006554 	.word	0x08006554
 8002a30:	080032cb 	.word	0x080032cb
 8002a34:	200191d8 	.word	0x200191d8
 8002a38:	08006560 	.word	0x08006560
 8002a3c:	080032d5 	.word	0x080032d5
 8002a40:	200191a8 	.word	0x200191a8
 8002a44:	0800656c 	.word	0x0800656c
 8002a48:	080032df 	.word	0x080032df
 8002a4c:	200191ac 	.word	0x200191ac
 8002a50:	200191b4 	.word	0x200191b4
 8002a54:	200191e0 	.word	0x200191e0
 8002a58:	200191e4 	.word	0x200191e4

08002a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b098      	sub	sp, #96	; 0x60
 8002a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a66:	2230      	movs	r2, #48	; 0x30
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fd51 	bl	8006512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <SystemClock_Config+0xfc>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <SystemClock_Config+0xfc>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <SystemClock_Config+0xfc>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <SystemClock_Config+0x100>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <SystemClock_Config+0x100>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <SystemClock_Config+0x100>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002ac6:	230a      	movs	r3, #10
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002aca:	2301      	movs	r3, #1
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ace:	2310      	movs	r3, #16
 8002ad0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ada:	2300      	movs	r3, #0
 8002adc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002ae2:	2332      	movs	r3, #50	; 0x32
 8002ae4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002aea:	2307      	movs	r3, #7
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd ffe6 	bl	8000ac4 <HAL_RCC_OscConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002afe:	f000 fa3b 	bl	8002f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b02:	230f      	movs	r3, #15
 8002b04:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b06:	2302      	movs	r3, #2
 8002b08:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002b0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002b14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b1a:	f107 031c 	add.w	r3, r7, #28
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fa3f 	bl	8000fa4 <HAL_RCC_ClockConfig>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002b2c:	f000 fa24 	bl	8002f78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b30:	2302      	movs	r3, #2
 8002b32:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b38:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3a:	f107 030c 	add.w	r3, r7, #12
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fc54 	bl	80013ec <HAL_RCCEx_PeriphCLKConfig>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002b4a:	f000 fa15 	bl	8002f78 <Error_Handler>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	3760      	adds	r7, #96	; 0x60
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000

08002b60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b66:	4a10      	ldr	r2, [pc, #64]	; (8002ba8 <MX_RTC_Init+0x48>)
 8002b68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b6c:	2240      	movs	r2, #64	; 0x40
 8002b6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b72:	227f      	movs	r2, #127	; 0x7f
 8002b74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <MX_RTC_Init+0x44>)
 8002b90:	f7fe fd0e 	bl	80015b0 <HAL_RTC_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002b9a:	f000 f9ed 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200191b8 	.word	0x200191b8
 8002ba8:	40002800 	.word	0x40002800

08002bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <MX_USART2_UART_Init+0x50>)
 8002bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_USART2_UART_Init+0x4c>)
 8002be4:	f7ff f806 	bl	8001bf4 <HAL_UART_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bee:	f000 f9c3 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200191e4 	.word	0x200191e4
 8002bfc:	40004400 	.word	0x40004400

08002c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	4ba1      	ldr	r3, [pc, #644]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4aa0      	ldr	r2, [pc, #640]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b9e      	ldr	r3, [pc, #632]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b9a      	ldr	r3, [pc, #616]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a99      	ldr	r2, [pc, #612]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b97      	ldr	r3, [pc, #604]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	4b93      	ldr	r3, [pc, #588]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a92      	ldr	r2, [pc, #584]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b90      	ldr	r3, [pc, #576]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	4b8c      	ldr	r3, [pc, #560]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a8b      	ldr	r2, [pc, #556]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a84      	ldr	r2, [pc, #528]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	4b7e      	ldr	r3, [pc, #504]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a7d      	ldr	r2, [pc, #500]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <MX_GPIO_Init+0x2a0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2108      	movs	r1, #8
 8002cc2:	4878      	ldr	r0, [pc, #480]	; (8002ea4 <MX_GPIO_Init+0x2a4>)
 8002cc4:	f7fd fee4 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4876      	ldr	r0, [pc, #472]	; (8002ea8 <MX_GPIO_Init+0x2a8>)
 8002cce:	f7fd fedf 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002cd8:	4874      	ldr	r0, [pc, #464]	; (8002eac <MX_GPIO_Init+0x2ac>)
 8002cda:	f7fd fed9 	bl	8000a90 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002cde:	2308      	movs	r3, #8
 8002ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	486b      	ldr	r0, [pc, #428]	; (8002ea4 <MX_GPIO_Init+0x2a4>)
 8002cf6:	f7fd fd31 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 031c 	add.w	r3, r7, #28
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4865      	ldr	r0, [pc, #404]	; (8002ea8 <MX_GPIO_Init+0x2a8>)
 8002d12:	f7fd fd23 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002d16:	2308      	movs	r3, #8
 8002d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d26:	2305      	movs	r3, #5
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	485d      	ldr	r0, [pc, #372]	; (8002ea8 <MX_GPIO_Init+0x2a8>)
 8002d32:	f7fd fd13 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d36:	2301      	movs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <MX_GPIO_Init+0x2b0>)
 8002d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	4619      	mov	r1, r3
 8002d48:	485a      	ldr	r0, [pc, #360]	; (8002eb4 <MX_GPIO_Init+0x2b4>)
 8002d4a:	f7fd fd07 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002d4e:	2310      	movs	r3, #16
 8002d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d5e:	2306      	movs	r3, #6
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002d62:	f107 031c 	add.w	r3, r7, #28
 8002d66:	4619      	mov	r1, r3
 8002d68:	4852      	ldr	r0, [pc, #328]	; (8002eb4 <MX_GPIO_Init+0x2b4>)
 8002d6a:	f7fd fcf7 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002d6e:	23e0      	movs	r3, #224	; 0xe0
 8002d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 031c 	add.w	r3, r7, #28
 8002d86:	4619      	mov	r1, r3
 8002d88:	484a      	ldr	r0, [pc, #296]	; (8002eb4 <MX_GPIO_Init+0x2b4>)
 8002d8a:	f7fd fce7 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 031c 	add.w	r3, r7, #28
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4845      	ldr	r0, [pc, #276]	; (8002eb8 <MX_GPIO_Init+0x2b8>)
 8002da2:	f7fd fcdb 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002db8:	2305      	movs	r3, #5
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	483d      	ldr	r0, [pc, #244]	; (8002eb8 <MX_GPIO_Init+0x2b8>)
 8002dc4:	f7fd fcca 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002dc8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002dcc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	4619      	mov	r1, r3
 8002de0:	4832      	ldr	r0, [pc, #200]	; (8002eac <MX_GPIO_Init+0x2ac>)
 8002de2:	f7fd fcbb 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002de6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002df8:	2306      	movs	r3, #6
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	4829      	ldr	r0, [pc, #164]	; (8002ea8 <MX_GPIO_Init+0x2a8>)
 8002e04:	f7fd fcaa 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002e08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4825      	ldr	r0, [pc, #148]	; (8002eb4 <MX_GPIO_Init+0x2b4>)
 8002e1e:	f7fd fc9d 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002e22:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002e34:	230a      	movs	r3, #10
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	481d      	ldr	r0, [pc, #116]	; (8002eb4 <MX_GPIO_Init+0x2b4>)
 8002e40:	f7fd fc8c 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002e44:	2320      	movs	r3, #32
 8002e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	4815      	ldr	r0, [pc, #84]	; (8002eac <MX_GPIO_Init+0x2ac>)
 8002e58:	f7fd fc80 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002e5c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e62:	2312      	movs	r3, #18
 8002e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	480f      	ldr	r0, [pc, #60]	; (8002eb8 <MX_GPIO_Init+0x2b8>)
 8002e7a:	f7fd fc6f 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <MX_GPIO_Init+0x2b0>)
 8002e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 031c 	add.w	r3, r7, #28
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <MX_GPIO_Init+0x2a4>)
 8002e92:	f7fd fc63 	bl	800075c <HAL_GPIO_Init>

}
 8002e96:	bf00      	nop
 8002e98:	3730      	adds	r7, #48	; 0x30
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	10120000 	.word	0x10120000
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020400 	.word	0x40020400

08002ebc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]
	uint8_t dummy = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
  // Is Queue full?
  if (xQueueIsQueueFullFromISR(q_data) == pdFALSE)
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <HAL_UART_RxCpltCallback+0x88>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f001 f897 	bl	8004000 <xQueueIsQueueFullFromISR>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_UART_RxCpltCallback+0x2c>
  	{
  		// Queue is not full, enqueue data byte
  		xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_UART_RxCpltCallback+0x88>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4919      	ldr	r1, [pc, #100]	; (8002f48 <HAL_UART_RxCpltCallback+0x8c>)
 8002ee2:	f000 fd53 	bl	800398c <xQueueGenericSendFromISR>
 8002ee6:	e013      	b.n	8002f10 <HAL_UART_RxCpltCallback+0x54>
  	}
  else
  	{
  		// Queue is full
  		if (user_data == '\n')
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_UART_RxCpltCallback+0x8c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b0a      	cmp	r3, #10
 8002ef0:	d10e      	bne.n	8002f10 <HAL_UART_RxCpltCallback+0x54>
  			{
  				// Delete the last data byte of Queue
  				xQueueReceiveFromISR(q_data, (void *)&dummy, NULL);
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_UART_RxCpltCallback+0x88>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f107 010f 	add.w	r1, r7, #15
 8002efa:	2200      	movs	r2, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fec7 	bl	8003c90 <xQueueReceiveFromISR>
				// Make the last data byte of Queue is '\n'
				xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_UART_RxCpltCallback+0x88>)
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2200      	movs	r2, #0
 8002f0a:	490f      	ldr	r1, [pc, #60]	; (8002f48 <HAL_UART_RxCpltCallback+0x8c>)
 8002f0c:	f000 fd3e 	bl	800398c <xQueueGenericSendFromISR>
  			}
  	}

  if (user_data == '\n')
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_UART_RxCpltCallback+0x8c>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b0a      	cmp	r3, #10
 8002f18:	d10a      	bne.n	8002f30 <HAL_UART_RxCpltCallback+0x74>
  	{
  		// Send the notification to Command handler task
  		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_UART_RxCpltCallback+0x90>)
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	2300      	movs	r3, #0
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	2300      	movs	r3, #0
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f002 fa32 	bl	8005394 <xTaskGenericNotifyFromISR>
  	}

  // Enable UART data byte reception again in IT mode
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8002f30:	2201      	movs	r2, #1
 8002f32:	4905      	ldr	r1, [pc, #20]	; (8002f48 <HAL_UART_RxCpltCallback+0x8c>)
 8002f34:	4806      	ldr	r0, [pc, #24]	; (8002f50 <HAL_UART_RxCpltCallback+0x94>)
 8002f36:	f7fe feaa 	bl	8001c8e <HAL_UART_Receive_IT>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200191ac 	.word	0x200191ac
 8002f48:	200191e0 	.word	0x200191e0
 8002f4c:	200191a8 	.word	0x200191a8
 8002f50:	200191e4 	.word	0x200191e4

08002f54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f66:	f7fd fad5 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40001000 	.word	0x40001000

08002f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_RTC_MspInit+0x24>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RTC_MspInit+0x28>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40002800 	.word	0x40002800
 8003000:	42470e3c 	.word	0x42470e3c

08003004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_UART_MspInit+0x94>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d133      	bne.n	800308e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_UART_MspInit+0x98>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_UART_MspInit+0x98>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_UART_MspInit+0x98>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_UART_MspInit+0x98>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_UART_MspInit+0x98>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_UART_MspInit+0x98>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800305e:	230c      	movs	r3, #12
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800306e:	2307      	movs	r3, #7
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	4809      	ldr	r0, [pc, #36]	; (80030a0 <HAL_UART_MspInit+0x9c>)
 800307a:	f7fd fb6f 	bl	800075c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2106      	movs	r1, #6
 8003082:	2026      	movs	r0, #38	; 0x26
 8003084:	f7fd fb1e 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003088:	2026      	movs	r0, #38	; 0x26
 800308a:	f7fd fb37 	bl	80006fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800308e:	bf00      	nop
 8003090:	3728      	adds	r7, #40	; 0x28
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40004400 	.word	0x40004400
 800309c:	40023800 	.word	0x40023800
 80030a0:	40020000 	.word	0x40020000

080030a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80030b4:	2200      	movs	r2, #0
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	2036      	movs	r0, #54	; 0x36
 80030ba:	f7fd fb03 	bl	80006c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80030be:	2036      	movs	r0, #54	; 0x36
 80030c0:	f7fd fb1c 	bl	80006fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <HAL_InitTick+0xa4>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_InitTick+0xa4>)
 80030ce:	f043 0310 	orr.w	r3, r3, #16
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_InitTick+0xa4>)
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030e0:	f107 0210 	add.w	r2, r7, #16
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe f94c 	bl	8001388 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80030f0:	f7fe f922 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 80030f4:	4603      	mov	r3, r0
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <HAL_InitTick+0xa8>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	3b01      	subs	r3, #1
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003108:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_InitTick+0xac>)
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_InitTick+0xb0>)
 800310c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <HAL_InitTick+0xac>)
 8003110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003114:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_InitTick+0xac>)
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_InitTick+0xac>)
 800311e:	2200      	movs	r2, #0
 8003120:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003122:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_InitTick+0xac>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <HAL_InitTick+0xac>)
 800312a:	f7fe fb26 	bl	800177a <HAL_TIM_Base_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003134:	4806      	ldr	r0, [pc, #24]	; (8003150 <HAL_InitTick+0xac>)
 8003136:	f7fe fb55 	bl	80017e4 <HAL_TIM_Base_Start_IT>
 800313a:	4603      	mov	r3, r0
 800313c:	e000      	b.n	8003140 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	431bde83 	.word	0x431bde83
 8003150:	20019224 	.word	0x20019224
 8003154:	40001000 	.word	0x40001000

08003158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <MemManage_Handler+0x4>

08003172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <UsageFault_Handler+0x4>

0800317e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <USART2_IRQHandler+0x10>)
 8003192:	f7fe fdd1 	bl	8001d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200191e4 	.word	0x200191e4

080031a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <TIM6_DAC_IRQHandler+0x10>)
 80031a6:	f7fe fb41 	bl	800182c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20019224 	.word	0x20019224

080031b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <SystemInit+0x28>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <SystemInit+0x28>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SystemInit+0x28>)
 80031ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ce:	609a      	str	r2, [r3, #8]
#endif
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <handler_menu_task>:
void process_command(command_t* cmd);

const char* msg_inv = "//// Invalid option ////\n";

void handler_menu_task(void *param)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
	uint32_t u32Cmd_addr;
	command_t *cmd;
	int option = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
	
	const char* msg_menu = "==============================\n"
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <handler_menu_task+0xc8>)
 80031ee:	60bb      	str	r3, [r7, #8]
								"LED effect			-----> 0\n"
								"Date and time		-----> 1\n"
								"Exit				-----> 2\n"
								"Enter your choice here: ";
	while(1){
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <handler_menu_task+0xcc>)
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	f107 0108 	add.w	r1, r7, #8
 80031f8:	2300      	movs	r3, #0
 80031fa:	f04f 32ff 	mov.w	r2, #4294967295
 80031fe:	f000 facb 	bl	8003798 <xQueueGenericSend>

		// Notify wait to receive the address of command variable
		xTaskNotifyWait(0, 0, &u32Cmd_addr, portMAX_DELAY);
 8003202:	f107 020c 	add.w	r2, r7, #12
 8003206:	f04f 33ff 	mov.w	r3, #4294967295
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2000      	movs	r0, #0
 8003214:	f001 ff22 	bl	800505c <xTaskGenericNotifyWait>
		cmd = (command_t *)u32Cmd_addr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	613b      	str	r3, [r7, #16]

		if (cmd->u32length == 1)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d12d      	bne.n	8003280 <handler_menu_task+0xa0>
		{
			option = cmd->u8Payload[0] - 48;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	3b30      	subs	r3, #48	; 0x30
 800322a:	617b      	str	r3, [r7, #20]
			switch(option)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d010      	beq.n	8003254 <handler_menu_task+0x74>
 8003232:	2b02      	cmp	r3, #2
 8003234:	d02d      	beq.n	8003292 <handler_menu_task+0xb2>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d119      	bne.n	800326e <handler_menu_task+0x8e>
			{
				case 0:
					curr_state = sLedEffect;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <handler_menu_task+0xd0>)
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <handler_menu_task+0xd4>)
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	f001 ff83 	bl	8005158 <xTaskGenericNotify>
					break;
 8003252:	e01f      	b.n	8003294 <handler_menu_task+0xb4>
				case 1:
					curr_state = sRtcMenu;
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <handler_menu_task+0xd0>)
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <handler_menu_task+0xd8>)
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	2200      	movs	r2, #0
 8003266:	2100      	movs	r1, #0
 8003268:	f001 ff76 	bl	8005158 <xTaskGenericNotify>
					break;
 800326c:	e012      	b.n	8003294 <handler_menu_task+0xb4>
				case 2:/*implement exit --> go to Wait to run again when some other task notifies.*/
					break;
				default:
					// Invalid command
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <handler_menu_task+0xcc>)
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	2300      	movs	r3, #0
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	4910      	ldr	r1, [pc, #64]	; (80032bc <handler_menu_task+0xdc>)
 800327a:	f000 fa8d 	bl	8003798 <xQueueGenericSend>
					continue; // COntinue to wait  the command notification
 800327e:	e012      	b.n	80032a6 <handler_menu_task+0xc6>
			
		}
		else
		{
			// Invalid command
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <handler_menu_task+0xcc>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	f04f 32ff 	mov.w	r2, #4294967295
 800328a:	490c      	ldr	r1, [pc, #48]	; (80032bc <handler_menu_task+0xdc>)
 800328c:	f000 fa84 	bl	8003798 <xQueueGenericSend>
 8003290:	e000      	b.n	8003294 <handler_menu_task+0xb4>
					break;
 8003292:	bf00      	nop
		}

		// Wait to run again when some other task notifies.
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	2000      	movs	r0, #0
 80032a2:	f001 fedb 	bl	800505c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80032a6:	e7a3      	b.n	80031f0 <handler_menu_task+0x10>
 80032a8:	080065a0 	.word	0x080065a0
 80032ac:	200191b4 	.word	0x200191b4
 80032b0:	20000034 	.word	0x20000034
 80032b4:	200191dc 	.word	0x200191dc
 80032b8:	200191a4 	.word	0x200191a4
 80032bc:	2000000c 	.word	0x2000000c

080032c0 <handler_led_task>:
	}
}

void handler_led_task(void *param)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	while(1){
 80032c8:	e7fe      	b.n	80032c8 <handler_led_task+0x8>

080032ca <handler_rtc_task>:
			
	}
}

void handler_rtc_task(void *param)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
	while(1){
 80032d2:	e7fe      	b.n	80032d2 <handler_rtc_task+0x8>

080032d4 <handler_print_task>:
	}
		
}

void handler_print_task(void *param)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	while(1){
 80032dc:	e7fe      	b.n	80032dc <handler_print_task+0x8>

080032de <handler_cmd_task>:
		
	}
}

void handler_cmd_task(void *param)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08a      	sub	sp, #40	; 0x28
 80032e2:	af02      	add	r7, sp, #8
 80032e4:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	
	while(1){
		/*!< Implement notify wait >*/
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	2000      	movs	r0, #0
 80032f4:	f001 feb2 	bl	800505c <xTaskGenericNotifyWait>
 80032f8:	61f8      	str	r0, [r7, #28]
		if (pdTRUE == ret)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d1f2      	bne.n	80032e6 <handler_cmd_task+0x8>
		{
			/*!< Process the user data (command) stored in input data queue >*/
			process_command(&cmd);
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f83d 	bl	8003384 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800330a:	e7ec      	b.n	80032e6 <handler_cmd_task+0x8>

0800330c <extract_command>:
		}
	}
}

int extract_command(command_t* cmd)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	uint8_t u8i = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
	uint8_t u8item = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
	// Check the number of messages available in queue
	status = uxQueueMessagesWaiting(q_data);
 800331c:	4b18      	ldr	r3, [pc, #96]	; (8003380 <extract_command+0x74>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fd40 	bl	8003da6 <uxQueueMessagesWaiting>
 8003326:	4603      	mov	r3, r0
 8003328:	613b      	str	r3, [r7, #16]

	if (0 == status)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <extract_command+0x2a>
		return -1;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	e020      	b.n	8003378 <extract_command+0x6c>

	do
	{
		status = xQueueReceive(q_data, &u8item, 0);
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <extract_command+0x74>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f107 010f 	add.w	r1, r7, #15
 800333e:	2200      	movs	r2, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fbc9 	bl	8003ad8 <xQueueReceive>
 8003346:	6138      	str	r0, [r7, #16]
		if (pdTRUE == status)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d106      	bne.n	800335c <extract_command+0x50>
		{
			cmd->u8Payload[u8i++] = u8item;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	75fa      	strb	r2, [r7, #23]
 8003354:	461a      	mov	r2, r3
 8003356:	7bf9      	ldrb	r1, [r7, #15]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	5499      	strb	r1, [r3, r2]
		}
	}while(u8item != '\n');
 800335c:	7bfb      	ldrb	r3, [r7, #15]
 800335e:	2b0a      	cmp	r3, #10
 8003360:	d1e9      	bne.n	8003336 <extract_command+0x2a>

	// Replace '\n' by '\0'
	cmd->u8Payload[u8i-1] = '\0';
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	3b01      	subs	r3, #1
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	2100      	movs	r1, #0
 800336a:	54d1      	strb	r1, [r2, r3]
	// Save the length of the command excluding null char
	cmd->u32length = u8i - 1;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	3b01      	subs	r3, #1
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	60da      	str	r2, [r3, #12]

	return 0;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200191ac 	.word	0x200191ac

08003384 <process_command>:

void process_command(command_t* cmd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af02      	add	r7, sp, #8
 800338a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffbd 	bl	800330c <extract_command>

	switch(curr_state)
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <process_command+0x7c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d82c      	bhi.n	80033f4 <process_command+0x70>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <process_command+0x1c>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b9 	.word	0x080033b9
 80033a4:	080033cd 	.word	0x080033cd
 80033a8:	080033e1 	.word	0x080033e1
 80033ac:	080033e1 	.word	0x080033e1
 80033b0:	080033e1 	.word	0x080033e1
 80033b4:	080033e1 	.word	0x080033e1
	{
		case sMainMenu:
			/*!< Notify menu task with the command >*/
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <process_command+0x80>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2303      	movs	r3, #3
 80033c4:	2100      	movs	r1, #0
 80033c6:	f001 fec7 	bl	8005158 <xTaskGenericNotify>
			break;
 80033ca:	e014      	b.n	80033f6 <process_command+0x72>

		case sLedEffect:
			/*!< Notify led task with the command >*/
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <process_command+0x84>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2303      	movs	r3, #3
 80033d8:	2100      	movs	r1, #0
 80033da:	f001 febd 	bl	8005158 <xTaskGenericNotify>
			break;
 80033de:	e00a      	b.n	80033f6 <process_command+0x72>
			/*fall-through*/
		case sRtcDateConfig:
			/*fall-through*/
		case sRtcReport:
			/*!< Notify menu task with the command >*/
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80033e0:	4b0a      	ldr	r3, [pc, #40]	; (800340c <process_command+0x88>)
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2303      	movs	r3, #3
 80033ec:	2100      	movs	r1, #0
 80033ee:	f001 feb3 	bl	8005158 <xTaskGenericNotify>
			break;
 80033f2:	e000      	b.n	80033f6 <process_command+0x72>
			
		default:
			break;
 80033f4:	bf00      	nop
	}
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000034 	.word	0x20000034
 8003404:	200191b0 	.word	0x200191b0
 8003408:	200191dc 	.word	0x200191dc
 800340c:	200191a4 	.word	0x200191a4

08003410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003448 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003414:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003416:	e003      	b.n	8003420 <LoopCopyDataInit>

08003418 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800341a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800341c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800341e:	3104      	adds	r1, #4

08003420 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003420:	480b      	ldr	r0, [pc, #44]	; (8003450 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003424:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003426:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003428:	d3f6      	bcc.n	8003418 <CopyDataInit>
  ldr  r2, =_sbss
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800342c:	e002      	b.n	8003434 <LoopFillZerobss>

0800342e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800342e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003430:	f842 3b04 	str.w	r3, [r2], #4

08003434 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003436:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003438:	d3f9      	bcc.n	800342e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800343a:	f7ff febb 	bl	80031b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800343e:	f003 f839 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003442:	f7ff fa2b 	bl	800289c <main>
  bx  lr    
 8003446:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003448:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800344c:	08006684 	.word	0x08006684
  ldr  r0, =_sdata
 8003450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003454:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8003458:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 800345c:	200192a4 	.word	0x200192a4

08003460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003460:	e7fe      	b.n	8003460 <ADC_IRQHandler>

08003462 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f103 0208 	add.w	r2, r3, #8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f04f 32ff 	mov.w	r2, #4294967295
 800347a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f103 0208 	add.w	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f103 0208 	add.w	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d103      	bne.n	80034dc <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e00c      	b.n	80034f6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3308      	adds	r3, #8
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e002      	b.n	80034ea <vListInsert+0x2e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d2f6      	bcs.n	80034e4 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6892      	ldr	r2, [r2, #8]
 8003544:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6852      	ldr	r2, [r2, #4]
 800354e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d103      	bne.n	8003562 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1e5a      	subs	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800358e:	2301      	movs	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <xQueueGenericReset+0x2c>
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e7fe      	b.n	80035ae <xQueueGenericReset+0x2a>

    if( ( pxQueue != NULL ) &&
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d063      	beq.n	800367e <xQueueGenericReset+0xfa>
        ( pxQueue->uxLength >= 1U ) &&
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d05f      	beq.n	800367e <xQueueGenericReset+0xfa>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2000      	movs	r0, #0
 80035c8:	fba2 1203 	umull	r1, r2, r2, r3
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	0013      	movs	r3, r2
 80035d6:	2400      	movs	r4, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d000      	beq.n	80035de <xQueueGenericReset+0x5a>
 80035dc:	2001      	movs	r0, #1
 80035de:	4603      	mov	r3, r0
        ( pxQueue->uxLength >= 1U ) &&
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d14c      	bne.n	800367e <xQueueGenericReset+0xfa>
    {
        taskENTER_CRITICAL();
 80035e4:	f002 fc54 	bl	8005e90 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	6939      	ldr	r1, [r7, #16]
 80035f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	441a      	add	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2200      	movs	r2, #0
 8003602:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	3b01      	subs	r3, #1
 8003616:	6939      	ldr	r1, [r7, #16]
 8003618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	441a      	add	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	22ff      	movs	r2, #255	; 0xff
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	22ff      	movs	r2, #255	; 0xff
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d114      	bne.n	8003664 <xQueueGenericReset+0xe0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01a      	beq.n	8003678 <xQueueGenericReset+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	3310      	adds	r3, #16
 8003646:	4618      	mov	r0, r3
 8003648:	f001 fa3c 	bl	8004ac4 <xTaskRemoveFromEventList>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <xQueueGenericReset+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <xQueueGenericReset+0x124>)
 8003654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	e009      	b.n	8003678 <xQueueGenericReset+0xf4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	3310      	adds	r3, #16
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fefa 	bl	8003462 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	3324      	adds	r3, #36	; 0x24
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fef5 	bl	8003462 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003678:	f002 fc38 	bl	8005eec <vPortExitCritical>
 800367c:	e001      	b.n	8003682 <xQueueGenericReset+0xfe>
    }
    else
    {
        xReturn = pdFAIL;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d109      	bne.n	800369c <xQueueGenericReset+0x118>
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	e7fe      	b.n	800369a <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800369c:	697b      	ldr	r3, [r7, #20]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd90      	pop	{r4, r7, pc}
 80036a6:	bf00      	nop
 80036a8:	e000ed04 	.word	0xe000ed04

080036ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b08b      	sub	sp, #44	; 0x2c
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d034      	beq.n	800372e <xQueueGenericCreate+0x82>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80036c4:	2000      	movs	r0, #0
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	fba2 1203 	umull	r1, r2, r2, r3
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	0013      	movs	r3, r2
 80036d8:	2400      	movs	r4, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d000      	beq.n	80036e0 <xQueueGenericCreate+0x34>
 80036de:	2001      	movs	r0, #1
 80036e0:	4603      	mov	r3, r0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d123      	bne.n	800372e <xQueueGenericCreate+0x82>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80036ee:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80036f2:	d81c      	bhi.n	800372e <xQueueGenericCreate+0x82>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	3350      	adds	r3, #80	; 0x50
 8003702:	4618      	mov	r0, r3
 8003704:	f002 fcde 	bl	80060c4 <pvPortMalloc>
 8003708:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3350      	adds	r3, #80	; 0x50
 8003718:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800371a:	79fa      	ldrb	r2, [r7, #7]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f813 	bl	8003752 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800372c:	e00c      	b.n	8003748 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <xQueueGenericCreate+0x9c>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e7fe      	b.n	8003746 <xQueueGenericCreate+0x9a>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003748:	69fb      	ldr	r3, [r7, #28]
    }
 800374a:	4618      	mov	r0, r3
 800374c:	3724      	adds	r7, #36	; 0x24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}

08003752 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d103      	bne.n	800376e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e002      	b.n	8003774 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003780:	2101      	movs	r1, #1
 8003782:	69b8      	ldr	r0, [r7, #24]
 8003784:	f7ff fefe 	bl	8003584 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <xQueueGenericSend+0x30>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037c6:	e7fe      	b.n	80037c6 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <xQueueGenericSend+0x3e>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <xQueueGenericSend+0x42>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <xQueueGenericSend+0x44>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <xQueueGenericSend+0x5c>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e7fe      	b.n	80037f2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <xQueueGenericSend+0x6a>
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <xQueueGenericSend+0x6e>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueGenericSend+0x70>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <xQueueGenericSend+0x88>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	e7fe      	b.n	800381e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003820:	f001 fb5c 	bl	8004edc <xTaskGetSchedulerState>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <xQueueGenericSend+0x98>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <xQueueGenericSend+0x9c>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <xQueueGenericSend+0x9e>
 8003834:	2300      	movs	r3, #0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <xQueueGenericSend+0xb6>
 800383a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383e:	f383 8811 	msr	BASEPRI, r3
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	e7fe      	b.n	800384c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800384e:	f002 fb1f 	bl	8005e90 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <xQueueGenericSend+0xcc>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d129      	bne.n	80038b8 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800386a:	f000 fab9 	bl	8003de0 <prvCopyDataToQueue>
 800386e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	3324      	adds	r3, #36	; 0x24
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f921 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <xQueueGenericSend+0x1f0>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	e00a      	b.n	80038b0 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389c:	2b00      	cmp	r3, #0
 800389e:	d007      	beq.n	80038b0 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <xQueueGenericSend+0x1f0>)
 80038a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80038b0:	f002 fb1c 	bl	8005eec <vPortExitCritical>
                return pdPASS;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e063      	b.n	8003980 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d103      	bne.n	80038c6 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80038be:	f002 fb15 	bl	8005eec <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e05c      	b.n	8003980 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 f9cd 	bl	8004c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80038d6:	2301      	movs	r3, #1
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80038da:	f002 fb07 	bl	8005eec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80038de:	f000 fe01 	bl	80044e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80038e2:	f002 fad5 	bl	8005e90 <vPortEnterCritical>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d103      	bne.n	80038fc <xQueueGenericSend+0x164>
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003902:	b25b      	sxtb	r3, r3
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d103      	bne.n	8003912 <xQueueGenericSend+0x17a>
 800390a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003912:	f002 faeb 	bl	8005eec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003916:	1d3a      	adds	r2, r7, #4
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f001 f9bc 	bl	8004c9c <xTaskCheckForTimeOut>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d124      	bne.n	8003974 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800392a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800392c:	f000 fb50 	bl	8003fd0 <prvIsQueueFull>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d018      	beq.n	8003968 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	3310      	adds	r3, #16
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f001 f858 	bl	80049f4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003946:	f000 fadb 	bl	8003f00 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800394a:	f000 fdd9 	bl	8004500 <xTaskResumeAll>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f af7c 	bne.w	800384e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <xQueueGenericSend+0x1f0>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	e772      	b.n	800384e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800396a:	f000 fac9 	bl	8003f00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800396e:	f000 fdc7 	bl	8004500 <xTaskResumeAll>
 8003972:	e76c      	b.n	800384e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003976:	f000 fac3 	bl	8003f00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800397a:	f000 fdc1 	bl	8004500 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800397e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003980:	4618      	mov	r0, r3
 8003982:	3738      	adds	r7, #56	; 0x38
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b090      	sub	sp, #64	; 0x40
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <xQueueGenericSendFromISR+0x2c>
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSendFromISR+0x3a>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSendFromISR+0x3e>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSendFromISR+0x40>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d109      	bne.n	80039e4 <xQueueGenericSendFromISR+0x58>
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	e7fe      	b.n	80039e2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d103      	bne.n	80039f2 <xQueueGenericSendFromISR+0x66>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <xQueueGenericSendFromISR+0x6a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <xQueueGenericSendFromISR+0x6c>
 80039f6:	2300      	movs	r3, #0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <xQueueGenericSendFromISR+0x84>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	623b      	str	r3, [r7, #32]
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a10:	f002 fb1a 	bl	8006048 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003a14:	f3ef 8211 	mrs	r2, BASEPRI
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	61fa      	str	r2, [r7, #28]
 8003a2a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <xQueueGenericSendFromISR+0xb6>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d13d      	bne.n	8003abe <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a58:	f000 f9c2 	bl	8003de0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003a5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d112      	bne.n	8003a8c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d024      	beq.n	8003ab8 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	3324      	adds	r3, #36	; 0x24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f826 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01c      	beq.n	8003ab8 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d019      	beq.n	8003ab8 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e015      	b.n	8003ab8 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003a8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a90:	2b7f      	cmp	r3, #127	; 0x7f
 8003a92:	d109      	bne.n	8003aa8 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	b25a      	sxtb	r2, r3
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003abc:	e001      	b.n	8003ac2 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3740      	adds	r7, #64	; 0x40
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08c      	sub	sp, #48	; 0x30
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <xQueueReceive+0x2e>
        __asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	e7fe      	b.n	8003b04 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d103      	bne.n	8003b14 <xQueueReceive+0x3c>
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <xQueueReceive+0x40>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <xQueueReceive+0x42>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <xQueueReceive+0x5a>
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e7fe      	b.n	8003b30 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b32:	f001 f9d3 	bl	8004edc <xTaskGetSchedulerState>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <xQueueReceive+0x6a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <xQueueReceive+0x6e>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <xQueueReceive+0x70>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xQueueReceive+0x88>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e7fe      	b.n	8003b5e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003b60:	f002 f996 	bl	8005e90 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01f      	beq.n	8003bb0 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b74:	f000 f99e 	bl	8003eb4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	3310      	adds	r3, #16
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 ff99 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d007      	beq.n	8003ba8 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b98:	4b3c      	ldr	r3, [pc, #240]	; (8003c8c <xQueueReceive+0x1b4>)
 8003b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ba8:	f002 f9a0 	bl	8005eec <vPortExitCritical>
                return pdPASS;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e069      	b.n	8003c84 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003bb6:	f002 f999 	bl	8005eec <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e062      	b.n	8003c84 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003bc4:	f107 0310 	add.w	r3, r7, #16
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 f851 	bl	8004c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003bd2:	f002 f98b 	bl	8005eec <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003bd6:	f000 fc85 	bl	80044e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003bda:	f002 f959 	bl	8005e90 <vPortEnterCritical>
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d103      	bne.n	8003bf4 <xQueueReceive+0x11c>
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d103      	bne.n	8003c0a <xQueueReceive+0x132>
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0a:	f002 f96f 	bl	8005eec <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c0e:	1d3a      	adds	r2, r7, #4
 8003c10:	f107 0310 	add.w	r3, r7, #16
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f840 	bl	8004c9c <xTaskCheckForTimeOut>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d123      	bne.n	8003c6a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c24:	f000 f9be 	bl	8003fa4 <prvIsQueueEmpty>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d017      	beq.n	8003c5e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	3324      	adds	r3, #36	; 0x24
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fedc 	bl	80049f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3e:	f000 f95f 	bl	8003f00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003c42:	f000 fc5d 	bl	8004500 <xTaskResumeAll>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d189      	bne.n	8003b60 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <xQueueReceive+0x1b4>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	e780      	b.n	8003b60 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c60:	f000 f94e 	bl	8003f00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c64:	f000 fc4c 	bl	8004500 <xTaskResumeAll>
 8003c68:	e77a      	b.n	8003b60 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c6c:	f000 f948 	bl	8003f00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003c70:	f000 fc46 	bl	8004500 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 f995 	bl	8003fa4 <prvIsQueueEmpty>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f43f af6f 	beq.w	8003b60 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003c82:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3730      	adds	r7, #48	; 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b090      	sub	sp, #64	; 0x40
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <xQueueReceiveFromISR+0x2a>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueReceiveFromISR+0x28>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <xQueueReceiveFromISR+0x38>
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <xQueueReceiveFromISR+0x3c>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <xQueueReceiveFromISR+0x3e>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <xQueueReceiveFromISR+0x56>
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueReceiveFromISR+0x54>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ce6:	f002 f9af 	bl	8006048 <vPortValidateInterruptPriority>
        __asm volatile
 8003cea:	f3ef 8211 	mrs	r2, BASEPRI
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	623a      	str	r2, [r7, #32]
 8003d00:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8003d02:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03d      	beq.n	8003d8e <xQueueReceiveFromISR+0xfe>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d20:	f000 f8c8 	bl	8003eb4 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8003d2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d112      	bne.n	8003d5c <xQueueReceiveFromISR+0xcc>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <xQueueReceiveFromISR+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	3310      	adds	r3, #16
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 febe 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01c      	beq.n	8003d88 <xQueueReceiveFromISR+0xf8>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d019      	beq.n	8003d88 <xQueueReceiveFromISR+0xf8>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e015      	b.n	8003d88 <xQueueReceiveFromISR+0xf8>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8003d5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d60:	2b7f      	cmp	r3, #127	; 0x7f
 8003d62:	d109      	bne.n	8003d78 <xQueueReceiveFromISR+0xe8>
        __asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	61bb      	str	r3, [r7, #24]
 8003d76:	e7fe      	b.n	8003d76 <xQueueReceiveFromISR+0xe6>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8c:	e001      	b.n	8003d92 <xQueueReceiveFromISR+0x102>
        }
        else
        {
            xReturn = pdFAIL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f383 8811 	msr	BASEPRI, r3
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3740      	adds	r7, #64	; 0x40
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <uxQueueMessagesWaiting+0x22>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	e7fe      	b.n	8003dc6 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 8003dc8:	f002 f862 	bl	8005e90 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003dd2:	f002 f88b 	bl	8005eec <vPortExitCritical>

    return uxReturn;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14d      	bne.n	8003ea2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 f884 	bl	8004f18 <xTaskPriorityDisinherit>
 8003e10:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e043      	b.n	8003ea2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d119      	bne.n	8003e54 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6858      	ldr	r0, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	f002 fb66 	bl	80064fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	441a      	add	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d32b      	bcc.n	8003ea2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	e026      	b.n	8003ea2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68d8      	ldr	r0, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	f002 fb4c 	bl	80064fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	425b      	negs	r3, r3
 8003e6e:	441a      	add	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d207      	bcs.n	8003e90 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	425b      	negs	r3, r3
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d105      	bne.n	8003ea2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003eaa:	697b      	ldr	r3, [r7, #20]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	441a      	add	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d303      	bcc.n	8003ee8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68d9      	ldr	r1, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6838      	ldr	r0, [r7, #0]
 8003ef4:	f002 fb02 	bl	80064fc <memcpy>
    }
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003f08:	f001 ffc2 	bl	8005e90 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f12:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f14:	e011      	b.n	8003f3a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fdce 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003f2e:	f000 ff19 	bl	8004d64 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dce9      	bgt.n	8003f16 <prvUnlockQueue+0x16>
 8003f42:	e000      	b.n	8003f46 <prvUnlockQueue+0x46>
                        break;
 8003f44:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003f4e:	f001 ffcd 	bl	8005eec <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003f52:	f001 ff9d 	bl	8005e90 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f5c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f5e:	e011      	b.n	8003f84 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d012      	beq.n	8003f8e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fda9 	bl	8004ac4 <xTaskRemoveFromEventList>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003f78:	f000 fef4 	bl	8004d64 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dce9      	bgt.n	8003f60 <prvUnlockQueue+0x60>
 8003f8c:	e000      	b.n	8003f90 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003f8e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	22ff      	movs	r2, #255	; 0xff
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003f98:	f001 ffa8 	bl	8005eec <vPortExitCritical>
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003fac:	f001 ff70 	bl	8005e90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e001      	b.n	8003fc2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003fc2:	f001 ff93 	bl	8005eec <vPortExitCritical>

    return xReturn;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003fd8:	f001 ff5a 	bl	8005e90 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d102      	bne.n	8003fee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e001      	b.n	8003ff2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ff2:	f001 ff7b 	bl	8005eec <vPortExitCritical>

    return xReturn;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <xQueueIsQueueFullFromISR+0x26>
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	e7fe      	b.n	8004024 <xQueueIsQueueFullFromISR+0x24>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	429a      	cmp	r2, r3
 8004030:	d102      	bne.n	8004038 <xQueueIsQueueFullFromISR+0x38>
    {
        xReturn = pdTRUE;
 8004032:	2301      	movs	r3, #1
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e001      	b.n	800403c <xQueueIsQueueFullFromISR+0x3c>
    }
    else
    {
        xReturn = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800403c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800403e:	4618      	mov	r0, r3
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <vQueueAddToRegistry+0x24>
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e7fe      	b.n	800406e <vQueueAddToRegistry+0x22>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d024      	beq.n	80040c4 <vQueueAddToRegistry+0x78>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e01e      	b.n	80040be <vQueueAddToRegistry+0x72>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <vQueueAddToRegistry+0x98>)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d105      	bne.n	800409c <vQueueAddToRegistry+0x50>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <vQueueAddToRegistry+0x98>)
 8004096:	4413      	add	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
                    break;
 800409a:	e013      	b.n	80040c4 <vQueueAddToRegistry+0x78>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vQueueAddToRegistry+0x6c>
 80040a2:	4a10      	ldr	r2, [pc, #64]	; (80040e4 <vQueueAddToRegistry+0x98>)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <vQueueAddToRegistry+0x6c>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <vQueueAddToRegistry+0x98>)
 80040b4:	4413      	add	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	3301      	adds	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b07      	cmp	r3, #7
 80040c2:	d9dd      	bls.n	8004080 <vQueueAddToRegistry+0x34>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <vQueueAddToRegistry+0x8a>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20019264 	.word	0x20019264

080040e8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80040f8:	f001 feca 	bl	8005e90 <vPortEnterCritical>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004102:	b25b      	sxtb	r3, r3
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d103      	bne.n	8004112 <vQueueWaitForMessageRestricted+0x2a>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004118:	b25b      	sxtb	r3, r3
 800411a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411e:	d103      	bne.n	8004128 <vQueueWaitForMessageRestricted+0x40>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004128:	f001 fee0 	bl	8005eec <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fc7d 	bl	8004a3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004142:	6978      	ldr	r0, [r7, #20]
 8004144:	f7ff fedc 	bl	8003f00 <prvUnlockQueue>
    }
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	; 0x30
 8004154:	af04      	add	r7, sp, #16
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4618      	mov	r0, r3
 8004166:	f001 ffad 	bl	80060c4 <pvPortMalloc>
 800416a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00e      	beq.n	8004190 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004172:	2058      	movs	r0, #88	; 0x58
 8004174:	f001 ffa6 	bl	80060c4 <pvPortMalloc>
 8004178:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
 8004186:	e005      	b.n	8004194 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f002 f877 	bl	800627c <vPortFree>
 800418e:	e001      	b.n	8004194 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d013      	beq.n	80041c2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	2300      	movs	r3, #0
 800419e:	9303      	str	r3, [sp, #12]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	9302      	str	r3, [sp, #8]
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f80e 	bl	80041d2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80041b6:	69f8      	ldr	r0, [r7, #28]
 80041b8:	f000 f8ae 	bl	8004318 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80041bc:	2301      	movs	r3, #1
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e002      	b.n	80041c8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80041c8:	69bb      	ldr	r3, [r7, #24]
    }
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	461a      	mov	r2, r3
 80041ea:	21a5      	movs	r1, #165	; 0xa5
 80041ec:	f002 f991 	bl	8006512 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041fa:	3b01      	subs	r3, #1
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f023 0307 	bic.w	r3, r3, #7
 8004208:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	2b00      	cmp	r3, #0
 8004212:	d009      	beq.n	8004228 <prvInitialiseNewTask+0x56>
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	e7fe      	b.n	8004226 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01f      	beq.n	800426e <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e012      	b.n	800425a <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	7819      	ldrb	r1, [r3, #0]
 800423c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	3334      	adds	r3, #52	; 0x34
 8004244:	460a      	mov	r2, r1
 8004246:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d006      	beq.n	8004262 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3301      	adds	r3, #1
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b09      	cmp	r3, #9
 800425e:	d9e9      	bls.n	8004234 <prvInitialiseNewTask+0x62>
 8004260:	e000      	b.n	8004264 <prvInitialiseNewTask+0x92>
            {
                break;
 8004262:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800426c:	e003      	b.n	8004276 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	2b04      	cmp	r3, #4
 800427a:	d909      	bls.n	8004290 <prvInitialiseNewTask+0xbe>
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	e7fe      	b.n	800428e <prvInitialiseNewTask+0xbc>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	2b04      	cmp	r3, #4
 8004294:	d901      	bls.n	800429a <prvInitialiseNewTask+0xc8>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004296:	2304      	movs	r3, #4
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80042a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2200      	movs	r2, #0
 80042aa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff f8f6 	bl	80034a2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	3318      	adds	r3, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f8f1 	bl	80034a2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	f1c3 0205 	rsb	r2, r3, #5
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3350      	adds	r3, #80	; 0x50
 80042da:	2204      	movs	r2, #4
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f002 f917 	bl	8006512 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	3354      	adds	r3, #84	; 0x54
 80042e8:	2201      	movs	r2, #1
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 f910 	bl	8006512 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	68f9      	ldr	r1, [r7, #12]
 80042f6:	69b8      	ldr	r0, [r7, #24]
 80042f8:	f001 fca2 	bl	8005c40 <pxPortInitialiseStack>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d002      	beq.n	800430e <prvInitialiseNewTask+0x13c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800430e:	bf00      	nop
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004320:	f001 fdb6 	bl	8005e90 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004324:	4b40      	ldr	r3, [pc, #256]	; (8004428 <prvAddNewTaskToReadyList+0x110>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	4a3f      	ldr	r2, [pc, #252]	; (8004428 <prvAddNewTaskToReadyList+0x110>)
 800432c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800432e:	4b3f      	ldr	r3, [pc, #252]	; (800442c <prvAddNewTaskToReadyList+0x114>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004336:	4a3d      	ldr	r2, [pc, #244]	; (800442c <prvAddNewTaskToReadyList+0x114>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800433c:	4b3a      	ldr	r3, [pc, #232]	; (8004428 <prvAddNewTaskToReadyList+0x110>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d110      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004344:	f000 fd32 	bl	8004dac <prvInitialiseTaskLists>
 8004348:	e00d      	b.n	8004366 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <prvAddNewTaskToReadyList+0x118>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <prvAddNewTaskToReadyList+0x114>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	d802      	bhi.n	8004366 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004360:	4a32      	ldr	r2, [pc, #200]	; (800442c <prvAddNewTaskToReadyList+0x114>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004366:	4b33      	ldr	r3, [pc, #204]	; (8004434 <prvAddNewTaskToReadyList+0x11c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a31      	ldr	r2, [pc, #196]	; (8004434 <prvAddNewTaskToReadyList+0x11c>)
 800436e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004370:	4b30      	ldr	r3, [pc, #192]	; (8004434 <prvAddNewTaskToReadyList+0x11c>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <prvAddNewTaskToReadyList+0x120>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <prvAddNewTaskToReadyList+0x120>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	492b      	ldr	r1, [pc, #172]	; (800443c <prvAddNewTaskToReadyList+0x124>)
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	3304      	adds	r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	3204      	adds	r2, #4
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <prvAddNewTaskToReadyList+0x124>)
 80043ce:	441a      	add	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	615a      	str	r2, [r3, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4918      	ldr	r1, [pc, #96]	; (800443c <prvAddNewTaskToReadyList+0x124>)
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1c59      	adds	r1, r3, #1
 80043e8:	4814      	ldr	r0, [pc, #80]	; (800443c <prvAddNewTaskToReadyList+0x124>)
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4403      	add	r3, r0
 80043f4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80043f6:	f001 fd79 	bl	8005eec <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80043fa:	4b0d      	ldr	r3, [pc, #52]	; (8004430 <prvAddNewTaskToReadyList+0x118>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <prvAddNewTaskToReadyList+0x114>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	429a      	cmp	r2, r3
 800440e:	d207      	bcs.n	8004420 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <prvAddNewTaskToReadyList+0x128>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000110 	.word	0x20000110
 800442c:	20000038 	.word	0x20000038
 8004430:	2000011c 	.word	0x2000011c
 8004434:	2000012c 	.word	0x2000012c
 8004438:	20000118 	.word	0x20000118
 800443c:	2000003c 	.word	0x2000003c
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800444a:	4b1f      	ldr	r3, [pc, #124]	; (80044c8 <vTaskStartScheduler+0x84>)
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	2282      	movs	r2, #130	; 0x82
 8004456:	491d      	ldr	r1, [pc, #116]	; (80044cc <vTaskStartScheduler+0x88>)
 8004458:	481d      	ldr	r0, [pc, #116]	; (80044d0 <vTaskStartScheduler+0x8c>)
 800445a:	f7ff fe79 	bl	8004150 <xTaskCreate>
 800445e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d102      	bne.n	800446c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004466:	f001 f96b 	bl	8005740 <xTimerCreateTimerTask>
 800446a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d115      	bne.n	800449e <vTaskStartScheduler+0x5a>
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <vTaskStartScheduler+0x90>)
 8004486:	f04f 32ff 	mov.w	r2, #4294967295
 800448a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <vTaskStartScheduler+0x94>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004492:	4b12      	ldr	r3, [pc, #72]	; (80044dc <vTaskStartScheduler+0x98>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004498:	f001 fc5c 	bl	8005d54 <xPortStartScheduler>
 800449c:	e00d      	b.n	80044ba <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d109      	bne.n	80044ba <vTaskStartScheduler+0x76>
 80044a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044aa:	f383 8811 	msr	BASEPRI, r3
 80044ae:	f3bf 8f6f 	isb	sy
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	e7fe      	b.n	80044b8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <vTaskStartScheduler+0x9c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000134 	.word	0x20000134
 80044cc:	08006644 	.word	0x08006644
 80044d0:	08004d7d 	.word	0x08004d7d
 80044d4:	20000130 	.word	0x20000130
 80044d8:	2000011c 	.word	0x2000011c
 80044dc:	20000114 	.word	0x20000114
 80044e0:	20000010 	.word	0x20000010

080044e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <vTaskSuspendAll+0x18>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a03      	ldr	r2, [pc, #12]	; (80044fc <vTaskSuspendAll+0x18>)
 80044f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000138 	.word	0x20000138

08004500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b088      	sub	sp, #32
 8004504:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800450e:	4b70      	ldr	r3, [pc, #448]	; (80046d0 <xTaskResumeAll+0x1d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <xTaskResumeAll+0x2a>
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	e7fe      	b.n	8004528 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800452a:	f001 fcb1 	bl	8005e90 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800452e:	4b68      	ldr	r3, [pc, #416]	; (80046d0 <xTaskResumeAll+0x1d0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3b01      	subs	r3, #1
 8004534:	4a66      	ldr	r2, [pc, #408]	; (80046d0 <xTaskResumeAll+0x1d0>)
 8004536:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004538:	4b65      	ldr	r3, [pc, #404]	; (80046d0 <xTaskResumeAll+0x1d0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f040 80c0 	bne.w	80046c2 <xTaskResumeAll+0x1c2>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004542:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <xTaskResumeAll+0x1d4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80bb 	beq.w	80046c2 <xTaskResumeAll+0x1c2>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800454c:	e08a      	b.n	8004664 <xTaskResumeAll+0x164>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454e:	4b62      	ldr	r3, [pc, #392]	; (80046d8 <xTaskResumeAll+0x1d8>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	6a12      	ldr	r2, [r2, #32]
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	69d2      	ldr	r2, [r2, #28]
 800456e:	605a      	str	r2, [r3, #4]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3318      	adds	r3, #24
 8004578:	429a      	cmp	r2, r3
 800457a:	d103      	bne.n	8004584 <xTaskResumeAll+0x84>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2200      	movs	r2, #0
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1e5a      	subs	r2, r3, #1
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	68d2      	ldr	r2, [r2, #12]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3304      	adds	r3, #4
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d103      	bne.n	80045c2 <xTaskResumeAll+0xc2>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2200      	movs	r2, #0
 80045c6:	615a      	str	r2, [r3, #20]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	1e5a      	subs	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	2201      	movs	r2, #1
 80045d8:	409a      	lsls	r2, r3
 80045da:	4b40      	ldr	r3, [pc, #256]	; (80046dc <xTaskResumeAll+0x1dc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	4a3e      	ldr	r2, [pc, #248]	; (80046dc <xTaskResumeAll+0x1dc>)
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	493d      	ldr	r1, [pc, #244]	; (80046e0 <xTaskResumeAll+0x1e0>)
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	3304      	adds	r3, #4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	3204      	adds	r2, #4
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1d1a      	adds	r2, r3, #4
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	609a      	str	r2, [r3, #8]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4a2e      	ldr	r2, [pc, #184]	; (80046e0 <xTaskResumeAll+0x1e0>)
 8004628:	441a      	add	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	615a      	str	r2, [r3, #20]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	492b      	ldr	r1, [pc, #172]	; (80046e0 <xTaskResumeAll+0x1e0>)
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	1c59      	adds	r1, r3, #1
 8004642:	4827      	ldr	r0, [pc, #156]	; (80046e0 <xTaskResumeAll+0x1e0>)
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4403      	add	r3, r0
 800464e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <xTaskResumeAll+0x1e4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <xTaskResumeAll+0x164>
                    {
                        xYieldPending = pdTRUE;
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <xTaskResumeAll+0x1e8>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004664:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <xTaskResumeAll+0x1d8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f47f af70 	bne.w	800454e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <xTaskResumeAll+0x178>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004674:	f000 fc16 	bl	8004ea4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <xTaskResumeAll+0x1ec>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <xTaskResumeAll+0x1a6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004684:	f000 f846 	bl	8004714 <xTaskIncrementTick>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <xTaskResumeAll+0x194>
                            {
                                xYieldPending = pdTRUE;
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <xTaskResumeAll+0x1e8>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	3b01      	subs	r3, #1
 8004698:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f1      	bne.n	8004684 <xTaskResumeAll+0x184>

                        xPendedTicks = 0;
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <xTaskResumeAll+0x1ec>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <xTaskResumeAll+0x1e8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <xTaskResumeAll+0x1c2>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <xTaskResumeAll+0x1f0>)
 80046b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80046c2:	f001 fc13 	bl	8005eec <vPortExitCritical>

    return xAlreadyYielded;
 80046c6:	69bb      	ldr	r3, [r7, #24]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	20000138 	.word	0x20000138
 80046d4:	20000110 	.word	0x20000110
 80046d8:	200000d0 	.word	0x200000d0
 80046dc:	20000118 	.word	0x20000118
 80046e0:	2000003c 	.word	0x2000003c
 80046e4:	20000038 	.word	0x20000038
 80046e8:	20000124 	.word	0x20000124
 80046ec:	20000120 	.word	0x20000120
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <xTaskGetTickCount+0x1c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004700:	687b      	ldr	r3, [r7, #4]
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20000114 	.word	0x20000114

08004714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471e:	4b7d      	ldr	r3, [pc, #500]	; (8004914 <xTaskIncrementTick+0x200>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 80eb 	bne.w	80048fe <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004728:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <xTaskIncrementTick+0x204>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3301      	adds	r3, #1
 800472e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004730:	4a79      	ldr	r2, [pc, #484]	; (8004918 <xTaskIncrementTick+0x204>)
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d11f      	bne.n	800477c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800473c:	4b77      	ldr	r3, [pc, #476]	; (800491c <xTaskIncrementTick+0x208>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <xTaskIncrementTick+0x46>
 8004746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474a:	f383 8811 	msr	BASEPRI, r3
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e7fe      	b.n	8004758 <xTaskIncrementTick+0x44>
 800475a:	4b70      	ldr	r3, [pc, #448]	; (800491c <xTaskIncrementTick+0x208>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	61fb      	str	r3, [r7, #28]
 8004760:	4b6f      	ldr	r3, [pc, #444]	; (8004920 <xTaskIncrementTick+0x20c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a6d      	ldr	r2, [pc, #436]	; (800491c <xTaskIncrementTick+0x208>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4a6d      	ldr	r2, [pc, #436]	; (8004920 <xTaskIncrementTick+0x20c>)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	4b6d      	ldr	r3, [pc, #436]	; (8004924 <xTaskIncrementTick+0x210>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3301      	adds	r3, #1
 8004774:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <xTaskIncrementTick+0x210>)
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	f000 fb94 	bl	8004ea4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800477c:	4b6a      	ldr	r3, [pc, #424]	; (8004928 <xTaskIncrementTick+0x214>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	429a      	cmp	r2, r3
 8004784:	f0c0 80a6 	bcc.w	80048d4 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <xTaskIncrementTick+0x208>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	4b65      	ldr	r3, [pc, #404]	; (8004928 <xTaskIncrementTick+0x214>)
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	601a      	str	r2, [r3, #0]
                    break;
 800479a:	e09b      	b.n	80048d4 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800479c:	4b5f      	ldr	r3, [pc, #380]	; (800491c <xTaskIncrementTick+0x208>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d203      	bcs.n	80047bc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80047b4:	4a5c      	ldr	r2, [pc, #368]	; (8004928 <xTaskIncrementTick+0x214>)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80047ba:	e08b      	b.n	80048d4 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	6892      	ldr	r2, [r2, #8]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	3304      	adds	r3, #4
 80047de:	429a      	cmp	r2, r3
 80047e0:	d103      	bne.n	80047ea <xTaskIncrementTick+0xd6>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01e      	beq.n	8004840 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	6a12      	ldr	r2, [r2, #32]
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	69d2      	ldr	r2, [r2, #28]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	3318      	adds	r3, #24
 8004824:	429a      	cmp	r2, r3
 8004826:	d103      	bne.n	8004830 <xTaskIncrementTick+0x11c>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2200      	movs	r2, #0
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	1e5a      	subs	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2201      	movs	r2, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	4b38      	ldr	r3, [pc, #224]	; (800492c <xTaskIncrementTick+0x218>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	4a37      	ldr	r2, [pc, #220]	; (800492c <xTaskIncrementTick+0x218>)
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	4936      	ldr	r1, [pc, #216]	; (8004930 <xTaskIncrementTick+0x21c>)
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	3304      	adds	r3, #4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	609a      	str	r2, [r3, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	3204      	adds	r2, #4
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1d1a      	adds	r2, r3, #4
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a26      	ldr	r2, [pc, #152]	; (8004930 <xTaskIncrementTick+0x21c>)
 8004896:	441a      	add	r2, r3
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	615a      	str	r2, [r3, #20]
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4923      	ldr	r1, [pc, #140]	; (8004930 <xTaskIncrementTick+0x21c>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1c59      	adds	r1, r3, #1
 80048b0:	481f      	ldr	r0, [pc, #124]	; (8004930 <xTaskIncrementTick+0x21c>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4403      	add	r3, r0
 80048bc:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <xTaskIncrementTick+0x220>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	f4ff af5d 	bcc.w	8004788 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048d2:	e759      	b.n	8004788 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048d4:	4b17      	ldr	r3, [pc, #92]	; (8004934 <xTaskIncrementTick+0x220>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4915      	ldr	r1, [pc, #84]	; (8004930 <xTaskIncrementTick+0x21c>)
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d901      	bls.n	80048f0 <xTaskIncrementTick+0x1dc>
                {
                    xSwitchRequired = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <xTaskIncrementTick+0x224>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <xTaskIncrementTick+0x1f4>
                {
                    xSwitchRequired = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	e004      	b.n	8004908 <xTaskIncrementTick+0x1f4>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80048fe:	4b0f      	ldr	r3, [pc, #60]	; (800493c <xTaskIncrementTick+0x228>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3301      	adds	r3, #1
 8004904:	4a0d      	ldr	r2, [pc, #52]	; (800493c <xTaskIncrementTick+0x228>)
 8004906:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800490a:	4618      	mov	r0, r3
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000138 	.word	0x20000138
 8004918:	20000114 	.word	0x20000114
 800491c:	200000c8 	.word	0x200000c8
 8004920:	200000cc 	.word	0x200000cc
 8004924:	20000128 	.word	0x20000128
 8004928:	20000130 	.word	0x20000130
 800492c:	20000118 	.word	0x20000118
 8004930:	2000003c 	.word	0x2000003c
 8004934:	20000038 	.word	0x20000038
 8004938:	20000124 	.word	0x20000124
 800493c:	20000120 	.word	0x20000120

08004940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <vTaskSwitchContext+0xa0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800494e:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <vTaskSwitchContext+0xa4>)
 8004950:	2201      	movs	r2, #1
 8004952:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004954:	e03e      	b.n	80049d4 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8004956:	4b23      	ldr	r3, [pc, #140]	; (80049e4 <vTaskSwitchContext+0xa4>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495c:	4b22      	ldr	r3, [pc, #136]	; (80049e8 <vTaskSwitchContext+0xa8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	fab3 f383 	clz	r3, r3
 8004968:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800496a:	7afb      	ldrb	r3, [r7, #11]
 800496c:	f1c3 031f 	rsb	r3, r3, #31
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	491e      	ldr	r1, [pc, #120]	; (80049ec <vTaskSwitchContext+0xac>)
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	440b      	add	r3, r1
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <vTaskSwitchContext+0x5a>
        __asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	e7fe      	b.n	8004998 <vTaskSwitchContext+0x58>
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <vTaskSwitchContext+0xac>)
 80049a6:	4413      	add	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	3308      	adds	r3, #8
 80049bc:	429a      	cmp	r2, r3
 80049be:	d104      	bne.n	80049ca <vTaskSwitchContext+0x8a>
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <vTaskSwitchContext+0xb0>)
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000138 	.word	0x20000138
 80049e4:	20000124 	.word	0x20000124
 80049e8:	20000118 	.word	0x20000118
 80049ec:	2000003c 	.word	0x2000003c
 80049f0:	20000038 	.word	0x20000038

080049f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <vTaskPlaceOnEventList+0x24>
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e7fe      	b.n	8004a16 <vTaskPlaceOnEventList+0x22>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <vTaskPlaceOnEventList+0x44>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3318      	adds	r3, #24
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fe fd4b 	bl	80034bc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a26:	2101      	movs	r1, #1
 8004a28:	6838      	ldr	r0, [r7, #0]
 8004a2a:	f000 fe09 	bl	8005640 <prvAddCurrentTaskToDelayedList>
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000038 	.word	0x20000038

08004a3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <vTaskPlaceOnEventListRestricted+0x26>
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	e7fe      	b.n	8004a60 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <vTaskPlaceOnEventListRestricted+0x84>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	61da      	str	r2, [r3, #28]
 8004a70:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <vTaskPlaceOnEventListRestricted+0x84>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	6892      	ldr	r2, [r2, #8]
 8004a78:	621a      	str	r2, [r3, #32]
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <vTaskPlaceOnEventListRestricted+0x84>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	3218      	adds	r2, #24
 8004a84:	605a      	str	r2, [r3, #4]
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <vTaskPlaceOnEventListRestricted+0x84>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f103 0218 	add.w	r2, r3, #24
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <vTaskPlaceOnEventListRestricted+0x84>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	629a      	str	r2, [r3, #40]	; 0x28
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <vTaskPlaceOnEventListRestricted+0x74>
        {
            xTicksToWait = portMAX_DELAY;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	68b8      	ldr	r0, [r7, #8]
 8004ab4:	f000 fdc4 	bl	8005640 <prvAddCurrentTaskToDelayedList>
    }
 8004ab8:	bf00      	nop
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000038 	.word	0x20000038

08004ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b08b      	sub	sp, #44	; 0x2c
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <xTaskRemoveFromEventList+0x2a>
 8004ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e7fe      	b.n	8004aec <xTaskRemoveFromEventList+0x28>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	6a12      	ldr	r2, [r2, #32]
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	6a3a      	ldr	r2, [r7, #32]
 8004b04:	69d2      	ldr	r2, [r2, #28]
 8004b06:	605a      	str	r2, [r3, #4]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d103      	bne.n	8004b1c <xTaskRemoveFromEventList+0x58>
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	1e5a      	subs	r2, r3, #1
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b2c:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <xTaskRemoveFromEventList+0x194>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d15e      	bne.n	8004bf2 <xTaskRemoveFromEventList+0x12e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	68d2      	ldr	r2, [r2, #12]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	6892      	ldr	r2, [r2, #8]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	3304      	adds	r3, #4
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d103      	bne.n	8004b62 <xTaskRemoveFromEventList+0x9e>
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2200      	movs	r2, #0
 8004b66:	615a      	str	r2, [r3, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	1e5a      	subs	r2, r3, #1
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	2201      	movs	r2, #1
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	4b38      	ldr	r3, [pc, #224]	; (8004c5c <xTaskRemoveFromEventList+0x198>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	4a36      	ldr	r2, [pc, #216]	; (8004c5c <xTaskRemoveFromEventList+0x198>)
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	4935      	ldr	r1, [pc, #212]	; (8004c60 <xTaskRemoveFromEventList+0x19c>)
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	3304      	adds	r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	6a3a      	ldr	r2, [r7, #32]
 8004bae:	3204      	adds	r2, #4
 8004bb0:	605a      	str	r2, [r3, #4]
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	1d1a      	adds	r2, r3, #4
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <xTaskRemoveFromEventList+0x19c>)
 8004bc8:	441a      	add	r2, r3
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	615a      	str	r2, [r3, #20]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	4923      	ldr	r1, [pc, #140]	; (8004c60 <xTaskRemoveFromEventList+0x19c>)
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	1c59      	adds	r1, r3, #1
 8004be2:	481f      	ldr	r0, [pc, #124]	; (8004c60 <xTaskRemoveFromEventList+0x19c>)
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4403      	add	r3, r0
 8004bee:	6019      	str	r1, [r3, #0]
 8004bf0:	e01b      	b.n	8004c2a <xTaskRemoveFromEventList+0x166>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	; (8004c64 <xTaskRemoveFromEventList+0x1a0>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	61da      	str	r2, [r3, #28]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	621a      	str	r2, [r3, #32]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	6a3a      	ldr	r2, [r7, #32]
 8004c0c:	3218      	adds	r2, #24
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	f103 0218 	add.w	r2, r3, #24
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	609a      	str	r2, [r3, #8]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	4a11      	ldr	r2, [pc, #68]	; (8004c64 <xTaskRemoveFromEventList+0x1a0>)
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <xTaskRemoveFromEventList+0x1a0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	4a0f      	ldr	r2, [pc, #60]	; (8004c64 <xTaskRemoveFromEventList+0x1a0>)
 8004c28:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	4b0e      	ldr	r3, [pc, #56]	; (8004c68 <xTaskRemoveFromEventList+0x1a4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d905      	bls.n	8004c44 <xTaskRemoveFromEventList+0x180>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <xTaskRemoveFromEventList+0x1a8>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e001      	b.n	8004c48 <xTaskRemoveFromEventList+0x184>
    }
    else
    {
        xReturn = pdFALSE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	372c      	adds	r7, #44	; 0x2c
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000138 	.word	0x20000138
 8004c5c:	20000118 	.word	0x20000118
 8004c60:	2000003c 	.word	0x2000003c
 8004c64:	200000d0 	.word	0x200000d0
 8004c68:	20000038 	.word	0x20000038
 8004c6c:	20000124 	.word	0x20000124

08004c70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <vTaskInternalSetTimeOutState+0x24>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <vTaskInternalSetTimeOutState+0x28>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	605a      	str	r2, [r3, #4]
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	20000128 	.word	0x20000128
 8004c98:	20000114 	.word	0x20000114

08004c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <xTaskCheckForTimeOut+0x24>
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	e7fe      	b.n	8004cbe <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <xTaskCheckForTimeOut+0x3e>
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e7fe      	b.n	8004cd8 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004cda:	f001 f8d9 	bl	8005e90 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004cde:	4b1f      	ldr	r3, [pc, #124]	; (8004d5c <xTaskCheckForTimeOut+0xc0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d102      	bne.n	8004cfe <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	e026      	b.n	8004d4c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <xTaskCheckForTimeOut+0xc4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d00a      	beq.n	8004d20 <xTaskCheckForTimeOut+0x84>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d305      	bcc.n	8004d20 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e015      	b.n	8004d4c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d20b      	bcs.n	8004d42 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	1ad2      	subs	r2, r2, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ff9a 	bl	8004c70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	e004      	b.n	8004d4c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004d4c:	f001 f8ce 	bl	8005eec <vPortExitCritical>

    return xReturn;
 8004d50:	69fb      	ldr	r3, [r7, #28]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000114 	.word	0x20000114
 8004d60:	20000128 	.word	0x20000128

08004d64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <vTaskMissedYield+0x14>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000124 	.word	0x20000124

08004d7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004d84:	f000 f852 	bl	8004e2c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <prvIdleTask+0x28>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d9f9      	bls.n	8004d84 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <prvIdleTask+0x2c>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004da0:	e7f0      	b.n	8004d84 <prvIdleTask+0x8>
 8004da2:	bf00      	nop
 8004da4:	2000003c 	.word	0x2000003c
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e00c      	b.n	8004dd2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <prvInitialiseTaskLists+0x60>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fb4b 	bl	8003462 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d9ef      	bls.n	8004db8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004dd8:	480d      	ldr	r0, [pc, #52]	; (8004e10 <prvInitialiseTaskLists+0x64>)
 8004dda:	f7fe fb42 	bl	8003462 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004dde:	480d      	ldr	r0, [pc, #52]	; (8004e14 <prvInitialiseTaskLists+0x68>)
 8004de0:	f7fe fb3f 	bl	8003462 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004de4:	480c      	ldr	r0, [pc, #48]	; (8004e18 <prvInitialiseTaskLists+0x6c>)
 8004de6:	f7fe fb3c 	bl	8003462 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004dea:	480c      	ldr	r0, [pc, #48]	; (8004e1c <prvInitialiseTaskLists+0x70>)
 8004dec:	f7fe fb39 	bl	8003462 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004df0:	480b      	ldr	r0, [pc, #44]	; (8004e20 <prvInitialiseTaskLists+0x74>)
 8004df2:	f7fe fb36 	bl	8003462 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <prvInitialiseTaskLists+0x78>)
 8004df8:	4a05      	ldr	r2, [pc, #20]	; (8004e10 <prvInitialiseTaskLists+0x64>)
 8004dfa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <prvInitialiseTaskLists+0x7c>)
 8004dfe:	4a05      	ldr	r2, [pc, #20]	; (8004e14 <prvInitialiseTaskLists+0x68>)
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000003c 	.word	0x2000003c
 8004e10:	200000a0 	.word	0x200000a0
 8004e14:	200000b4 	.word	0x200000b4
 8004e18:	200000d0 	.word	0x200000d0
 8004e1c:	200000e4 	.word	0x200000e4
 8004e20:	200000fc 	.word	0x200000fc
 8004e24:	200000c8 	.word	0x200000c8
 8004e28:	200000cc 	.word	0x200000cc

08004e2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e32:	e019      	b.n	8004e68 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004e34:	f001 f82c 	bl	8005e90 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <prvCheckTasksWaitingTermination+0x4c>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe fb72 	bl	800352e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004e4a:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <prvCheckTasksWaitingTermination+0x50>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	4a0a      	ldr	r2, [pc, #40]	; (8004e7c <prvCheckTasksWaitingTermination+0x50>)
 8004e52:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e5c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004e5e:	f001 f845 	bl	8005eec <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f80e 	bl	8004e84 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <prvCheckTasksWaitingTermination+0x54>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e1      	bne.n	8004e34 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200000e4 	.word	0x200000e4
 8004e7c:	20000110 	.word	0x20000110
 8004e80:	200000f8 	.word	0x200000f8

08004e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 f9f3 	bl	800627c <vPortFree>
                vPortFree( pxTCB );
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 f9f0 	bl	800627c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <prvResetNextTaskUnblockTime+0x30>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <prvResetNextTaskUnblockTime+0x34>)
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004eba:	e005      	b.n	8004ec8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <prvResetNextTaskUnblockTime+0x30>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <prvResetNextTaskUnblockTime+0x34>)
 8004ec6:	6013      	str	r3, [r2, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	200000c8 	.word	0x200000c8
 8004ed8:	20000130 	.word	0x20000130

08004edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <xTaskGetSchedulerState+0x34>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d102      	bne.n	8004ef0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004eea:	2301      	movs	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	e008      	b.n	8004f02 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ef0:	4b08      	ldr	r3, [pc, #32]	; (8004f14 <xTaskGetSchedulerState+0x38>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	e001      	b.n	8004f02 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004f02:	687b      	ldr	r3, [r7, #4]
    }
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	2000011c 	.word	0x2000011c
 8004f14:	20000138 	.word	0x20000138

08004f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 808a 	beq.w	8005044 <xTaskPriorityDisinherit+0x12c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004f30:	4b47      	ldr	r3, [pc, #284]	; (8005050 <xTaskPriorityDisinherit+0x138>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d009      	beq.n	8004f4e <xTaskPriorityDisinherit+0x36>
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e7fe      	b.n	8004f4c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <xTaskPriorityDisinherit+0x52>
 8004f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e7fe      	b.n	8004f68 <xTaskPriorityDisinherit+0x50>
            ( pxTCB->uxMutexesHeld )--;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6e:	1e5a      	subs	r2, r3, #1
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d061      	beq.n	8005044 <xTaskPriorityDisinherit+0x12c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d15d      	bne.n	8005044 <xTaskPriorityDisinherit+0x12c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe face 	bl	800352e <uxListRemove>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <xTaskPriorityDisinherit+0x96>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	4b2b      	ldr	r3, [pc, #172]	; (8005054 <xTaskPriorityDisinherit+0x13c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <xTaskPriorityDisinherit+0x13c>)
 8004fac:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f1c3 0205 	rsb	r2, r3, #5
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	4b22      	ldr	r3, [pc, #136]	; (8005054 <xTaskPriorityDisinherit+0x13c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	4a20      	ldr	r2, [pc, #128]	; (8005054 <xTaskPriorityDisinherit+0x13c>)
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd8:	491f      	ldr	r1, [pc, #124]	; (8005058 <xTaskPriorityDisinherit+0x140>)
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	3204      	adds	r2, #4
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	1d1a      	adds	r2, r3, #4
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <xTaskPriorityDisinherit+0x140>)
 8005018:	441a      	add	r2, r3
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	615a      	str	r2, [r3, #20]
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	490d      	ldr	r1, [pc, #52]	; (8005058 <xTaskPriorityDisinherit+0x140>)
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1c59      	adds	r1, r3, #1
 8005032:	4809      	ldr	r0, [pc, #36]	; (8005058 <xTaskPriorityDisinherit+0x140>)
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4403      	add	r3, r0
 800503e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005044:	69fb      	ldr	r3, [r7, #28]
    }
 8005046:	4618      	mov	r0, r3
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000038 	.word	0x20000038
 8005054:	20000118 	.word	0x20000118
 8005058:	2000003c 	.word	0x2000003c

0800505c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <xTaskGenericNotifyWait+0x28>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e7fe      	b.n	8005082 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8005084:	f000 ff04 	bl	8005e90 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005088:	4b31      	ldr	r3, [pc, #196]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	3354      	adds	r3, #84	; 0x54
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d022      	beq.n	80050e0 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800509a:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	3214      	adds	r2, #20
 80050a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	43d2      	mvns	r2, r2
 80050aa:	4011      	ands	r1, r2
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	3214      	adds	r2, #20
 80050b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	3354      	adds	r3, #84	; 0x54
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050c8:	2101      	movs	r1, #1
 80050ca:	6a38      	ldr	r0, [r7, #32]
 80050cc:	f000 fab8 	bl	8005640 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80050d0:	4b20      	ldr	r3, [pc, #128]	; (8005154 <xTaskGenericNotifyWait+0xf8>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80050e0:	f000 ff04 	bl	8005eec <vPortExitCritical>

        taskENTER_CRITICAL();
 80050e4:	f000 fed4 	bl	8005e90 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <xTaskGenericNotifyWait+0xa2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	3214      	adds	r2, #20
 80050f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	3354      	adds	r3, #84	; 0x54
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d002      	beq.n	8005116 <xTaskGenericNotifyWait+0xba>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e00e      	b.n	8005134 <xTaskGenericNotifyWait+0xd8>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005116:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	3214      	adds	r2, #20
 800511e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	43d2      	mvns	r2, r2
 8005126:	4011      	ands	r1, r2
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	3214      	adds	r2, #20
 800512c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005130:	2301      	movs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005134:	4b06      	ldr	r3, [pc, #24]	; (8005150 <xTaskGenericNotifyWait+0xf4>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	3354      	adds	r3, #84	; 0x54
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005142:	f000 fed3 	bl	8005eec <vPortExitCritical>

        return xReturn;
 8005146:	697b      	ldr	r3, [r7, #20]
    }
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000038 	.word	0x20000038
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005158:	b580      	push	{r7, lr}
 800515a:	b08e      	sub	sp, #56	; 0x38
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005166:	2301      	movs	r3, #1
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <xTaskGenericNotify+0x2c>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	e7fe      	b.n	8005182 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <xTaskGenericNotify+0x46>
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	e7fe      	b.n	800519c <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80051a2:	f000 fe75 	bl	8005e90 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80051a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d006      	beq.n	80051ba <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	3214      	adds	r2, #20
 80051b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80051ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4413      	add	r3, r2
 80051c0:	3354      	adds	r3, #84	; 0x54
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80051c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4413      	add	r3, r2
 80051ce:	3354      	adds	r3, #84	; 0x54
 80051d0:	2202      	movs	r2, #2
 80051d2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d83b      	bhi.n	8005252 <xTaskGenericNotify+0xfa>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <xTaskGenericNotify+0x88>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	0800526f 	.word	0x0800526f
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005211 	.word	0x08005211
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005237 	.word	0x08005237
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	3214      	adds	r2, #20
 80051fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	3214      	adds	r2, #20
 800520a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800520e:	e031      	b.n	8005274 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	3214      	adds	r2, #20
 8005216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	3214      	adds	r2, #20
 8005222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005226:	e025      	b.n	8005274 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	3214      	adds	r2, #20
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005234:	e01e      	b.n	8005274 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800523a:	2b02      	cmp	r3, #2
 800523c:	d006      	beq.n	800524c <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	3214      	adds	r2, #20
 8005244:	6879      	ldr	r1, [r7, #4]
 8005246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800524a:	e013      	b.n	8005274 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8005250:	e010      	b.n	8005274 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005252:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <xTaskGenericNotify+0x228>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00b      	beq.n	8005272 <xTaskGenericNotify+0x11a>
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e7fe      	b.n	800526c <xTaskGenericNotify+0x114>
                    break;
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <xTaskGenericNotify+0x11c>

                    break;
 8005272:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005278:	2b01      	cmp	r3, #1
 800527a:	d17a      	bne.n	8005372 <xTaskGenericNotify+0x21a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	62bb      	str	r3, [r7, #40]	; 0x28
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	68d2      	ldr	r2, [r2, #12]
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	3304      	adds	r3, #4
 800529e:	429a      	cmp	r2, r3
 80052a0:	d103      	bne.n	80052aa <xTaskGenericNotify+0x152>
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	615a      	str	r2, [r3, #20]
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	1e5a      	subs	r2, r3, #1
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	2201      	movs	r2, #1
 80052c0:	409a      	lsls	r2, r3
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <xTaskGenericNotify+0x22c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	4a2e      	ldr	r2, [pc, #184]	; (8005384 <xTaskGenericNotify+0x22c>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d0:	492d      	ldr	r1, [pc, #180]	; (8005388 <xTaskGenericNotify+0x230>)
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3304      	adds	r3, #4
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f6:	3204      	adds	r2, #4
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	1d1a      	adds	r2, r3, #4
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <xTaskGenericNotify+0x230>)
 8005310:	441a      	add	r2, r3
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	615a      	str	r2, [r3, #20]
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	491b      	ldr	r1, [pc, #108]	; (8005388 <xTaskGenericNotify+0x230>)
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	1c59      	adds	r1, r3, #1
 800532a:	4817      	ldr	r0, [pc, #92]	; (8005388 <xTaskGenericNotify+0x230>)
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4403      	add	r3, r0
 8005336:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <xTaskGenericNotify+0x1fc>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e7fe      	b.n	8005352 <xTaskGenericNotify+0x1fa>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <xTaskGenericNotify+0x234>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	429a      	cmp	r2, r3
 8005360:	d907      	bls.n	8005372 <xTaskGenericNotify+0x21a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <xTaskGenericNotify+0x238>)
 8005364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005372:	f000 fdbb 	bl	8005eec <vPortExitCritical>

        return xReturn;
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8005378:	4618      	mov	r0, r3
 800537a:	3738      	adds	r7, #56	; 0x38
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20000114 	.word	0x20000114
 8005384:	20000118 	.word	0x20000118
 8005388:	2000003c 	.word	0x2000003c
 800538c:	20000038 	.word	0x20000038
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005394:	b580      	push	{r7, lr}
 8005396:	b092      	sub	sp, #72	; 0x48
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80053a2:	2301      	movs	r3, #1
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <xTaskGenericNotifyFromISR+0x2c>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053be:	e7fe      	b.n	80053be <xTaskGenericNotifyFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <xTaskGenericNotifyFromISR+0x46>
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
 80053d8:	e7fe      	b.n	80053d8 <xTaskGenericNotifyFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053da:	f000 fe35 	bl	8006048 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 80053e2:	f3ef 8211 	mrs	r2, BASEPRI
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	623a      	str	r2, [r7, #32]
 80053f8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80053fa:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80053fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005400:	2b00      	cmp	r3, #0
 8005402:	d006      	beq.n	8005412 <xTaskGenericNotifyFromISR+0x7e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	3214      	adds	r2, #20
 800540a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800540e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005410:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4413      	add	r3, r2
 8005418:	3354      	adds	r3, #84	; 0x54
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4413      	add	r3, r2
 8005426:	3354      	adds	r3, #84	; 0x54
 8005428:	2202      	movs	r2, #2
 800542a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b04      	cmp	r3, #4
 8005430:	d83b      	bhi.n	80054aa <xTaskGenericNotifyFromISR+0x116>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <xTaskGenericNotifyFromISR+0xa4>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	080054c7 	.word	0x080054c7
 800543c:	0800544d 	.word	0x0800544d
 8005440:	08005469 	.word	0x08005469
 8005444:	08005481 	.word	0x08005481
 8005448:	0800548f 	.word	0x0800548f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800544c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	3214      	adds	r2, #20
 8005452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	ea42 0103 	orr.w	r1, r2, r3
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	3214      	adds	r2, #20
 8005462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005466:	e031      	b.n	80054cc <xTaskGenericNotifyFromISR+0x138>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	3214      	adds	r2, #20
 800546e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	3214      	adds	r2, #20
 800547a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800547e:	e025      	b.n	80054cc <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	3214      	adds	r2, #20
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800548c:	e01e      	b.n	80054cc <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800548e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005492:	2b02      	cmp	r3, #2
 8005494:	d006      	beq.n	80054a4 <xTaskGenericNotifyFromISR+0x110>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	3214      	adds	r2, #20
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80054a2:	e013      	b.n	80054cc <xTaskGenericNotifyFromISR+0x138>
                        xReturn = pdFAIL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80054a8:	e010      	b.n	80054cc <xTaskGenericNotifyFromISR+0x138>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80054aa:	4b5e      	ldr	r3, [pc, #376]	; (8005624 <xTaskGenericNotifyFromISR+0x290>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <xTaskGenericNotifyFromISR+0x136>
        __asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	e7fe      	b.n	80054c4 <xTaskGenericNotifyFromISR+0x130>
                    break;
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <xTaskGenericNotifyFromISR+0x138>
                    break;
 80054ca:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80054cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	f040 809d 	bne.w	8005610 <xTaskGenericNotifyFromISR+0x27c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <xTaskGenericNotifyFromISR+0x15e>
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e7fe      	b.n	80054f0 <xTaskGenericNotifyFromISR+0x15c>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f2:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <xTaskGenericNotifyFromISR+0x294>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d15e      	bne.n	80055b8 <xTaskGenericNotifyFromISR+0x224>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80054fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005506:	68d2      	ldr	r2, [r2, #12]
 8005508:	609a      	str	r2, [r3, #8]
 800550a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005510:	6892      	ldr	r2, [r2, #8]
 8005512:	605a      	str	r2, [r3, #4]
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	3304      	adds	r3, #4
 800551c:	429a      	cmp	r2, r3
 800551e:	d103      	bne.n	8005528 <xTaskGenericNotifyFromISR+0x194>
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	605a      	str	r2, [r3, #4]
 8005528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552a:	2200      	movs	r2, #0
 800552c:	615a      	str	r2, [r3, #20]
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	1e5a      	subs	r2, r3, #1
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	2201      	movs	r2, #1
 800553e:	409a      	lsls	r2, r3
 8005540:	4b3a      	ldr	r3, [pc, #232]	; (800562c <xTaskGenericNotifyFromISR+0x298>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	4a39      	ldr	r2, [pc, #228]	; (800562c <xTaskGenericNotifyFromISR+0x298>)
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800554c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800554e:	4938      	ldr	r1, [pc, #224]	; (8005630 <xTaskGenericNotifyFromISR+0x29c>)
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	3304      	adds	r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556c:	60da      	str	r2, [r3, #12]
 800556e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005574:	3204      	adds	r2, #4
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <xTaskGenericNotifyFromISR+0x29c>)
 800558e:	441a      	add	r2, r3
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	615a      	str	r2, [r3, #20]
 8005594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	4925      	ldr	r1, [pc, #148]	; (8005630 <xTaskGenericNotifyFromISR+0x29c>)
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	4821      	ldr	r0, [pc, #132]	; (8005630 <xTaskGenericNotifyFromISR+0x29c>)
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4403      	add	r3, r0
 80055b4:	6019      	str	r1, [r3, #0]
 80055b6:	e01b      	b.n	80055f0 <xTaskGenericNotifyFromISR+0x25c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80055b8:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <xTaskGenericNotifyFromISR+0x2a0>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
 80055be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c2:	61da      	str	r2, [r3, #28]
 80055c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ca:	621a      	str	r2, [r3, #32]
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055d2:	3218      	adds	r2, #24
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d8:	f103 0218 	add.w	r2, r3, #24
 80055dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e2:	4a14      	ldr	r2, [pc, #80]	; (8005634 <xTaskGenericNotifyFromISR+0x2a0>)
 80055e4:	629a      	str	r2, [r3, #40]	; 0x28
 80055e6:	4b13      	ldr	r3, [pc, #76]	; (8005634 <xTaskGenericNotifyFromISR+0x2a0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	4a11      	ldr	r2, [pc, #68]	; (8005634 <xTaskGenericNotifyFromISR+0x2a0>)
 80055ee:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <xTaskGenericNotifyFromISR+0x2a4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d908      	bls.n	8005610 <xTaskGenericNotifyFromISR+0x27c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80055fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <xTaskGenericNotifyFromISR+0x276>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <xTaskGenericNotifyFromISR+0x2a8>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f383 8811 	msr	BASEPRI, r3
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800561a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 800561c:	4618      	mov	r0, r3
 800561e:	3748      	adds	r7, #72	; 0x48
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	20000114 	.word	0x20000114
 8005628:	20000138 	.word	0x20000138
 800562c:	20000118 	.word	0x20000118
 8005630:	2000003c 	.word	0x2000003c
 8005634:	200000d0 	.word	0x200000d0
 8005638:	20000038 	.word	0x20000038
 800563c:	20000124 	.word	0x20000124

08005640 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800564a:	4b36      	ldr	r3, [pc, #216]	; (8005724 <prvAddCurrentTaskToDelayedList+0xe4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005650:	4b35      	ldr	r3, [pc, #212]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3304      	adds	r3, #4
 8005656:	4618      	mov	r0, r3
 8005658:	f7fd ff69 	bl	800352e <uxListRemove>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005662:	4b31      	ldr	r3, [pc, #196]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	2201      	movs	r2, #1
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43da      	mvns	r2, r3
 8005670:	4b2e      	ldr	r3, [pc, #184]	; (800572c <prvAddCurrentTaskToDelayedList+0xec>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4013      	ands	r3, r2
 8005676:	4a2d      	ldr	r2, [pc, #180]	; (800572c <prvAddCurrentTaskToDelayedList+0xec>)
 8005678:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d124      	bne.n	80056cc <prvAddCurrentTaskToDelayedList+0x8c>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d021      	beq.n	80056cc <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005688:	4b29      	ldr	r3, [pc, #164]	; (8005730 <prvAddCurrentTaskToDelayedList+0xf0>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	4b26      	ldr	r3, [pc, #152]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	4b24      	ldr	r3, [pc, #144]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	6892      	ldr	r2, [r2, #8]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	3204      	adds	r2, #4
 80056aa:	605a      	str	r2, [r3, #4]
 80056ac:	4b1e      	ldr	r3, [pc, #120]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	4b1c      	ldr	r3, [pc, #112]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <prvAddCurrentTaskToDelayedList+0xf0>)
 80056bc:	615a      	str	r2, [r3, #20]
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <prvAddCurrentTaskToDelayedList+0xf0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	4a1a      	ldr	r2, [pc, #104]	; (8005730 <prvAddCurrentTaskToDelayedList+0xf0>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80056ca:	e026      	b.n	800571a <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056d4:	4b14      	ldr	r3, [pc, #80]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d209      	bcs.n	80056f8 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e4:	4b13      	ldr	r3, [pc, #76]	; (8005734 <prvAddCurrentTaskToDelayedList+0xf4>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b0f      	ldr	r3, [pc, #60]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f7fd fee3 	bl	80034bc <vListInsert>
}
 80056f6:	e010      	b.n	800571a <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <prvAddCurrentTaskToDelayedList+0xf8>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3304      	adds	r3, #4
 8005702:	4619      	mov	r1, r3
 8005704:	4610      	mov	r0, r2
 8005706:	f7fd fed9 	bl	80034bc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800570a:	4b0c      	ldr	r3, [pc, #48]	; (800573c <prvAddCurrentTaskToDelayedList+0xfc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	429a      	cmp	r2, r3
 8005712:	d202      	bcs.n	800571a <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <prvAddCurrentTaskToDelayedList+0xfc>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6013      	str	r3, [r2, #0]
}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000114 	.word	0x20000114
 8005728:	20000038 	.word	0x20000038
 800572c:	20000118 	.word	0x20000118
 8005730:	200000fc 	.word	0x200000fc
 8005734:	200000cc 	.word	0x200000cc
 8005738:	200000c8 	.word	0x200000c8
 800573c:	20000130 	.word	0x20000130

08005740 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800574a:	f000 fa43 	bl	8005bd4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <xTimerCreateTimerTask+0x54>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <xTimerCreateTimerTask+0x58>)
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	2302      	movs	r3, #2
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	2300      	movs	r3, #0
 8005760:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005764:	490d      	ldr	r1, [pc, #52]	; (800579c <xTimerCreateTimerTask+0x5c>)
 8005766:	480e      	ldr	r0, [pc, #56]	; (80057a0 <xTimerCreateTimerTask+0x60>)
 8005768:	f7fe fcf2 	bl	8004150 <xTaskCreate>
 800576c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	603b      	str	r3, [r7, #0]
 8005786:	e7fe      	b.n	8005786 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005788:	687b      	ldr	r3, [r7, #4]
    }
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	2000016c 	.word	0x2000016c
 8005798:	20000170 	.word	0x20000170
 800579c:	0800664c 	.word	0x0800664c
 80057a0:	08005845 	.word	0x08005845

080057a4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80057b0:	e008      	b.n	80057c4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	18d1      	adds	r1, r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f8db 	bl	800598c <prvInsertTimerInActiveList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ea      	bne.n	80057b2 <prvReloadTimer+0xe>
        }
    }
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <prvProcessExpiredTimer+0x5c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fd fe96 	bl	800352e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff ffc5 	bl	80057a4 <prvReloadTimer>
 800581a:	e008      	b.n	800582e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	4798      	blx	r3
    }
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000164 	.word	0x20000164

08005844 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f857 	bl	8005904 <prvGetNextExpireTime>
 8005856:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4619      	mov	r1, r3
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f803 	bl	8005868 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005862:	f000 f8d5 	bl	8005a10 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005866:	e7f1      	b.n	800584c <prvTimerTask+0x8>

08005868 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005872:	f7fe fe37 	bl	80044e4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f866 	bl	800594c <prvSampleTimeNow>
 8005880:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d130      	bne.n	80058ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <prvProcessTimerOrBlockTask+0x3c>
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	429a      	cmp	r2, r3
 8005894:	d806      	bhi.n	80058a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005896:	f7fe fe33 	bl	8004500 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ffa1 	bl	80057e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80058a2:	e024      	b.n	80058ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d008      	beq.n	80058bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <prvProcessTimerOrBlockTask+0x90>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <prvProcessTimerOrBlockTask+0x50>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <prvProcessTimerOrBlockTask+0x52>
 80058b8:	2300      	movs	r3, #0
 80058ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <prvProcessTimerOrBlockTask+0x94>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	4619      	mov	r1, r3
 80058ca:	f7fe fc0d 	bl	80040e8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80058ce:	f7fe fe17 	bl	8004500 <xTaskResumeAll>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <prvProcessTimerOrBlockTask+0x98>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
    }
 80058e8:	e001      	b.n	80058ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80058ea:	f7fe fe09 	bl	8004500 <xTaskResumeAll>
    }
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	20000168 	.word	0x20000168
 80058fc:	2000016c 	.word	0x2000016c
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800590c:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <prvGetNextExpireTime+0x44>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <prvGetNextExpireTime+0x16>
 8005916:	2201      	movs	r2, #1
 8005918:	e000      	b.n	800591c <prvGetNextExpireTime+0x18>
 800591a:	2200      	movs	r2, #0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <prvGetNextExpireTime+0x44>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	e001      	b.n	8005938 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005938:	68fb      	ldr	r3, [r7, #12]
    }
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000164 	.word	0x20000164

0800594c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005954:	f7fe fece 	bl	80046f4 <xTaskGetTickCount>
 8005958:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <prvSampleTimeNow+0x3c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d205      	bcs.n	8005970 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005964:	f000 f910 	bl	8005b88 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e002      	b.n	8005976 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005976:	4a04      	ldr	r2, [pc, #16]	; (8005988 <prvSampleTimeNow+0x3c>)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800597c:	68fb      	ldr	r3, [r7, #12]
    }
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000174 	.word	0x20000174

0800598c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d812      	bhi.n	80059d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	1ad2      	subs	r2, r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e01b      	b.n	80059fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <prvInsertTimerInActiveList+0x7c>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7fd fd73 	bl	80034bc <vListInsert>
 80059d6:	e012      	b.n	80059fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d206      	bcs.n	80059ee <prvInsertTimerInActiveList+0x62>
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d302      	bcc.n	80059ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80059e8:	2301      	movs	r3, #1
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e007      	b.n	80059fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059ee:	4b07      	ldr	r3, [pc, #28]	; (8005a0c <prvInsertTimerInActiveList+0x80>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fd fd5f 	bl	80034bc <vListInsert>
            }
        }

        return xProcessTimerNow;
 80059fe:	697b      	ldr	r3, [r7, #20]
    }
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	20000168 	.word	0x20000168
 8005a0c:	20000164 	.word	0x20000164

08005a10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a16:	e0a5      	b.n	8005b64 <prvProcessReceivedCommands+0x154>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f2c0 80a1 	blt.w	8005b62 <prvProcessReceivedCommands+0x152>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fd fd7c 	bl	800352e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff ff87 	bl	800594c <prvSampleTimeNow>
 8005a3e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	f200 808d 	bhi.w	8005b64 <prvProcessReceivedCommands+0x154>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <prvProcessReceivedCommands+0x40>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a75 	.word	0x08005a75
 8005a58:	08005add 	.word	0x08005add
 8005a5c:	08005af1 	.word	0x08005af1
 8005a60:	08005b39 	.word	0x08005b39
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a75 	.word	0x08005a75
 8005a6c:	08005add 	.word	0x08005add
 8005a70:	08005af1 	.word	0x08005af1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	18d1      	adds	r1, r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	69f8      	ldr	r0, [r7, #28]
 8005a94:	f7ff ff7a 	bl	800598c <prvInsertTimerInActiveList>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d062      	beq.n	8005b64 <prvProcessReceivedCommands+0x154>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	69f8      	ldr	r0, [r7, #28]
 8005aba:	f7ff fe73 	bl	80057a4 <prvReloadTimer>
 8005abe:	e008      	b.n	8005ad2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	69f8      	ldr	r0, [r7, #28]
 8005ad8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005ada:	e043      	b.n	8005b64 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005aee:	e039      	b.n	8005b64 <prvProcessReceivedCommands+0x154>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d109      	bne.n	8005b24 <prvProcessReceivedCommands+0x114>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e7fe      	b.n	8005b22 <prvProcessReceivedCommands+0x112>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	18d1      	adds	r1, r2, r3
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	69f8      	ldr	r0, [r7, #28]
 8005b32:	f7ff ff2b 	bl	800598c <prvInsertTimerInActiveList>
                        break;
 8005b36:	e015      	b.n	8005b64 <prvProcessReceivedCommands+0x154>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <prvProcessReceivedCommands+0x13e>
                                {
                                    vPortFree( pxTimer );
 8005b46:	69f8      	ldr	r0, [r7, #28]
 8005b48:	f000 fb98 	bl	800627c <vPortFree>
 8005b4c:	e00a      	b.n	8005b64 <prvProcessReceivedCommands+0x154>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005b60:	e000      	b.n	8005b64 <prvProcessReceivedCommands+0x154>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005b62:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <prvProcessReceivedCommands+0x174>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f107 0108 	add.w	r1, r7, #8
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd ffb2 	bl	8003ad8 <xQueueReceive>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f47f af4e 	bne.w	8005a18 <prvProcessReceivedCommands+0x8>
        }
    }
 8005b7c:	bf00      	nop
 8005b7e:	3720      	adds	r7, #32
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	2000016c 	.word	0x2000016c

08005b88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b8e:	e009      	b.n	8005ba4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <prvSwitchTimerLists+0x44>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f7ff fe20 	bl	80057e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <prvSwitchTimerLists+0x44>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005bae:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <prvSwitchTimerLists+0x44>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <prvSwitchTimerLists+0x48>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <prvSwitchTimerLists+0x44>)
 8005bba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005bbc:	4a04      	ldr	r2, [pc, #16]	; (8005bd0 <prvSwitchTimerLists+0x48>)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6013      	str	r3, [r2, #0]
    }
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000164 	.word	0x20000164
 8005bd0:	20000168 	.word	0x20000168

08005bd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005bd8:	f000 f95a 	bl	8005e90 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <prvCheckForValidListAndQueue+0x54>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005be4:	4811      	ldr	r0, [pc, #68]	; (8005c2c <prvCheckForValidListAndQueue+0x58>)
 8005be6:	f7fd fc3c 	bl	8003462 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005bea:	4811      	ldr	r0, [pc, #68]	; (8005c30 <prvCheckForValidListAndQueue+0x5c>)
 8005bec:	f7fd fc39 	bl	8003462 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005bf0:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <prvCheckForValidListAndQueue+0x60>)
 8005bf2:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <prvCheckForValidListAndQueue+0x58>)
 8005bf4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <prvCheckForValidListAndQueue+0x64>)
 8005bf8:	4a0d      	ldr	r2, [pc, #52]	; (8005c30 <prvCheckForValidListAndQueue+0x5c>)
 8005bfa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	210c      	movs	r1, #12
 8005c00:	200a      	movs	r0, #10
 8005c02:	f7fd fd53 	bl	80036ac <xQueueGenericCreate>
 8005c06:	4602      	mov	r2, r0
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <prvCheckForValidListAndQueue+0x54>)
 8005c0a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <prvCheckForValidListAndQueue+0x54>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <prvCheckForValidListAndQueue+0x54>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4908      	ldr	r1, [pc, #32]	; (8005c3c <prvCheckForValidListAndQueue+0x68>)
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fa16 	bl	800404c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005c20:	f000 f964 	bl	8005eec <vPortExitCritical>
    }
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	2000016c 	.word	0x2000016c
 8005c2c:	2000013c 	.word	0x2000013c
 8005c30:	20000150 	.word	0x20000150
 8005c34:	20000164 	.word	0x20000164
 8005c38:	20000168 	.word	0x20000168
 8005c3c:	08006654 	.word	0x08006654

08005c40 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3b04      	subs	r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c58:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3b04      	subs	r3, #4
 8005c5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b04      	subs	r3, #4
 8005c6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005c70:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <pxPortInitialiseStack+0x64>)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b14      	subs	r3, #20
 8005c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3b04      	subs	r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f06f 0202 	mvn.w	r2, #2
 8005c8e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b20      	subs	r3, #32
 8005c94:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	08005ca9 	.word	0x08005ca9

08005ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005cb2:	4b11      	ldr	r3, [pc, #68]	; (8005cf8 <prvTaskExitError+0x50>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d009      	beq.n	8005cd0 <prvTaskExitError+0x28>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	e7fe      	b.n	8005cce <prvTaskExitError+0x26>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005ce2:	bf00      	nop
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0fc      	beq.n	8005ce4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20000014 	.word	0x20000014
 8005cfc:	00000000 	.word	0x00000000

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	4770      	bx	lr
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst2>:
 8005d20:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005d28:	4808      	ldr	r0, [pc, #32]	; (8005d4c <prvPortStartFirstTask+0x24>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8814 	msr	CONTROL, r0
 8005d3a:	b662      	cpsie	i
 8005d3c:	b661      	cpsie	f
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	df00      	svc	0
 8005d48:	bf00      	nop
 8005d4a:	0000      	.short	0x0000
 8005d4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop

08005d54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d5a:	4b44      	ldr	r3, [pc, #272]	; (8005e6c <xPortStartScheduler+0x118>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a44      	ldr	r2, [pc, #272]	; (8005e70 <xPortStartScheduler+0x11c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d109      	bne.n	8005d78 <xPortStartScheduler+0x24>
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	e7fe      	b.n	8005d76 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d78:	4b3c      	ldr	r3, [pc, #240]	; (8005e6c <xPortStartScheduler+0x118>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a3d      	ldr	r2, [pc, #244]	; (8005e74 <xPortStartScheduler+0x120>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d109      	bne.n	8005d96 <xPortStartScheduler+0x42>
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	e7fe      	b.n	8005d94 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d96:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <xPortStartScheduler+0x124>)
 8005d98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <xPortStartScheduler+0x128>)
 8005dbc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dbe:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc4:	e009      	b.n	8005dda <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005dc6:	4b2e      	ldr	r3, [pc, #184]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4a2c      	ldr	r2, [pc, #176]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005dce:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d0ef      	beq.n	8005dc6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005de6:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1c3 0307 	rsb	r3, r3, #7
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d009      	beq.n	8005e06 <xPortStartScheduler+0xb2>
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	e7fe      	b.n	8005e04 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e06:	4b1e      	ldr	r3, [pc, #120]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	4a1c      	ldr	r2, [pc, #112]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005e0e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e10:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e18:	4a19      	ldr	r2, [pc, #100]	; (8005e80 <xPortStartScheduler+0x12c>)
 8005e1a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005e24:	4b17      	ldr	r3, [pc, #92]	; (8005e84 <xPortStartScheduler+0x130>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a16      	ldr	r2, [pc, #88]	; (8005e84 <xPortStartScheduler+0x130>)
 8005e2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e2e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005e30:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <xPortStartScheduler+0x130>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <xPortStartScheduler+0x130>)
 8005e36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e3a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005e3c:	f000 f8d4 	bl	8005fe8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005e40:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <xPortStartScheduler+0x134>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005e46:	f000 f8f3 	bl	8006030 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e4a:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <xPortStartScheduler+0x138>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a0f      	ldr	r2, [pc, #60]	; (8005e8c <xPortStartScheduler+0x138>)
 8005e50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e54:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005e56:	f7ff ff67 	bl	8005d28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005e5a:	f7fe fd71 	bl	8004940 <vTaskSwitchContext>
    prvTaskExitError();
 8005e5e:	f7ff ff23 	bl	8005ca8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	e000ed00 	.word	0xe000ed00
 8005e70:	410fc271 	.word	0x410fc271
 8005e74:	410fc270 	.word	0x410fc270
 8005e78:	e000e400 	.word	0xe000e400
 8005e7c:	20000178 	.word	0x20000178
 8005e80:	2000017c 	.word	0x2000017c
 8005e84:	e000ed20 	.word	0xe000ed20
 8005e88:	20000014 	.word	0x20000014
 8005e8c:	e000ef34 	.word	0xe000ef34

08005e90 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005ea8:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <vPortEnterCritical+0x54>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	4a0d      	ldr	r2, [pc, #52]	; (8005ee4 <vPortEnterCritical+0x54>)
 8005eb0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <vPortEnterCritical+0x54>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10e      	bne.n	8005ed8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <vPortEnterCritical+0x58>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <vPortEnterCritical+0x48>
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	e7fe      	b.n	8005ed6 <vPortEnterCritical+0x46>
    }
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000014 	.word	0x20000014
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005ef2:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <vPortExitCritical+0x4c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <vPortExitCritical+0x22>
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	e7fe      	b.n	8005f0c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <vPortExitCritical+0x4c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <vPortExitCritical+0x4c>)
 8005f16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005f18:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <vPortExitCritical+0x4c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d104      	bne.n	8005f2a <vPortExitCritical+0x3e>
 8005f20:	2300      	movs	r3, #0
 8005f22:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000014 	.word	0x20000014
 8005f3c:	00000000 	.word	0x00000000

08005f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005f40:	f3ef 8009 	mrs	r0, PSP
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <pxCurrentTCBConst>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	f01e 0f10 	tst.w	lr, #16
 8005f50:	bf08      	it	eq
 8005f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f64:	f380 8811 	msr	BASEPRI, r0
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f7fe fce6 	bl	8004940 <vTaskSwitchContext>
 8005f74:	f04f 0000 	mov.w	r0, #0
 8005f78:	f380 8811 	msr	BASEPRI, r0
 8005f7c:	bc09      	pop	{r0, r3}
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	6808      	ldr	r0, [r1, #0]
 8005f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f86:	f01e 0f10 	tst.w	lr, #16
 8005f8a:	bf08      	it	eq
 8005f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f90:	f380 8809 	msr	PSP, r0
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst>:
 8005fa0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
        __asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	607b      	str	r3, [r7, #4]
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005fc0:	f7fe fba8 	bl	8004714 <xTaskIncrementTick>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <SysTick_Handler+0x2a>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <SysTick_Handler+0x3c>)
 8005fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	e000ed04 	.word	0xe000ed04

08005fe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <vPortSetupTimerInterrupt+0x34>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <vPortSetupTimerInterrupt+0x38>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <vPortSetupTimerInterrupt+0x3c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <vPortSetupTimerInterrupt+0x40>)
 8005ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	4a09      	ldr	r2, [pc, #36]	; (800602c <vPortSetupTimerInterrupt+0x44>)
 8006006:	3b01      	subs	r3, #1
 8006008:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800600a:	4b04      	ldr	r3, [pc, #16]	; (800601c <vPortSetupTimerInterrupt+0x34>)
 800600c:	2207      	movs	r2, #7
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e010 	.word	0xe000e010
 8006020:	e000e018 	.word	0xe000e018
 8006024:	20000008 	.word	0x20000008
 8006028:	10624dd3 	.word	0x10624dd3
 800602c:	e000e014 	.word	0xe000e014

08006030 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006030:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006040 <vPortEnableVFP+0x10>
 8006034:	6801      	ldr	r1, [r0, #0]
 8006036:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800603a:	6001      	str	r1, [r0, #0]
 800603c:	4770      	bx	lr
 800603e:	0000      	.short	0x0000
 8006040:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop

08006048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800604e:	f3ef 8305 	mrs	r3, IPSR
 8006052:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b0f      	cmp	r3, #15
 8006058:	d913      	bls.n	8006082 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800605a:	4a16      	ldr	r2, [pc, #88]	; (80060b4 <vPortValidateInterruptPriority+0x6c>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006064:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <vPortValidateInterruptPriority+0x70>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	7afa      	ldrb	r2, [r7, #11]
 800606a:	429a      	cmp	r2, r3
 800606c:	d209      	bcs.n	8006082 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
 8006080:	e7fe      	b.n	8006080 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006082:	4b0e      	ldr	r3, [pc, #56]	; (80060bc <vPortValidateInterruptPriority+0x74>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <vPortValidateInterruptPriority+0x78>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d909      	bls.n	80060a6 <vPortValidateInterruptPriority+0x5e>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	e7fe      	b.n	80060a4 <vPortValidateInterruptPriority+0x5c>
    }
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	e000e3f0 	.word	0xe000e3f0
 80060b8:	20000178 	.word	0x20000178
 80060bc:	e000ed0c 	.word	0xe000ed0c
 80060c0:	2000017c 	.word	0x2000017c

080060c4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80060d0:	f7fe fa08 	bl	80044e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80060d4:	4b63      	ldr	r3, [pc, #396]	; (8006264 <pvPortMalloc+0x1a0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80060dc:	f000 f92e 	bl	800633c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060e0:	4b61      	ldr	r3, [pc, #388]	; (8006268 <pvPortMalloc+0x1a4>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 80a5 	bne.w	8006238 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d02c      	beq.n	800614e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80060f4:	2208      	movs	r2, #8
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d226      	bcs.n	800614e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8006100:	2208      	movs	r2, #8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b00      	cmp	r3, #0
 8006110:	d020      	beq.n	8006154 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f023 0307 	bic.w	r3, r3, #7
 8006118:	3308      	adds	r3, #8
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	429a      	cmp	r2, r3
 800611e:	d213      	bcs.n	8006148 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f023 0307 	bic.w	r3, r3, #7
 8006126:	3308      	adds	r3, #8
 8006128:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00f      	beq.n	8006154 <pvPortMalloc+0x90>
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e7fe      	b.n	8006146 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800614c:	e002      	b.n	8006154 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	e000      	b.n	8006156 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006154:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d06d      	beq.n	8006238 <pvPortMalloc+0x174>
 800615c:	4b43      	ldr	r3, [pc, #268]	; (800626c <pvPortMalloc+0x1a8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d868      	bhi.n	8006238 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006166:	4b42      	ldr	r3, [pc, #264]	; (8006270 <pvPortMalloc+0x1ac>)
 8006168:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800616a:	4b41      	ldr	r3, [pc, #260]	; (8006270 <pvPortMalloc+0x1ac>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006170:	e004      	b.n	800617c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d903      	bls.n	800618e <pvPortMalloc+0xca>
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f1      	bne.n	8006172 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800618e:	4b35      	ldr	r3, [pc, #212]	; (8006264 <pvPortMalloc+0x1a0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006194:	429a      	cmp	r2, r3
 8006196:	d04f      	beq.n	8006238 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2208      	movs	r2, #8
 800619e:	4413      	add	r3, r2
 80061a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	1ad2      	subs	r2, r2, r3
 80061b2:	2308      	movs	r3, #8
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d91e      	bls.n	80061f8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4413      	add	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <pvPortMalloc+0x11c>
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	e7fe      	b.n	80061de <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061f2:	69b8      	ldr	r0, [r7, #24]
 80061f4:	f000 f904 	bl	8006400 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061f8:	4b1c      	ldr	r3, [pc, #112]	; (800626c <pvPortMalloc+0x1a8>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	4a1a      	ldr	r2, [pc, #104]	; (800626c <pvPortMalloc+0x1a8>)
 8006204:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <pvPortMalloc+0x1a8>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <pvPortMalloc+0x1b0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d203      	bcs.n	800621a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006212:	4b16      	ldr	r3, [pc, #88]	; (800626c <pvPortMalloc+0x1a8>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a17      	ldr	r2, [pc, #92]	; (8006274 <pvPortMalloc+0x1b0>)
 8006218:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	4b12      	ldr	r3, [pc, #72]	; (8006268 <pvPortMalloc+0x1a4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	431a      	orrs	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <pvPortMalloc+0x1b4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3301      	adds	r3, #1
 8006234:	4a10      	ldr	r2, [pc, #64]	; (8006278 <pvPortMalloc+0x1b4>)
 8006236:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006238:	f7fe f962 	bl	8004500 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	2b00      	cmp	r3, #0
 8006244:	d009      	beq.n	800625a <pvPortMalloc+0x196>
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e7fe      	b.n	8006258 <pvPortMalloc+0x194>
    return pvReturn;
 800625a:	69fb      	ldr	r3, [r7, #28]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3728      	adds	r7, #40	; 0x28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20019188 	.word	0x20019188
 8006268:	2001919c 	.word	0x2001919c
 800626c:	2001918c 	.word	0x2001918c
 8006270:	20019180 	.word	0x20019180
 8006274:	20019190 	.word	0x20019190
 8006278:	20019194 	.word	0x20019194

0800627c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d04b      	beq.n	8006326 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800628e:	2308      	movs	r3, #8
 8006290:	425b      	negs	r3, r3
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	4b23      	ldr	r3, [pc, #140]	; (8006330 <vPortFree+0xb4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d109      	bne.n	80062be <vPortFree+0x42>
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	e7fe      	b.n	80062bc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <vPortFree+0x5e>
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	e7fe      	b.n	80062d8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	4b14      	ldr	r3, [pc, #80]	; (8006330 <vPortFree+0xb4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01e      	beq.n	8006326 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <vPortFree+0xb4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	43db      	mvns	r3, r3
 80062fa:	401a      	ands	r2, r3
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006300:	f7fe f8f0 	bl	80044e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <vPortFree+0xb8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4413      	add	r3, r2
 800630e:	4a09      	ldr	r2, [pc, #36]	; (8006334 <vPortFree+0xb8>)
 8006310:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006312:	6938      	ldr	r0, [r7, #16]
 8006314:	f000 f874 	bl	8006400 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006318:	4b07      	ldr	r3, [pc, #28]	; (8006338 <vPortFree+0xbc>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	4a06      	ldr	r2, [pc, #24]	; (8006338 <vPortFree+0xbc>)
 8006320:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006322:	f7fe f8ed 	bl	8004500 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006326:	bf00      	nop
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	2001919c 	.word	0x2001919c
 8006334:	2001918c 	.word	0x2001918c
 8006338:	20019198 	.word	0x20019198

0800633c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006342:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8006346:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006348:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <prvHeapInit+0xac>)
 800634a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00c      	beq.n	8006370 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3307      	adds	r3, #7
 800635a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0307 	bic.w	r3, r3, #7
 8006362:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <prvHeapInit+0xac>)
 800636c:	4413      	add	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006374:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <prvHeapInit+0xb0>)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800637a:	4b1c      	ldr	r3, [pc, #112]	; (80063ec <prvHeapInit+0xb0>)
 800637c:	2200      	movs	r2, #0
 800637e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	4413      	add	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006388:	2208      	movs	r2, #8
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0307 	bic.w	r3, r3, #7
 8006396:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <prvHeapInit+0xb4>)
 800639c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800639e:	4b14      	ldr	r3, [pc, #80]	; (80063f0 <prvHeapInit+0xb4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <prvHeapInit+0xb4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <prvHeapInit+0xb4>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <prvHeapInit+0xb8>)
 80063ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <prvHeapInit+0xbc>)
 80063d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <prvHeapInit+0xc0>)
 80063d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063da:	601a      	str	r2, [r3, #0]
}
 80063dc:	bf00      	nop
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	20000180 	.word	0x20000180
 80063ec:	20019180 	.word	0x20019180
 80063f0:	20019188 	.word	0x20019188
 80063f4:	20019190 	.word	0x20019190
 80063f8:	2001918c 	.word	0x2001918c
 80063fc:	2001919c 	.word	0x2001919c

08006400 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006408:	4b28      	ldr	r3, [pc, #160]	; (80064ac <prvInsertBlockIntoFreeList+0xac>)
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	e002      	b.n	8006414 <prvInsertBlockIntoFreeList+0x14>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d8f7      	bhi.n	800640e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4413      	add	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	429a      	cmp	r2, r3
 800642e:	d108      	bne.n	8006442 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	441a      	add	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	441a      	add	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d118      	bne.n	8006488 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <prvInsertBlockIntoFreeList+0xb0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d00d      	beq.n	800647e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	441a      	add	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e008      	b.n	8006490 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e003      	b.n	8006490 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d002      	beq.n	800649e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20019180 	.word	0x20019180
 80064b0:	20019188 	.word	0x20019188

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	4e0d      	ldr	r6, [pc, #52]	; (80064ec <__libc_init_array+0x38>)
 80064b8:	4c0d      	ldr	r4, [pc, #52]	; (80064f0 <__libc_init_array+0x3c>)
 80064ba:	1ba4      	subs	r4, r4, r6
 80064bc:	10a4      	asrs	r4, r4, #2
 80064be:	2500      	movs	r5, #0
 80064c0:	42a5      	cmp	r5, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	4e0b      	ldr	r6, [pc, #44]	; (80064f4 <__libc_init_array+0x40>)
 80064c6:	4c0c      	ldr	r4, [pc, #48]	; (80064f8 <__libc_init_array+0x44>)
 80064c8:	f000 f82c 	bl	8006524 <_init>
 80064cc:	1ba4      	subs	r4, r4, r6
 80064ce:	10a4      	asrs	r4, r4, #2
 80064d0:	2500      	movs	r5, #0
 80064d2:	42a5      	cmp	r5, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064dc:	4798      	blx	r3
 80064de:	3501      	adds	r5, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064e6:	4798      	blx	r3
 80064e8:	3501      	adds	r5, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	0800667c 	.word	0x0800667c
 80064f0:	0800667c 	.word	0x0800667c
 80064f4:	0800667c 	.word	0x0800667c
 80064f8:	08006680 	.word	0x08006680

080064fc <memcpy>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	1e43      	subs	r3, r0, #1
 8006500:	440a      	add	r2, r1
 8006502:	4291      	cmp	r1, r2
 8006504:	d100      	bne.n	8006508 <memcpy+0xc>
 8006506:	bd10      	pop	{r4, pc}
 8006508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006510:	e7f7      	b.n	8006502 <memcpy+0x6>

08006512 <memset>:
 8006512:	4402      	add	r2, r0
 8006514:	4603      	mov	r3, r0
 8006516:	4293      	cmp	r3, r2
 8006518:	d100      	bne.n	800651c <memset+0xa>
 800651a:	4770      	bx	lr
 800651c:	f803 1b01 	strb.w	r1, [r3], #1
 8006520:	e7f9      	b.n	8006516 <memset+0x4>
	...

08006524 <_init>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr

08006530 <_fini>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr
