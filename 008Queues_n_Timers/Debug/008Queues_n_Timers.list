
008Queues_n_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e0  080033e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033e0  080033e0  000133e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033e8  080033e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  080033fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080033fc  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002219  00000000  00000000  0002fa26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00031c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  00032b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021374  00000000  00000000  000339b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba16  00000000  00000000  00054d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5a5c  00000000  00000000  00060742  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013619e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb8  00000000  00000000  0013621c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033b0 	.word	0x080033b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080033b0 	.word	0x080033b0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_Init+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <HAL_Init+0x40>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x40>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_Init+0x40>)
 80004e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <HAL_Init+0x40>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_Init+0x40>)
 80004f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f8d8 	bl	80006ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004fe:	2000      	movs	r0, #0
 8000500:	f002 fc68 	bl	8002dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000504:	f002 fbd8 	bl	8002cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	461a      	mov	r2, r3
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_IncTick+0x24>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4413      	add	r3, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_IncTick+0x24>)
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000004 	.word	0x20000004
 8000538:	200000b4 	.word	0x200000b4

0800053c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <HAL_GetTick+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	200000b4 	.word	0x200000b4

08000554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000570:	4013      	ands	r3, r2
 8000572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000586:	4a04      	ldr	r2, [pc, #16]	; (8000598 <__NVIC_SetPriorityGrouping+0x44>)
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	60d3      	str	r3, [r2, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_GetPriorityGrouping+0x18>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	f003 0307 	and.w	r3, r3, #7
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db0b      	blt.n	80005e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 021f 	and.w	r2, r3, #31
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <__NVIC_EnableIRQ+0x38>)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	095b      	lsrs	r3, r3, #5
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	db0a      	blt.n	800061e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	490c      	ldr	r1, [pc, #48]	; (8000640 <__NVIC_SetPriority+0x4c>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	440b      	add	r3, r1
 8000618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061c:	e00a      	b.n	8000634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4908      	ldr	r1, [pc, #32]	; (8000644 <__NVIC_SetPriority+0x50>)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	3b04      	subs	r3, #4
 800062c:	0112      	lsls	r2, r2, #4
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	440b      	add	r3, r1
 8000632:	761a      	strb	r2, [r3, #24]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 32ff 	mov.w	r2, #4294967295
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	43da      	mvns	r2, r3
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	401a      	ands	r2, r3
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000690:	f04f 31ff 	mov.w	r1, #4294967295
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	43d9      	mvns	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	4313      	orrs	r3, r2
         );
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff ff4c 	bl	8000554 <__NVIC_SetPriorityGrouping>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006d6:	f7ff ff61 	bl	800059c <__NVIC_GetPriorityGrouping>
 80006da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	68b9      	ldr	r1, [r7, #8]
 80006e0:	6978      	ldr	r0, [r7, #20]
 80006e2:	f7ff ffb1 	bl	8000648 <NVIC_EncodePriority>
 80006e6:	4602      	mov	r2, r0
 80006e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff80 	bl	80005f4 <__NVIC_SetPriority>
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff54 	bl	80005b8 <__NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b02      	cmp	r3, #2
 800072a:	d004      	beq.n	8000736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00c      	b.n	8000750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2205      	movs	r2, #5
 800073a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f022 0201 	bic.w	r2, r2, #1
 800074c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr

0800075c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	e16b      	b.n	8000a50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000778:	2201      	movs	r2, #1
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	429a      	cmp	r2, r3
 8000792:	f040 815a 	bne.w	8000a4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d00b      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d007      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007aa:	2b11      	cmp	r3, #17
 80007ac:	d003      	beq.n	80007b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	2b12      	cmp	r3, #18
 80007b4:	d130      	bne.n	8000818 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2203      	movs	r2, #3
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	4013      	ands	r3, r2
 80007cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	68da      	ldr	r2, [r3, #12]
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	4313      	orrs	r3, r2
 80007de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69ba      	ldr	r2, [r7, #24]
 80007e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ec:	2201      	movs	r2, #1
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	43db      	mvns	r3, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4013      	ands	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	f003 0201 	and.w	r2, r3, #1
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	69ba      	ldr	r2, [r7, #24]
 800080e:	4313      	orrs	r3, r2
 8000810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2203      	movs	r2, #3
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4013      	ands	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0xfc>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d123      	bne.n	80008a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	08da      	lsrs	r2, r3, #3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3208      	adds	r2, #8
 8000860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	220f      	movs	r2, #15
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4313      	orrs	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	08da      	lsrs	r2, r3, #3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	3208      	adds	r2, #8
 800089a:	69b9      	ldr	r1, [r7, #24]
 800089c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2203      	movs	r2, #3
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	4013      	ands	r3, r2
 80008b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0203 	and.w	r2, r3, #3
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	f000 80b4 	beq.w	8000a4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b5f      	ldr	r3, [pc, #380]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a5e      	ldr	r2, [pc, #376]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b5c      	ldr	r3, [pc, #368]	; (8000a64 <HAL_GPIO_Init+0x308>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008fe:	4a5a      	ldr	r2, [pc, #360]	; (8000a68 <HAL_GPIO_Init+0x30c>)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3302      	adds	r3, #2
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	220f      	movs	r2, #15
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a51      	ldr	r2, [pc, #324]	; (8000a6c <HAL_GPIO_Init+0x310>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d02b      	beq.n	8000982 <HAL_GPIO_Init+0x226>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <HAL_GPIO_Init+0x314>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d025      	beq.n	800097e <HAL_GPIO_Init+0x222>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <HAL_GPIO_Init+0x318>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d01f      	beq.n	800097a <HAL_GPIO_Init+0x21e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a4e      	ldr	r2, [pc, #312]	; (8000a78 <HAL_GPIO_Init+0x31c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d019      	beq.n	8000976 <HAL_GPIO_Init+0x21a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a4d      	ldr	r2, [pc, #308]	; (8000a7c <HAL_GPIO_Init+0x320>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d013      	beq.n	8000972 <HAL_GPIO_Init+0x216>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a4c      	ldr	r2, [pc, #304]	; (8000a80 <HAL_GPIO_Init+0x324>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d00d      	beq.n	800096e <HAL_GPIO_Init+0x212>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a4b      	ldr	r2, [pc, #300]	; (8000a84 <HAL_GPIO_Init+0x328>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x20e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <HAL_GPIO_Init+0x32c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_GPIO_Init+0x20a>
 8000962:	2307      	movs	r3, #7
 8000964:	e00e      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000966:	2308      	movs	r3, #8
 8000968:	e00c      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800096a:	2306      	movs	r3, #6
 800096c:	e00a      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800096e:	2305      	movs	r3, #5
 8000970:	e008      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000972:	2304      	movs	r3, #4
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000976:	2303      	movs	r3, #3
 8000978:	e004      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800097a:	2302      	movs	r3, #2
 800097c:	e002      	b.n	8000984 <HAL_GPIO_Init+0x228>
 800097e:	2301      	movs	r3, #1
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x228>
 8000982:	2300      	movs	r3, #0
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	f002 0203 	and.w	r2, r2, #3
 800098a:	0092      	lsls	r2, r2, #2
 800098c:	4093      	lsls	r3, r2
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000994:	4934      	ldr	r1, [pc, #208]	; (8000a68 <HAL_GPIO_Init+0x30c>)
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	3302      	adds	r3, #2
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	43db      	mvns	r3, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4013      	ands	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009c6:	4a31      	ldr	r2, [pc, #196]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d003      	beq.n	80009f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009f0:	4a26      	ldr	r2, [pc, #152]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <HAL_GPIO_Init+0x330>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <HAL_GPIO_Init+0x330>)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	f67f ae90 	bls.w	8000778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3724      	adds	r7, #36	; 0x24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40021400 	.word	0x40021400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40021c00 	.word	0x40021c00
 8000a8c:	40013c00 	.word	0x40013c00

08000a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	807b      	strh	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aa6:	887a      	ldrh	r2, [r7, #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000aac:	e003      	b.n	8000ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000aae:	887b      	ldrh	r3, [r7, #2]
 8000ab0:	041a      	lsls	r2, r3, #16
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	619a      	str	r2, [r3, #24]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e25b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d075      	beq.n	8000bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ae2:	4ba3      	ldr	r3, [pc, #652]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	f003 030c 	and.w	r3, r3, #12
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d00c      	beq.n	8000b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000aee:	4ba0      	ldr	r3, [pc, #640]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d112      	bne.n	8000b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000afa:	4b9d      	ldr	r3, [pc, #628]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b06:	d10b      	bne.n	8000b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b08:	4b99      	ldr	r3, [pc, #612]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d05b      	beq.n	8000bcc <HAL_RCC_OscConfig+0x108>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d157      	bne.n	8000bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e236      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b28:	d106      	bne.n	8000b38 <HAL_RCC_OscConfig+0x74>
 8000b2a:	4b91      	ldr	r3, [pc, #580]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a90      	ldr	r2, [pc, #576]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	e01d      	b.n	8000b74 <HAL_RCC_OscConfig+0xb0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b40:	d10c      	bne.n	8000b5c <HAL_RCC_OscConfig+0x98>
 8000b42:	4b8b      	ldr	r3, [pc, #556]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a8a      	ldr	r2, [pc, #552]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	4b88      	ldr	r3, [pc, #544]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a87      	ldr	r2, [pc, #540]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	e00b      	b.n	8000b74 <HAL_RCC_OscConfig+0xb0>
 8000b5c:	4b84      	ldr	r3, [pc, #528]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a83      	ldr	r2, [pc, #524]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b81      	ldr	r3, [pc, #516]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a80      	ldr	r2, [pc, #512]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fcde 	bl	800053c <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fcda 	bl	800053c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1fb      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f0      	beq.n	8000b84 <HAL_RCC_OscConfig+0xc0>
 8000ba2:	e014      	b.n	8000bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fcca 	bl	800053c <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fcc6 	bl	800053c <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e1e7      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bbe:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0xe8>
 8000bca:	e000      	b.n	8000bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d063      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bda:	4b65      	ldr	r3, [pc, #404]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d00b      	beq.n	8000bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000be6:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d11c      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bf2:	4b5f      	ldr	r3, [pc, #380]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d116      	bne.n	8000c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d005      	beq.n	8000c16 <HAL_RCC_OscConfig+0x152>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d001      	beq.n	8000c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e1bb      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4952      	ldr	r1, [pc, #328]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2a:	e03a      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d020      	beq.n	8000c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c34:	4b4f      	ldr	r3, [pc, #316]	; (8000d74 <HAL_RCC_OscConfig+0x2b0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c3a:	f7ff fc7f 	bl	800053c <HAL_GetTick>
 8000c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c40:	e008      	b.n	8000c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c42:	f7ff fc7b 	bl	800053c <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d901      	bls.n	8000c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c50:	2303      	movs	r3, #3
 8000c52:	e19c      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f0      	beq.n	8000c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	4940      	ldr	r1, [pc, #256]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e015      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c76:	4b3f      	ldr	r3, [pc, #252]	; (8000d74 <HAL_RCC_OscConfig+0x2b0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc5e 	bl	800053c <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c84:	f7ff fc5a 	bl	800053c <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e17b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f0      	bne.n	8000c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d030      	beq.n	8000d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d016      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <HAL_RCC_OscConfig+0x2b4>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fc3e 	bl	800053c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fc3a 	bl	800053c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e15b      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd6:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f0      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x200>
 8000ce2:	e015      	b.n	8000d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_RCC_OscConfig+0x2b4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cea:	f7ff fc27 	bl	800053c <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fc23 	bl	800053c <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e144      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1f0      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 80a0 	beq.w	8000e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10f      	bne.n	8000d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_RCC_OscConfig+0x2ac>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d121      	bne.n	8000d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_RCC_OscConfig+0x2b8>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d66:	f7ff fbe9 	bl	800053c <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6c:	e011      	b.n	8000d92 <HAL_RCC_OscConfig+0x2ce>
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	42470000 	.word	0x42470000
 8000d78:	42470e80 	.word	0x42470e80
 8000d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d80:	f7ff fbdc 	bl	800053c <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e0fd      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <HAL_RCC_OscConfig+0x4d4>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d106      	bne.n	8000db4 <HAL_RCC_OscConfig+0x2f0>
 8000da6:	4b7d      	ldr	r3, [pc, #500]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000daa:	4a7c      	ldr	r2, [pc, #496]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6713      	str	r3, [r2, #112]	; 0x70
 8000db2:	e01c      	b.n	8000dee <HAL_RCC_OscConfig+0x32a>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	2b05      	cmp	r3, #5
 8000dba:	d10c      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x312>
 8000dbc:	4b77      	ldr	r3, [pc, #476]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc0:	4a76      	ldr	r2, [pc, #472]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8000dc8:	4b74      	ldr	r3, [pc, #464]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dcc:	4a73      	ldr	r2, [pc, #460]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd4:	e00b      	b.n	8000dee <HAL_RCC_OscConfig+0x32a>
 8000dd6:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dda:	4a70      	ldr	r2, [pc, #448]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6713      	str	r3, [r2, #112]	; 0x70
 8000de2:	4b6e      	ldr	r3, [pc, #440]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de6:	4a6d      	ldr	r2, [pc, #436]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	f023 0304 	bic.w	r3, r3, #4
 8000dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d015      	beq.n	8000e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df6:	f7ff fba1 	bl	800053c <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dfc:	e00a      	b.n	8000e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dfe:	f7ff fb9d 	bl	800053c <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e0bc      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0ee      	beq.n	8000dfe <HAL_RCC_OscConfig+0x33a>
 8000e20:	e014      	b.n	8000e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fb8b 	bl	800053c <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fb87 	bl	800053c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0a6      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e40:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1ee      	bne.n	8000e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d105      	bne.n	8000e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8092 	beq.w	8000f8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d05c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d141      	bne.n	8000f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb5b 	bl	800053c <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb57 	bl	800053c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e078      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69da      	ldr	r2, [r3, #28]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb6:	019b      	lsls	r3, r3, #6
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	085b      	lsrs	r3, r3, #1
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	061b      	lsls	r3, r3, #24
 8000ecc:	4933      	ldr	r1, [pc, #204]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fb30 	bl	800053c <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff fb2c 	bl	800053c <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e04d      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x41c>
 8000efe:	e045      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f00:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_RCC_OscConfig+0x4dc>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb19 	bl	800053c <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f0e:	f7ff fb15 	bl	800053c <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e036      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <HAL_RCC_OscConfig+0x44a>
 8000f2c:	e02e      	b.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e029      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_RCC_OscConfig+0x4d8>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d11c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d115      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f62:	4013      	ands	r3, r2
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d10d      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d106      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d001      	beq.n	8000f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40007000 	.word	0x40007000
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	42470060 	.word	0x42470060

08000fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0cc      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d90c      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b63      	ldr	r3, [pc, #396]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0b8      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ff8:	4b59      	ldr	r3, [pc, #356]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a58      	ldr	r2, [pc, #352]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	4b53      	ldr	r3, [pc, #332]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800101a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4b50      	ldr	r3, [pc, #320]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	494d      	ldr	r1, [pc, #308]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	4313      	orrs	r3, r2
 800102c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d044      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b47      	ldr	r3, [pc, #284]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d119      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d003      	beq.n	8001062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800105e:	2b03      	cmp	r3, #3
 8001060:	d107      	bne.n	8001072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001062:	4b3f      	ldr	r3, [pc, #252]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e06f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e067      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f023 0203 	bic.w	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	4934      	ldr	r1, [pc, #208]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	4313      	orrs	r3, r2
 8001092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001094:	f7ff fa52 	bl	800053c <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800109c:	f7ff fa4e 	bl	800053c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e04f      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 020c 	and.w	r2, r3, #12
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d1eb      	bne.n	800109c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d20c      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e032      	b.n	8001152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4916      	ldr	r1, [pc, #88]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	4313      	orrs	r3, r2
 8001108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001116:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	4313      	orrs	r3, r2
 8001128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112a:	f000 f821 	bl	8001170 <HAL_RCC_GetSysClockFreq>
 800112e:	4601      	mov	r1, r0
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	fa21 f303 	lsr.w	r3, r1, r3
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_RCC_ClockConfig+0x1c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f001 fe42 	bl	8002dd4 <HAL_InitTick>

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00
 8001160:	40023800 	.word	0x40023800
 8001164:	080033c8 	.word	0x080033c8
 8001168:	20000008 	.word	0x20000008
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b04      	cmp	r3, #4
 8001190:	d007      	beq.n	80011a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001192:	2b08      	cmp	r3, #8
 8001194:	d008      	beq.n	80011a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80b4 	bne.w	8001304 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800119e:	60bb      	str	r3, [r7, #8]
       break;
 80011a0:	e0b3      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011a2:	4b5e      	ldr	r3, [pc, #376]	; (800131c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80011a4:	60bb      	str	r3, [r7, #8]
      break;
 80011a6:	e0b0      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011be:	4b55      	ldr	r3, [pc, #340]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	ea03 0501 	and.w	r5, r3, r1
 80011d4:	ea04 0602 	and.w	r6, r4, r2
 80011d8:	4629      	mov	r1, r5
 80011da:	4632      	mov	r2, r6
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	f04f 0400 	mov.w	r4, #0
 80011e4:	0154      	lsls	r4, r2, #5
 80011e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ea:	014b      	lsls	r3, r1, #5
 80011ec:	4619      	mov	r1, r3
 80011ee:	4622      	mov	r2, r4
 80011f0:	1b49      	subs	r1, r1, r5
 80011f2:	eb62 0206 	sbc.w	r2, r2, r6
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	f04f 0400 	mov.w	r4, #0
 80011fe:	0194      	lsls	r4, r2, #6
 8001200:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001204:	018b      	lsls	r3, r1, #6
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	eb64 0402 	sbc.w	r4, r4, r2
 800120c:	f04f 0100 	mov.w	r1, #0
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	00e2      	lsls	r2, r4, #3
 8001216:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800121a:	00d9      	lsls	r1, r3, #3
 800121c:	460b      	mov	r3, r1
 800121e:	4614      	mov	r4, r2
 8001220:	195b      	adds	r3, r3, r5
 8001222:	eb44 0406 	adc.w	r4, r4, r6
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	0262      	lsls	r2, r4, #9
 8001230:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001234:	0259      	lsls	r1, r3, #9
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0400 	mov.w	r4, #0
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	f7fe ffc2 	bl	80001d0 <__aeabi_uldivmod>
 800124c:	4603      	mov	r3, r0
 800124e:	460c      	mov	r4, r1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e049      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	099b      	lsrs	r3, r3, #6
 800125a:	f04f 0400 	mov.w	r4, #0
 800125e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	ea03 0501 	and.w	r5, r3, r1
 800126a:	ea04 0602 	and.w	r6, r4, r2
 800126e:	4629      	mov	r1, r5
 8001270:	4632      	mov	r2, r6
 8001272:	f04f 0300 	mov.w	r3, #0
 8001276:	f04f 0400 	mov.w	r4, #0
 800127a:	0154      	lsls	r4, r2, #5
 800127c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001280:	014b      	lsls	r3, r1, #5
 8001282:	4619      	mov	r1, r3
 8001284:	4622      	mov	r2, r4
 8001286:	1b49      	subs	r1, r1, r5
 8001288:	eb62 0206 	sbc.w	r2, r2, r6
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	0194      	lsls	r4, r2, #6
 8001296:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800129a:	018b      	lsls	r3, r1, #6
 800129c:	1a5b      	subs	r3, r3, r1
 800129e:	eb64 0402 	sbc.w	r4, r4, r2
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	00e2      	lsls	r2, r4, #3
 80012ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012b0:	00d9      	lsls	r1, r3, #3
 80012b2:	460b      	mov	r3, r1
 80012b4:	4614      	mov	r4, r2
 80012b6:	195b      	adds	r3, r3, r5
 80012b8:	eb44 0406 	adc.w	r4, r4, r6
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	02a2      	lsls	r2, r4, #10
 80012c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012ca:	0299      	lsls	r1, r3, #10
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f04f 0400 	mov.w	r4, #0
 80012da:	461a      	mov	r2, r3
 80012dc:	4623      	mov	r3, r4
 80012de:	f7fe ff77 	bl	80001d0 <__aeabi_uldivmod>
 80012e2:	4603      	mov	r3, r0
 80012e4:	460c      	mov	r4, r1
 80012e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	0c1b      	lsrs	r3, r3, #16
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	3301      	adds	r3, #1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	60bb      	str	r3, [r7, #8]
      break;
 8001302:	e002      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001306:	60bb      	str	r3, [r7, #8]
      break;
 8001308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800130a:	68bb      	ldr	r3, [r7, #8]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	00f42400 	.word	0x00f42400
 800131c:	007a1200 	.word	0x007a1200

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_RCC_GetHCLKFreq+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800133c:	f7ff fff0 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001340:	4601      	mov	r1, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_RCC_GetPCLK1Freq+0x24>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	080033d8 	.word	0x080033d8

08001360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001364:	f7ff ffdc 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001368:	4601      	mov	r1, r0
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	0b5b      	lsrs	r3, r3, #13
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	fa21 f303 	lsr.w	r3, r1, r3
}
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	080033d8 	.word	0x080033d8

08001388 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	220f      	movs	r2, #15
 8001396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0203 	and.w	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	08db      	lsrs	r3, r3, #3
 80013c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <HAL_RCC_GetClockConfig+0x60>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 020f 	and.w	r2, r3, #15
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40023c00 	.word	0x40023c00

080013ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001410:	2b00      	cmp	r3, #0
 8001412:	d035      	beq.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001414:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800141a:	f7ff f88f 	bl	800053c <HAL_GetTick>
 800141e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001422:	f7ff f88b 	bl	800053c <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0b0      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001434:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	019a      	lsls	r2, r3, #6
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	071b      	lsls	r3, r3, #28
 800144c:	4955      	ldr	r1, [pc, #340]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800144e:	4313      	orrs	r3, r2
 8001450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001454:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800145a:	f7ff f86f 	bl	800053c <HAL_GetTick>
 800145e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001460:	e008      	b.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001462:	f7ff f86b 	bl	800053c <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e090      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001474:	4b4b      	ldr	r3, [pc, #300]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8083 	beq.w	8001594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014b6:	f7ff f841 	bl	800053c <HAL_GetTick>
 80014ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff f83d 	bl	800053c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e062      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80014d0:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d02f      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d028      	beq.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014fa:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001502:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001510:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d114      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f80b 	bl	800053c <HAL_GetTick>
 8001526:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f807 	bl	800053c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e02a      	b.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ee      	beq.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001558:	d10d      	bne.n	8001576 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800156a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e005      	b.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800157c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001580:	6093      	str	r3, [r2, #8]
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158e:	4905      	ldr	r1, [pc, #20]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001590:	4313      	orrs	r3, r2
 8001592:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	42470068 	.word	0x42470068
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000
 80015ac:	42470e40 	.word	0x42470e40

080015b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e083      	b.n	80016ca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7f5b      	ldrb	r3, [r3, #29]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 fb98 	bl	8002d08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	22ca      	movs	r2, #202	; 0xca
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2253      	movs	r2, #83	; 0x53
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f897 	bl	8001722 <RTC_EnterInitMode>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2204      	movs	r2, #4
 8001606:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e05e      	b.n	80016ca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800161a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800161e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6899      	ldr	r1, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68d2      	ldr	r2, [r2, #12]
 8001646:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	041a      	lsls	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10e      	bne.n	8001698 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f829 	bl	80016d2 <HAL_RTC_WaitForSynchro>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2204      	movs	r2, #4
 8001692:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e018      	b.n	80016ca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	22ff      	movs	r2, #255	; 0xff
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80016ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ee:	f7fe ff25 	bl	800053c <HAL_GetTick>
 80016f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80016f4:	e009      	b.n	800170a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80016f6:	f7fe ff21 	bl	800053c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001704:	d901      	bls.n	800170a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e007      	b.n	800171a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0320 	and.w	r3, r3, #32
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ee      	beq.n	80016f6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d119      	bne.n	8001770 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001746:	f7fe fef9 	bl	800053c <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800174c:	e009      	b.n	8001762 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800174e:	f7fe fef5 	bl	800053c <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800175c:	d901      	bls.n	8001762 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e007      	b.n	8001772 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ee      	beq.n	800174e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e01d      	b.n	80017c8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d106      	bne.n	80017a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f815 	bl	80017d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f000 f967 	bl	8001a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b06      	cmp	r3, #6
 800180c:	d007      	beq.n	800181e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d122      	bne.n	8001888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b02      	cmp	r3, #2
 800184e:	d11b      	bne.n	8001888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0202 	mvn.w	r2, #2
 8001858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f8ee 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8e0 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f8f1 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d122      	bne.n	80018dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d11b      	bne.n	80018dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0204 	mvn.w	r2, #4
 80018ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8c4 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 80018c8:	e005      	b.n	80018d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8b6 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f8c7 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d122      	bne.n	8001930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d11b      	bne.n	8001930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f06f 0208 	mvn.w	r2, #8
 8001900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2204      	movs	r2, #4
 8001906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f89a 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 800191c:	e005      	b.n	800192a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f88c 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f89d 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b10      	cmp	r3, #16
 800193c:	d122      	bne.n	8001984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b10      	cmp	r3, #16
 800194a:	d11b      	bne.n	8001984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0210 	mvn.w	r2, #16
 8001954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f870 	bl	8001a50 <HAL_TIM_IC_CaptureCallback>
 8001970:	e005      	b.n	800197e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f862 	bl	8001a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 f873 	bl	8001a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d10e      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d107      	bne.n	80019b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f06f 0201 	mvn.w	r2, #1
 80019a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f001 f96a 	bl	8002c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b80      	cmp	r3, #128	; 0x80
 80019bc:	d10e      	bne.n	80019dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c8:	2b80      	cmp	r3, #128	; 0x80
 80019ca:	d107      	bne.n	80019dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f902 	bl	8001be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d10e      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f4:	2b40      	cmp	r3, #64	; 0x40
 80019f6:	d107      	bne.n	8001a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f838 	bl	8001a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	d107      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f06f 0220 	mvn.w	r2, #32
 8001a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f8cc 	bl	8001bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aaa:	d00f      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3d      	ldr	r2, [pc, #244]	; (8001ba4 <TIM_Base_SetConfig+0x118>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00b      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3c      	ldr	r2, [pc, #240]	; (8001ba8 <TIM_Base_SetConfig+0x11c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d007      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <TIM_Base_SetConfig+0x120>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0x40>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3a      	ldr	r2, [pc, #232]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d02b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d027      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <TIM_Base_SetConfig+0x118>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d023      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <TIM_Base_SetConfig+0x11c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a2a      	ldr	r2, [pc, #168]	; (8001bac <TIM_Base_SetConfig+0x120>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d01b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d017      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a28      	ldr	r2, [pc, #160]	; (8001bb4 <TIM_Base_SetConfig+0x128>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a27      	ldr	r2, [pc, #156]	; (8001bb8 <TIM_Base_SetConfig+0x12c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00f      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a26      	ldr	r2, [pc, #152]	; (8001bbc <TIM_Base_SetConfig+0x130>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00b      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <TIM_Base_SetConfig+0x134>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d007      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a24      	ldr	r2, [pc, #144]	; (8001bc4 <TIM_Base_SetConfig+0x138>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d003      	beq.n	8001b3e <TIM_Base_SetConfig+0xb2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <TIM_Base_SetConfig+0x13c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d108      	bne.n	8001b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <TIM_Base_SetConfig+0x114>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <TIM_Base_SetConfig+0xf8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <TIM_Base_SetConfig+0x124>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d103      	bne.n	8001b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	615a      	str	r2, [r3, #20]
}
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40010400 	.word	0x40010400
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800
 8001bc0:	40001800 	.word	0x40001800
 8001bc4:	40001c00 	.word	0x40001c00
 8001bc8:	40002000 	.word	0x40002000

08001bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e03f      	b.n	8001c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f001 f88a 	bl	8002d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fa69 	bl	8002110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0320 	and.w	r3, r3, #32
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x52>
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f996 	bl	800200c <UART_Receive_IT>
      return;
 8001ce0:	e0d1      	b.n	8001e86 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80b0 	beq.w	8001e4a <HAL_UART_IRQHandler+0x1ba>
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_UART_IRQHandler+0x70>
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a5 	beq.w	8001e4a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HAL_UART_IRQHandler+0x90>
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_UART_IRQHandler+0xb0>
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	f043 0202 	orr.w	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_UART_IRQHandler+0xd0>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00f      	beq.n	8001d8a <HAL_UART_IRQHandler+0xfa>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <HAL_UART_IRQHandler+0xee>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	f043 0208 	orr.w	r2, r3, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d078      	beq.n	8001e84 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_UART_IRQHandler+0x11c>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f930 	bl	800200c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db6:	2b40      	cmp	r3, #64	; 0x40
 8001db8:	bf0c      	ite	eq
 8001dba:	2301      	moveq	r3, #1
 8001dbc:	2300      	movne	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_UART_IRQHandler+0x144>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d031      	beq.n	8001e38 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f879 	bl	8001ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d123      	bne.n	8001e30 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001df6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <HAL_UART_IRQHandler+0x1fc>)
 8001e06:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fc83 	bl	8000718 <HAL_DMA_Abort_IT>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d016      	beq.n	8001e46 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e22:	4610      	mov	r0, r2
 8001e24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e26:	e00e      	b.n	8001e46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f845 	bl	8001eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2e:	e00a      	b.n	8001e46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f841 	bl	8001eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e36:	e006      	b.n	8001e46 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f83d 	bl	8001eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e44:	e01e      	b.n	8001e84 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e46:	bf00      	nop
    return;
 8001e48:	e01c      	b.n	8001e84 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_UART_IRQHandler+0x1d6>
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f866 	bl	8001f30 <UART_Transmit_IT>
    return;
 8001e64:	e00f      	b.n	8001e86 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_UART_IRQHandler+0x1f6>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8ae 	bl	8001fdc <UART_EndTransmit_IT>
    return;
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001e84:	bf00      	nop
  }
}
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	08001f09 	.word	0x08001f09

08001e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ee2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff ffc8 	bl	8001eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b21      	cmp	r3, #33	; 0x21
 8001f42:	d144      	bne.n	8001fce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4c:	d11a      	bne.n	8001f84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	1c9a      	adds	r2, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	e00e      	b.n	8001f96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	621a      	str	r2, [r3, #32]
 8001f82:	e008      	b.n	8001f96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	1c59      	adds	r1, r3, #1
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6211      	str	r1, [r2, #32]
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10f      	bne.n	8001fca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ff2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff47 	bl	8001e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b22      	cmp	r3, #34	; 0x22
 800201e:	d171      	bne.n	8002104 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002028:	d123      	bne.n	8002072 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10e      	bne.n	8002056 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	b29b      	uxth	r3, r3
 8002040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	1c9a      	adds	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
 8002054:	e029      	b.n	80020aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	b29b      	uxth	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28
 8002070:	e01b      	b.n	80020aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6858      	ldr	r0, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	1c59      	adds	r1, r3, #1
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6291      	str	r1, [r2, #40]	; 0x28
 800208a:	b2c2      	uxtb	r2, r0
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e00c      	b.n	80020aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	1c58      	adds	r0, r3, #1
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	6288      	str	r0, [r1, #40]	; 0x28
 80020a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4619      	mov	r1, r3
 80020b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d120      	bne.n	8002100 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0220 	bic.w	r2, r2, #32
 80020cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fed4 	bl	8001ea4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e002      	b.n	8002106 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002152:	f023 030c 	bic.w	r3, r3, #12
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	68f9      	ldr	r1, [r7, #12]
 800215c:	430b      	orrs	r3, r1
 800215e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800217e:	f040 818b 	bne.w	8002498 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4ac1      	ldr	r2, [pc, #772]	; (800248c <UART_SetConfig+0x37c>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d005      	beq.n	8002198 <UART_SetConfig+0x88>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4abf      	ldr	r2, [pc, #764]	; (8002490 <UART_SetConfig+0x380>)
 8002192:	4293      	cmp	r3, r2
 8002194:	f040 80bd 	bne.w	8002312 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002198:	f7ff f8e2 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 800219c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	461d      	mov	r5, r3
 80021a2:	f04f 0600 	mov.w	r6, #0
 80021a6:	46a8      	mov	r8, r5
 80021a8:	46b1      	mov	r9, r6
 80021aa:	eb18 0308 	adds.w	r3, r8, r8
 80021ae:	eb49 0409 	adc.w	r4, r9, r9
 80021b2:	4698      	mov	r8, r3
 80021b4:	46a1      	mov	r9, r4
 80021b6:	eb18 0805 	adds.w	r8, r8, r5
 80021ba:	eb49 0906 	adc.w	r9, r9, r6
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021d2:	4688      	mov	r8, r1
 80021d4:	4691      	mov	r9, r2
 80021d6:	eb18 0005 	adds.w	r0, r8, r5
 80021da:	eb49 0106 	adc.w	r1, r9, r6
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	461d      	mov	r5, r3
 80021e4:	f04f 0600 	mov.w	r6, #0
 80021e8:	196b      	adds	r3, r5, r5
 80021ea:	eb46 0406 	adc.w	r4, r6, r6
 80021ee:	461a      	mov	r2, r3
 80021f0:	4623      	mov	r3, r4
 80021f2:	f7fd ffed 	bl	80001d0 <__aeabi_uldivmod>
 80021f6:	4603      	mov	r3, r0
 80021f8:	460c      	mov	r4, r1
 80021fa:	461a      	mov	r2, r3
 80021fc:	4ba5      	ldr	r3, [pc, #660]	; (8002494 <UART_SetConfig+0x384>)
 80021fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	461d      	mov	r5, r3
 800220c:	f04f 0600 	mov.w	r6, #0
 8002210:	46a9      	mov	r9, r5
 8002212:	46b2      	mov	sl, r6
 8002214:	eb19 0309 	adds.w	r3, r9, r9
 8002218:	eb4a 040a 	adc.w	r4, sl, sl
 800221c:	4699      	mov	r9, r3
 800221e:	46a2      	mov	sl, r4
 8002220:	eb19 0905 	adds.w	r9, r9, r5
 8002224:	eb4a 0a06 	adc.w	sl, sl, r6
 8002228:	f04f 0100 	mov.w	r1, #0
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002234:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002238:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800223c:	4689      	mov	r9, r1
 800223e:	4692      	mov	sl, r2
 8002240:	eb19 0005 	adds.w	r0, r9, r5
 8002244:	eb4a 0106 	adc.w	r1, sl, r6
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	461d      	mov	r5, r3
 800224e:	f04f 0600 	mov.w	r6, #0
 8002252:	196b      	adds	r3, r5, r5
 8002254:	eb46 0406 	adc.w	r4, r6, r6
 8002258:	461a      	mov	r2, r3
 800225a:	4623      	mov	r3, r4
 800225c:	f7fd ffb8 	bl	80001d0 <__aeabi_uldivmod>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	461a      	mov	r2, r3
 8002266:	4b8b      	ldr	r3, [pc, #556]	; (8002494 <UART_SetConfig+0x384>)
 8002268:	fba3 1302 	umull	r1, r3, r3, r2
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	2164      	movs	r1, #100	; 0x64
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	3332      	adds	r3, #50	; 0x32
 800227a:	4a86      	ldr	r2, [pc, #536]	; (8002494 <UART_SetConfig+0x384>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002288:	4498      	add	r8, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	461d      	mov	r5, r3
 800228e:	f04f 0600 	mov.w	r6, #0
 8002292:	46a9      	mov	r9, r5
 8002294:	46b2      	mov	sl, r6
 8002296:	eb19 0309 	adds.w	r3, r9, r9
 800229a:	eb4a 040a 	adc.w	r4, sl, sl
 800229e:	4699      	mov	r9, r3
 80022a0:	46a2      	mov	sl, r4
 80022a2:	eb19 0905 	adds.w	r9, r9, r5
 80022a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022be:	4689      	mov	r9, r1
 80022c0:	4692      	mov	sl, r2
 80022c2:	eb19 0005 	adds.w	r0, r9, r5
 80022c6:	eb4a 0106 	adc.w	r1, sl, r6
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	461d      	mov	r5, r3
 80022d0:	f04f 0600 	mov.w	r6, #0
 80022d4:	196b      	adds	r3, r5, r5
 80022d6:	eb46 0406 	adc.w	r4, r6, r6
 80022da:	461a      	mov	r2, r3
 80022dc:	4623      	mov	r3, r4
 80022de:	f7fd ff77 	bl	80001d0 <__aeabi_uldivmod>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <UART_SetConfig+0x384>)
 80022ea:	fba3 1302 	umull	r1, r3, r3, r2
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	3332      	adds	r3, #50	; 0x32
 80022fc:	4a65      	ldr	r2, [pc, #404]	; (8002494 <UART_SetConfig+0x384>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f003 0207 	and.w	r2, r3, #7
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4442      	add	r2, r8
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e26f      	b.n	80027f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002312:	f7ff f811 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 8002316:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	461d      	mov	r5, r3
 800231c:	f04f 0600 	mov.w	r6, #0
 8002320:	46a8      	mov	r8, r5
 8002322:	46b1      	mov	r9, r6
 8002324:	eb18 0308 	adds.w	r3, r8, r8
 8002328:	eb49 0409 	adc.w	r4, r9, r9
 800232c:	4698      	mov	r8, r3
 800232e:	46a1      	mov	r9, r4
 8002330:	eb18 0805 	adds.w	r8, r8, r5
 8002334:	eb49 0906 	adc.w	r9, r9, r6
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002344:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002348:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800234c:	4688      	mov	r8, r1
 800234e:	4691      	mov	r9, r2
 8002350:	eb18 0005 	adds.w	r0, r8, r5
 8002354:	eb49 0106 	adc.w	r1, r9, r6
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	461d      	mov	r5, r3
 800235e:	f04f 0600 	mov.w	r6, #0
 8002362:	196b      	adds	r3, r5, r5
 8002364:	eb46 0406 	adc.w	r4, r6, r6
 8002368:	461a      	mov	r2, r3
 800236a:	4623      	mov	r3, r4
 800236c:	f7fd ff30 	bl	80001d0 <__aeabi_uldivmod>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	461a      	mov	r2, r3
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <UART_SetConfig+0x384>)
 8002378:	fba3 2302 	umull	r2, r3, r3, r2
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	461d      	mov	r5, r3
 8002386:	f04f 0600 	mov.w	r6, #0
 800238a:	46a9      	mov	r9, r5
 800238c:	46b2      	mov	sl, r6
 800238e:	eb19 0309 	adds.w	r3, r9, r9
 8002392:	eb4a 040a 	adc.w	r4, sl, sl
 8002396:	4699      	mov	r9, r3
 8002398:	46a2      	mov	sl, r4
 800239a:	eb19 0905 	adds.w	r9, r9, r5
 800239e:	eb4a 0a06 	adc.w	sl, sl, r6
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023b6:	4689      	mov	r9, r1
 80023b8:	4692      	mov	sl, r2
 80023ba:	eb19 0005 	adds.w	r0, r9, r5
 80023be:	eb4a 0106 	adc.w	r1, sl, r6
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	461d      	mov	r5, r3
 80023c8:	f04f 0600 	mov.w	r6, #0
 80023cc:	196b      	adds	r3, r5, r5
 80023ce:	eb46 0406 	adc.w	r4, r6, r6
 80023d2:	461a      	mov	r2, r3
 80023d4:	4623      	mov	r3, r4
 80023d6:	f7fd fefb 	bl	80001d0 <__aeabi_uldivmod>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	461a      	mov	r2, r3
 80023e0:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <UART_SetConfig+0x384>)
 80023e2:	fba3 1302 	umull	r1, r3, r3, r2
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2164      	movs	r1, #100	; 0x64
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	3332      	adds	r3, #50	; 0x32
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <UART_SetConfig+0x384>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002402:	4498      	add	r8, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	461d      	mov	r5, r3
 8002408:	f04f 0600 	mov.w	r6, #0
 800240c:	46a9      	mov	r9, r5
 800240e:	46b2      	mov	sl, r6
 8002410:	eb19 0309 	adds.w	r3, r9, r9
 8002414:	eb4a 040a 	adc.w	r4, sl, sl
 8002418:	4699      	mov	r9, r3
 800241a:	46a2      	mov	sl, r4
 800241c:	eb19 0905 	adds.w	r9, r9, r5
 8002420:	eb4a 0a06 	adc.w	sl, sl, r6
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002430:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002434:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002438:	4689      	mov	r9, r1
 800243a:	4692      	mov	sl, r2
 800243c:	eb19 0005 	adds.w	r0, r9, r5
 8002440:	eb4a 0106 	adc.w	r1, sl, r6
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	461d      	mov	r5, r3
 800244a:	f04f 0600 	mov.w	r6, #0
 800244e:	196b      	adds	r3, r5, r5
 8002450:	eb46 0406 	adc.w	r4, r6, r6
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	f7fd feba 	bl	80001d0 <__aeabi_uldivmod>
 800245c:	4603      	mov	r3, r0
 800245e:	460c      	mov	r4, r1
 8002460:	461a      	mov	r2, r3
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <UART_SetConfig+0x384>)
 8002464:	fba3 1302 	umull	r1, r3, r3, r2
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	2164      	movs	r1, #100	; 0x64
 800246c:	fb01 f303 	mul.w	r3, r1, r3
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	3332      	adds	r3, #50	; 0x32
 8002476:	4a07      	ldr	r2, [pc, #28]	; (8002494 <UART_SetConfig+0x384>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	f003 0207 	and.w	r2, r3, #7
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4442      	add	r2, r8
 8002488:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800248a:	e1b2      	b.n	80027f2 <UART_SetConfig+0x6e2>
 800248c:	40011000 	.word	0x40011000
 8002490:	40011400 	.word	0x40011400
 8002494:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4ad7      	ldr	r2, [pc, #860]	; (80027fc <UART_SetConfig+0x6ec>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d005      	beq.n	80024ae <UART_SetConfig+0x39e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4ad6      	ldr	r2, [pc, #856]	; (8002800 <UART_SetConfig+0x6f0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	f040 80d1 	bne.w	8002650 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024ae:	f7fe ff57 	bl	8001360 <HAL_RCC_GetPCLK2Freq>
 80024b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	469a      	mov	sl, r3
 80024b8:	f04f 0b00 	mov.w	fp, #0
 80024bc:	46d0      	mov	r8, sl
 80024be:	46d9      	mov	r9, fp
 80024c0:	eb18 0308 	adds.w	r3, r8, r8
 80024c4:	eb49 0409 	adc.w	r4, r9, r9
 80024c8:	4698      	mov	r8, r3
 80024ca:	46a1      	mov	r9, r4
 80024cc:	eb18 080a 	adds.w	r8, r8, sl
 80024d0:	eb49 090b 	adc.w	r9, r9, fp
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024e8:	4688      	mov	r8, r1
 80024ea:	4691      	mov	r9, r2
 80024ec:	eb1a 0508 	adds.w	r5, sl, r8
 80024f0:	eb4b 0609 	adc.w	r6, fp, r9
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4619      	mov	r1, r3
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f04f 0400 	mov.w	r4, #0
 8002506:	0094      	lsls	r4, r2, #2
 8002508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800250c:	008b      	lsls	r3, r1, #2
 800250e:	461a      	mov	r2, r3
 8002510:	4623      	mov	r3, r4
 8002512:	4628      	mov	r0, r5
 8002514:	4631      	mov	r1, r6
 8002516:	f7fd fe5b 	bl	80001d0 <__aeabi_uldivmod>
 800251a:	4603      	mov	r3, r0
 800251c:	460c      	mov	r4, r1
 800251e:	461a      	mov	r2, r3
 8002520:	4bb8      	ldr	r3, [pc, #736]	; (8002804 <UART_SetConfig+0x6f4>)
 8002522:	fba3 2302 	umull	r2, r3, r3, r2
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	469b      	mov	fp, r3
 8002530:	f04f 0c00 	mov.w	ip, #0
 8002534:	46d9      	mov	r9, fp
 8002536:	46e2      	mov	sl, ip
 8002538:	eb19 0309 	adds.w	r3, r9, r9
 800253c:	eb4a 040a 	adc.w	r4, sl, sl
 8002540:	4699      	mov	r9, r3
 8002542:	46a2      	mov	sl, r4
 8002544:	eb19 090b 	adds.w	r9, r9, fp
 8002548:	eb4a 0a0c 	adc.w	sl, sl, ip
 800254c:	f04f 0100 	mov.w	r1, #0
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002558:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800255c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002560:	4689      	mov	r9, r1
 8002562:	4692      	mov	sl, r2
 8002564:	eb1b 0509 	adds.w	r5, fp, r9
 8002568:	eb4c 060a 	adc.w	r6, ip, sl
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4619      	mov	r1, r3
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	f04f 0400 	mov.w	r4, #0
 800257e:	0094      	lsls	r4, r2, #2
 8002580:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002584:	008b      	lsls	r3, r1, #2
 8002586:	461a      	mov	r2, r3
 8002588:	4623      	mov	r3, r4
 800258a:	4628      	mov	r0, r5
 800258c:	4631      	mov	r1, r6
 800258e:	f7fd fe1f 	bl	80001d0 <__aeabi_uldivmod>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4b9a      	ldr	r3, [pc, #616]	; (8002804 <UART_SetConfig+0x6f4>)
 800259a:	fba3 1302 	umull	r1, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2164      	movs	r1, #100	; 0x64
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	3332      	adds	r3, #50	; 0x32
 80025ac:	4a95      	ldr	r2, [pc, #596]	; (8002804 <UART_SetConfig+0x6f4>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b8:	4498      	add	r8, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	469b      	mov	fp, r3
 80025be:	f04f 0c00 	mov.w	ip, #0
 80025c2:	46d9      	mov	r9, fp
 80025c4:	46e2      	mov	sl, ip
 80025c6:	eb19 0309 	adds.w	r3, r9, r9
 80025ca:	eb4a 040a 	adc.w	r4, sl, sl
 80025ce:	4699      	mov	r9, r3
 80025d0:	46a2      	mov	sl, r4
 80025d2:	eb19 090b 	adds.w	r9, r9, fp
 80025d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ee:	4689      	mov	r9, r1
 80025f0:	4692      	mov	sl, r2
 80025f2:	eb1b 0509 	adds.w	r5, fp, r9
 80025f6:	eb4c 060a 	adc.w	r6, ip, sl
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4619      	mov	r1, r3
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f04f 0400 	mov.w	r4, #0
 800260c:	0094      	lsls	r4, r2, #2
 800260e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002612:	008b      	lsls	r3, r1, #2
 8002614:	461a      	mov	r2, r3
 8002616:	4623      	mov	r3, r4
 8002618:	4628      	mov	r0, r5
 800261a:	4631      	mov	r1, r6
 800261c:	f7fd fdd8 	bl	80001d0 <__aeabi_uldivmod>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	461a      	mov	r2, r3
 8002626:	4b77      	ldr	r3, [pc, #476]	; (8002804 <UART_SetConfig+0x6f4>)
 8002628:	fba3 1302 	umull	r1, r3, r3, r2
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	2164      	movs	r1, #100	; 0x64
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	3332      	adds	r3, #50	; 0x32
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <UART_SetConfig+0x6f4>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	f003 020f 	and.w	r2, r3, #15
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4442      	add	r2, r8
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	e0d0      	b.n	80027f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002650:	f7fe fe72 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 8002654:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	469a      	mov	sl, r3
 800265a:	f04f 0b00 	mov.w	fp, #0
 800265e:	46d0      	mov	r8, sl
 8002660:	46d9      	mov	r9, fp
 8002662:	eb18 0308 	adds.w	r3, r8, r8
 8002666:	eb49 0409 	adc.w	r4, r9, r9
 800266a:	4698      	mov	r8, r3
 800266c:	46a1      	mov	r9, r4
 800266e:	eb18 080a 	adds.w	r8, r8, sl
 8002672:	eb49 090b 	adc.w	r9, r9, fp
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002682:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002686:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800268a:	4688      	mov	r8, r1
 800268c:	4691      	mov	r9, r2
 800268e:	eb1a 0508 	adds.w	r5, sl, r8
 8002692:	eb4b 0609 	adc.w	r6, fp, r9
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	f04f 0400 	mov.w	r4, #0
 80026a8:	0094      	lsls	r4, r2, #2
 80026aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4623      	mov	r3, r4
 80026b4:	4628      	mov	r0, r5
 80026b6:	4631      	mov	r1, r6
 80026b8:	f7fd fd8a 	bl	80001d0 <__aeabi_uldivmod>
 80026bc:	4603      	mov	r3, r0
 80026be:	460c      	mov	r4, r1
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b50      	ldr	r3, [pc, #320]	; (8002804 <UART_SetConfig+0x6f4>)
 80026c4:	fba3 2302 	umull	r2, r3, r3, r2
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	469b      	mov	fp, r3
 80026d2:	f04f 0c00 	mov.w	ip, #0
 80026d6:	46d9      	mov	r9, fp
 80026d8:	46e2      	mov	sl, ip
 80026da:	eb19 0309 	adds.w	r3, r9, r9
 80026de:	eb4a 040a 	adc.w	r4, sl, sl
 80026e2:	4699      	mov	r9, r3
 80026e4:	46a2      	mov	sl, r4
 80026e6:	eb19 090b 	adds.w	r9, r9, fp
 80026ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002702:	4689      	mov	r9, r1
 8002704:	4692      	mov	sl, r2
 8002706:	eb1b 0509 	adds.w	r5, fp, r9
 800270a:	eb4c 060a 	adc.w	r6, ip, sl
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f04f 0400 	mov.w	r4, #0
 8002720:	0094      	lsls	r4, r2, #2
 8002722:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002726:	008b      	lsls	r3, r1, #2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	4628      	mov	r0, r5
 800272e:	4631      	mov	r1, r6
 8002730:	f7fd fd4e 	bl	80001d0 <__aeabi_uldivmod>
 8002734:	4603      	mov	r3, r0
 8002736:	460c      	mov	r4, r1
 8002738:	461a      	mov	r2, r3
 800273a:	4b32      	ldr	r3, [pc, #200]	; (8002804 <UART_SetConfig+0x6f4>)
 800273c:	fba3 1302 	umull	r1, r3, r3, r2
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	2164      	movs	r1, #100	; 0x64
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	3332      	adds	r3, #50	; 0x32
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <UART_SetConfig+0x6f4>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275a:	4498      	add	r8, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	469b      	mov	fp, r3
 8002760:	f04f 0c00 	mov.w	ip, #0
 8002764:	46d9      	mov	r9, fp
 8002766:	46e2      	mov	sl, ip
 8002768:	eb19 0309 	adds.w	r3, r9, r9
 800276c:	eb4a 040a 	adc.w	r4, sl, sl
 8002770:	4699      	mov	r9, r3
 8002772:	46a2      	mov	sl, r4
 8002774:	eb19 090b 	adds.w	r9, r9, fp
 8002778:	eb4a 0a0c 	adc.w	sl, sl, ip
 800277c:	f04f 0100 	mov.w	r1, #0
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002788:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800278c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002790:	4689      	mov	r9, r1
 8002792:	4692      	mov	sl, r2
 8002794:	eb1b 0509 	adds.w	r5, fp, r9
 8002798:	eb4c 060a 	adc.w	r6, ip, sl
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f04f 0400 	mov.w	r4, #0
 80027ae:	0094      	lsls	r4, r2, #2
 80027b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027b4:	008b      	lsls	r3, r1, #2
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	4628      	mov	r0, r5
 80027bc:	4631      	mov	r1, r6
 80027be:	f7fd fd07 	bl	80001d0 <__aeabi_uldivmod>
 80027c2:	4603      	mov	r3, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	461a      	mov	r2, r3
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <UART_SetConfig+0x6f4>)
 80027ca:	fba3 1302 	umull	r1, r3, r3, r2
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2164      	movs	r1, #100	; 0x64
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	3332      	adds	r3, #50	; 0x32
 80027dc:	4a09      	ldr	r2, [pc, #36]	; (8002804 <UART_SetConfig+0x6f4>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4442      	add	r2, r8
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	e7ff      	b.n	80027f2 <UART_SetConfig+0x6e2>
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027fc:	40011000 	.word	0x40011000
 8002800:	40011400 	.word	0x40011400
 8002804:	51eb851f 	.word	0x51eb851f

08002808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800280c:	f7fd fe60 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002810:	f000 f808 	bl	8002824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002814:	f000 f8d8 	bl	80029c8 <MX_GPIO_Init>
  MX_RTC_Init();
 8002818:	f000 f886 	bl	8002928 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800281c:	f000 f8aa 	bl	8002974 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002820:	e7fe      	b.n	8002820 <main+0x18>
	...

08002824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b098      	sub	sp, #96	; 0x60
 8002828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800282e:	2230      	movs	r2, #48	; 0x30
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fdb4 	bl	80033a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <SystemClock_Config+0xfc>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a30      	ldr	r2, [pc, #192]	; (8002920 <SystemClock_Config+0xfc>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <SystemClock_Config+0xfc>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <SystemClock_Config+0x100>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <SystemClock_Config+0x100>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <SystemClock_Config+0x100>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800288e:	230a      	movs	r3, #10
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002892:	2301      	movs	r3, #1
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002896:	2310      	movs	r3, #16
 8002898:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800289a:	2301      	movs	r3, #1
 800289c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289e:	2302      	movs	r3, #2
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028a2:	2300      	movs	r3, #0
 80028a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028a6:	2308      	movs	r3, #8
 80028a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80028aa:	2332      	movs	r3, #50	; 0x32
 80028ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028ae:	2304      	movs	r3, #4
 80028b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028b2:	2307      	movs	r3, #7
 80028b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f902 	bl	8000ac4 <HAL_RCC_OscConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80028c6:	f000 f9ef 	bl	8002ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	230f      	movs	r3, #15
 80028cc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ce:	2302      	movs	r3, #2
 80028d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80028d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80028dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fb5b 	bl	8000fa4 <HAL_RCC_ClockConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80028f4:	f000 f9d8 	bl	8002ca8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028f8:	2302      	movs	r3, #2
 80028fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002900:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002902:	f107 030c 	add.w	r3, r7, #12
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fd70 	bl	80013ec <HAL_RCCEx_PeriphCLKConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002912:	f000 f9c9 	bl	8002ca8 <Error_Handler>
  }
}
 8002916:	bf00      	nop
 8002918:	3760      	adds	r7, #96	; 0x60
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40007000 	.word	0x40007000

08002928 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_RTC_Init+0x44>)
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <MX_RTC_Init+0x48>)
 8002930:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_RTC_Init+0x44>)
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_RTC_Init+0x44>)
 800293a:	227f      	movs	r2, #127	; 0x7f
 800293c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_RTC_Init+0x44>)
 8002940:	22ff      	movs	r2, #255	; 0xff
 8002942:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_RTC_Init+0x44>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_RTC_Init+0x44>)
 800294c:	2200      	movs	r2, #0
 800294e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_RTC_Init+0x44>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_RTC_Init+0x44>)
 8002958:	f7fe fe2a 	bl	80015b0 <HAL_RTC_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002962:	f000 f9a1 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200000b8 	.word	0x200000b8
 8002970:	40002800 	.word	0x40002800

08002974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <MX_USART2_UART_Init+0x50>)
 800297c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029aa:	4805      	ldr	r0, [pc, #20]	; (80029c0 <MX_USART2_UART_Init+0x4c>)
 80029ac:	f7ff f922 	bl	8001bf4 <HAL_UART_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029b6:	f000 f977 	bl	8002ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200000d8 	.word	0x200000d8
 80029c4:	40004400 	.word	0x40004400

080029c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	; 0x30
 80029cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	4ba1      	ldr	r3, [pc, #644]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4aa0      	ldr	r2, [pc, #640]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029e8:	f043 0310 	orr.w	r3, r3, #16
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b9e      	ldr	r3, [pc, #632]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	4b9a      	ldr	r3, [pc, #616]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a99      	ldr	r2, [pc, #612]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b97      	ldr	r3, [pc, #604]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b93      	ldr	r3, [pc, #588]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a92      	ldr	r2, [pc, #584]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b90      	ldr	r3, [pc, #576]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b8c      	ldr	r3, [pc, #560]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a8b      	ldr	r2, [pc, #556]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b89      	ldr	r3, [pc, #548]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b85      	ldr	r3, [pc, #532]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a84      	ldr	r2, [pc, #528]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a7d      	ldr	r2, [pc, #500]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <MX_GPIO_Init+0x2a0>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2108      	movs	r1, #8
 8002a8a:	4878      	ldr	r0, [pc, #480]	; (8002c6c <MX_GPIO_Init+0x2a4>)
 8002a8c:	f7fe f800 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a90:	2201      	movs	r2, #1
 8002a92:	2101      	movs	r1, #1
 8002a94:	4876      	ldr	r0, [pc, #472]	; (8002c70 <MX_GPIO_Init+0x2a8>)
 8002a96:	f7fd fffb 	bl	8000a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002aa0:	4874      	ldr	r0, [pc, #464]	; (8002c74 <MX_GPIO_Init+0x2ac>)
 8002aa2:	f7fd fff5 	bl	8000a90 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	f107 031c 	add.w	r3, r7, #28
 8002aba:	4619      	mov	r1, r3
 8002abc:	486b      	ldr	r0, [pc, #428]	; (8002c6c <MX_GPIO_Init+0x2a4>)
 8002abe:	f7fd fe4d 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 031c 	add.w	r3, r7, #28
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4865      	ldr	r0, [pc, #404]	; (8002c70 <MX_GPIO_Init+0x2a8>)
 8002ada:	f7fd fe3f 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aee:	2305      	movs	r3, #5
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	485d      	ldr	r0, [pc, #372]	; (8002c70 <MX_GPIO_Init+0x2a8>)
 8002afa:	f7fd fe2f 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b02:	4b5d      	ldr	r3, [pc, #372]	; (8002c78 <MX_GPIO_Init+0x2b0>)
 8002b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	485a      	ldr	r0, [pc, #360]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002b12:	f7fd fe23 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002b16:	2310      	movs	r3, #16
 8002b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b26:	2306      	movs	r3, #6
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4852      	ldr	r0, [pc, #328]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002b32:	f7fd fe13 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002b36:	23e0      	movs	r3, #224	; 0xe0
 8002b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b46:	2305      	movs	r3, #5
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	484a      	ldr	r0, [pc, #296]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002b52:	f7fd fe03 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b56:	2304      	movs	r3, #4
 8002b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 031c 	add.w	r3, r7, #28
 8002b66:	4619      	mov	r1, r3
 8002b68:	4845      	ldr	r0, [pc, #276]	; (8002c80 <MX_GPIO_Init+0x2b8>)
 8002b6a:	f7fd fdf7 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b80:	2305      	movs	r3, #5
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	483d      	ldr	r0, [pc, #244]	; (8002c80 <MX_GPIO_Init+0x2b8>)
 8002b8c:	f7fd fde6 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8002b90:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002b94:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b96:	2301      	movs	r3, #1
 8002b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba2:	f107 031c 	add.w	r3, r7, #28
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4832      	ldr	r0, [pc, #200]	; (8002c74 <MX_GPIO_Init+0x2ac>)
 8002baa:	f7fd fdd7 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002bae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bc0:	2306      	movs	r3, #6
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4829      	ldr	r0, [pc, #164]	; (8002c70 <MX_GPIO_Init+0x2a8>)
 8002bcc:	f7fd fdc6 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	4825      	ldr	r0, [pc, #148]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002be6:	f7fd fdb9 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002bea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	481d      	ldr	r0, [pc, #116]	; (8002c7c <MX_GPIO_Init+0x2b4>)
 8002c08:	f7fd fda8 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c0c:	2320      	movs	r3, #32
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4815      	ldr	r0, [pc, #84]	; (8002c74 <MX_GPIO_Init+0x2ac>)
 8002c20:	f7fd fd9c 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002c24:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c2a:	2312      	movs	r3, #18
 8002c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c36:	2304      	movs	r3, #4
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	480f      	ldr	r0, [pc, #60]	; (8002c80 <MX_GPIO_Init+0x2b8>)
 8002c42:	f7fd fd8b 	bl	800075c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <MX_GPIO_Init+0x2b0>)
 8002c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <MX_GPIO_Init+0x2a4>)
 8002c5a:	f7fd fd7f 	bl	800075c <HAL_GPIO_Init>

}
 8002c5e:	bf00      	nop
 8002c60:	3730      	adds	r7, #48	; 0x30
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	10120000 	.word	0x10120000
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020400 	.word	0x40020400

08002c84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c96:	f7fd fc3d 	bl	8000514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40001000 	.word	0x40001000

08002ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_MspInit+0x4c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_MspInit+0x4c>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_MspInit+0x4c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <HAL_RTC_MspInit+0x24>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d102      	bne.n	8002d20 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RTC_MspInit+0x28>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40002800 	.word	0x40002800
 8002d30:	42470e3c 	.word	0x42470e3c

08002d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_UART_MspInit+0x94>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d133      	bne.n	8002dbe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_UART_MspInit+0x98>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a1b      	ldr	r2, [pc, #108]	; (8002dcc <HAL_UART_MspInit+0x98>)
 8002d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_UART_MspInit+0x98>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_UART_MspInit+0x98>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <HAL_UART_MspInit+0x98>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_UART_MspInit+0x98>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d8e:	230c      	movs	r3, #12
 8002d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d9e:	2307      	movs	r3, #7
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	4809      	ldr	r0, [pc, #36]	; (8002dd0 <HAL_UART_MspInit+0x9c>)
 8002daa:	f7fd fcd7 	bl	800075c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2106      	movs	r1, #6
 8002db2:	2026      	movs	r0, #38	; 0x26
 8002db4:	f7fd fc86 	bl	80006c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002db8:	2026      	movs	r0, #38	; 0x26
 8002dba:	f7fd fc9f 	bl	80006fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40004400 	.word	0x40004400
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	; 0x30
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	2036      	movs	r0, #54	; 0x36
 8002dea:	f7fd fc6b 	bl	80006c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002dee:	2036      	movs	r0, #54	; 0x36
 8002df0:	f7fd fc84 	bl	80006fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <HAL_InitTick+0xa4>)
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_InitTick+0xa4>)
 8002dfe:	f043 0310 	orr.w	r3, r3, #16
 8002e02:	6413      	str	r3, [r2, #64]	; 0x40
 8002e04:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <HAL_InitTick+0xa4>)
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e10:	f107 0210 	add.w	r2, r7, #16
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fab4 	bl	8001388 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e20:	f7fe fa8a 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 8002e24:	4603      	mov	r3, r0
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <HAL_InitTick+0xa8>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	3b01      	subs	r3, #1
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_InitTick+0xac>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <HAL_InitTick+0xb0>)
 8002e3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_InitTick+0xac>)
 8002e40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_InitTick+0xac>)
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_InitTick+0xac>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_InitTick+0xac>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <HAL_InitTick+0xac>)
 8002e5a:	f7fe fc8e 	bl	800177a <HAL_TIM_Base_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e64:	4806      	ldr	r0, [pc, #24]	; (8002e80 <HAL_InitTick+0xac>)
 8002e66:	f7fe fcbd 	bl	80017e4 <HAL_TIM_Base_Start_IT>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	e000      	b.n	8002e70 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	20000118 	.word	0x20000118
 8002e84:	40001000 	.word	0x40001000

08002e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e9a:	e7fe      	b.n	8002e9a <HardFault_Handler+0x4>

08002e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <MemManage_Handler+0x4>

08002ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <BusFault_Handler+0x4>

08002ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <UsageFault_Handler+0x4>

08002eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <USART2_IRQHandler+0x10>)
 8002ec2:	f7fe fee5 	bl	8001c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200000d8 	.word	0x200000d8

08002ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <TIM6_DAC_IRQHandler+0x10>)
 8002ed6:	f7fe fca9 	bl	800182c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000118 	.word	0x20000118

08002ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <SystemInit+0x28>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <SystemInit+0x28>)
 8002ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <SystemInit+0x28>)
 8002efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002efe:	609a      	str	r2, [r3, #8]
#endif
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f16:	e003      	b.n	8002f20 <LoopCopyDataInit>

08002f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f1e:	3104      	adds	r1, #4

08002f20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f20:	480b      	ldr	r0, [pc, #44]	; (8002f50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f28:	d3f6      	bcc.n	8002f18 <CopyDataInit>
  ldr  r2, =_sbss
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f2c:	e002      	b.n	8002f34 <LoopFillZerobss>

08002f2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f30:	f842 3b04 	str.w	r3, [r2], #4

08002f34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f38:	d3f9      	bcc.n	8002f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f3a:	f7ff ffd3 	bl	8002ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3e:	f000 fa0b 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f42:	f7ff fc61 	bl	8002808 <main>
  bx  lr    
 8002f46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f4c:	080033f0 	.word	0x080033f0
  ldr  r0, =_sdata
 8002f50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f54:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002f58:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002f5c:	20000158 	.word	0x20000158

08002f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f60:	e7fe      	b.n	8002f60 <ADC_IRQHandler>
	...

08002f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6e:	4b7d      	ldr	r3, [pc, #500]	; (8003164 <xTaskIncrementTick+0x200>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 80eb 	bne.w	800314e <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f78:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <xTaskIncrementTick+0x204>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f80:	4a79      	ldr	r2, [pc, #484]	; (8003168 <xTaskIncrementTick+0x204>)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11f      	bne.n	8002fcc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f8c:	4b77      	ldr	r3, [pc, #476]	; (800316c <xTaskIncrementTick+0x208>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <xTaskIncrementTick+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	e7fe      	b.n	8002fa8 <xTaskIncrementTick+0x44>
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <xTaskIncrementTick+0x208>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <xTaskIncrementTick+0x20c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a6d      	ldr	r2, [pc, #436]	; (800316c <xTaskIncrementTick+0x208>)
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4a6d      	ldr	r2, [pc, #436]	; (8003170 <xTaskIncrementTick+0x20c>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <xTaskIncrementTick+0x210>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a6b      	ldr	r2, [pc, #428]	; (8003174 <xTaskIncrementTick+0x210>)
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	f000 f93c 	bl	8003244 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <xTaskIncrementTick+0x214>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	f0c0 80a6 	bcc.w	8003124 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <xTaskIncrementTick+0x208>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d104      	bne.n	8002fec <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe2:	4b65      	ldr	r3, [pc, #404]	; (8003178 <xTaskIncrementTick+0x214>)
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	601a      	str	r2, [r3, #0]
                    break;
 8002fea:	e09b      	b.n	8003124 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fec:	4b5f      	ldr	r3, [pc, #380]	; (800316c <xTaskIncrementTick+0x208>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	d203      	bcs.n	800300c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003004:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <xTaskIncrementTick+0x214>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800300a:	e08b      	b.n	8003124 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	3304      	adds	r3, #4
 800302e:	429a      	cmp	r2, r3
 8003030:	d103      	bne.n	800303a <xTaskIncrementTick+0xd6>
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01e      	beq.n	8003090 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	6a12      	ldr	r2, [r2, #32]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	69d2      	ldr	r2, [r2, #28]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	3318      	adds	r3, #24
 8003074:	429a      	cmp	r2, r3
 8003076:	d103      	bne.n	8003080 <xTaskIncrementTick+0x11c>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2200      	movs	r2, #0
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	4b38      	ldr	r3, [pc, #224]	; (800317c <xTaskIncrementTick+0x218>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4313      	orrs	r3, r2
 800309e:	4a37      	ldr	r2, [pc, #220]	; (800317c <xTaskIncrementTick+0x218>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4936      	ldr	r1, [pc, #216]	; (8003180 <xTaskIncrementTick+0x21c>)
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3304      	adds	r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	3204      	adds	r2, #4
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <xTaskIncrementTick+0x21c>)
 80030e6:	441a      	add	r2, r3
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	615a      	str	r2, [r3, #20]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f0:	4923      	ldr	r1, [pc, #140]	; (8003180 <xTaskIncrementTick+0x21c>)
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1c59      	adds	r1, r3, #1
 8003100:	481f      	ldr	r0, [pc, #124]	; (8003180 <xTaskIncrementTick+0x21c>)
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4403      	add	r3, r0
 800310c:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <xTaskIncrementTick+0x220>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	429a      	cmp	r2, r3
 800311a:	f4ff af5d 	bcc.w	8002fd8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800311e:	2301      	movs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003122:	e759      	b.n	8002fd8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003124:	4b17      	ldr	r3, [pc, #92]	; (8003184 <xTaskIncrementTick+0x220>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	4915      	ldr	r1, [pc, #84]	; (8003180 <xTaskIncrementTick+0x21c>)
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d901      	bls.n	8003140 <xTaskIncrementTick+0x1dc>
                {
                    xSwitchRequired = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <xTaskIncrementTick+0x224>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <xTaskIncrementTick+0x1f4>
                {
                    xSwitchRequired = pdTRUE;
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
 800314c:	e004      	b.n	8003158 <xTaskIncrementTick+0x1f4>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <xTaskIncrementTick+0x228>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	4a0d      	ldr	r2, [pc, #52]	; (800318c <xTaskIncrementTick+0x228>)
 8003156:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800315a:	4618      	mov	r0, r3
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	200000b0 	.word	0x200000b0
 8003168:	20000098 	.word	0x20000098
 800316c:	20000090 	.word	0x20000090
 8003170:	20000094 	.word	0x20000094
 8003174:	200000a8 	.word	0x200000a8
 8003178:	200000ac 	.word	0x200000ac
 800317c:	2000009c 	.word	0x2000009c
 8003180:	2000002c 	.word	0x2000002c
 8003184:	20000028 	.word	0x20000028
 8003188:	200000a4 	.word	0x200000a4
 800318c:	200000a0 	.word	0x200000a0

08003190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <vTaskSwitchContext+0xa0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800319e:	4b25      	ldr	r3, [pc, #148]	; (8003234 <vTaskSwitchContext+0xa4>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031a4:	e03e      	b.n	8003224 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <vTaskSwitchContext+0xa4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <vTaskSwitchContext+0xa8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	f1c3 031f 	rsb	r3, r3, #31
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	491e      	ldr	r1, [pc, #120]	; (800323c <vTaskSwitchContext+0xac>)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <vTaskSwitchContext+0x5a>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	e7fe      	b.n	80031e8 <vTaskSwitchContext+0x58>
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4a11      	ldr	r2, [pc, #68]	; (800323c <vTaskSwitchContext+0xac>)
 80031f6:	4413      	add	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3308      	adds	r3, #8
 800320c:	429a      	cmp	r2, r3
 800320e:	d104      	bne.n	800321a <vTaskSwitchContext+0x8a>
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a07      	ldr	r2, [pc, #28]	; (8003240 <vTaskSwitchContext+0xb0>)
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	200000b0 	.word	0x200000b0
 8003234:	200000a4 	.word	0x200000a4
 8003238:	2000009c 	.word	0x2000009c
 800323c:	2000002c 	.word	0x2000002c
 8003240:	20000028 	.word	0x20000028

08003244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <prvResetNextTaskUnblockTime+0x30>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <prvResetNextTaskUnblockTime+0x34>)
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800325a:	e005      	b.n	8003268 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <prvResetNextTaskUnblockTime+0x30>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <prvResetNextTaskUnblockTime+0x34>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000090 	.word	0x20000090
 8003278:	200000ac 	.word	0x200000ac
 800327c:	00000000 	.word	0x00000000

08003280 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <pxCurrentTCBConst2>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	6808      	ldr	r0, [r1, #0]
 8003286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328a:	f380 8809 	msr	PSP, r0
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f380 8811 	msr	BASEPRI, r0
 800329a:	4770      	bx	lr
 800329c:	f3af 8000 	nop.w

080032a0 <pxCurrentTCBConst2>:
 80032a0:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
	...

080032b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032b0:	f3ef 8009 	mrs	r0, PSP
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <pxCurrentTCBConst>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f01e 0f10 	tst.w	lr, #16
 80032c0:	bf08      	it	eq
 80032c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ca:	6010      	str	r0, [r2, #0]
 80032cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032d4:	f380 8811 	msr	BASEPRI, r0
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f7ff ff56 	bl	8003190 <vTaskSwitchContext>
 80032e4:	f04f 0000 	mov.w	r0, #0
 80032e8:	f380 8811 	msr	BASEPRI, r0
 80032ec:	bc09      	pop	{r0, r3}
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	6808      	ldr	r0, [r1, #0]
 80032f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f6:	f01e 0f10 	tst.w	lr, #16
 80032fa:	bf08      	it	eq
 80032fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003300:	f380 8809 	msr	PSP, r0
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	f3af 8000 	nop.w

08003310 <pxCurrentTCBConst>:
 8003310:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop

08003318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003330:	f7ff fe18 	bl	8002f64 <xTaskIncrementTick>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <SysTick_Handler+0x2a>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <SysTick_Handler+0x3c>)
 800333c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4e0d      	ldr	r6, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1ba4      	subs	r4, r4, r6
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2500      	movs	r5, #0
 8003364:	42a5      	cmp	r5, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4e0b      	ldr	r6, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 f820 	bl	80033b0 <_init>
 8003370:	1ba4      	subs	r4, r4, r6
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2500      	movs	r5, #0
 8003376:	42a5      	cmp	r5, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003380:	4798      	blx	r3
 8003382:	3501      	adds	r5, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338a:	4798      	blx	r3
 800338c:	3501      	adds	r5, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	080033e8 	.word	0x080033e8
 8003394:	080033e8 	.word	0x080033e8
 8003398:	080033e8 	.word	0x080033e8
 800339c:	080033ec 	.word	0x080033ec

080033a0 <memset>:
 80033a0:	4402      	add	r2, r0
 80033a2:	4603      	mov	r3, r0
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d100      	bne.n	80033aa <memset+0xa>
 80033a8:	4770      	bx	lr
 80033aa:	f803 1b01 	strb.w	r1, [r3], #1
 80033ae:	e7f9      	b.n	80033a4 <memset+0x4>

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
