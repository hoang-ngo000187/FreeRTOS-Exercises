
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a7c  08007a7c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a84  08007a84  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0001a9dc  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001aa48  2001aa48  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013e38  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003169  00000000  00000000  00033f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001348  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ece  00000000  00000000  000383c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023aac  00000000  00000000  00039296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016244  00000000  00000000  0005cd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7be6  00000000  00000000  00072f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000558c  00000000  00000000  0014ab6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  001500f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078c8 	.word	0x080078c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080078c8 	.word	0x080078c8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20019328 	.word	0x20019328
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fb71 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f853 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8bb 	bl	8000794 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* Enable Cycle counter */
  DWT_CTRL |= (1 << 0);
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <main+0x94>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <main+0x94>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800062a:	481e      	ldr	r0, [pc, #120]	; (80006a4 <main+0x98>)
 800062c:	f004 fa20 	bl	8004a70 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000630:	f004 f848 	bl	80046c4 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, task1_handle);
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <main+0x9c>)
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	491a      	ldr	r1, [pc, #104]	; (80006ac <main+0xa0>)
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <main+0xa4>)
 8000644:	f002 f93e 	bl	80028c4 <xTaskCreate>
 8000648:	6138      	str	r0, [r7, #16]
  configASSERT(status == pdPASS);
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00a      	beq.n	8000666 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, task2_handle);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <main+0xa8>)
 8000670:	22c8      	movs	r2, #200	; 0xc8
 8000672:	4911      	ldr	r1, [pc, #68]	; (80006b8 <main+0xac>)
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xb0>)
 8000676:	f002 f925 	bl	80028c4 <xTaskCreate>
 800067a:	6138      	str	r0, [r7, #16]
  configASSERT(status == pdPASS);
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d00a      	beq.n	8000698 <main+0x8c>
        __asm volatile
 8000682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	607b      	str	r3, [r7, #4]
    }
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <main+0x8a>

  /*Start the FreeRTOS scheduler*/
  vTaskStartScheduler();
 8000698:	f002 faa0 	bl	8002bdc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x90>
 800069e:	bf00      	nop
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	0007a120 	.word	0x0007a120
 80006a8:	080078e0 	.word	0x080078e0
 80006ac:	080078f8 	.word	0x080078f8
 80006b0:	08000a51 	.word	0x08000a51
 80006b4:	08007900 	.word	0x08007900
 80006b8:	08007918 	.word	0x08007918
 80006bc:	08000a8d 	.word	0x08000a8d

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fc6e 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fdb1 	bl	80012ac <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f9cc 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f812 	bl	800179c <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f9b5 	bl	8000aec <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4ba2      	ldr	r3, [pc, #648]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4aa1      	ldr	r2, [pc, #644]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b9f      	ldr	r3, [pc, #636]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b9b      	ldr	r3, [pc, #620]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a9a      	ldr	r2, [pc, #616]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b98      	ldr	r3, [pc, #608]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b94      	ldr	r3, [pc, #592]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a93      	ldr	r2, [pc, #588]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b91      	ldr	r3, [pc, #580]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b8d      	ldr	r3, [pc, #564]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a8c      	ldr	r2, [pc, #560]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b8a      	ldr	r3, [pc, #552]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b86      	ldr	r3, [pc, #536]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a85      	ldr	r2, [pc, #532]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b83      	ldr	r3, [pc, #524]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b7f      	ldr	r3, [pc, #508]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a7e      	ldr	r2, [pc, #504]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b7c      	ldr	r3, [pc, #496]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4879      	ldr	r0, [pc, #484]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 8000858:	f000 fd0e 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4877      	ldr	r0, [pc, #476]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fd09 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	; 0xf010
 800086c:	4875      	ldr	r0, [pc, #468]	; (8000a44 <MX_GPIO_Init+0x2b0>)
 800086e:	f000 fd03 	bl	8001278 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486c      	ldr	r0, [pc, #432]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 800088a:	f000 fb59 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4866      	ldr	r0, [pc, #408]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 80008a6:	f000 fb4b 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	485e      	ldr	r0, [pc, #376]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 80008c6:	f000 fb3b 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	485a      	ldr	r0, [pc, #360]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 fb2e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e4:	2310      	movs	r3, #16
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f4:	2306      	movs	r3, #6
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4852      	ldr	r0, [pc, #328]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fb1e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000904:	23e0      	movs	r3, #224	; 0xe0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000914:	2305      	movs	r3, #5
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	484a      	ldr	r0, [pc, #296]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 8000920:	f000 fb0e 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000924:	2304      	movs	r3, #4
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4845      	ldr	r0, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000938:	f000 fb02 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483c      	ldr	r0, [pc, #240]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 800095a:	f000 faf1 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000962:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x2b0>)
 8000978:	f000 fae2 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800097c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098e:	2306      	movs	r3, #6
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4829      	ldr	r0, [pc, #164]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 800099a:	f000 fad1 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80009b4:	f000 fac4 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ca:	230a      	movs	r3, #10
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80009d6:	f000 fab3 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009da:	2320      	movs	r3, #32
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4815      	ldr	r0, [pc, #84]	; (8000a44 <MX_GPIO_Init+0x2b0>)
 80009ee:	f000 faa7 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a04:	2304      	movs	r3, #4
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000a10:	f000 fa96 	bl	8000f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 8000a2a:	f000 fa89 	bl	8000f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	; 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400

08000a50 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char *)parameters);
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a58:	f107 000c 	add.w	r0, r7, #12
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <task1_handler+0x34>)
 8000a60:	2164      	movs	r1, #100	; 0x64
 8000a62:	f006 fa61 	bl	8006f28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f006 f9be 	bl	8006dec <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <task1_handler+0x38>)
 8000a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	f3bf 8f4f 	dsb	sy
 8000a7c:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a80:	e7ea      	b.n	8000a58 <task1_handler+0x8>
 8000a82:	bf00      	nop
 8000a84:	08007920 	.word	0x08007920
 8000a88:	e000ed04 	.word	0xe000ed04

08000a8c <task2_handler>:
	}
}

static void task2_handler(void *parameters)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09c      	sub	sp, #112	; 0x70
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		//printf("%s\n", (char *)parameters);
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a94:	f107 000c 	add.w	r0, r7, #12
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <task2_handler+0x34>)
 8000a9c:	2164      	movs	r1, #100	; 0x64
 8000a9e:	f006 fa43 	bl	8006f28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f006 f9a0 	bl	8006dec <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <task2_handler+0x38>)
 8000aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	f3bf 8f4f 	dsb	sy
 8000ab8:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000abc:	e7ea      	b.n	8000a94 <task2_handler+0x8>
 8000abe:	bf00      	nop
 8000ac0:	08007920 	.word	0x08007920
 8000ac4:	e000ed04 	.word	0xe000ed04

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 f92f 	bl	8000d3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40001000 	.word	0x40001000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b36:	f003 fa0f 	bl	8003f58 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <HAL_InitTick+0xe4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a32      	ldr	r2, [pc, #200]	; (8000c2c <HAL_InitTick+0xe4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f818 	bl	8001bb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f000 fffd 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000b92:	6378      	str	r0, [r7, #52]	; 0x34
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b96:	f000 fff9 	bl	8001b8c <HAL_RCC_GetPCLK1Freq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_InitTick+0xe8>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	3b01      	subs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_InitTick+0xec>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <HAL_InitTick+0xf0>)
 8000bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_InitTick+0xec>)
 8000bb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_InitTick+0xec>)
 8000bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_InitTick+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <HAL_InitTick+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd4:	4817      	ldr	r0, [pc, #92]	; (8000c34 <HAL_InitTick+0xec>)
 8000bd6:	f001 f81f 	bl	8001c18 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <HAL_InitTick+0xec>)
 8000bea:	f001 f86f 	bl	8001ccc <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bfc:	2036      	movs	r0, #54	; 0x36
 8000bfe:	f000 f991 	bl	8000f24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d808      	bhi.n	8000c1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2036      	movs	r0, #54	; 0x36
 8000c0e:	f000 f96d 	bl	8000eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_InitTick+0xf4>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e002      	b.n	8000c20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	; 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000088 	.word	0x20000088
 8000c38:	40001000 	.word	0x40001000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM6_DAC_IRQHandler+0x10>)
 8000c72:	f001 f89b 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000088 	.word	0x20000088

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f006 f975 	bl	8006fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc99 	bl	800060c <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ce8:	08007a8c 	.word	0x08007a8c
  ldr r2, =_sbss
 8000cec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cf0:	2001aa48 	.word	0x2001aa48

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f8d8 	bl	8000ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ff0e 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fee4 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200000d0 	.word	0x200000d0

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200000d0 	.word	0x200000d0

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	; (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	; (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	; (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	; 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff4c 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efe:	f7ff ff61 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	6978      	ldr	r0, [r7, #20]
 8000f0a:	f7ff ffb1 	bl	8000e70 <NVIC_EncodePriority>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff80 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff54 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e16b      	b.n	8001234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 815a 	bne.w	800122e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d130      	bne.n	8000ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	f003 0201 	and.w	r2, r3, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d017      	beq.n	8001030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0303 	and.w	r3, r3, #3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d123      	bne.n	8001084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	08da      	lsrs	r2, r3, #3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3208      	adds	r2, #8
 8001044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	08da      	lsrs	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3208      	adds	r2, #8
 800107e:	69b9      	ldr	r1, [r7, #24]
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0203 	and.w	r2, r3, #3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80b4 	beq.w	800122e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	4a5f      	ldr	r2, [pc, #380]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d4:	6453      	str	r3, [r2, #68]	; 0x44
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_GPIO_Init+0x30c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e2:	4a5b      	ldr	r2, [pc, #364]	; (8001250 <HAL_GPIO_Init+0x310>)
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a52      	ldr	r2, [pc, #328]	; (8001254 <HAL_GPIO_Init+0x314>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d02b      	beq.n	8001166 <HAL_GPIO_Init+0x226>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a51      	ldr	r2, [pc, #324]	; (8001258 <HAL_GPIO_Init+0x318>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d025      	beq.n	8001162 <HAL_GPIO_Init+0x222>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <HAL_GPIO_Init+0x31c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d01f      	beq.n	800115e <HAL_GPIO_Init+0x21e>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <HAL_GPIO_Init+0x320>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x21a>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_GPIO_Init+0x324>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x216>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4d      	ldr	r2, [pc, #308]	; (8001268 <HAL_GPIO_Init+0x328>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x212>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_GPIO_Init+0x32c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x20e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4b      	ldr	r2, [pc, #300]	; (8001270 <HAL_GPIO_Init+0x330>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x20a>
 8001146:	2307      	movs	r3, #7
 8001148:	e00e      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114a:	2308      	movs	r3, #8
 800114c:	e00c      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800114e:	2306      	movs	r3, #6
 8001150:	e00a      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001152:	2305      	movs	r3, #5
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001156:	2304      	movs	r3, #4
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x228>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x228>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x310>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011aa:	4a32      	ldr	r2, [pc, #200]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d4:	4a27      	ldr	r2, [pc, #156]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <HAL_GPIO_Init+0x334>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fe:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_GPIO_Init+0x334>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <HAL_GPIO_Init+0x334>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f ae90 	bls.w	8000f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40021400 	.word	0x40021400
 800126c:	40021800 	.word	0x40021800
 8001270:	40021c00 	.word	0x40021c00
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e267      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d075      	beq.n	80013b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	4b88      	ldr	r3, [pc, #544]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d00c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b85      	ldr	r3, [pc, #532]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b82      	ldr	r3, [pc, #520]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d157      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e242      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b76      	ldr	r3, [pc, #472]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a75      	ldr	r2, [pc, #468]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b70      	ldr	r3, [pc, #448]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6f      	ldr	r2, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6c      	ldr	r2, [pc, #432]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001344:	4b69      	ldr	r3, [pc, #420]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a68      	ldr	r2, [pc, #416]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b66      	ldr	r3, [pc, #408]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a65      	ldr	r2, [pc, #404]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fcfe 	bl	8000d64 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fcfa 	bl	8000d64 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e207      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xc0>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcea 	bl	8000d64 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fce6 	bl	8000d64 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1f3      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b44      	ldr	r3, [pc, #272]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b41      	ldr	r3, [pc, #260]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c7      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_OscConfig+0x244>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc9f 	bl	8000d64 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fc9b 	bl	8000d64 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a8      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4925      	ldr	r1, [pc, #148]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_RCC_OscConfig+0x244>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc7e 	bl	8000d64 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc7a 	bl	8000d64 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e187      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d036      	beq.n	8001504 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d016      	beq.n	80014cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fc5e 	bl	8000d64 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc5a 	bl	8000d64 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e167      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_OscConfig+0x240>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x200>
 80014ca:	e01b      	b.n	8001504 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_OscConfig+0x248>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc47 	bl	8000d64 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e00e      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fc43 	bl	8000d64 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d907      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e150      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	42470000 	.word	0x42470000
 80014f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1ea      	bne.n	80014da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8097 	beq.w	8001640 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b81      	ldr	r3, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	4b7d      	ldr	r3, [pc, #500]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a7c      	ldr	r2, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b77      	ldr	r3, [pc, #476]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b74      	ldr	r3, [pc, #464]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a73      	ldr	r2, [pc, #460]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fc03 	bl	8000d64 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fbff 	bl	8000d64 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e10c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b6a      	ldr	r3, [pc, #424]	; (8001720 <HAL_RCC_OscConfig+0x474>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x2ea>
 8001588:	4b64      	ldr	r3, [pc, #400]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	4a63      	ldr	r2, [pc, #396]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6713      	str	r3, [r2, #112]	; 0x70
 8001594:	e01c      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x30c>
 800159e:	4b5f      	ldr	r3, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a5e      	ldr	r2, [pc, #376]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a5b      	ldr	r2, [pc, #364]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0x324>
 80015b8:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a57      	ldr	r2, [pc, #348]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a54      	ldr	r2, [pc, #336]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0304 	bic.w	r3, r3, #4
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d015      	beq.n	8001604 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff fbc4 	bl	8000d64 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fbc0 	bl	8000d64 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e0cb      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0ee      	beq.n	80015e0 <HAL_RCC_OscConfig+0x334>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff fbae 	bl	8000d64 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800160a:	e00a      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160c:	f7ff fbaa 	bl	8000d64 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e0b5      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ee      	bne.n	800160c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a38      	ldr	r2, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800163a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a1 	beq.w	800178c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_RCC_OscConfig+0x470>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d05c      	beq.n	8001710 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d141      	bne.n	80016e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_RCC_OscConfig+0x478>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fb7e 	bl	8000d64 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff fb7a 	bl	8000d64 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e087      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001698:	019b      	lsls	r3, r3, #6
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	085b      	lsrs	r3, r3, #1
 80016a2:	3b01      	subs	r3, #1
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	491b      	ldr	r1, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x478>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ba:	f7ff fb53 	bl	8000d64 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff fb4f 	bl	8000d64 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e05c      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_RCC_OscConfig+0x470>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x416>
 80016e0:	e054      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <HAL_RCC_OscConfig+0x478>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb3c 	bl	8000d64 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb38 	bl	8000d64 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e045      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_RCC_OscConfig+0x470>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x444>
 800170e:	e03d      	b.n	800178c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e038      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000
 8001724:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d028      	beq.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d121      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d11a      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001760:	4293      	cmp	r3, r2
 8001762:	d111      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	3b01      	subs	r3, #1
 8001772:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa6a 	bl	8000d64 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa66 	bl	8000d64 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f900 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	08007a08 	.word	0x08007a08
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800196c:	b094      	sub	sp, #80	; 0x50
 800196e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
 8001974:	2300      	movs	r3, #0
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001978:	2300      	movs	r3, #0
 800197a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d00d      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 80e1 	bhi.w	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800199a:	e0db      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b73      	ldr	r3, [pc, #460]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019a0:	e0db      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x208>)
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019a6:	e0d8      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b6f      	ldr	r3, [pc, #444]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b6a      	ldr	r3, [pc, #424]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	2200      	movs	r2, #0
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80019c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
 80019d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019da:	4622      	mov	r2, r4
 80019dc:	462b      	mov	r3, r5
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	0159      	lsls	r1, r3, #5
 80019e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ec:	0150      	lsls	r0, r2, #5
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4621      	mov	r1, r4
 80019f4:	1a51      	subs	r1, r2, r1
 80019f6:	6139      	str	r1, [r7, #16]
 80019f8:	4629      	mov	r1, r5
 80019fa:	eb63 0301 	sbc.w	r3, r3, r1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	4651      	mov	r1, sl
 8001a12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a16:	4651      	mov	r1, sl
 8001a18:	018a      	lsls	r2, r1, #6
 8001a1a:	4651      	mov	r1, sl
 8001a1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a20:	4659      	mov	r1, fp
 8001a22:	eb63 0901 	sbc.w	r9, r3, r1
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a3a:	4690      	mov	r8, r2
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	eb18 0303 	adds.w	r3, r8, r3
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	462b      	mov	r3, r5
 8001a48:	eb49 0303 	adc.w	r3, r9, r3
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	024b      	lsls	r3, r1, #9
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a64:	4621      	mov	r1, r4
 8001a66:	024a      	lsls	r2, r1, #9
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	2200      	movs	r2, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a78:	f7fe fc4a 	bl	8000310 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a84:	e058      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4611      	mov	r1, r2
 8001a92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	0159      	lsls	r1, r3, #5
 8001aae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab2:	0150      	lsls	r0, r2, #5
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4641      	mov	r1, r8
 8001aba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001abe:	4649      	mov	r1, r9
 8001ac0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ad0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ad4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ad8:	ebb2 040a 	subs.w	r4, r2, sl
 8001adc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00eb      	lsls	r3, r5, #3
 8001aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aee:	00e2      	lsls	r2, r4, #3
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	4643      	mov	r3, r8
 8001af6:	18e3      	adds	r3, r4, r3
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	464b      	mov	r3, r9
 8001afc:	eb45 0303 	adc.w	r3, r5, r3
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b0e:	4629      	mov	r1, r5
 8001b10:	028b      	lsls	r3, r1, #10
 8001b12:	4621      	mov	r1, r4
 8001b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b18:	4621      	mov	r1, r4
 8001b1a:	028a      	lsls	r2, r1, #10
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b22:	2200      	movs	r2, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	61fa      	str	r2, [r7, #28]
 8001b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b2c:	f7fe fbf0 	bl	8000310 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3750      	adds	r7, #80	; 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	0a9b      	lsrs	r3, r3, #10
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	4903      	ldr	r1, [pc, #12]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	08007a18 	.word	0x08007a18

08001bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	08db      	lsrs	r3, r3, #3
 8001bee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_RCC_GetClockConfig+0x60>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	601a      	str	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40023c00 	.word	0x40023c00

08001c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e041      	b.n	8001cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f839 	bl	8001cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 f9d8 	bl	800200c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e04e      	b.n	8001d82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d022      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0e:	d01d      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d018      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00e      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d009      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d004      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d010      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6e:	e007      	b.n	8001d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800
 8001d9c:	40000c00 	.word	0x40000c00
 8001da0:	40010400 	.word	0x40010400
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40001800 	.word	0x40001800

08001dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d11b      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0202 	mvn.w	r2, #2
 8001dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8ee 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f8e0 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8f1 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d122      	bne.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11b      	bne.n	8001e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0204 	mvn.w	r2, #4
 8001e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f8c4 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e48:	e005      	b.n	8001e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8b6 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f8c7 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d122      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d11b      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0208 	mvn.w	r2, #8
 8001e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2204      	movs	r2, #4
 8001e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f89a 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f88c 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f89d 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b10      	cmp	r3, #16
 8001ebc:	d122      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d11b      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0210 	mvn.w	r2, #16
 8001ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f870 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001ef0:	e005      	b.n	8001efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f862 	bl	8001fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f873 	bl	8001fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0201 	mvn.w	r2, #1
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fdcc 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b80      	cmp	r3, #128	; 0x80
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f48:	2b80      	cmp	r3, #128	; 0x80
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f902 	bl	8002160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f838 	bl	8001ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0220 	mvn.w	r2, #32
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8cc 	bl	800214c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <TIM_Base_SetConfig+0x114>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202a:	d00f      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <TIM_Base_SetConfig+0x118>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d00b      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <TIM_Base_SetConfig+0x11c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d007      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3b      	ldr	r2, [pc, #236]	; (800212c <TIM_Base_SetConfig+0x120>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d003      	beq.n	800204c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <TIM_Base_SetConfig+0x124>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d108      	bne.n	800205e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <TIM_Base_SetConfig+0x114>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02b      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d027      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <TIM_Base_SetConfig+0x118>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d023      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <TIM_Base_SetConfig+0x11c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2a      	ldr	r2, [pc, #168]	; (800212c <TIM_Base_SetConfig+0x120>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01b      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <TIM_Base_SetConfig+0x124>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d017      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a28      	ldr	r2, [pc, #160]	; (8002134 <TIM_Base_SetConfig+0x128>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a27      	ldr	r2, [pc, #156]	; (8002138 <TIM_Base_SetConfig+0x12c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00f      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <TIM_Base_SetConfig+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00b      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a25      	ldr	r2, [pc, #148]	; (8002140 <TIM_Base_SetConfig+0x134>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a24      	ldr	r2, [pc, #144]	; (8002144 <TIM_Base_SetConfig+0x138>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a23      	ldr	r2, [pc, #140]	; (8002148 <TIM_Base_SetConfig+0x13c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d108      	bne.n	80020d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <TIM_Base_SetConfig+0x114>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0xf8>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <TIM_Base_SetConfig+0x124>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d103      	bne.n	800210c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	615a      	str	r2, [r3, #20]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40010400 	.word	0x40010400
 8002134:	40014000 	.word	0x40014000
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800
 8002140:	40001800 	.word	0x40001800
 8002144:	40001c00 	.word	0x40001c00
 8002148:	40002000 	.word	0x40002000

0800214c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0208 	add.w	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 0208 	add.w	r2, r3, #8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0208 	add.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d103      	bne.n	80021ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e00c      	b.n	8002208 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3308      	adds	r3, #8
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e002      	b.n	80021fc <vListInsert+0x2e>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d2f6      	bcs.n	80021f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6892      	ldr	r2, [r2, #8]
 8002256:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6852      	ldr	r2, [r2, #4]
 8002260:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d103      	bne.n	8002274 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800229e:	2301      	movs	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <xQueueGenericReset+0x2e>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60fb      	str	r3, [r7, #12]
    }
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d052      	beq.n	800236e <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d04e      	beq.n	800236e <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	2100      	movs	r1, #0
 80022da:	fba3 2302 	umull	r2, r3, r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d000      	beq.n	80022e4 <xQueueGenericReset+0x50>
 80022e2:	2101      	movs	r1, #1
 80022e4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d141      	bne.n	800236e <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 80022ea:	f001 feb3 	bl	8004054 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	6939      	ldr	r1, [r7, #16]
 80022f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022fa:	fb01 f303 	mul.w	r3, r1, r3
 80022fe:	441a      	add	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2200      	movs	r2, #0
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231a:	3b01      	subs	r3, #1
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	441a      	add	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	22ff      	movs	r2, #255	; 0xff
 800232e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	22ff      	movs	r2, #255	; 0xff
 8002336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d109      	bne.n	8002354 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00f      	beq.n	8002368 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	3310      	adds	r3, #16
 800234c:	4618      	mov	r0, r3
 800234e:	f000 ff97 	bl	8003280 <xTaskRemoveFromEventList>
 8002352:	e009      	b.n	8002368 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	3310      	adds	r3, #16
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff0b 	bl	8002174 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3324      	adds	r3, #36	; 0x24
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff06 	bl	8002174 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002368:	f001 fea4 	bl	80040b4 <vPortExitCritical>
 800236c:	e001      	b.n	8002372 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <xQueueGenericReset+0xfa>
        __asm volatile
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	60bb      	str	r3, [r7, #8]
    }
 800238a:	bf00      	nop
 800238c:	e7fe      	b.n	800238c <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800238e:	697b      	ldr	r3, [r7, #20]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	4613      	mov	r3, r2
 80023a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d02e      	beq.n	800240e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023b0:	2100      	movs	r1, #0
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d000      	beq.n	80023c0 <xQueueGenericCreate+0x28>
 80023be:	2101      	movs	r1, #1
 80023c0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d123      	bne.n	800240e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023ce:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023d2:	d81c      	bhi.n	800240e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3350      	adds	r3, #80	; 0x50
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 ff62 	bl	80042ac <pvPortMalloc>
 80023e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01c      	beq.n	800242a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3350      	adds	r3, #80	; 0x50
 80023f8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023fa:	79fa      	ldrb	r2, [r7, #7]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 f814 	bl	8002434 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800240c:	e00d      	b.n	800242a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <xQueueGenericCreate+0x92>
        __asm volatile
 8002414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	613b      	str	r3, [r7, #16]
    }
 8002426:	bf00      	nop
 8002428:	e7fe      	b.n	8002428 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800242a:	69fb      	ldr	r3, [r7, #28]
    }
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	e002      	b.n	8002456 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002462:	2101      	movs	r1, #1
 8002464:	69b8      	ldr	r0, [r7, #24]
 8002466:	f7ff ff15 	bl	8002294 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	68f9      	ldr	r1, [r7, #12]
 8002478:	2073      	movs	r0, #115	; 0x73
 800247a:	f003 fe3d 	bl	80060f8 <SEGGER_SYSVIEW_RecordU32x3>
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b08f      	sub	sp, #60	; 0x3c
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <xQueueReceive+0x30>
        __asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	623b      	str	r3, [r7, #32]
    }
 80024b4:	bf00      	nop
 80024b6:	e7fe      	b.n	80024b6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <xQueueReceive+0x3e>
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <xQueueReceive+0x42>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <xQueueReceive+0x44>
 80024ca:	2300      	movs	r3, #0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <xQueueReceive+0x5e>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	61fb      	str	r3, [r7, #28]
    }
 80024e2:	bf00      	nop
 80024e4:	e7fe      	b.n	80024e4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e6:	f001 f8d7 	bl	8003698 <xTaskGetSchedulerState>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <xQueueReceive+0x6e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <xQueueReceive+0x72>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueReceive+0x74>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueReceive+0x8e>
        __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61bb      	str	r3, [r7, #24]
    }
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002516:	f001 fd9d 	bl	8004054 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	2b00      	cmp	r3, #0
 8002524:	d024      	beq.n	8002570 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800252a:	f000 f8b3 	bl	8002694 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	4618      	mov	r0, r3
 8002532:	f004 fb6f 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 8002536:	4604      	mov	r4, r0
 8002538:	2000      	movs	r0, #0
 800253a:	f004 fb6b 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2101      	movs	r1, #1
 8002544:	9100      	str	r1, [sp, #0]
 8002546:	4621      	mov	r1, r4
 8002548:	205c      	movs	r0, #92	; 0x5c
 800254a:	f003 fe4b 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1e5a      	subs	r2, r3, #1
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	3310      	adds	r3, #16
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fe8c 	bl	8003280 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002568:	f001 fda4 	bl	80040b4 <vPortExitCritical>
                return pdPASS;
 800256c:	2301      	movs	r3, #1
 800256e:	e08a      	b.n	8002686 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d113      	bne.n	800259e <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002576:	f001 fd9d 	bl	80040b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fb49 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 8002582:	4604      	mov	r4, r0
 8002584:	2000      	movs	r0, #0
 8002586:	f004 fb45 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 800258a:	4602      	mov	r2, r0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2101      	movs	r1, #1
 8002590:	9100      	str	r1, [sp, #0]
 8002592:	4621      	mov	r1, r4
 8002594:	205c      	movs	r0, #92	; 0x5c
 8002596:	f003 fe25 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800259a:	2300      	movs	r3, #0
 800259c:	e073      	b.n	8002686 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025a4:	f107 0310 	add.w	r3, r7, #16
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 ff41 	bl	8003430 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025b2:	f001 fd7f 	bl	80040b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025b6:	f000 fb73 	bl	8002ca0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025ba:	f001 fd4b 	bl	8004054 <vPortEnterCritical>
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025c4:	b25b      	sxtb	r3, r3
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d103      	bne.n	80025d4 <xQueueReceive+0x14c>
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d103      	bne.n	80025ea <xQueueReceive+0x162>
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ea:	f001 fd63 	bl	80040b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ee:	1d3a      	adds	r2, r7, #4
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 ff30 	bl	800345c <xTaskCheckForTimeOut>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d124      	bne.n	800264c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002604:	f000 f8be 	bl	8002784 <prvIsQueueEmpty>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	3324      	adds	r3, #36	; 0x24
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fdc6 	bl	80031a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800261c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800261e:	f000 f85f 	bl	80026e0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002622:	f000 fb4b 	bl	8002cbc <xTaskResumeAll>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f47f af74 	bne.w	8002516 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <xQueueReceive+0x208>)
 8002630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	e76a      	b.n	8002516 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002642:	f000 f84d 	bl	80026e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002646:	f000 fb39 	bl	8002cbc <xTaskResumeAll>
 800264a:	e764      	b.n	8002516 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800264c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264e:	f000 f847 	bl	80026e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002652:	f000 fb33 	bl	8002cbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002658:	f000 f894 	bl	8002784 <prvIsQueueEmpty>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f43f af59 	beq.w	8002516 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	4618      	mov	r0, r3
 8002668:	f004 fad4 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 800266c:	4604      	mov	r4, r0
 800266e:	2000      	movs	r0, #0
 8002670:	f004 fad0 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2101      	movs	r1, #1
 800267a:	9100      	str	r1, [sp, #0]
 800267c:	4621      	mov	r1, r4
 800267e:	205c      	movs	r0, #92	; 0x5c
 8002680:	f003 fdb0 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002684:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002686:	4618      	mov	r0, r3
 8002688:	3734      	adds	r7, #52	; 0x34
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d018      	beq.n	80026d8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	441a      	add	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d303      	bcc.n	80026c8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	461a      	mov	r2, r3
 80026d2:	6838      	ldr	r0, [r7, #0]
 80026d4:	f004 fc9a 	bl	800700c <memcpy>
    }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80026e8:	f001 fcb4 	bl	8004054 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026f2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80026f4:	e011      	b.n	800271a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3324      	adds	r3, #36	; 0x24
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fdbc 	bl	8003280 <xTaskRemoveFromEventList>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800270e:	f000 ff0b 	bl	8003528 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3b01      	subs	r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	dce9      	bgt.n	80026f6 <prvUnlockQueue+0x16>
 8002722:	e000      	b.n	8002726 <prvUnlockQueue+0x46>
                        break;
 8002724:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	22ff      	movs	r2, #255	; 0xff
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800272e:	f001 fcc1 	bl	80040b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002732:	f001 fc8f 	bl	8004054 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800273c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800273e:	e011      	b.n	8002764 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d012      	beq.n	800276e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3310      	adds	r3, #16
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fd97 	bl	8003280 <xTaskRemoveFromEventList>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002758:	f000 fee6 	bl	8003528 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	3b01      	subs	r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002768:	2b00      	cmp	r3, #0
 800276a:	dce9      	bgt.n	8002740 <prvUnlockQueue+0x60>
 800276c:	e000      	b.n	8002770 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800276e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	22ff      	movs	r2, #255	; 0xff
 8002774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002778:	f001 fc9c 	bl	80040b4 <vPortExitCritical>
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800278c:	f001 fc62 	bl	8004054 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e001      	b.n	80027a2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027a2:	f001 fc87 	bl	80040b4 <vPortExitCritical>

    return xReturn;
 80027a6:	68fb      	ldr	r3, [r7, #12]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <vQueueAddToRegistry+0x26>
        __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	60fb      	str	r3, [r7, #12]
    }
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d024      	beq.n	800282a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	e01e      	b.n	8002824 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80027e6:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <vQueueAddToRegistry+0xa8>)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d105      	bne.n	8002802 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <vQueueAddToRegistry+0xa8>)
 80027fc:	4413      	add	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
                    break;
 8002800:	e013      	b.n	800282a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10a      	bne.n	800281e <vQueueAddToRegistry+0x6e>
 8002808:	4a13      	ldr	r2, [pc, #76]	; (8002858 <vQueueAddToRegistry+0xa8>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <vQueueAddToRegistry+0xa8>)
 800281a:	4413      	add	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b07      	cmp	r3, #7
 8002828:	d9dd      	bls.n	80027e6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f9e8 	bl	8006c14 <SEGGER_SYSVIEW_ShrinkId>
 8002844:	4601      	mov	r1, r0
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	2071      	movs	r0, #113	; 0x71
 800284c:	f003 fbfa 	bl	8006044 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200000d4 	.word	0x200000d4

0800285c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800286c:	f001 fbf2 	bl	8004054 <vPortEnterCritical>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002876:	b25b      	sxtb	r3, r3
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d103      	bne.n	8002886 <vQueueWaitForMessageRestricted+0x2a>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800288c:	b25b      	sxtb	r3, r3
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d103      	bne.n	800289c <vQueueWaitForMessageRestricted+0x40>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800289c:	f001 fc0a 	bl	80040b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3324      	adds	r3, #36	; 0x24
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fc9d 	bl	80031f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff12 	bl	80026e0 <prvUnlockQueue>
    }
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fce7 	bl	80042ac <pvPortMalloc>
 80028de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00e      	beq.n	8002904 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028e6:	2058      	movs	r0, #88	; 0x58
 80028e8:	f001 fce0 	bl	80042ac <pvPortMalloc>
 80028ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
 80028fa:	e005      	b.n	8002908 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80028fc:	6978      	ldr	r0, [r7, #20]
 80028fe:	f001 fdb5 	bl	800446c <vPortFree>
 8002902:	e001      	b.n	8002908 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d013      	beq.n	8002936 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800290e:	88fa      	ldrh	r2, [r7, #6]
 8002910:	2300      	movs	r3, #0
 8002912:	9303      	str	r3, [sp, #12]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	9302      	str	r3, [sp, #8]
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f80e 	bl	8002946 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800292a:	69f8      	ldr	r0, [r7, #28]
 800292c:	f000 f8b0 	bl	8002a90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002930:	2301      	movs	r3, #1
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e002      	b.n	800293c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800293c:	69bb      	ldr	r3, [r7, #24]
    }
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b088      	sub	sp, #32
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	461a      	mov	r2, r3
 800295e:	21a5      	movs	r1, #165	; 0xa5
 8002960:	f004 fb26 	bl	8006fb0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800296e:	3b01      	subs	r3, #1
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f023 0307 	bic.w	r3, r3, #7
 800297c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	617b      	str	r3, [r7, #20]
    }
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01f      	beq.n	80029e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	e012      	b.n	80029d0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	4413      	add	r3, r2
 80029b0:	7819      	ldrb	r1, [r3, #0]
 80029b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	3334      	adds	r3, #52	; 0x34
 80029ba:	460a      	mov	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b09      	cmp	r3, #9
 80029d4:	d9e9      	bls.n	80029aa <prvInitialiseNewTask+0x64>
 80029d6:	e000      	b.n	80029da <prvInitialiseNewTask+0x94>
            {
                break;
 80029d8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029e2:	e003      	b.n	80029ec <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d90a      	bls.n	8002a08 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	613b      	str	r3, [r7, #16]
    }
 8002a04:	bf00      	nop
 8002a06:	e7fe      	b.n	8002a06 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d901      	bls.n	8002a12 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a0e:	2304      	movs	r3, #4
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	2200      	movs	r2, #0
 8002a22:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a26:	3304      	adds	r3, #4
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fbc3 	bl	80021b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	3318      	adds	r3, #24
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fbbe 	bl	80021b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	f1c3 0205 	rsb	r2, r3, #5
 8002a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a46:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	3350      	adds	r3, #80	; 0x50
 8002a52:	2204      	movs	r2, #4
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 faaa 	bl	8006fb0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	3354      	adds	r3, #84	; 0x54
 8002a60:	2201      	movs	r2, #1
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f004 faa3 	bl	8006fb0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	69b8      	ldr	r0, [r7, #24]
 8002a70:	f001 f940 	bl	8003cf4 <pxPortInitialiseStack>
 8002a74:	4602      	mov	r2, r0
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a84:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a86:	bf00      	nop
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a98:	f001 fadc 	bl	8004054 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <prvAddNewTaskToReadyList+0x134>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a48      	ldr	r2, [pc, #288]	; (8002bc4 <prvAddNewTaskToReadyList+0x134>)
 8002aa4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002aa6:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <prvAddNewTaskToReadyList+0x138>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002aae:	4a46      	ldr	r2, [pc, #280]	; (8002bc8 <prvAddNewTaskToReadyList+0x138>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <prvAddNewTaskToReadyList+0x134>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d110      	bne.n	8002ade <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002abc:	f000 fd52 	bl	8003564 <prvInitialiseTaskLists>
 8002ac0:	e00d      	b.n	8002ade <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <prvAddNewTaskToReadyList+0x13c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <prvAddNewTaskToReadyList+0x138>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d802      	bhi.n	8002ade <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ad8:	4a3b      	ldr	r2, [pc, #236]	; (8002bc8 <prvAddNewTaskToReadyList+0x138>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <prvAddNewTaskToReadyList+0x140>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <prvAddNewTaskToReadyList+0x140>)
 8002ae6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ae8:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <prvAddNewTaskToReadyList+0x140>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <prvAddNewTaskToReadyList+0x94>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 ff65 	bl	80069c8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	461d      	mov	r5, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461c      	mov	r4, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	1ae3      	subs	r3, r4, r3
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	462b      	mov	r3, r5
 8002b20:	f001 fe72 	bl	8004808 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 ffd2 	bl	8006ad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <prvAddNewTaskToReadyList+0x144>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <prvAddNewTaskToReadyList+0x144>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b42:	4925      	ldr	r1, [pc, #148]	; (8002bd8 <prvAddNewTaskToReadyList+0x148>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3304      	adds	r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	3204      	adds	r2, #4
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4a15      	ldr	r2, [pc, #84]	; (8002bd8 <prvAddNewTaskToReadyList+0x148>)
 8002b82:	441a      	add	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	4912      	ldr	r1, [pc, #72]	; (8002bd8 <prvAddNewTaskToReadyList+0x148>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	480e      	ldr	r0, [pc, #56]	; (8002bd8 <prvAddNewTaskToReadyList+0x148>)
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4403      	add	r3, r0
 8002ba8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002baa:	f001 fa83 	bl	80040b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <prvAddNewTaskToReadyList+0x13c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <prvAddNewTaskToReadyList+0x138>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200001ec 	.word	0x200001ec
 8002bc8:	20000114 	.word	0x20000114
 8002bcc:	200001f8 	.word	0x200001f8
 8002bd0:	20000208 	.word	0x20000208
 8002bd4:	200001f4 	.word	0x200001f4
 8002bd8:	20000118 	.word	0x20000118

08002bdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002be2:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <vTaskStartScheduler+0xa4>)
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	2300      	movs	r3, #0
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	2282      	movs	r2, #130	; 0x82
 8002bee:	4925      	ldr	r1, [pc, #148]	; (8002c84 <vTaskStartScheduler+0xa8>)
 8002bf0:	4825      	ldr	r0, [pc, #148]	; (8002c88 <vTaskStartScheduler+0xac>)
 8002bf2:	f7ff fe67 	bl	80028c4 <xTaskCreate>
 8002bf6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002bfe:	f000 fdf5 	bl	80037ec <xTimerCreateTimerTask>
 8002c02:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d124      	bne.n	8002c54 <vTaskStartScheduler+0x78>
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	60bb      	str	r3, [r7, #8]
    }
 8002c1c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <vTaskStartScheduler+0xb0>)
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <vTaskStartScheduler+0xb4>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <vTaskStartScheduler+0xb8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c32:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <vTaskStartScheduler+0xbc>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <vTaskStartScheduler+0xa4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d102      	bne.n	8002c44 <vTaskStartScheduler+0x68>
 8002c3e:	f003 fea7 	bl	8006990 <SEGGER_SYSVIEW_OnIdle>
 8002c42:	e004      	b.n	8002c4e <vTaskStartScheduler+0x72>
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <vTaskStartScheduler+0xbc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f003 feff 	bl	8006a4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002c4e:	f001 f8e1 	bl	8003e14 <xPortStartScheduler>
 8002c52:	e00e      	b.n	8002c72 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d10a      	bne.n	8002c72 <vTaskStartScheduler+0x96>
        __asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	607b      	str	r3, [r7, #4]
    }
 8002c6e:	bf00      	nop
 8002c70:	e7fe      	b.n	8002c70 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <vTaskStartScheduler+0xc0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000210 	.word	0x20000210
 8002c84:	08007924 	.word	0x08007924
 8002c88:	08003541 	.word	0x08003541
 8002c8c:	2000020c 	.word	0x2000020c
 8002c90:	200001f8 	.word	0x200001f8
 8002c94:	200001f0 	.word	0x200001f0
 8002c98:	20000114 	.word	0x20000114
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <vTaskSuspendAll+0x18>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <vTaskSuspendAll+0x18>)
 8002cac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	20000214 	.word	0x20000214

08002cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <xTaskResumeAll+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10a      	bne.n	8002ce8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	607b      	str	r3, [r7, #4]
    }
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ce8:	f001 f9b4 	bl	8004054 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cec:	4b64      	ldr	r3, [pc, #400]	; (8002e80 <xTaskResumeAll+0x1c4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	4a63      	ldr	r2, [pc, #396]	; (8002e80 <xTaskResumeAll+0x1c4>)
 8002cf4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cf6:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <xTaskResumeAll+0x1c4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80b8 	bne.w	8002e70 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <xTaskResumeAll+0x1c8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80b3 	beq.w	8002e70 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d0a:	e08e      	b.n	8002e2a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <xTaskResumeAll+0x1cc>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	6a12      	ldr	r2, [r2, #32]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	69d2      	ldr	r2, [r2, #28]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3318      	adds	r3, #24
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d103      	bne.n	8002d42 <xTaskResumeAll+0x86>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2200      	movs	r2, #0
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	605a      	str	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3304      	adds	r3, #4
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d103      	bne.n	8002d80 <xTaskResumeAll+0xc4>
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	2200      	movs	r2, #0
 8002d84:	615a      	str	r2, [r3, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1e5a      	subs	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fe9c 	bl	8006ad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <xTaskResumeAll+0x1d0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	4a39      	ldr	r2, [pc, #228]	; (8002e8c <xTaskResumeAll+0x1d0>)
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dae:	4938      	ldr	r1, [pc, #224]	; (8002e90 <xTaskResumeAll+0x1d4>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	3304      	adds	r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	3204      	adds	r2, #4
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <xTaskResumeAll+0x1d4>)
 8002dee:	441a      	add	r2, r3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	615a      	str	r2, [r3, #20]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df8:	4925      	ldr	r1, [pc, #148]	; (8002e90 <xTaskResumeAll+0x1d4>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	1c59      	adds	r1, r3, #1
 8002e08:	4821      	ldr	r0, [pc, #132]	; (8002e90 <xTaskResumeAll+0x1d4>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4403      	add	r3, r0
 8002e14:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <xTaskResumeAll+0x1d8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d302      	bcc.n	8002e2a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002e24:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <xTaskResumeAll+0x1dc>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <xTaskResumeAll+0x1cc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f47f af6c 	bne.w	8002d0c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e3a:	f000 fc11 	bl	8003660 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e3e:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <xTaskResumeAll+0x1e0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e4a:	f000 f84b 	bl	8002ee4 <xTaskIncrementTick>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <xTaskResumeAll+0x1dc>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f1      	bne.n	8002e4a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <xTaskResumeAll+0x1e0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <xTaskResumeAll+0x1dc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e70:	f001 f920 	bl	80040b4 <vPortExitCritical>

    return xAlreadyYielded;
 8002e74:	697b      	ldr	r3, [r7, #20]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000214 	.word	0x20000214
 8002e84:	200001ec 	.word	0x200001ec
 8002e88:	200001ac 	.word	0x200001ac
 8002e8c:	200001f4 	.word	0x200001f4
 8002e90:	20000118 	.word	0x20000118
 8002e94:	20000114 	.word	0x20000114
 8002e98:	20000200 	.word	0x20000200
 8002e9c:	200001fc 	.word	0x200001fc

08002ea0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <xTaskGetTickCount+0x1c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	200001f0 	.word	0x200001f0

08002ec0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ec6:	f001 f9b1 	bl	800422c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <xTaskGetTickCountFromISR+0x20>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ed4:	683b      	ldr	r3, [r7, #0]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200001f0 	.word	0x200001f0

08002ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eee:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <xTaskIncrementTick+0x1cc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 80d1 	bne.w	800309a <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef8:	4b6e      	ldr	r3, [pc, #440]	; (80030b4 <xTaskIncrementTick+0x1d0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f00:	4a6c      	ldr	r2, [pc, #432]	; (80030b4 <xTaskIncrementTick+0x1d0>)
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d120      	bne.n	8002f4e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <xTaskIncrementTick+0x1d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <xTaskIncrementTick+0x48>
        __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	607b      	str	r3, [r7, #4]
    }
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xTaskIncrementTick+0x46>
 8002f2c:	4b62      	ldr	r3, [pc, #392]	; (80030b8 <xTaskIncrementTick+0x1d4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	4b62      	ldr	r3, [pc, #392]	; (80030bc <xTaskIncrementTick+0x1d8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a60      	ldr	r2, [pc, #384]	; (80030b8 <xTaskIncrementTick+0x1d4>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4a60      	ldr	r2, [pc, #384]	; (80030bc <xTaskIncrementTick+0x1d8>)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <xTaskIncrementTick+0x1dc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a5e      	ldr	r2, [pc, #376]	; (80030c0 <xTaskIncrementTick+0x1dc>)
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	f000 fb89 	bl	8003660 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <xTaskIncrementTick+0x1e0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	f0c0 80a5 	bcc.w	80030a4 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f5a:	4b57      	ldr	r3, [pc, #348]	; (80030b8 <xTaskIncrementTick+0x1d4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f64:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <xTaskIncrementTick+0x1e0>)
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	601a      	str	r2, [r3, #0]
                    break;
 8002f6c:	e09a      	b.n	80030a4 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6e:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <xTaskIncrementTick+0x1d4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f7e:	6a3a      	ldr	r2, [r7, #32]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d203      	bcs.n	8002f8e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f86:	4a4f      	ldr	r2, [pc, #316]	; (80030c4 <xTaskIncrementTick+0x1e0>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f8c:	e08a      	b.n	80030a4 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	68d2      	ldr	r2, [r2, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d103      	bne.n	8002fbc <xTaskIncrementTick+0xd8>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d01e      	beq.n	8003012 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	6a12      	ldr	r2, [r2, #32]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	69d2      	ldr	r2, [r2, #28]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3318      	adds	r3, #24
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d103      	bne.n	8003002 <xTaskIncrementTick+0x11e>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6a1a      	ldr	r2, [r3, #32]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2200      	movs	r2, #0
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1e5a      	subs	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fd5b 	bl	8006ad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	2201      	movs	r2, #1
 8003020:	409a      	lsls	r2, r3
 8003022:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <xTaskIncrementTick+0x1e4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	4a27      	ldr	r2, [pc, #156]	; (80030c8 <xTaskIncrementTick+0x1e4>)
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	4926      	ldr	r1, [pc, #152]	; (80030cc <xTaskIncrementTick+0x1e8>)
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3304      	adds	r3, #4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	60da      	str	r2, [r3, #12]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	3204      	adds	r2, #4
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <xTaskIncrementTick+0x1e8>)
 8003070:	441a      	add	r2, r3
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	615a      	str	r2, [r3, #20]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4914      	ldr	r1, [pc, #80]	; (80030cc <xTaskIncrementTick+0x1e8>)
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	4810      	ldr	r0, [pc, #64]	; (80030cc <xTaskIncrementTick+0x1e8>)
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4403      	add	r3, r0
 8003096:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003098:	e75f      	b.n	8002f5a <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <xTaskIncrementTick+0x1ec>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <xTaskIncrementTick+0x1ec>)
 80030a2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3728      	adds	r7, #40	; 0x28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000214 	.word	0x20000214
 80030b4:	200001f0 	.word	0x200001f0
 80030b8:	200001a4 	.word	0x200001a4
 80030bc:	200001a8 	.word	0x200001a8
 80030c0:	20000204 	.word	0x20000204
 80030c4:	2000020c 	.word	0x2000020c
 80030c8:	200001f4 	.word	0x200001f4
 80030cc:	20000118 	.word	0x20000118
 80030d0:	200001fc 	.word	0x200001fc

080030d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <vTaskSwitchContext+0xbc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030e2:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <vTaskSwitchContext+0xc0>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80030e8:	e04d      	b.n	8003186 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80030ea:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <vTaskSwitchContext+0xc0>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030f0:	4b29      	ldr	r3, [pc, #164]	; (8003198 <vTaskSwitchContext+0xc4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	f1c3 031f 	rsb	r3, r3, #31
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4925      	ldr	r1, [pc, #148]	; (800319c <vTaskSwitchContext+0xc8>)
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <vTaskSwitchContext+0x5c>
        __asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
    }
 800312c:	bf00      	nop
 800312e:	e7fe      	b.n	800312e <vTaskSwitchContext+0x5a>
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4a18      	ldr	r2, [pc, #96]	; (800319c <vTaskSwitchContext+0xc8>)
 800313c:	4413      	add	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	3308      	adds	r3, #8
 8003152:	429a      	cmp	r2, r3
 8003154:	d104      	bne.n	8003160 <vTaskSwitchContext+0x8c>
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <vTaskSwitchContext+0xcc>)
 8003168:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <vTaskSwitchContext+0xcc>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <vTaskSwitchContext+0xd0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d102      	bne.n	800317c <vTaskSwitchContext+0xa8>
 8003176:	f003 fc0b 	bl	8006990 <SEGGER_SYSVIEW_OnIdle>
}
 800317a:	e004      	b.n	8003186 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <vTaskSwitchContext+0xcc>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fc63 	bl	8006a4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000214 	.word	0x20000214
 8003194:	20000200 	.word	0x20000200
 8003198:	200001f4 	.word	0x200001f4
 800319c:	20000118 	.word	0x20000118
 80031a0:	20000114 	.word	0x20000114
 80031a4:	20000210 	.word	0x20000210

080031a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60fb      	str	r3, [r7, #12]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <vTaskPlaceOnEventList+0x44>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3318      	adds	r3, #24
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe fff9 	bl	80021ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031dc:	2101      	movs	r1, #1
 80031de:	6838      	ldr	r0, [r7, #0]
 80031e0:	f000 fa78 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000114 	.word	0x20000114

080031f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	613b      	str	r3, [r7, #16]
    }
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	61da      	str	r2, [r3, #28]
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	621a      	str	r2, [r3, #32]
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	3218      	adds	r2, #24
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <vTaskPlaceOnEventListRestricted+0x8c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f103 0218 	add.w	r2, r3, #24
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <vTaskPlaceOnEventListRestricted+0x8c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	629a      	str	r2, [r3, #40]	; 0x28
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003266:	2024      	movs	r0, #36	; 0x24
 8003268:	f002 fe92 	bl	8005f90 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	68b8      	ldr	r0, [r7, #8]
 8003270:	f000 fa30 	bl	80036d4 <prvAddCurrentTaskToDelayedList>
    }
 8003274:	bf00      	nop
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000114 	.word	0x20000114

08003280 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	60fb      	str	r3, [r7, #12]
    }
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	6a12      	ldr	r2, [r2, #32]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	69d2      	ldr	r2, [r2, #28]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	3318      	adds	r3, #24
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d103      	bne.n	80032da <xTaskRemoveFromEventList+0x5a>
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2200      	movs	r2, #0
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	1e5a      	subs	r2, r3, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ea:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <xTaskRemoveFromEventList+0x198>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d162      	bne.n	80033b8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	68d2      	ldr	r2, [r2, #12]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	3304      	adds	r3, #4
 8003314:	429a      	cmp	r2, r3
 8003316:	d103      	bne.n	8003320 <xTaskRemoveFromEventList+0xa0>
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2200      	movs	r2, #0
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1e5a      	subs	r2, r3, #1
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	4618      	mov	r0, r3
 8003334:	f003 fbcc 	bl	8006ad0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <xTaskRemoveFromEventList+0x19c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	4a35      	ldr	r2, [pc, #212]	; (800341c <xTaskRemoveFromEventList+0x19c>)
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334e:	4934      	ldr	r1, [pc, #208]	; (8003420 <xTaskRemoveFromEventList+0x1a0>)
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3304      	adds	r3, #4
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	6a3a      	ldr	r2, [r7, #32]
 8003374:	3204      	adds	r2, #4
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4a24      	ldr	r2, [pc, #144]	; (8003420 <xTaskRemoveFromEventList+0x1a0>)
 800338e:	441a      	add	r2, r3
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	615a      	str	r2, [r3, #20]
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	4921      	ldr	r1, [pc, #132]	; (8003420 <xTaskRemoveFromEventList+0x1a0>)
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c59      	adds	r1, r3, #1
 80033a8:	481d      	ldr	r0, [pc, #116]	; (8003420 <xTaskRemoveFromEventList+0x1a0>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	6019      	str	r1, [r3, #0]
 80033b6:	e01b      	b.n	80033f0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <xTaskRemoveFromEventList+0x1a4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	61da      	str	r2, [r3, #28]
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	621a      	str	r2, [r3, #32]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	3218      	adds	r2, #24
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	f103 0218 	add.w	r2, r3, #24
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <xTaskRemoveFromEventList+0x1a4>)
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
 80033e6:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <xTaskRemoveFromEventList+0x1a4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <xTaskRemoveFromEventList+0x1a4>)
 80033ee:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <xTaskRemoveFromEventList+0x1a8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d905      	bls.n	800340a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033fe:	2301      	movs	r3, #1
 8003400:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <xTaskRemoveFromEventList+0x1ac>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e001      	b.n	800340e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000214 	.word	0x20000214
 800341c:	200001f4 	.word	0x200001f4
 8003420:	20000118 	.word	0x20000118
 8003424:	200001ac 	.word	0x200001ac
 8003428:	20000114 	.word	0x20000114
 800342c:	20000200 	.word	0x20000200

08003430 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <vTaskInternalSetTimeOutState+0x24>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <vTaskInternalSetTimeOutState+0x28>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	20000204 	.word	0x20000204
 8003458:	200001f0 	.word	0x200001f0

0800345c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	613b      	str	r3, [r7, #16]
    }
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10a      	bne.n	800349e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60fb      	str	r3, [r7, #12]
    }
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800349e:	f000 fdd9 	bl	8004054 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <xTaskCheckForTimeOut+0xc4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ba:	d102      	bne.n	80034c2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	e026      	b.n	8003510 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <xTaskCheckForTimeOut+0xc8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d00a      	beq.n	80034e4 <xTaskCheckForTimeOut+0x88>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d305      	bcc.n	80034e4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	e015      	b.n	8003510 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20b      	bcs.n	8003506 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	1ad2      	subs	r2, r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff98 	bl	8003430 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
 8003504:	e004      	b.n	8003510 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800350c:	2301      	movs	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003510:	f000 fdd0 	bl	80040b4 <vPortExitCritical>

    return xReturn;
 8003514:	69fb      	ldr	r3, [r7, #28]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200001f0 	.word	0x200001f0
 8003524:	20000204 	.word	0x20000204

08003528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <vTaskMissedYield+0x14>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	20000200 	.word	0x20000200

08003540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003548:	f000 f84c 	bl	80035e4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800354c:	4b04      	ldr	r3, [pc, #16]	; (8003560 <prvIdleTask+0x20>)
 800354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800355c:	e7f4      	b.n	8003548 <prvIdleTask+0x8>
 800355e:	bf00      	nop
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	e00c      	b.n	800358a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <prvInitialiseTaskLists+0x60>)
 800357c:	4413      	add	r3, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fdf8 	bl	8002174 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3301      	adds	r3, #1
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d9ef      	bls.n	8003570 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003590:	480d      	ldr	r0, [pc, #52]	; (80035c8 <prvInitialiseTaskLists+0x64>)
 8003592:	f7fe fdef 	bl	8002174 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003596:	480d      	ldr	r0, [pc, #52]	; (80035cc <prvInitialiseTaskLists+0x68>)
 8003598:	f7fe fdec 	bl	8002174 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <prvInitialiseTaskLists+0x6c>)
 800359e:	f7fe fde9 	bl	8002174 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80035a2:	480c      	ldr	r0, [pc, #48]	; (80035d4 <prvInitialiseTaskLists+0x70>)
 80035a4:	f7fe fde6 	bl	8002174 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80035a8:	480b      	ldr	r0, [pc, #44]	; (80035d8 <prvInitialiseTaskLists+0x74>)
 80035aa:	f7fe fde3 	bl	8002174 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <prvInitialiseTaskLists+0x78>)
 80035b0:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <prvInitialiseTaskLists+0x64>)
 80035b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <prvInitialiseTaskLists+0x7c>)
 80035b6:	4a05      	ldr	r2, [pc, #20]	; (80035cc <prvInitialiseTaskLists+0x68>)
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000118 	.word	0x20000118
 80035c8:	2000017c 	.word	0x2000017c
 80035cc:	20000190 	.word	0x20000190
 80035d0:	200001ac 	.word	0x200001ac
 80035d4:	200001c0 	.word	0x200001c0
 80035d8:	200001d8 	.word	0x200001d8
 80035dc:	200001a4 	.word	0x200001a4
 80035e0:	200001a8 	.word	0x200001a8

080035e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ea:	e019      	b.n	8003620 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80035ec:	f000 fd32 	bl	8004054 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035f0:	4b10      	ldr	r3, [pc, #64]	; (8003634 <prvCheckTasksWaitingTermination+0x50>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fe1f 	bl	8002240 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <prvCheckTasksWaitingTermination+0x54>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3b01      	subs	r3, #1
 8003608:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <prvCheckTasksWaitingTermination+0x54>)
 800360a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <prvCheckTasksWaitingTermination+0x58>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3b01      	subs	r3, #1
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <prvCheckTasksWaitingTermination+0x58>)
 8003614:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003616:	f000 fd4d 	bl	80040b4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f810 	bl	8003640 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <prvCheckTasksWaitingTermination+0x58>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e1      	bne.n	80035ec <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200001c0 	.word	0x200001c0
 8003638:	200001ec 	.word	0x200001ec
 800363c:	200001d4 	.word	0x200001d4

08003640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	4618      	mov	r0, r3
 800364e:	f000 ff0d 	bl	800446c <vPortFree>
                vPortFree( pxTCB );
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 ff0a 	bl	800446c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <prvResetNextTaskUnblockTime+0x30>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <prvResetNextTaskUnblockTime+0x34>)
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003676:	e005      	b.n	8003684 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <prvResetNextTaskUnblockTime+0x30>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <prvResetNextTaskUnblockTime+0x34>)
 8003682:	6013      	str	r3, [r2, #0]
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	200001a4 	.word	0x200001a4
 8003694:	2000020c 	.word	0x2000020c

08003698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <xTaskGetSchedulerState+0x34>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80036a6:	2301      	movs	r3, #1
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e008      	b.n	80036be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <xTaskGetSchedulerState+0x38>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80036b4:	2302      	movs	r3, #2
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036be:	687b      	ldr	r3, [r7, #4]
    }
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	200001f8 	.word	0x200001f8
 80036d0:	20000214 	.word	0x20000214

080036d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036de:	4b3c      	ldr	r3, [pc, #240]	; (80037d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036e4:	4b3b      	ldr	r3, [pc, #236]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fda8 	bl	8002240 <uxListRemove>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10b      	bne.n	800370e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <prvAddCurrentTaskToDelayedList+0x104>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4013      	ands	r3, r2
 800370a:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <prvAddCurrentTaskToDelayedList+0x104>)
 800370c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d124      	bne.n	8003760 <prvAddCurrentTaskToDelayedList+0x8c>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d021      	beq.n	8003760 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <prvAddCurrentTaskToDelayedList+0x108>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	6892      	ldr	r2, [r2, #8]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	3204      	adds	r2, #4
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	1d1a      	adds	r2, r3, #4
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a23      	ldr	r2, [pc, #140]	; (80037dc <prvAddCurrentTaskToDelayedList+0x108>)
 8003750:	615a      	str	r2, [r3, #20]
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <prvAddCurrentTaskToDelayedList+0x108>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <prvAddCurrentTaskToDelayedList+0x108>)
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800375e:	e032      	b.n	80037c6 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	d20f      	bcs.n	8003798 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2104      	movs	r1, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f003 f9e8 	bl	8006b54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003784:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7fe fd1c 	bl	80021ce <vListInsert>
}
 8003796:	e016      	b.n	80037c6 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2104      	movs	r1, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 f9d8 	bl	8006b54 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <prvAddCurrentTaskToDelayedList+0x110>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x100>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3304      	adds	r3, #4
 80037ae:	4619      	mov	r1, r3
 80037b0:	4610      	mov	r0, r2
 80037b2:	f7fe fd0c 	bl	80021ce <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <prvAddCurrentTaskToDelayedList+0x114>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d202      	bcs.n	80037c6 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80037c0:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <prvAddCurrentTaskToDelayedList+0x114>)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6013      	str	r3, [r2, #0]
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200001f0 	.word	0x200001f0
 80037d4:	20000114 	.word	0x20000114
 80037d8:	200001f4 	.word	0x200001f4
 80037dc:	200001d8 	.word	0x200001d8
 80037e0:	200001a8 	.word	0x200001a8
 80037e4:	200001a4 	.word	0x200001a4
 80037e8:	2000020c 	.word	0x2000020c

080037ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037f6:	f000 fa47 	bl	8003c88 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <xTimerCreateTimerTask+0x54>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <xTimerCreateTimerTask+0x58>)
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	2302      	movs	r3, #2
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003810:	490d      	ldr	r1, [pc, #52]	; (8003848 <xTimerCreateTimerTask+0x5c>)
 8003812:	480e      	ldr	r0, [pc, #56]	; (800384c <xTimerCreateTimerTask+0x60>)
 8003814:	f7ff f856 	bl	80028c4 <xTaskCreate>
 8003818:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003824:	f383 8811 	msr	BASEPRI, r3
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	603b      	str	r3, [r7, #0]
    }
 8003832:	bf00      	nop
 8003834:	e7fe      	b.n	8003834 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003836:	687b      	ldr	r3, [r7, #4]
    }
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000248 	.word	0x20000248
 8003844:	2000024c 	.word	0x2000024c
 8003848:	0800792c 	.word	0x0800792c
 800384c:	080038f5 	.word	0x080038f5

08003850 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800385c:	e008      	b.n	8003870 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	4413      	add	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	699a      	ldr	r2, [r3, #24]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	18d1      	adds	r1, r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8dd 	bl	8003a3c <prvInsertTimerInActiveList>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ea      	bne.n	800385e <prvReloadTimer+0xe>
        }
    }
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <prvProcessExpiredTimer+0x5c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe fcc7 	bl	8002240 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff ffc3 	bl	8003850 <prvReloadTimer>
 80038ca:	e008      	b.n	80038de <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	4798      	blx	r3
    }
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000240 	.word	0x20000240

080038f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038fc:	f107 0308 	add.w	r3, r7, #8
 8003900:	4618      	mov	r0, r3
 8003902:	f000 f857 	bl	80039b4 <prvGetNextExpireTime>
 8003906:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4619      	mov	r1, r3
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f803 	bl	8003918 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003912:	f000 f8d5 	bl	8003ac0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003916:	e7f1      	b.n	80038fc <prvTimerTask+0x8>

08003918 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003922:	f7ff f9bd 	bl	8002ca0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f866 	bl	80039fc <prvSampleTimeNow>
 8003930:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d130      	bne.n	800399a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <prvProcessTimerOrBlockTask+0x3c>
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	429a      	cmp	r2, r3
 8003944:	d806      	bhi.n	8003954 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003946:	f7ff f9b9 	bl	8002cbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ffa1 	bl	8003894 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003952:	e024      	b.n	800399e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <prvProcessTimerOrBlockTask+0x90>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <prvProcessTimerOrBlockTask+0x50>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <prvProcessTimerOrBlockTask+0x52>
 8003968:	2300      	movs	r3, #0
 800396a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800396c:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <prvProcessTimerOrBlockTask+0x94>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	f7fe ff6f 	bl	800285c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800397e:	f7ff f99d 	bl	8002cbc <xTaskResumeAll>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <prvProcessTimerOrBlockTask+0x98>)
 800398a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	f3bf 8f6f 	isb	sy
    }
 8003998:	e001      	b.n	800399e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800399a:	f7ff f98f 	bl	8002cbc <xTaskResumeAll>
    }
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000244 	.word	0x20000244
 80039ac:	20000248 	.word	0x20000248
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <prvGetNextExpireTime+0x44>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <prvGetNextExpireTime+0x16>
 80039c6:	2201      	movs	r2, #1
 80039c8:	e000      	b.n	80039cc <prvGetNextExpireTime+0x18>
 80039ca:	2200      	movs	r2, #0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <prvGetNextExpireTime+0x44>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e001      	b.n	80039e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039e8:	68fb      	ldr	r3, [r7, #12]
    }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000240 	.word	0x20000240

080039fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a04:	f7ff fa4c 	bl	8002ea0 <xTaskGetTickCount>
 8003a08:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <prvSampleTimeNow+0x3c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d205      	bcs.n	8003a20 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a14:	f000 f912 	bl	8003c3c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	e002      	b.n	8003a26 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a26:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <prvSampleTimeNow+0x3c>)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000250 	.word	0x20000250

08003a3c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d812      	bhi.n	8003a88 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d302      	bcc.n	8003a76 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a70:	2301      	movs	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	e01b      	b.n	8003aae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <prvInsertTimerInActiveList+0x7c>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4610      	mov	r0, r2
 8003a82:	f7fe fba4 	bl	80021ce <vListInsert>
 8003a86:	e012      	b.n	8003aae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d206      	bcs.n	8003a9e <prvInsertTimerInActiveList+0x62>
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d302      	bcc.n	8003a9e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e007      	b.n	8003aae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <prvInsertTimerInActiveList+0x80>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f7fe fb90 	bl	80021ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003aae:	697b      	ldr	r3, [r7, #20]
    }
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000244 	.word	0x20000244
 8003abc:	20000240 	.word	0x20000240

08003ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ac6:	e0a6      	b.n	8003c16 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f2c0 80a3 	blt.w	8003c16 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe fbad 	bl	8002240 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff87 	bl	80039fc <prvSampleTimeNow>
 8003aee:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	f200 808d 	bhi.w	8003c14 <prvProcessReceivedCommands+0x154>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <prvProcessReceivedCommands+0x40>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b25 	.word	0x08003b25
 8003b08:	08003b8d 	.word	0x08003b8d
 8003b0c:	08003ba1 	.word	0x08003ba1
 8003b10:	08003beb 	.word	0x08003beb
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b25 	.word	0x08003b25
 8003b1c:	08003b8d 	.word	0x08003b8d
 8003b20:	08003ba1 	.word	0x08003ba1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	18d1      	adds	r1, r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	69f8      	ldr	r0, [r7, #28]
 8003b44:	f7ff ff7a 	bl	8003a3c <prvInsertTimerInActiveList>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d063      	beq.n	8003c16 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d009      	beq.n	8003b70 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4413      	add	r3, r2
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4619      	mov	r1, r3
 8003b68:	69f8      	ldr	r0, [r7, #28]
 8003b6a:	f7ff fe71 	bl	8003850 <prvReloadTimer>
 8003b6e:	e008      	b.n	8003b82 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	69f8      	ldr	r0, [r7, #28]
 8003b88:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b8a:	e044      	b.n	8003c16 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003b9e:	e03a      	b.n	8003c16 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	617b      	str	r3, [r7, #20]
    }
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	18d1      	adds	r1, r2, r3
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	69f8      	ldr	r0, [r7, #28]
 8003be4:	f7ff ff2a 	bl	8003a3c <prvInsertTimerInActiveList>
                        break;
 8003be8:	e015      	b.n	8003c16 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003bf8:	69f8      	ldr	r0, [r7, #28]
 8003bfa:	f000 fc37 	bl	800446c <vPortFree>
 8003bfe:	e00a      	b.n	8003c16 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c12:	e000      	b.n	8003c16 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003c14:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <prvProcessReceivedCommands+0x178>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f107 0108 	add.w	r1, r7, #8
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fc31 	bl	8002488 <xQueueReceive>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f af4d 	bne.w	8003ac8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000248 	.word	0x20000248

08003c3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c42:	e009      	b.n	8003c58 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <prvSwitchTimerLists+0x44>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c52:	6838      	ldr	r0, [r7, #0]
 8003c54:	f7ff fe1e 	bl	8003894 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c58:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <prvSwitchTimerLists+0x44>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <prvSwitchTimerLists+0x44>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <prvSwitchTimerLists+0x48>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <prvSwitchTimerLists+0x44>)
 8003c6e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <prvSwitchTimerLists+0x48>)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6013      	str	r3, [r2, #0]
    }
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000240 	.word	0x20000240
 8003c84:	20000244 	.word	0x20000244

08003c88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c8c:	f000 f9e2 	bl	8004054 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <prvCheckForValidListAndQueue+0x54>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11d      	bne.n	8003cd4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c98:	4811      	ldr	r0, [pc, #68]	; (8003ce0 <prvCheckForValidListAndQueue+0x58>)
 8003c9a:	f7fe fa6b 	bl	8002174 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c9e:	4811      	ldr	r0, [pc, #68]	; (8003ce4 <prvCheckForValidListAndQueue+0x5c>)
 8003ca0:	f7fe fa68 	bl	8002174 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <prvCheckForValidListAndQueue+0x60>)
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	; (8003ce0 <prvCheckForValidListAndQueue+0x58>)
 8003ca8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <prvCheckForValidListAndQueue+0x64>)
 8003cac:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <prvCheckForValidListAndQueue+0x5c>)
 8003cae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	210c      	movs	r1, #12
 8003cb4:	200a      	movs	r0, #10
 8003cb6:	f7fe fb6f 	bl	8002398 <xQueueGenericCreate>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <prvCheckForValidListAndQueue+0x54>)
 8003cbe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <prvCheckForValidListAndQueue+0x54>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <prvCheckForValidListAndQueue+0x54>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <prvCheckForValidListAndQueue+0x68>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fd6e 	bl	80027b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cd4:	f000 f9ee 	bl	80040b4 <vPortExitCritical>
    }
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000248 	.word	0x20000248
 8003ce0:	20000218 	.word	0x20000218
 8003ce4:	2000022c 	.word	0x2000022c
 8003ce8:	20000240 	.word	0x20000240
 8003cec:	20000244 	.word	0x20000244
 8003cf0:	08007934 	.word	0x08007934

08003cf4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b04      	subs	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b04      	subs	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3b04      	subs	r3, #4
 8003d22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d24:	4a0c      	ldr	r2, [pc, #48]	; (8003d58 <pxPortInitialiseStack+0x64>)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	3b14      	subs	r3, #20
 8003d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b04      	subs	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f06f 0202 	mvn.w	r2, #2
 8003d42:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b20      	subs	r3, #32
 8003d48:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	08003d5d 	.word	0x08003d5d

08003d5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <prvTaskExitError+0x54>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6e:	d00a      	beq.n	8003d86 <prvTaskExitError+0x2a>
        __asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
    }
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <prvTaskExitError+0x28>
        __asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	60bb      	str	r3, [r7, #8]
    }
 8003d98:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d9a:	bf00      	nop
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0fc      	beq.n	8003d9c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	20000010 	.word	0x20000010
	...

08003dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <pxCurrentTCBConst2>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dca:	f380 8809 	msr	PSP, r0
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	4770      	bx	lr
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst2>:
 8003de0:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003de8:	4808      	ldr	r0, [pc, #32]	; (8003e0c <prvPortStartFirstTask+0x24>)
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f380 8808 	msr	MSP, r0
 8003df2:	f04f 0000 	mov.w	r0, #0
 8003df6:	f380 8814 	msr	CONTROL, r0
 8003dfa:	b662      	cpsie	i
 8003dfc:	b661      	cpsie	f
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	df00      	svc	0
 8003e08:	bf00      	nop
 8003e0a:	0000      	.short	0x0000
 8003e0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop

08003e14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e1a:	4b46      	ldr	r3, [pc, #280]	; (8003f34 <xPortStartScheduler+0x120>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a46      	ldr	r2, [pc, #280]	; (8003f38 <xPortStartScheduler+0x124>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10a      	bne.n	8003e3a <xPortStartScheduler+0x26>
        __asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	613b      	str	r3, [r7, #16]
    }
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <xPortStartScheduler+0x120>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3f      	ldr	r2, [pc, #252]	; (8003f3c <xPortStartScheduler+0x128>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10a      	bne.n	8003e5a <xPortStartScheduler+0x46>
        __asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60fb      	str	r3, [r7, #12]
    }
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e5a:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <xPortStartScheduler+0x12c>)
 8003e5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	22ff      	movs	r2, #255	; 0xff
 8003e6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <xPortStartScheduler+0x130>)
 8003e80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <xPortStartScheduler+0x134>)
 8003e84:	2207      	movs	r2, #7
 8003e86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e88:	e009      	b.n	8003e9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <xPortStartScheduler+0x134>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a2d      	ldr	r2, [pc, #180]	; (8003f48 <xPortStartScheduler+0x134>)
 8003e92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d0ef      	beq.n	8003e8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <xPortStartScheduler+0x134>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1c3 0307 	rsb	r3, r3, #7
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d00a      	beq.n	8003ecc <xPortStartScheduler+0xb8>
        __asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60bb      	str	r3, [r7, #8]
    }
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	; (8003f48 <xPortStartScheduler+0x134>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <xPortStartScheduler+0x134>)
 8003ed4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <xPortStartScheduler+0x134>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ede:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <xPortStartScheduler+0x134>)
 8003ee0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <xPortStartScheduler+0x138>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <xPortStartScheduler+0x138>)
 8003ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ef4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <xPortStartScheduler+0x138>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <xPortStartScheduler+0x138>)
 8003efc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f02:	f000 f963 	bl	80041cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <xPortStartScheduler+0x13c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f0c:	f000 f982 	bl	8004214 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f10:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <xPortStartScheduler+0x140>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0f      	ldr	r2, [pc, #60]	; (8003f54 <xPortStartScheduler+0x140>)
 8003f16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f1c:	f7ff ff64 	bl	8003de8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f20:	f7ff f8d8 	bl	80030d4 <vTaskSwitchContext>
    prvTaskExitError();
 8003f24:	f7ff ff1a 	bl	8003d5c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000ed00 	.word	0xe000ed00
 8003f38:	410fc271 	.word	0x410fc271
 8003f3c:	410fc270 	.word	0x410fc270
 8003f40:	e000e400 	.word	0xe000e400
 8003f44:	20000254 	.word	0x20000254
 8003f48:	20000258 	.word	0x20000258
 8003f4c:	e000ed20 	.word	0xe000ed20
 8003f50:	20000010 	.word	0x20000010
 8003f54:	e000ef34 	.word	0xe000ef34

08003f58 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <vInitPrioGroupValue+0xe4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a37      	ldr	r2, [pc, #220]	; (8004040 <vInitPrioGroupValue+0xe8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10a      	bne.n	8003f7e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	613b      	str	r3, [r7, #16]
    }
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <vInitPrioGroupValue+0xe4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a30      	ldr	r2, [pc, #192]	; (8004044 <vInitPrioGroupValue+0xec>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10a      	bne.n	8003f9e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60fb      	str	r3, [r7, #12]
    }
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <vInitPrioGroupValue+0xf0>)
 8003fa0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	22ff      	movs	r2, #255	; 0xff
 8003fae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <vInitPrioGroupValue+0xf4>)
 8003fc4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8003fc8:	2207      	movs	r2, #7
 8003fca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fcc:	e009      	b.n	8003fe2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8003fd6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	2b80      	cmp	r3, #128	; 0x80
 8003fec:	d0ef      	beq.n	8003fce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f1c3 0307 	rsb	r3, r3, #7
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00a      	beq.n	8004010 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60bb      	str	r3, [r7, #8]
    }
 800400c:	bf00      	nop
 800400e:	e7fe      	b.n	800400e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8004018:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800401a:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <vInitPrioGroupValue+0xf8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <vInitPrioGroupValue+0xf8>)
 8004024:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00
 8004040:	410fc271 	.word	0x410fc271
 8004044:	410fc270 	.word	0x410fc270
 8004048:	e000e400 	.word	0xe000e400
 800404c:	20000254 	.word	0x20000254
 8004050:	20000258 	.word	0x20000258

08004054 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
        __asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	607b      	str	r3, [r7, #4]
    }
 800406c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <vPortEnterCritical+0x58>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <vPortEnterCritical+0x58>)
 8004076:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <vPortEnterCritical+0x58>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10f      	bne.n	80040a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <vPortEnterCritical+0x5c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	603b      	str	r3, [r7, #0]
    }
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vPortEnterCritical+0x4a>
    }
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	20000010 	.word	0x20000010
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <vPortExitCritical+0x50>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <vPortExitCritical+0x24>
        __asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
    }
 80040d4:	bf00      	nop
 80040d6:	e7fe      	b.n	80040d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <vPortExitCritical+0x50>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	4a09      	ldr	r2, [pc, #36]	; (8004104 <vPortExitCritical+0x50>)
 80040e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <vPortExitCritical+0x50>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d105      	bne.n	80040f6 <vPortExitCritical+0x42>
 80040ea:	2300      	movs	r3, #0
 80040ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000010 	.word	0x20000010
	...

08004110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004110:	f3ef 8009 	mrs	r0, PSP
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	4b15      	ldr	r3, [pc, #84]	; (8004170 <pxCurrentTCBConst>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f01e 0f10 	tst.w	lr, #16
 8004120:	bf08      	it	eq
 8004122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412a:	6010      	str	r0, [r2, #0]
 800412c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004134:	f380 8811 	msr	BASEPRI, r0
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f7fe ffc8 	bl	80030d4 <vTaskSwitchContext>
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f380 8811 	msr	BASEPRI, r0
 800414c:	bc09      	pop	{r0, r3}
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	6808      	ldr	r0, [r1, #0]
 8004152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004156:	f01e 0f10 	tst.w	lr, #16
 800415a:	bf08      	it	eq
 800415c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004160:	f380 8809 	msr	PSP, r0
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	f3af 8000 	nop.w

08004170 <pxCurrentTCBConst>:
 8004170:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004174:	bf00      	nop
 8004176:	bf00      	nop

08004178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
        __asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	607b      	str	r3, [r7, #4]
    }
 8004190:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004192:	f002 fb83 	bl	800689c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004196:	f7fe fea5 	bl	8002ee4 <xTaskIncrementTick>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041a0:	f002 fbda 	bl	8006958 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <SysTick_Handler+0x50>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e001      	b.n	80041b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041ae:	f002 fbb7 	bl	8006920 <SEGGER_SYSVIEW_RecordExitISR>
 80041b2:	2300      	movs	r3, #0
 80041b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	f383 8811 	msr	BASEPRI, r3
    }
 80041bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <vPortSetupTimerInterrupt+0x34>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <vPortSetupTimerInterrupt+0x38>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <vPortSetupTimerInterrupt+0x3c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	; (800420c <vPortSetupTimerInterrupt+0x40>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	4a09      	ldr	r2, [pc, #36]	; (8004210 <vPortSetupTimerInterrupt+0x44>)
 80041ea:	3b01      	subs	r3, #1
 80041ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ee:	4b04      	ldr	r3, [pc, #16]	; (8004200 <vPortSetupTimerInterrupt+0x34>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e010 	.word	0xe000e010
 8004204:	e000e018 	.word	0xe000e018
 8004208:	20000000 	.word	0x20000000
 800420c:	10624dd3 	.word	0x10624dd3
 8004210:	e000e014 	.word	0xe000e014

08004214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004224 <vPortEnableVFP+0x10>
 8004218:	6801      	ldr	r1, [r0, #0]
 800421a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800421e:	6001      	str	r1, [r0, #0]
 8004220:	4770      	bx	lr
 8004222:	0000      	.short	0x0000
 8004224:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop

0800422c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004232:	f3ef 8305 	mrs	r3, IPSR
 8004236:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	d914      	bls.n	8004268 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800423e:	4a17      	ldr	r2, [pc, #92]	; (800429c <vPortValidateInterruptPriority+0x70>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <vPortValidateInterruptPriority+0x74>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	7afa      	ldrb	r2, [r7, #11]
 800424e:	429a      	cmp	r2, r3
 8004250:	d20a      	bcs.n	8004268 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	607b      	str	r3, [r7, #4]
    }
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <vPortValidateInterruptPriority+0x78>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <vPortValidateInterruptPriority+0x7c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d90a      	bls.n	800428e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	603b      	str	r3, [r7, #0]
    }
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <vPortValidateInterruptPriority+0x60>
    }
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000e3f0 	.word	0xe000e3f0
 80042a0:	20000254 	.word	0x20000254
 80042a4:	e000ed0c 	.word	0xe000ed0c
 80042a8:	20000258 	.word	0x20000258

080042ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	; 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80042b8:	f7fe fcf2 	bl	8002ca0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042bc:	4b65      	ldr	r3, [pc, #404]	; (8004454 <pvPortMalloc+0x1a8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042c4:	f000 f934 	bl	8004530 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042c8:	4b63      	ldr	r3, [pc, #396]	; (8004458 <pvPortMalloc+0x1ac>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 80a7 	bne.w	8004424 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02d      	beq.n	8004338 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80042dc:	2208      	movs	r2, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d227      	bcs.n	8004338 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80042e8:	2208      	movs	r2, #8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4413      	add	r3, r2
 80042ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d021      	beq.n	800433e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f023 0307 	bic.w	r3, r3, #7
 8004300:	3308      	adds	r3, #8
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	d214      	bcs.n	8004332 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f023 0307 	bic.w	r3, r3, #7
 800430e:	3308      	adds	r3, #8
 8004310:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <pvPortMalloc+0x92>
        __asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	617b      	str	r3, [r7, #20]
    }
 800432e:	bf00      	nop
 8004330:	e7fe      	b.n	8004330 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004336:	e002      	b.n	800433e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	e000      	b.n	8004340 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800433e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d06e      	beq.n	8004424 <pvPortMalloc+0x178>
 8004346:	4b45      	ldr	r3, [pc, #276]	; (800445c <pvPortMalloc+0x1b0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d869      	bhi.n	8004424 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004350:	4b43      	ldr	r3, [pc, #268]	; (8004460 <pvPortMalloc+0x1b4>)
 8004352:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004354:	4b42      	ldr	r3, [pc, #264]	; (8004460 <pvPortMalloc+0x1b4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800435a:	e004      	b.n	8004366 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d903      	bls.n	8004378 <pvPortMalloc+0xcc>
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f1      	bne.n	800435c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004378:	4b36      	ldr	r3, [pc, #216]	; (8004454 <pvPortMalloc+0x1a8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	429a      	cmp	r2, r3
 8004380:	d050      	beq.n	8004424 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2208      	movs	r2, #8
 8004388:	4413      	add	r3, r2
 800438a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1ad2      	subs	r2, r2, r3
 800439c:	2308      	movs	r3, #8
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d91f      	bls.n	80043e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <pvPortMalloc+0x120>
        __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	613b      	str	r3, [r7, #16]
    }
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad2      	subs	r2, r2, r3
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043de:	69b8      	ldr	r0, [r7, #24]
 80043e0:	f000 f908 	bl	80045f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <pvPortMalloc+0x1b0>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <pvPortMalloc+0x1b0>)
 80043f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <pvPortMalloc+0x1b0>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <pvPortMalloc+0x1b8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d203      	bcs.n	8004406 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <pvPortMalloc+0x1b0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <pvPortMalloc+0x1b8>)
 8004404:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4b13      	ldr	r3, [pc, #76]	; (8004458 <pvPortMalloc+0x1ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	431a      	orrs	r2, r3
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <pvPortMalloc+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	4a11      	ldr	r2, [pc, #68]	; (8004468 <pvPortMalloc+0x1bc>)
 8004422:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004424:	f7fe fc4a 	bl	8002cbc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <pvPortMalloc+0x19c>
        __asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60fb      	str	r3, [r7, #12]
    }
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <pvPortMalloc+0x19a>
    return pvReturn;
 8004448:	69fb      	ldr	r3, [r7, #28]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20019264 	.word	0x20019264
 8004458:	20019278 	.word	0x20019278
 800445c:	20019268 	.word	0x20019268
 8004460:	2001925c 	.word	0x2001925c
 8004464:	2001926c 	.word	0x2001926c
 8004468:	20019270 	.word	0x20019270

0800446c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d04d      	beq.n	800451a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800447e:	2308      	movs	r3, #8
 8004480:	425b      	negs	r3, r3
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4413      	add	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <vPortFree+0xb8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10a      	bne.n	80044b0 <vPortFree+0x44>
        __asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60fb      	str	r3, [r7, #12]
    }
 80044ac:	bf00      	nop
 80044ae:	e7fe      	b.n	80044ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <vPortFree+0x62>
        __asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60bb      	str	r3, [r7, #8]
    }
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <vPortFree+0xb8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01e      	beq.n	800451a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d11a      	bne.n	800451a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <vPortFree+0xb8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80044f4:	f7fe fbd4 	bl	8002ca0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <vPortFree+0xbc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4413      	add	r3, r2
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <vPortFree+0xbc>)
 8004504:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004506:	6938      	ldr	r0, [r7, #16]
 8004508:	f000 f874 	bl	80045f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <vPortFree+0xc0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	4a06      	ldr	r2, [pc, #24]	; (800452c <vPortFree+0xc0>)
 8004514:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004516:	f7fe fbd1 	bl	8002cbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20019278 	.word	0x20019278
 8004528:	20019268 	.word	0x20019268
 800452c:	20019274 	.word	0x20019274

08004530 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004536:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800453a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <prvHeapInit+0xac>)
 800453e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3307      	adds	r3, #7
 800454e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0307 	bic.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <prvHeapInit+0xac>)
 8004560:	4413      	add	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004568:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <prvHeapInit+0xb0>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <prvHeapInit+0xb0>)
 8004570:	2200      	movs	r2, #0
 8004572:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4413      	add	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800457c:	2208      	movs	r2, #8
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <prvHeapInit+0xb4>)
 8004590:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004592:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <prvHeapInit+0xb4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <prvHeapInit+0xb4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <prvHeapInit+0xb4>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <prvHeapInit+0xb8>)
 80045be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a09      	ldr	r2, [pc, #36]	; (80045ec <prvHeapInit+0xbc>)
 80045c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <prvHeapInit+0xc0>)
 80045ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80045ce:	601a      	str	r2, [r3, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	2000025c 	.word	0x2000025c
 80045e0:	2001925c 	.word	0x2001925c
 80045e4:	20019264 	.word	0x20019264
 80045e8:	2001926c 	.word	0x2001926c
 80045ec:	20019268 	.word	0x20019268
 80045f0:	20019278 	.word	0x20019278

080045f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <prvInsertBlockIntoFreeList+0xac>)
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	e002      	b.n	8004608 <prvInsertBlockIntoFreeList+0x14>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d8f7      	bhi.n	8004602 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d108      	bne.n	8004636 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	441a      	add	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d118      	bne.n	800467c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d00d      	beq.n	8004672 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e008      	b.n	8004684 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e003      	b.n	8004684 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	d002      	beq.n	8004692 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2001925c 	.word	0x2001925c
 80046a4:	20019264 	.word	0x20019264

080046a8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046ac:	4803      	ldr	r0, [pc, #12]	; (80046bc <_cbSendSystemDesc+0x14>)
 80046ae:	f002 f89f 	bl	80067f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046b2:	4803      	ldr	r0, [pc, #12]	; (80046c0 <_cbSendSystemDesc+0x18>)
 80046b4:	f002 f89c 	bl	80067f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80046b8:	bf00      	nop
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	0800793c 	.word	0x0800793c
 80046c0:	08007980 	.word	0x08007980

080046c4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <SEGGER_SYSVIEW_Conf+0x20>)
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <SEGGER_SYSVIEW_Conf+0x24>)
 80046d2:	4a06      	ldr	r2, [pc, #24]	; (80046ec <SEGGER_SYSVIEW_Conf+0x28>)
 80046d4:	f001 fc08 	bl	8005ee8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80046d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80046dc:	f001 fc48 	bl	8005f70 <SEGGER_SYSVIEW_SetRAMBase>
}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	20000000 	.word	0x20000000
 80046e8:	080046a9 	.word	0x080046a9
 80046ec:	08007a20 	.word	0x08007a20

080046f0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80046f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	e033      	b.n	8004764 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80046fc:	491e      	ldr	r1, [pc, #120]	; (8004778 <_cbSendTaskList+0x88>)
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	491a      	ldr	r1, [pc, #104]	; (8004778 <_cbSendTaskList+0x88>)
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3304      	adds	r3, #4
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	4c16      	ldr	r4, [pc, #88]	; (8004778 <_cbSendTaskList+0x88>)
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4423      	add	r3, r4
 800472c:	3308      	adds	r3, #8
 800472e:	681c      	ldr	r4, [r3, #0]
 8004730:	4d11      	ldr	r5, [pc, #68]	; (8004778 <_cbSendTaskList+0x88>)
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	442b      	add	r3, r5
 800473e:	330c      	adds	r3, #12
 8004740:	681d      	ldr	r5, [r3, #0]
 8004742:	4e0d      	ldr	r6, [pc, #52]	; (8004778 <_cbSendTaskList+0x88>)
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4433      	add	r3, r6
 8004750:	3310      	adds	r3, #16
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	462b      	mov	r3, r5
 8004758:	4622      	mov	r2, r4
 800475a:	f000 f8bd 	bl	80048d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3301      	adds	r3, #1
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <_cbSendTaskList+0x8c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d3c6      	bcc.n	80046fc <_cbSendTaskList+0xc>
  }
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004778:	2001927c 	.word	0x2001927c
 800477c:	2001931c 	.word	0x2001931c

08004780 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004788:	f7fe fb9a 	bl	8002ec0 <xTaskGetTickCountFromISR>
 800478c:	4603      	mov	r3, r0
 800478e:	2200      	movs	r2, #0
 8004790:	469a      	mov	sl, r3
 8004792:	4693      	mov	fp, r2
 8004794:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	f04f 0a00 	mov.w	sl, #0
 80047a4:	f04f 0b00 	mov.w	fp, #0
 80047a8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047ac:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047b0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047b4:	4652      	mov	r2, sl
 80047b6:	465b      	mov	r3, fp
 80047b8:	1a14      	subs	r4, r2, r0
 80047ba:	eb63 0501 	sbc.w	r5, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	00ab      	lsls	r3, r5, #2
 80047c8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047cc:	00a2      	lsls	r2, r4, #2
 80047ce:	4614      	mov	r4, r2
 80047d0:	461d      	mov	r5, r3
 80047d2:	eb14 0800 	adds.w	r8, r4, r0
 80047d6:	eb45 0901 	adc.w	r9, r5, r1
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ee:	4690      	mov	r8, r2
 80047f0:	4699      	mov	r9, r3
 80047f2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80047f6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004808 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004816:	2205      	movs	r2, #5
 8004818:	492b      	ldr	r1, [pc, #172]	; (80048c8 <SYSVIEW_AddTask+0xc0>)
 800481a:	68b8      	ldr	r0, [r7, #8]
 800481c:	f002 fbb8 	bl	8006f90 <memcmp>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d04b      	beq.n	80048be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b07      	cmp	r3, #7
 800482c:	d903      	bls.n	8004836 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800482e:	4828      	ldr	r0, [pc, #160]	; (80048d0 <SYSVIEW_AddTask+0xc8>)
 8004830:	f002 faf0 	bl	8006e14 <SEGGER_SYSVIEW_Warn>
    return;
 8004834:	e044      	b.n	80048c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004836:	4b25      	ldr	r3, [pc, #148]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4926      	ldr	r1, [pc, #152]	; (80048d4 <SYSVIEW_AddTask+0xcc>)
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800484a:	4b20      	ldr	r3, [pc, #128]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <SYSVIEW_AddTask+0xcc>)
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3304      	adds	r3, #4
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	491b      	ldr	r1, [pc, #108]	; (80048d4 <SYSVIEW_AddTask+0xcc>)
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	3308      	adds	r3, #8
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4916      	ldr	r1, [pc, #88]	; (80048d4 <SYSVIEW_AddTask+0xcc>)
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	330c      	adds	r3, #12
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4910      	ldr	r1, [pc, #64]	; (80048d4 <SYSVIEW_AddTask+0xcc>)
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	3310      	adds	r3, #16
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	4a08      	ldr	r2, [pc, #32]	; (80048cc <SYSVIEW_AddTask+0xc4>)
 80048aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f80e 	bl	80048d8 <SYSVIEW_SendTaskInfo>
 80048bc:	e000      	b.n	80048c0 <SYSVIEW_AddTask+0xb8>
    return;
 80048be:	bf00      	nop

}
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	08007990 	.word	0x08007990
 80048cc:	2001931c 	.word	0x2001931c
 80048d0:	08007998 	.word	0x08007998
 80048d4:	2001927c 	.word	0x2001927c

080048d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80048e6:	f107 0314 	add.w	r3, r7, #20
 80048ea:	2214      	movs	r2, #20
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f002 fb5e 	bl	8006fb0 <memset>
  TaskInfo.TaskID     = TaskID;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fe77 	bl	8006600 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004912:	bf00      	nop
 8004914:	3728      	adds	r7, #40	; 0x28
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <__NVIC_EnableIRQ>:
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	2b00      	cmp	r3, #0
 800492c:	db0b      	blt.n	8004946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	f003 021f 	and.w	r2, r3, #31
 8004934:	4907      	ldr	r1, [pc, #28]	; (8004954 <__NVIC_EnableIRQ+0x38>)
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	2001      	movs	r0, #1
 800493e:	fa00 f202 	lsl.w	r2, r0, r2
 8004942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	e000e100 	.word	0xe000e100

08004958 <__NVIC_SetPriority>:
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004968:	2b00      	cmp	r3, #0
 800496a:	db0a      	blt.n	8004982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	490c      	ldr	r1, [pc, #48]	; (80049a4 <__NVIC_SetPriority+0x4c>)
 8004972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004976:	0112      	lsls	r2, r2, #4
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	440b      	add	r3, r1
 800497c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004980:	e00a      	b.n	8004998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4908      	ldr	r1, [pc, #32]	; (80049a8 <__NVIC_SetPriority+0x50>)
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	3b04      	subs	r3, #4
 8004990:	0112      	lsls	r2, r2, #4
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	440b      	add	r3, r1
 8004996:	761a      	strb	r2, [r3, #24]
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	e000e100 	.word	0xe000e100
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80049b2:	f002 fa8b 	bl	8006ecc <SEGGER_SYSVIEW_IsStarted>
 80049b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80049be:	f001 fca3 	bl	8006308 <SEGGER_SYSVIEW_Start>
  }
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <_cbOnUARTRx+0x3c>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d806      	bhi.n	80049ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <_cbOnUARTRx+0x3c>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <_cbOnUARTRx+0x3c>)
 80049e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80049ea:	e009      	b.n	8004a00 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80049ec:	f7ff ffde 	bl	80049ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <_cbOnUARTRx+0x3c>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4618      	mov	r0, r3
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	2201      	movs	r2, #1
 80049fa:	4619      	mov	r1, r3
 80049fc:	f000 fb9a 	bl	8005134 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a00:	bf00      	nop
}
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000014 	.word	0x20000014

08004a0c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a14:	4b14      	ldr	r3, [pc, #80]	; (8004a68 <_cbOnUARTTx+0x5c>)
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d80f      	bhi.n	8004a3c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a1c:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <_cbOnUARTTx+0x5c>)
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	461a      	mov	r2, r3
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <_cbOnUARTTx+0x60>)
 8004a24:	5c9a      	ldrb	r2, [r3, r2]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <_cbOnUARTTx+0x5c>)
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <_cbOnUARTTx+0x5c>)
 8004a34:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004a3a:	e00f      	b.n	8004a5c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <_cbOnUARTTx+0x5c>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fa19 	bl	8004e7c <SEGGER_RTT_ReadUpBufferNoLock>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	da02      	bge.n	8004a5a <_cbOnUARTTx+0x4e>
    r = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e000      	b.n	8004a5c <_cbOnUARTTx+0x50>
  }
Done:
 8004a5a:	bf00      	nop
  return r;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000014 	.word	0x20000014
 8004a6c:	08007a28 	.word	0x08007a28

08004a70 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <SEGGER_UART_init+0x1c>)
 8004a7a:	4905      	ldr	r1, [pc, #20]	; (8004a90 <SEGGER_UART_init+0x20>)
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f863 	bl	8004b48 <HIF_UART_Init>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	080049cd 	.word	0x080049cd
 8004a90:	08004a0d 	.word	0x08004a0d

08004a94 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	; (8004b14 <USART2_IRQHandler+0x80>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <USART2_IRQHandler+0x84>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 030b 	and.w	r3, r3, #11
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d108      	bne.n	8004ace <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004abc:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <USART2_IRQHandler+0x88>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004ac4:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <USART2_IRQHandler+0x88>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	79fa      	ldrb	r2, [r7, #7]
 8004aca:	4610      	mov	r0, r2
 8004acc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01a      	beq.n	8004b0e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <USART2_IRQHandler+0x8c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <USART2_IRQHandler+0x8c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	1dfa      	adds	r2, r7, #7
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4798      	blx	r3
 8004aea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <USART2_IRQHandler+0x90>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <USART2_IRQHandler+0x90>)
 8004af8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e006      	b.n	8004b0e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <USART2_IRQHandler+0x80>)
 8004b02:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b04:	79fa      	ldrb	r2, [r7, #7]
 8004b06:	4b04      	ldr	r3, [pc, #16]	; (8004b18 <USART2_IRQHandler+0x84>)
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e000      	b.n	8004b0e <USART2_IRQHandler+0x7a>
      return;
 8004b0c:	bf00      	nop
    }
  }
}
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40004400 	.word	0x40004400
 8004b18:	40004404 	.word	0x40004404
 8004b1c:	20019320 	.word	0x20019320
 8004b20:	20019324 	.word	0x20019324
 8004b24:	4000440c 	.word	0x4000440c

08004b28 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	4000440c 	.word	0x4000440c

08004b48 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b54:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HIF_UART_Init+0xc8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HIF_UART_Init+0xc8>)
 8004b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b60:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HIF_UART_Init+0xcc>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <HIF_UART_Init+0xcc>)
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b6c:	4b2a      	ldr	r3, [pc, #168]	; (8004c18 <HIF_UART_Init+0xd0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b78:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004b80:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004b82:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <HIF_UART_Init+0xd0>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004b88:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HIF_UART_Init+0xd4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b94:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004b9c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <HIF_UART_Init+0xd4>)
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <HIF_UART_Init+0xd8>)
 8004ba6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004baa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004bac:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HIF_UART_Init+0xdc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <HIF_UART_Init+0xe0>)
 8004bb4:	2280      	movs	r2, #128	; 0x80
 8004bb6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <HIF_UART_Init+0xe4>)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	d302      	bcc.n	8004bde <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004bd8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004bdc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <HIF_UART_Init+0xe8>)
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <HIF_UART_Init+0xec>)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004bf4:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <HIF_UART_Init+0xf0>)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004bfa:	2106      	movs	r1, #6
 8004bfc:	2026      	movs	r0, #38	; 0x26
 8004bfe:	f7ff feab 	bl	8004958 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c02:	2026      	movs	r0, #38	; 0x26
 8004c04:	f7ff fe8a 	bl	800491c <__NVIC_EnableIRQ>
}
 8004c08:	bf00      	nop
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023840 	.word	0x40023840
 8004c14:	40023830 	.word	0x40023830
 8004c18:	40020020 	.word	0x40020020
 8004c1c:	40020000 	.word	0x40020000
 8004c20:	4000440c 	.word	0x4000440c
 8004c24:	40004410 	.word	0x40004410
 8004c28:	40004414 	.word	0x40004414
 8004c2c:	0501bd00 	.word	0x0501bd00
 8004c30:	40004408 	.word	0x40004408
 8004c34:	20019320 	.word	0x20019320
 8004c38:	20019324 	.word	0x20019324

08004c3c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <_DoInit+0x98>)
 8004c44:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2203      	movs	r2, #3
 8004c50:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <_DoInit+0x9c>)
 8004c56:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <_DoInit+0xa0>)
 8004c5c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c64:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a17      	ldr	r2, [pc, #92]	; (8004cd8 <_DoInit+0x9c>)
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a17      	ldr	r2, [pc, #92]	; (8004ce0 <_DoInit+0xa4>)
 8004c82:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2210      	movs	r2, #16
 8004c88:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3307      	adds	r3, #7
 8004ca0:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <_DoInit+0xa8>)
 8004ca2:	6810      	ldr	r0, [r2, #0]
 8004ca4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004ca6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <_DoInit+0xac>)
 8004cae:	6810      	ldr	r0, [r2, #0]
 8004cb0:	6018      	str	r0, [r3, #0]
 8004cb2:	8891      	ldrh	r1, [r2, #4]
 8004cb4:	7992      	ldrb	r2, [r2, #6]
 8004cb6:	8099      	strh	r1, [r3, #4]
 8004cb8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cc4:	f3bf 8f5f 	dmb	sy
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	20019328 	.word	0x20019328
 8004cd8:	080079e8 	.word	0x080079e8
 8004cdc:	200193d0 	.word	0x200193d0
 8004ce0:	200197d0 	.word	0x200197d0
 8004ce4:	080079f4 	.word	0x080079f4
 8004ce8:	080079f8 	.word	0x080079f8

08004cec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d905      	bls.n	8004d1c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e007      	b.n	8004d2c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1acb      	subs	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bf28      	it	cs
 8004d3a:	4613      	movcs	r3, r2
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4293      	cmp	r3, r2
 8004d44:	bf28      	it	cs
 8004d46:	4613      	movcs	r3, r2
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	6978      	ldr	r0, [r7, #20]
 8004d5a:	f002 f957 	bl	800700c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	4413      	add	r3, r2
 8004d64:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	4413      	add	r3, r2
 8004d7c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d101      	bne.n	8004d8c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d8c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1b2      	bne.n	8004d02 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3728      	adds	r7, #40	; 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b088      	sub	sp, #32
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d911      	bls.n	8004dee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	6938      	ldr	r0, [r7, #16]
 8004dda:	f002 f917 	bl	800700c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dde:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	441a      	add	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004dec:	e01f      	b.n	8004e2e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	6938      	ldr	r0, [r7, #16]
 8004e02:	f002 f903 	bl	800700c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	4413      	add	r3, r2
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6938      	ldr	r0, [r7, #16]
 8004e20:	f002 f8f4 	bl	800700c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e24:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	60da      	str	r2, [r3, #12]
}
 8004e2e:	bf00      	nop
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d808      	bhi.n	8004e64 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad2      	subs	r2, r2, r3
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e004      	b.n	8004e6e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e6e:	697b      	ldr	r3, [r7, #20]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004e88:	4b3e      	ldr	r3, [pc, #248]	; (8004f84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e8a:	623b      	str	r3, [r7, #32]
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004e96:	f7ff fed1 	bl	8004c3c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4a37      	ldr	r2, [pc, #220]	; (8004f84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ea8:	4413      	add	r3, r2
 8004eaa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d92b      	bls.n	8004f20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bf28      	it	cs
 8004eda:	4613      	movcs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	4413      	add	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	6939      	ldr	r1, [r7, #16]
 8004eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eee:	f002 f88d 	bl	800700c <memcpy>
    NumBytesRead += NumBytesRem;
 8004ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4413      	add	r3, r2
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d101      	bne.n	8004f20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bf28      	it	cs
 8004f30:	4613      	movcs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d019      	beq.n	8004f6e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f40:	4413      	add	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	6939      	ldr	r1, [r7, #16]
 8004f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f4a:	f002 f85f 	bl	800700c <memcpy>
    NumBytesRead += NumBytesRem;
 8004f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3730      	adds	r7, #48	; 0x30
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20019328 	.word	0x20019328

08004f88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f94:	4b3e      	ldr	r3, [pc, #248]	; (8005090 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f96:	623b      	str	r3, [r7, #32]
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fa2:	f7ff fe4b 	bl	8004c3c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	3360      	adds	r3, #96	; 0x60
 8004fb2:	4a37      	ldr	r2, [pc, #220]	; (8005090 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d92b      	bls.n	800502c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	bf28      	it	cs
 8004fe6:	4613      	movcs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	4413      	add	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	6939      	ldr	r1, [r7, #16]
 8004ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ffa:	f002 f807 	bl	800700c <memcpy>
    NumBytesRead += NumBytesRem;
 8004ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005024:	429a      	cmp	r2, r3
 8005026:	d101      	bne.n	800502c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005028:	2300      	movs	r3, #0
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4293      	cmp	r3, r2
 800503a:	bf28      	it	cs
 800503c:	4613      	movcs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d019      	beq.n	800507a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	4413      	add	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005056:	f001 ffd9 	bl	800700c <memcpy>
    NumBytesRead += NumBytesRem;
 800505a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	; 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20019328 	.word	0x20019328

08005094 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	3360      	adds	r3, #96	; 0x60
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050b2:	4413      	add	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d029      	beq.n	8005112 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d82e      	bhi.n	8005120 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d013      	beq.n	80050f2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80050ca:	e029      	b.n	8005120 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050cc:	6978      	ldr	r0, [r7, #20]
 80050ce:	f7ff feb2 	bl	8004e36 <_GetAvailWriteSpace>
 80050d2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d202      	bcs.n	80050e2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80050e0:	e021      	b.n	8005126 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff fe5b 	bl	8004da6 <_WriteNoCheck>
    break;
 80050f0:	e019      	b.n	8005126 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	f7ff fe9f 	bl	8004e36 <_GetAvailWriteSpace>
 80050f8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4293      	cmp	r3, r2
 8005100:	bf28      	it	cs
 8005102:	4613      	movcs	r3, r2
 8005104:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	6978      	ldr	r0, [r7, #20]
 800510c:	f7ff fe4b 	bl	8004da6 <_WriteNoCheck>
    break;
 8005110:	e009      	b.n	8005126 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	6978      	ldr	r0, [r7, #20]
 8005118:	f7ff fde8 	bl	8004cec <_WriteBlocking>
 800511c:	61f8      	str	r0, [r7, #28]
    break;
 800511e:	e002      	b.n	8005126 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
    break;
 8005124:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20019328 	.word	0x20019328

08005134 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800514e:	f7ff fd75 	bl	8004c3c <_DoInit>
  SEGGER_RTT_LOCK();
 8005152:	f3ef 8311 	mrs	r3, BASEPRI
 8005156:	f04f 0120 	mov.w	r1, #32
 800515a:	f381 8811 	msr	BASEPRI, r1
 800515e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff ff95 	bl	8005094 <SEGGER_RTT_WriteDownBufferNoLock>
 800516a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005172:	697b      	ldr	r3, [r7, #20]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20019328 	.word	0x20019328

08005180 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800518e:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <SEGGER_RTT_AllocUpBuffer+0x20>
 800519c:	f7ff fd4e 	bl	8004c3c <_DoInit>
  SEGGER_RTT_LOCK();
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
 80051a4:	f04f 0120 	mov.w	r1, #32
 80051a8:	f381 8811 	msr	BASEPRI, r1
 80051ac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051ae:	4b35      	ldr	r3, [pc, #212]	; (8005284 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051b0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051b6:	6939      	ldr	r1, [r7, #16]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	4613      	mov	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	440b      	add	r3, r1
 80051c6:	3304      	adds	r3, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d008      	beq.n	80051e0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	3301      	adds	r3, #1
 80051d2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	429a      	cmp	r2, r3
 80051dc:	dbeb      	blt.n	80051b6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80051de:	e000      	b.n	80051e2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80051e0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	da3f      	bge.n	800526c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80051ec:	6939      	ldr	r1, [r7, #16]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	4613      	mov	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	440b      	add	r3, r1
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005200:	6939      	ldr	r1, [r7, #16]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	4613      	mov	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	440b      	add	r3, r1
 8005210:	3304      	adds	r3, #4
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005216:	6939      	ldr	r1, [r7, #16]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	4613      	mov	r3, r2
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	3320      	adds	r3, #32
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800522a:	6939      	ldr	r1, [r7, #16]
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	4613      	mov	r3, r2
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	3328      	adds	r3, #40	; 0x28
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	4613      	mov	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	440b      	add	r3, r1
 800524c:	3324      	adds	r3, #36	; 0x24
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005252:	6939      	ldr	r1, [r7, #16]
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	332c      	adds	r3, #44	; 0x2c
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005266:	f3bf 8f5f 	dmb	sy
 800526a:	e002      	b.n	8005272 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800526c:	f04f 33ff 	mov.w	r3, #4294967295
 8005270:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005278:	69fb      	ldr	r3, [r7, #28]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20019328 	.word	0x20019328

08005288 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005296:	4b33      	ldr	r3, [pc, #204]	; (8005364 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052a4:	f7ff fcca 	bl	8004c3c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052a8:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052aa:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d24d      	bcs.n	8005354 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80052b8:	f3ef 8311 	mrs	r3, BASEPRI
 80052bc:	f04f 0120 	mov.w	r1, #32
 80052c0:	f381 8811 	msr	BASEPRI, r1
 80052c4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d031      	beq.n	8005330 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80052cc:	6979      	ldr	r1, [r7, #20]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4613      	mov	r3, r2
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	4413      	add	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	440b      	add	r3, r1
 80052da:	3360      	adds	r3, #96	; 0x60
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	4413      	add	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	440b      	add	r3, r1
 80052ee:	3364      	adds	r3, #100	; 0x64
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80052f4:	6979      	ldr	r1, [r7, #20]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	440b      	add	r3, r1
 8005302:	3368      	adds	r3, #104	; 0x68
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005308:	6979      	ldr	r1, [r7, #20]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4413      	add	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	440b      	add	r3, r1
 8005316:	3370      	adds	r3, #112	; 0x70
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 800531c:	6979      	ldr	r1, [r7, #20]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4613      	mov	r3, r2
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	4413      	add	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	440b      	add	r3, r1
 800532a:	336c      	adds	r3, #108	; 0x6c
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005330:	6979      	ldr	r1, [r7, #20]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4613      	mov	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4413      	add	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	440b      	add	r3, r1
 800533e:	3374      	adds	r3, #116	; 0x74
 8005340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005342:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005344:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	e002      	b.n	800535a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800535a:	69fb      	ldr	r3, [r7, #28]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20019328 	.word	0x20019328

08005368 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005378:	e002      	b.n	8005380 <_EncodeStr+0x18>
    Len++;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f6      	bne.n	800537a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d901      	bls.n	8005398 <_EncodeStr+0x30>
    Len = Limit;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2bfe      	cmp	r3, #254	; 0xfe
 800539c:	d806      	bhi.n	80053ac <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	60fa      	str	r2, [r7, #12]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e011      	b.n	80053d0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1c5a      	adds	r2, r3, #1
 80053b0:	60fa      	str	r2, [r7, #12]
 80053b2:	22ff      	movs	r2, #255	; 0xff
 80053b4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	60fa      	str	r2, [r7, #12]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	0a19      	lsrs	r1, r3, #8
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	60fa      	str	r2, [r7, #12]
 80053cc:	b2ca      	uxtb	r2, r1
 80053ce:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053d4:	e00a      	b.n	80053ec <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	1c53      	adds	r3, r2, #1
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1c59      	adds	r1, r3, #1
 80053e0:	60f9      	str	r1, [r7, #12]
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	701a      	strb	r2, [r3, #0]
    n++;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	3301      	adds	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d3f0      	bcc.n	80053d6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005422:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <_HandleIncomingPacket+0xdc>)
 8005424:	7e1b      	ldrb	r3, [r3, #24]
 8005426:	4618      	mov	r0, r3
 8005428:	1cfb      	adds	r3, r7, #3
 800542a:	2201      	movs	r2, #1
 800542c:	4619      	mov	r1, r3
 800542e:	f7ff fdab 	bl	8004f88 <SEGGER_RTT_ReadNoLock>
 8005432:	4603      	mov	r3, r0
 8005434:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	dd59      	ble.n	80054f0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b80      	cmp	r3, #128	; 0x80
 8005440:	d032      	beq.n	80054a8 <_HandleIncomingPacket+0x8c>
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	dc42      	bgt.n	80054cc <_HandleIncomingPacket+0xb0>
 8005446:	2b07      	cmp	r3, #7
 8005448:	dc16      	bgt.n	8005478 <_HandleIncomingPacket+0x5c>
 800544a:	2b00      	cmp	r3, #0
 800544c:	dd3e      	ble.n	80054cc <_HandleIncomingPacket+0xb0>
 800544e:	3b01      	subs	r3, #1
 8005450:	2b06      	cmp	r3, #6
 8005452:	d83b      	bhi.n	80054cc <_HandleIncomingPacket+0xb0>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <_HandleIncomingPacket+0x40>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	0800547f 	.word	0x0800547f
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548b 	.word	0x0800548b
 8005468:	08005491 	.word	0x08005491
 800546c:	08005497 	.word	0x08005497
 8005470:	0800549d 	.word	0x0800549d
 8005474:	080054a3 	.word	0x080054a3
 8005478:	2b7f      	cmp	r3, #127	; 0x7f
 800547a:	d034      	beq.n	80054e6 <_HandleIncomingPacket+0xca>
 800547c:	e026      	b.n	80054cc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800547e:	f000 ff43 	bl	8006308 <SEGGER_SYSVIEW_Start>
      break;
 8005482:	e035      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005484:	f000 fffc 	bl	8006480 <SEGGER_SYSVIEW_Stop>
      break;
 8005488:	e032      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800548a:	f001 f9d5 	bl	8006838 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800548e:	e02f      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005490:	f001 f99a 	bl	80067c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005494:	e02c      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005496:	f001 f819 	bl	80064cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800549a:	e029      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800549c:	f001 fc68 	bl	8006d70 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80054a0:	e026      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80054a2:	f001 fc47 	bl	8006d34 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80054a6:	e023      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <_HandleIncomingPacket+0xdc>)
 80054aa:	7e1b      	ldrb	r3, [r3, #24]
 80054ac:	4618      	mov	r0, r3
 80054ae:	1cfb      	adds	r3, r7, #3
 80054b0:	2201      	movs	r2, #1
 80054b2:	4619      	mov	r1, r3
 80054b4:	f7ff fd68 	bl	8004f88 <SEGGER_RTT_ReadNoLock>
 80054b8:	4603      	mov	r3, r0
 80054ba:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	dd13      	ble.n	80054ea <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fbb5 	bl	8006c34 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054ca:	e00e      	b.n	80054ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	b25b      	sxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da0c      	bge.n	80054ee <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <_HandleIncomingPacket+0xdc>)
 80054d6:	7e1b      	ldrb	r3, [r3, #24]
 80054d8:	4618      	mov	r0, r3
 80054da:	1cfb      	adds	r3, r7, #3
 80054dc:	2201      	movs	r2, #1
 80054de:	4619      	mov	r1, r3
 80054e0:	f7ff fd52 	bl	8004f88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054e4:	e003      	b.n	80054ee <_HandleIncomingPacket+0xd2>
      break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
      break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <_HandleIncomingPacket+0xd4>
      break;
 80054ee:	bf00      	nop
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	2001a7e8 	.word	0x2001a7e8

080054fc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08c      	sub	sp, #48	; 0x30
 8005500:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005502:	2301      	movs	r3, #1
 8005504:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
 8005516:	e00b      	b.n	8005530 <_TrySendOverflowPacket+0x34>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	09db      	lsrs	r3, r3, #7
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	2b7f      	cmp	r3, #127	; 0x7f
 8005534:	d8f0      	bhi.n	8005518 <_TrySendOverflowPacket+0x1c>
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <_TrySendOverflowPacket+0xe4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800554c:	4b23      	ldr	r3, [pc, #140]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	e00b      	b.n	8005578 <_TrySendOverflowPacket+0x7c>
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	6279      	str	r1, [r7, #36]	; 0x24
 800556a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2b7f      	cmp	r3, #127	; 0x7f
 800557c:	d8f0      	bhi.n	8005560 <_TrySendOverflowPacket+0x64>
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	627a      	str	r2, [r7, #36]	; 0x24
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 8005590:	785b      	ldrb	r3, [r3, #1]
 8005592:	4618      	mov	r0, r3
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	461a      	mov	r2, r3
 800559c:	1d3b      	adds	r3, r7, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	f7fa fe16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055a4:	4603      	mov	r3, r0
 80055a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80055a8:	f7ff fabe 	bl	8004b28 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	3b01      	subs	r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	e004      	b.n	80055d0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80055c6:	4b05      	ldr	r3, [pc, #20]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	3301      	adds	r3, #1
 80055cc:	4a03      	ldr	r2, [pc, #12]	; (80055dc <_TrySendOverflowPacket+0xe0>)
 80055ce:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055d0:	693b      	ldr	r3, [r7, #16]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3730      	adds	r7, #48	; 0x30
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	2001a7e8 	.word	0x2001a7e8
 80055e0:	e0001004 	.word	0xe0001004

080055e4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055f0:	4b6d      	ldr	r3, [pc, #436]	; (80057a8 <_SendPacket+0x1c4>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d010      	beq.n	800561a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055f8:	4b6b      	ldr	r3, [pc, #428]	; (80057a8 <_SendPacket+0x1c4>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a5 	beq.w	800574c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005602:	4b69      	ldr	r3, [pc, #420]	; (80057a8 <_SendPacket+0x1c4>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d109      	bne.n	800561e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800560a:	f7ff ff77 	bl	80054fc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800560e:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <_SendPacket+0x1c4>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b01      	cmp	r3, #1
 8005614:	f040 809c 	bne.w	8005750 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005618:	e001      	b.n	800561e <_SendPacket+0x3a>
    goto Send;
 800561a:	bf00      	nop
 800561c:	e000      	b.n	8005620 <_SendPacket+0x3c>
Send:
 800561e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b1f      	cmp	r3, #31
 8005624:	d809      	bhi.n	800563a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005626:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <_SendPacket+0x1c4>)
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	f040 808d 	bne.w	8005754 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b17      	cmp	r3, #23
 800563e:	d807      	bhi.n	8005650 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e03d      	b.n	80056cc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b7f      	cmp	r3, #127	; 0x7f
 800565c:	d912      	bls.n	8005684 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	09da      	lsrs	r2, r3, #7
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3b01      	subs	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	3a01      	subs	r2, #1
 8005676:	60fa      	str	r2, [r7, #12]
 8005678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e006      	b.n	8005692 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3b01      	subs	r3, #1
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b7f      	cmp	r3, #127	; 0x7f
 8005696:	d912      	bls.n	80056be <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	09da      	lsrs	r2, r3, #7
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3b01      	subs	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	3a01      	subs	r2, #1
 80056b0:	60fa      	str	r2, [r7, #12]
 80056b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	e006      	b.n	80056cc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056cc:	4b37      	ldr	r3, [pc, #220]	; (80057ac <_SendPacket+0x1c8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056d2:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <_SendPacket+0x1c4>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	623b      	str	r3, [r7, #32]
 80056e4:	e00b      	b.n	80056fe <_SendPacket+0x11a>
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	6279      	str	r1, [r7, #36]	; 0x24
 80056f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	09db      	lsrs	r3, r3, #7
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2b7f      	cmp	r3, #127	; 0x7f
 8005702:	d8f0      	bhi.n	80056e6 <_SendPacket+0x102>
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	627a      	str	r2, [r7, #36]	; 0x24
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005714:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <_SendPacket+0x1c4>)
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	4618      	mov	r0, r3
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	461a      	mov	r2, r3
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	f7fa fd54 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005728:	4603      	mov	r3, r0
 800572a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800572c:	f7ff f9fc 	bl	8004b28 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <_SendPacket+0x1c4>)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	60d3      	str	r3, [r2, #12]
 800573c:	e00b      	b.n	8005756 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800573e:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <_SendPacket+0x1c4>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	b2da      	uxtb	r2, r3
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <_SendPacket+0x1c4>)
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e004      	b.n	8005756 <_SendPacket+0x172>
    goto SendDone;
 800574c:	bf00      	nop
 800574e:	e002      	b.n	8005756 <_SendPacket+0x172>
      goto SendDone;
 8005750:	bf00      	nop
 8005752:	e000      	b.n	8005756 <_SendPacket+0x172>
      goto SendDone;
 8005754:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <_SendPacket+0x1c4>)
 8005758:	7e1b      	ldrb	r3, [r3, #24]
 800575a:	4619      	mov	r1, r3
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <_SendPacket+0x1cc>)
 800575e:	460b      	mov	r3, r1
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	440b      	add	r3, r1
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4413      	add	r3, r2
 8005768:	336c      	adds	r3, #108	; 0x6c
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <_SendPacket+0x1c4>)
 800576e:	7e1b      	ldrb	r3, [r3, #24]
 8005770:	4618      	mov	r0, r3
 8005772:	490f      	ldr	r1, [pc, #60]	; (80057b0 <_SendPacket+0x1cc>)
 8005774:	4603      	mov	r3, r0
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4403      	add	r3, r0
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	3370      	adds	r3, #112	; 0x70
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d00b      	beq.n	800579e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005786:	4b08      	ldr	r3, [pc, #32]	; (80057a8 <_SendPacket+0x1c4>)
 8005788:	789b      	ldrb	r3, [r3, #2]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <_SendPacket+0x1c4>)
 8005790:	2201      	movs	r2, #1
 8005792:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005794:	f7ff fe42 	bl	800541c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <_SendPacket+0x1c4>)
 800579a:	2200      	movs	r2, #0
 800579c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800579e:	bf00      	nop
 80057a0:	3728      	adds	r7, #40	; 0x28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	2001a7e8 	.word	0x2001a7e8
 80057ac:	e0001004 	.word	0xe0001004
 80057b0:	20019328 	.word	0x20019328

080057b4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	2b80      	cmp	r3, #128	; 0x80
 80057cc:	d80a      	bhi.n	80057e4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6051      	str	r1, [r2, #4]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d15a      	bne.n	80058a2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	e00b      	b.n	8005826 <_StoreChar+0x72>
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1c59      	adds	r1, r3, #1
 8005816:	6279      	str	r1, [r7, #36]	; 0x24
 8005818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800581c:	b2d2      	uxtb	r2, r2
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	09db      	lsrs	r3, r3, #7
 8005824:	623b      	str	r3, [r7, #32]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2b7f      	cmp	r3, #127	; 0x7f
 800582a:	d8f0      	bhi.n	800580e <_StoreChar+0x5a>
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	627a      	str	r2, [r7, #36]	; 0x24
 8005832:	6a3a      	ldr	r2, [r7, #32]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	2300      	movs	r3, #0
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e00b      	b.n	800585e <_StoreChar+0xaa>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	61f9      	str	r1, [r7, #28]
 8005850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b7f      	cmp	r3, #127	; 0x7f
 8005862:	d8f0      	bhi.n	8005846 <_StoreChar+0x92>
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	61fa      	str	r2, [r7, #28]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	221a      	movs	r2, #26
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	4618      	mov	r0, r3
 800587e:	f7ff feb1 	bl	80055e4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fdbb 	bl	8005402 <_PreparePacket>
 800588c:	4602      	mov	r2, r0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
  }
}
 80058a2:	bf00      	nop
 80058a4:	3728      	adds	r7, #40	; 0x28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80058be:	2301      	movs	r3, #1
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80058c2:	2301      	movs	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058c6:	e007      	b.n	80058d8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d0:	623b      	str	r3, [r7, #32]
    Width++;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d2f3      	bcs.n	80058c8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d901      	bls.n	80058ec <_PrintUnsigned+0x40>
    Width = NumDigits;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d11f      	bne.n	8005936 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01c      	beq.n	8005936 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <_PrintUnsigned+0x66>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <_PrintUnsigned+0x66>
        c = '0';
 800590c:	2330      	movs	r3, #48	; 0x30
 800590e:	76fb      	strb	r3, [r7, #27]
 8005910:	e001      	b.n	8005916 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005912:	2320      	movs	r3, #32
 8005914:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005916:	e007      	b.n	8005928 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	3b01      	subs	r3, #1
 800591c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800591e:	7efb      	ldrb	r3, [r7, #27]
 8005920:	4619      	mov	r1, r3
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff ff46 	bl	80057b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <_PrintUnsigned+0x8a>
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	429a      	cmp	r2, r3
 8005934:	d3f0      	bcc.n	8005918 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d903      	bls.n	8005944 <_PrintUnsigned+0x98>
      NumDigits--;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	e009      	b.n	8005958 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	fbb2 f3f3 	udiv	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d200      	bcs.n	8005958 <_PrintUnsigned+0xac>
        break;
 8005956:	e005      	b.n	8005964 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005962:	e7e8      	b.n	8005936 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	fbb2 f3f3 	udiv	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <_PrintUnsigned+0x128>)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	4413      	add	r3, r2
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	4619      	mov	r1, r3
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff14 	bl	80057b4 <_StoreChar>
    Digit /= Base;
 800598c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e3      	bne.n	8005964 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00e      	beq.n	80059ca <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059ac:	e006      	b.n	80059bc <_PrintUnsigned+0x110>
        FieldWidth--;
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	3b01      	subs	r3, #1
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80059b4:	2120      	movs	r1, #32
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff fefc 	bl	80057b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <_PrintUnsigned+0x11e>
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d3f1      	bcc.n	80059ae <_PrintUnsigned+0x102>
      }
    }
  }
}
 80059ca:	bf00      	nop
 80059cc:	3728      	adds	r7, #40	; 0x28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08007a38 	.word	0x08007a38

080059d8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af02      	add	r7, sp, #8
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bfb8      	it	lt
 80059ec:	425b      	neglt	r3, r3
 80059ee:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80059f0:	2301      	movs	r3, #1
 80059f2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80059f4:	e007      	b.n	8005a06 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80059fe:	613b      	str	r3, [r7, #16]
    Width++;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	3301      	adds	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	daf3      	bge.n	80059f6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d901      	bls.n	8005a1a <_PrintInt+0x42>
    Width = NumDigits;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <_PrintInt+0x5e>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	db04      	blt.n	8005a30 <_PrintInt+0x58>
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <_PrintInt+0x5e>
    FieldWidth--;
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <_PrintInt+0x6e>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <_PrintInt+0x9c>
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d111      	bne.n	8005a74 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00e      	beq.n	8005a74 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a56:	e006      	b.n	8005a66 <_PrintInt+0x8e>
        FieldWidth--;
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005a5e:	2120      	movs	r1, #32
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fea7 	bl	80057b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <_PrintInt+0x9c>
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3f1      	bcc.n	8005a58 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da07      	bge.n	8005a8a <_PrintInt+0xb2>
    v = -v;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005a80:	212d      	movs	r1, #45	; 0x2d
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f7ff fe96 	bl	80057b4 <_StoreChar>
 8005a88:	e008      	b.n	8005a9c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005a94:	212b      	movs	r1, #43	; 0x2b
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fe8c 	bl	80057b4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d019      	beq.n	8005ada <_PrintInt+0x102>
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d114      	bne.n	8005ada <_PrintInt+0x102>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d111      	bne.n	8005ada <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00e      	beq.n	8005ada <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005abc:	e006      	b.n	8005acc <_PrintInt+0xf4>
        FieldWidth--;
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005ac4:	2130      	movs	r1, #48	; 0x30
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff fe74 	bl	80057b4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <_PrintInt+0x102>
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d3f1      	bcc.n	8005abe <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff fedf 	bl	80058ac <_PrintUnsigned>
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b098      	sub	sp, #96	; 0x60
 8005afc:	af02      	add	r7, sp, #8
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b04:	f3ef 8311 	mrs	r3, BASEPRI
 8005b08:	f04f 0120 	mov.w	r1, #32
 8005b0c:	f381 8811 	msr	BASEPRI, r1
 8005b10:	633b      	str	r3, [r7, #48]	; 0x30
 8005b12:	48b7      	ldr	r0, [pc, #732]	; (8005df0 <_VPrintTarget+0x2f8>)
 8005b14:	f7ff fc75 	bl	8005402 <_PreparePacket>
 8005b18:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b1a:	4bb5      	ldr	r3, [pc, #724]	; (8005df0 <_VPrintTarget+0x2f8>)
 8005b1c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8183 	beq.w	8005e4e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b4c:	2b25      	cmp	r3, #37	; 0x25
 8005b4e:	f040 8170 	bne.w	8005e32 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005b52:	2300      	movs	r3, #0
 8005b54:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005b56:	2301      	movs	r3, #1
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b66:	3b23      	subs	r3, #35	; 0x23
 8005b68:	2b0d      	cmp	r3, #13
 8005b6a:	d83f      	bhi.n	8005bec <_VPrintTarget+0xf4>
 8005b6c:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <_VPrintTarget+0x7c>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005bdd 	.word	0x08005bdd
 8005b78:	08005bed 	.word	0x08005bed
 8005b7c:	08005bed 	.word	0x08005bed
 8005b80:	08005bed 	.word	0x08005bed
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005bed 	.word	0x08005bed
 8005b8c:	08005bed 	.word	0x08005bed
 8005b90:	08005bed 	.word	0x08005bed
 8005b94:	08005bcd 	.word	0x08005bcd
 8005b98:	08005bed 	.word	0x08005bed
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bed 	.word	0x08005bed
 8005ba4:	08005bed 	.word	0x08005bed
 8005ba8:	08005bbd 	.word	0x08005bbd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e01a      	b.n	8005bf2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e012      	b.n	8005bf2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005bcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e00a      	b.n	8005bf2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	f043 0308 	orr.w	r3, r3, #8
 8005be2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e002      	b.n	8005bf2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005bec:	2300      	movs	r3, #0
 8005bee:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf0:	bf00      	nop
        }
      } while (v);
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1b0      	bne.n	8005b5a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005c04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c08:	2b2f      	cmp	r3, #47	; 0x2f
 8005c0a:	d912      	bls.n	8005c32 <_VPrintTarget+0x13a>
 8005c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c10:	2b39      	cmp	r3, #57	; 0x39
 8005c12:	d80e      	bhi.n	8005c32 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	461a      	mov	r2, r3
 8005c26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3b30      	subs	r3, #48	; 0x30
 8005c2e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005c30:	e7e4      	b.n	8005bfc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c32:	2300      	movs	r3, #0
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005c3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c42:	2b2e      	cmp	r3, #46	; 0x2e
 8005c44:	d11d      	bne.n	8005c82 <_VPrintTarget+0x18a>
        sFormat++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005c54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c58:	2b2f      	cmp	r3, #47	; 0x2f
 8005c5a:	d912      	bls.n	8005c82 <_VPrintTarget+0x18a>
 8005c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c60:	2b39      	cmp	r3, #57	; 0x39
 8005c62:	d80e      	bhi.n	8005c82 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005c6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	461a      	mov	r2, r3
 8005c76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c7a:	4413      	add	r3, r2
 8005c7c:	3b30      	subs	r3, #48	; 0x30
 8005c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005c80:	e7e4      	b.n	8005c4c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005c8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c8e:	2b6c      	cmp	r3, #108	; 0x6c
 8005c90:	d003      	beq.n	8005c9a <_VPrintTarget+0x1a2>
 8005c92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c96:	2b68      	cmp	r3, #104	; 0x68
 8005c98:	d107      	bne.n	8005caa <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005ca8:	e7ef      	b.n	8005c8a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cae:	2b25      	cmp	r3, #37	; 0x25
 8005cb0:	f000 80b3 	beq.w	8005e1a <_VPrintTarget+0x322>
 8005cb4:	2b25      	cmp	r3, #37	; 0x25
 8005cb6:	f2c0 80b7 	blt.w	8005e28 <_VPrintTarget+0x330>
 8005cba:	2b78      	cmp	r3, #120	; 0x78
 8005cbc:	f300 80b4 	bgt.w	8005e28 <_VPrintTarget+0x330>
 8005cc0:	2b58      	cmp	r3, #88	; 0x58
 8005cc2:	f2c0 80b1 	blt.w	8005e28 <_VPrintTarget+0x330>
 8005cc6:	3b58      	subs	r3, #88	; 0x58
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	f200 80ad 	bhi.w	8005e28 <_VPrintTarget+0x330>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <_VPrintTarget+0x1dc>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005dcb 	.word	0x08005dcb
 8005cd8:	08005e29 	.word	0x08005e29
 8005cdc:	08005e29 	.word	0x08005e29
 8005ce0:	08005e29 	.word	0x08005e29
 8005ce4:	08005e29 	.word	0x08005e29
 8005ce8:	08005e29 	.word	0x08005e29
 8005cec:	08005e29 	.word	0x08005e29
 8005cf0:	08005e29 	.word	0x08005e29
 8005cf4:	08005e29 	.word	0x08005e29
 8005cf8:	08005e29 	.word	0x08005e29
 8005cfc:	08005e29 	.word	0x08005e29
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d7f 	.word	0x08005d7f
 8005d08:	08005e29 	.word	0x08005e29
 8005d0c:	08005e29 	.word	0x08005e29
 8005d10:	08005e29 	.word	0x08005e29
 8005d14:	08005e29 	.word	0x08005e29
 8005d18:	08005e29 	.word	0x08005e29
 8005d1c:	08005e29 	.word	0x08005e29
 8005d20:	08005e29 	.word	0x08005e29
 8005d24:	08005e29 	.word	0x08005e29
 8005d28:	08005e29 	.word	0x08005e29
 8005d2c:	08005e29 	.word	0x08005e29
 8005d30:	08005e29 	.word	0x08005e29
 8005d34:	08005df5 	.word	0x08005df5
 8005d38:	08005e29 	.word	0x08005e29
 8005d3c:	08005e29 	.word	0x08005e29
 8005d40:	08005e29 	.word	0x08005e29
 8005d44:	08005e29 	.word	0x08005e29
 8005d48:	08005da5 	.word	0x08005da5
 8005d4c:	08005e29 	.word	0x08005e29
 8005d50:	08005e29 	.word	0x08005e29
 8005d54:	08005dcb 	.word	0x08005dcb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1d19      	adds	r1, r3, #4
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005d6c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fd1c 	bl	80057b4 <_StoreChar>
        break;
 8005d7c:	e055      	b.n	8005e2a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1d19      	adds	r1, r3, #4
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6011      	str	r1, [r2, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005d8c:	f107 0014 	add.w	r0, r7, #20
 8005d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9a:	220a      	movs	r2, #10
 8005d9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d9e:	f7ff fe1b 	bl	80059d8 <_PrintInt>
        break;
 8005da2:	e042      	b.n	8005e2a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	1d19      	adds	r1, r3, #4
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005db2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005db4:	f107 0014 	add.w	r0, r7, #20
 8005db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc2:	220a      	movs	r2, #10
 8005dc4:	f7ff fd72 	bl	80058ac <_PrintUnsigned>
        break;
 8005dc8:	e02f      	b.n	8005e2a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	1d19      	adds	r1, r3, #4
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6011      	str	r1, [r2, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005dd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dda:	f107 0014 	add.w	r0, r7, #20
 8005dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de8:	2210      	movs	r2, #16
 8005dea:	f7ff fd5f 	bl	80058ac <_PrintUnsigned>
        break;
 8005dee:	e01c      	b.n	8005e2a <_VPrintTarget+0x332>
 8005df0:	2001a818 	.word	0x2001a818
      case 'p':
        v = va_arg(*pParamList, int);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	1d19      	adds	r1, r3, #4
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e04:	f107 0014 	add.w	r0, r7, #20
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	2308      	movs	r3, #8
 8005e12:	2210      	movs	r2, #16
 8005e14:	f7ff fd4a 	bl	80058ac <_PrintUnsigned>
        break;
 8005e18:	e007      	b.n	8005e2a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	2125      	movs	r1, #37	; 0x25
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff fcc7 	bl	80057b4 <_StoreChar>
        break;
 8005e26:	e000      	b.n	8005e2a <_VPrintTarget+0x332>
      default:
        break;
 8005e28:	bf00      	nop
      }
      sFormat++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e007      	b.n	8005e42 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fcb9 	bl	80057b4 <_StoreChar>
    }
  } while (*sFormat);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f47f ae72 	bne.w	8005b30 <_VPrintTarget+0x38>
 8005e4c:	e000      	b.n	8005e50 <_VPrintTarget+0x358>
      break;
 8005e4e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d041      	beq.n	8005eda <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	643b      	str	r3, [r7, #64]	; 0x40
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e66:	e00b      	b.n	8005e80 <_VPrintTarget+0x388>
 8005e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	6439      	str	r1, [r7, #64]	; 0x40
 8005e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e7c:	09db      	lsrs	r3, r3, #7
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e82:	2b7f      	cmp	r3, #127	; 0x7f
 8005e84:	d8f0      	bhi.n	8005e68 <_VPrintTarget+0x370>
 8005e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	643a      	str	r2, [r7, #64]	; 0x40
 8005e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e94:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9e:	e00b      	b.n	8005eb8 <_VPrintTarget+0x3c0>
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	63b9      	str	r1, [r7, #56]	; 0x38
 8005eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb4:	09db      	lsrs	r3, r3, #7
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebc:	d8f0      	bhi.n	8005ea0 <_VPrintTarget+0x3a8>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ec4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	69b9      	ldr	r1, [r7, #24]
 8005ed2:	221a      	movs	r2, #26
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fb85 	bl	80055e4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005ee0:	bf00      	nop
 8005ee2:	3758      	adds	r7, #88	; 0x58
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005efc:	4917      	ldr	r1, [pc, #92]	; (8005f5c <SEGGER_SYSVIEW_Init+0x74>)
 8005efe:	4818      	ldr	r0, [pc, #96]	; (8005f60 <SEGGER_SYSVIEW_Init+0x78>)
 8005f00:	f7ff f93e 	bl	8005180 <SEGGER_RTT_AllocUpBuffer>
 8005f04:	4603      	mov	r3, r0
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f0a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f0c:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f0e:	785a      	ldrb	r2, [r3, #1]
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f12:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f16:	7e1b      	ldrb	r3, [r3, #24]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	2308      	movs	r3, #8
 8005f20:	4a11      	ldr	r2, [pc, #68]	; (8005f68 <SEGGER_SYSVIEW_Init+0x80>)
 8005f22:	490f      	ldr	r1, [pc, #60]	; (8005f60 <SEGGER_SYSVIEW_Init+0x78>)
 8005f24:	f7ff f9b0 	bl	8005288 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <SEGGER_SYSVIEW_Init+0x84>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a0c      	ldr	r2, [pc, #48]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f34:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f36:	4a0b      	ldr	r2, [pc, #44]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f3c:	4a09      	ldr	r2, [pc, #36]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f42:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f48:	4a06      	ldr	r2, [pc, #24]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	200197e0 	.word	0x200197e0
 8005f60:	08007a00 	.word	0x08007a00
 8005f64:	2001a7e8 	.word	0x2001a7e8
 8005f68:	2001a7e0 	.word	0x2001a7e0
 8005f6c:	e0001004 	.word	0xe0001004

08005f70 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f78:	4a04      	ldr	r2, [pc, #16]	; (8005f8c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6113      	str	r3, [r2, #16]
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	2001a7e8 	.word	0x2001a7e8

08005f90 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f98:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9c:	f04f 0120 	mov.w	r1, #32
 8005fa0:	f381 8811 	msr	BASEPRI, r1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	4808      	ldr	r0, [pc, #32]	; (8005fc8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005fa8:	f7ff fa2b 	bl	8005402 <_PreparePacket>
 8005fac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	68b8      	ldr	r0, [r7, #8]
 8005fb4:	f7ff fb16 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f383 8811 	msr	BASEPRI, r3
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	2001a818 	.word	0x2001a818

08005fcc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fda:	f04f 0120 	mov.w	r1, #32
 8005fde:	f381 8811 	msr	BASEPRI, r1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	4816      	ldr	r0, [pc, #88]	; (8006040 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fe6:	f7ff fa0c 	bl	8005402 <_PreparePacket>
 8005fea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e00b      	b.n	8006012 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	1c59      	adds	r1, r3, #1
 8006002:	61f9      	str	r1, [r7, #28]
 8006004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	09db      	lsrs	r3, r3, #7
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b7f      	cmp	r3, #127	; 0x7f
 8006016:	d8f0      	bhi.n	8005ffa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	61fa      	str	r2, [r7, #28]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	6938      	ldr	r0, [r7, #16]
 800602e:	f7ff fad9 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f383 8811 	msr	BASEPRI, r3
}
 8006038:	bf00      	nop
 800603a:	3720      	adds	r7, #32
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	2001a818 	.word	0x2001a818

08006044 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006050:	f3ef 8311 	mrs	r3, BASEPRI
 8006054:	f04f 0120 	mov.w	r1, #32
 8006058:	f381 8811 	msr	BASEPRI, r1
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	4825      	ldr	r0, [pc, #148]	; (80060f4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006060:	f7ff f9cf 	bl	8005402 <_PreparePacket>
 8006064:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
 8006072:	e00b      	b.n	800608c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800607e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	2b7f      	cmp	r3, #127	; 0x7f
 8006090:	d8f0      	bhi.n	8006074 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	623b      	str	r3, [r7, #32]
 80060aa:	e00b      	b.n	80060c4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	6279      	str	r1, [r7, #36]	; 0x24
 80060b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	09db      	lsrs	r3, r3, #7
 80060c2:	623b      	str	r3, [r7, #32]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2b7f      	cmp	r3, #127	; 0x7f
 80060c8:	d8f0      	bhi.n	80060ac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	627a      	str	r2, [r7, #36]	; 0x24
 80060d0:	6a3a      	ldr	r2, [r7, #32]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	69b8      	ldr	r0, [r7, #24]
 80060e0:	f7ff fa80 	bl	80055e4 <_SendPacket>
  RECORD_END();
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f383 8811 	msr	BASEPRI, r3
}
 80060ea:	bf00      	nop
 80060ec:	3730      	adds	r7, #48	; 0x30
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	2001a818 	.word	0x2001a818

080060f8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	; 0x38
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006106:	f3ef 8311 	mrs	r3, BASEPRI
 800610a:	f04f 0120 	mov.w	r1, #32
 800610e:	f381 8811 	msr	BASEPRI, r1
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	4832      	ldr	r0, [pc, #200]	; (80061e0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006116:	f7ff f974 	bl	8005402 <_PreparePacket>
 800611a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	633b      	str	r3, [r7, #48]	; 0x30
 8006128:	e00b      	b.n	8006142 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	b2da      	uxtb	r2, r3
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	1c59      	adds	r1, r3, #1
 8006132:	6379      	str	r1, [r7, #52]	; 0x34
 8006134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	09db      	lsrs	r3, r3, #7
 8006140:	633b      	str	r3, [r7, #48]	; 0x30
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b7f      	cmp	r3, #127	; 0x7f
 8006146:	d8f0      	bhi.n	800612a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	637a      	str	r2, [r7, #52]	; 0x34
 800614e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006160:	e00b      	b.n	800617a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	b2da      	uxtb	r2, r3
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800616c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	09db      	lsrs	r3, r3, #7
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
 800617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617c:	2b7f      	cmp	r3, #127	; 0x7f
 800617e:	d8f0      	bhi.n	8006162 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	627b      	str	r3, [r7, #36]	; 0x24
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	6279      	str	r1, [r7, #36]	; 0x24
 80061a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	623b      	str	r3, [r7, #32]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2b7f      	cmp	r3, #127	; 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	627a      	str	r2, [r7, #36]	; 0x24
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	6979      	ldr	r1, [r7, #20]
 80061cc:	69b8      	ldr	r0, [r7, #24]
 80061ce:	f7ff fa09 	bl	80055e4 <_SendPacket>
  RECORD_END();
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f383 8811 	msr	BASEPRI, r3
}
 80061d8:	bf00      	nop
 80061da:	3738      	adds	r7, #56	; 0x38
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	2001a818 	.word	0x2001a818

080061e4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b090      	sub	sp, #64	; 0x40
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f2:	f3ef 8311 	mrs	r3, BASEPRI
 80061f6:	f04f 0120 	mov.w	r1, #32
 80061fa:	f381 8811 	msr	BASEPRI, r1
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	4840      	ldr	r0, [pc, #256]	; (8006304 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006202:	f7ff f8fe 	bl	8005402 <_PreparePacket>
 8006206:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
 8006214:	e00b      	b.n	800622e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	b2da      	uxtb	r2, r3
 800621a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622a:	09db      	lsrs	r3, r3, #7
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	2b7f      	cmp	r3, #127	; 0x7f
 8006232:	d8f0      	bhi.n	8006216 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800623a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006242:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
 800624c:	e00b      	b.n	8006266 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	b2da      	uxtb	r2, r3
 8006252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006254:	1c59      	adds	r1, r3, #1
 8006256:	6379      	str	r1, [r7, #52]	; 0x34
 8006258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	09db      	lsrs	r3, r3, #7
 8006264:	633b      	str	r3, [r7, #48]	; 0x30
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b7f      	cmp	r3, #127	; 0x7f
 800626a:	d8f0      	bhi.n	800624e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	637a      	str	r2, [r7, #52]	; 0x34
 8006272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
 8006284:	e00b      	b.n	800629e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	b2da      	uxtb	r2, r3
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	1c59      	adds	r1, r3, #1
 800628e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	62bb      	str	r3, [r7, #40]	; 0x28
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	2b7f      	cmp	r3, #127	; 0x7f
 80062a2:	d8f0      	bhi.n	8006286 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ba:	623b      	str	r3, [r7, #32]
 80062bc:	e00b      	b.n	80062d6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	6279      	str	r1, [r7, #36]	; 0x24
 80062c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	623b      	str	r3, [r7, #32]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	2b7f      	cmp	r3, #127	; 0x7f
 80062da:	d8f0      	bhi.n	80062be <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	627a      	str	r2, [r7, #36]	; 0x24
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	6979      	ldr	r1, [r7, #20]
 80062f0:	69b8      	ldr	r0, [r7, #24]
 80062f2:	f7ff f977 	bl	80055e4 <_SendPacket>
  RECORD_END();
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	f383 8811 	msr	BASEPRI, r3
}
 80062fc:	bf00      	nop
 80062fe:	3740      	adds	r7, #64	; 0x40
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2001a818 	.word	0x2001a818

08006308 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800630e:	4b59      	ldr	r3, [pc, #356]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 8006310:	2201      	movs	r2, #1
 8006312:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	f04f 0120 	mov.w	r1, #32
 800631c:	f381 8811 	msr	BASEPRI, r1
 8006320:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006322:	4b54      	ldr	r3, [pc, #336]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	220a      	movs	r2, #10
 8006328:	4953      	ldr	r1, [pc, #332]	; (8006478 <SEGGER_SYSVIEW_Start+0x170>)
 800632a:	4618      	mov	r0, r3
 800632c:	f7f9 ff50 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006336:	f7fe fbf7 	bl	8004b28 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800633a:	200a      	movs	r0, #10
 800633c:	f7ff fe28 	bl	8005f90 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	f04f 0120 	mov.w	r1, #32
 8006348:	f381 8811 	msr	BASEPRI, r1
 800634c:	60bb      	str	r3, [r7, #8]
 800634e:	484b      	ldr	r0, [pc, #300]	; (800647c <SEGGER_SYSVIEW_Start+0x174>)
 8006350:	f7ff f857 	bl	8005402 <_PreparePacket>
 8006354:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635e:	4b45      	ldr	r3, [pc, #276]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_Start+0x76>
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	62bb      	str	r3, [r7, #40]	; 0x28
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_Start+0x5e>
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	62fa      	str	r2, [r7, #44]	; 0x2c
 800638a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
 8006398:	4b36      	ldr	r3, [pc, #216]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	623b      	str	r3, [r7, #32]
 800639e:	e00b      	b.n	80063b8 <SEGGER_SYSVIEW_Start+0xb0>
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	6279      	str	r1, [r7, #36]	; 0x24
 80063aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	09db      	lsrs	r3, r3, #7
 80063b6:	623b      	str	r3, [r7, #32]
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	2b7f      	cmp	r3, #127	; 0x7f
 80063bc:	d8f0      	bhi.n	80063a0 <SEGGER_SYSVIEW_Start+0x98>
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	627a      	str	r2, [r7, #36]	; 0x24
 80063c4:	6a3a      	ldr	r2, [r7, #32]
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	4b28      	ldr	r3, [pc, #160]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e00b      	b.n	80063f2 <SEGGER_SYSVIEW_Start+0xea>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	1c59      	adds	r1, r3, #1
 80063e2:	61f9      	str	r1, [r7, #28]
 80063e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	09db      	lsrs	r3, r3, #7
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	2b7f      	cmp	r3, #127	; 0x7f
 80063f6:	d8f0      	bhi.n	80063da <SEGGER_SYSVIEW_Start+0xd2>
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	61fa      	str	r2, [r7, #28]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	e00b      	b.n	800642a <SEGGER_SYSVIEW_Start+0x122>
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	6179      	str	r1, [r7, #20]
 800641c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	09db      	lsrs	r3, r3, #7
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b7f      	cmp	r3, #127	; 0x7f
 800642e:	d8f0      	bhi.n	8006412 <SEGGER_SYSVIEW_Start+0x10a>
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	617a      	str	r2, [r7, #20]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006440:	2218      	movs	r2, #24
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff f8cd 	bl	80055e4 <_SendPacket>
      RECORD_END();
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006450:	4b08      	ldr	r3, [pc, #32]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006458:	4b06      	ldr	r3, [pc, #24]	; (8006474 <SEGGER_SYSVIEW_Start+0x16c>)
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800645e:	f000 f9eb 	bl	8006838 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006462:	f000 f9b1 	bl	80067c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006466:	f000 fc83 	bl	8006d70 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800646a:	bf00      	nop
 800646c:	3730      	adds	r7, #48	; 0x30
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	2001a7e8 	.word	0x2001a7e8
 8006478:	08007a2c 	.word	0x08007a2c
 800647c:	2001a818 	.word	0x2001a818

08006480 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006486:	f3ef 8311 	mrs	r3, BASEPRI
 800648a:	f04f 0120 	mov.w	r1, #32
 800648e:	f381 8811 	msr	BASEPRI, r1
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	480b      	ldr	r0, [pc, #44]	; (80064c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006496:	f7fe ffb4 	bl	8005402 <_PreparePacket>
 800649a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064a4:	220b      	movs	r2, #11
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6838      	ldr	r0, [r7, #0]
 80064aa:	f7ff f89b 	bl	80055e4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f383 8811 	msr	BASEPRI, r3
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	2001a818 	.word	0x2001a818
 80064c8:	2001a7e8 	.word	0x2001a7e8

080064cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064d2:	f3ef 8311 	mrs	r3, BASEPRI
 80064d6:	f04f 0120 	mov.w	r1, #32
 80064da:	f381 8811 	msr	BASEPRI, r1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	4845      	ldr	r0, [pc, #276]	; (80065f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064e2:	f7fe ff8e 	bl	8005402 <_PreparePacket>
 80064e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f0:	4b42      	ldr	r3, [pc, #264]	; (80065fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f6:	e00b      	b.n	8006510 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	09db      	lsrs	r3, r3, #7
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	2b7f      	cmp	r3, #127	; 0x7f
 8006514:	d8f0      	bhi.n	80064f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800651c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
 800652a:	4b34      	ldr	r3, [pc, #208]	; (80065fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	623b      	str	r3, [r7, #32]
 8006530:	e00b      	b.n	800654a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	b2da      	uxtb	r2, r3
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1c59      	adds	r1, r3, #1
 800653a:	6279      	str	r1, [r7, #36]	; 0x24
 800653c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	09db      	lsrs	r3, r3, #7
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	2b7f      	cmp	r3, #127	; 0x7f
 800654e:	d8f0      	bhi.n	8006532 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	627a      	str	r2, [r7, #36]	; 0x24
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	4b25      	ldr	r3, [pc, #148]	; (80065fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	e00b      	b.n	8006584 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	61f9      	str	r1, [r7, #28]
 8006576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b7f      	cmp	r3, #127	; 0x7f
 8006588:	d8f0      	bhi.n	800656c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	61fa      	str	r2, [r7, #28]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e00b      	b.n	80065bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1c59      	adds	r1, r3, #1
 80065ac:	6179      	str	r1, [r7, #20]
 80065ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	09db      	lsrs	r3, r3, #7
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b7f      	cmp	r3, #127	; 0x7f
 80065c0:	d8f0      	bhi.n	80065a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	617a      	str	r2, [r7, #20]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065d2:	2218      	movs	r2, #24
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68b8      	ldr	r0, [r7, #8]
 80065d8:	f7ff f804 	bl	80055e4 <_SendPacket>
  RECORD_END();
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	4798      	blx	r3
  }
}
 80065f0:	bf00      	nop
 80065f2:	3730      	adds	r7, #48	; 0x30
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	2001a818 	.word	0x2001a818
 80065fc:	2001a7e8 	.word	0x2001a7e8

08006600 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006600:	b580      	push	{r7, lr}
 8006602:	b092      	sub	sp, #72	; 0x48
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006608:	f3ef 8311 	mrs	r3, BASEPRI
 800660c:	f04f 0120 	mov.w	r1, #32
 8006610:	f381 8811 	msr	BASEPRI, r1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	486a      	ldr	r0, [pc, #424]	; (80067c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006618:	f7fe fef3 	bl	8005402 <_PreparePacket>
 800661c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	647b      	str	r3, [r7, #68]	; 0x44
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b66      	ldr	r3, [pc, #408]	; (80067c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	643b      	str	r3, [r7, #64]	; 0x40
 8006632:	e00b      	b.n	800664c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006636:	b2da      	uxtb	r2, r3
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	6479      	str	r1, [r7, #68]	; 0x44
 800663e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006648:	09db      	lsrs	r3, r3, #7
 800664a:	643b      	str	r3, [r7, #64]	; 0x40
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	2b7f      	cmp	r3, #127	; 0x7f
 8006650:	d8f0      	bhi.n	8006634 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	647a      	str	r2, [r7, #68]	; 0x44
 8006658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006660:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	63bb      	str	r3, [r7, #56]	; 0x38
 800666c:	e00b      	b.n	8006686 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006678:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b7f      	cmp	r3, #127	; 0x7f
 800668a:	d8f0      	bhi.n	800666e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800668c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800669a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	4619      	mov	r1, r3
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7fe fe5f 	bl	8005368 <_EncodeStr>
 80066aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80066ac:	2209      	movs	r2, #9
 80066ae:	68f9      	ldr	r1, [r7, #12]
 80066b0:	6938      	ldr	r0, [r7, #16]
 80066b2:	f7fe ff97 	bl	80055e4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b40      	ldr	r3, [pc, #256]	; (80067c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	633b      	str	r3, [r7, #48]	; 0x30
 80066ca:	e00b      	b.n	80066e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d2:	1c59      	adds	r1, r3, #1
 80066d4:	6379      	str	r1, [r7, #52]	; 0x34
 80066d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	09db      	lsrs	r3, r3, #7
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	2b7f      	cmp	r3, #127	; 0x7f
 80066e8:	d8f0      	bhi.n	80066cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	637a      	str	r2, [r7, #52]	; 0x34
 80066f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	62bb      	str	r3, [r7, #40]	; 0x28
 8006704:	e00b      	b.n	800671e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	b2da      	uxtb	r2, r3
 800670a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670c:	1c59      	adds	r1, r3, #1
 800670e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006710:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	09db      	lsrs	r3, r3, #7
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	2b7f      	cmp	r3, #127	; 0x7f
 8006722:	d8f0      	bhi.n	8006706 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	62fa      	str	r2, [r7, #44]	; 0x2c
 800672a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6279      	str	r1, [r7, #36]	; 0x24
 800674a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	623b      	str	r3, [r7, #32]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	627a      	str	r2, [r7, #36]	; 0x24
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e00b      	b.n	8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	61f9      	str	r1, [r7, #28]
 8006782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b7f      	cmp	r3, #127	; 0x7f
 8006794:	d8f0      	bhi.n	8006778 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	61fa      	str	r2, [r7, #28]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067a6:	2215      	movs	r2, #21
 80067a8:	68f9      	ldr	r1, [r7, #12]
 80067aa:	6938      	ldr	r0, [r7, #16]
 80067ac:	f7fe ff1a 	bl	80055e4 <_SendPacket>
  RECORD_END();
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f383 8811 	msr	BASEPRI, r3
}
 80067b6:	bf00      	nop
 80067b8:	3748      	adds	r7, #72	; 0x48
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2001a818 	.word	0x2001a818
 80067c4:	2001a7e8 	.word	0x2001a7e8

080067c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067de:	4b03      	ldr	r3, [pc, #12]	; (80067ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4798      	blx	r3
  }
}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2001a7e8 	.word	0x2001a7e8

080067f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b086      	sub	sp, #24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067f8:	f3ef 8311 	mrs	r3, BASEPRI
 80067fc:	f04f 0120 	mov.w	r1, #32
 8006800:	f381 8811 	msr	BASEPRI, r1
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	480b      	ldr	r0, [pc, #44]	; (8006834 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006808:	f7fe fdfb 	bl	8005402 <_PreparePacket>
 800680c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800680e:	2280      	movs	r2, #128	; 0x80
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	6938      	ldr	r0, [r7, #16]
 8006814:	f7fe fda8 	bl	8005368 <_EncodeStr>
 8006818:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800681a:	220e      	movs	r2, #14
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	6938      	ldr	r0, [r7, #16]
 8006820:	f7fe fee0 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f383 8811 	msr	BASEPRI, r3
}
 800682a:	bf00      	nop
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	2001a818 	.word	0x2001a818

08006838 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006838:	b590      	push	{r4, r7, lr}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01a      	beq.n	800687c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006846:	4b13      	ldr	r3, [pc, #76]	; (8006894 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d015      	beq.n	800687c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006850:	4b10      	ldr	r3, [pc, #64]	; (8006894 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4798      	blx	r3
 8006858:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800685c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800685e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	000a      	movs	r2, r1
 800686c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800686e:	4613      	mov	r3, r2
 8006870:	461a      	mov	r2, r3
 8006872:	4621      	mov	r1, r4
 8006874:	200d      	movs	r0, #13
 8006876:	f7ff fbe5 	bl	8006044 <SEGGER_SYSVIEW_RecordU32x2>
 800687a:	e006      	b.n	800688a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4619      	mov	r1, r3
 8006882:	200c      	movs	r0, #12
 8006884:	f7ff fba2 	bl	8005fcc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	bd90      	pop	{r4, r7, pc}
 8006892:	bf00      	nop
 8006894:	2001a7e8 	.word	0x2001a7e8
 8006898:	e0001004 	.word	0xe0001004

0800689c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068a2:	f3ef 8311 	mrs	r3, BASEPRI
 80068a6:	f04f 0120 	mov.w	r1, #32
 80068aa:	f381 8811 	msr	BASEPRI, r1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	4819      	ldr	r0, [pc, #100]	; (8006918 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068b2:	f7fe fda6 	bl	8005402 <_PreparePacket>
 80068b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068bc:	4b17      	ldr	r3, [pc, #92]	; (800691c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	e00b      	b.n	80068e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	6179      	str	r1, [r7, #20]
 80068da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b7f      	cmp	r3, #127	; 0x7f
 80068ec:	d8f0      	bhi.n	80068d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	617a      	str	r2, [r7, #20]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068fe:	2202      	movs	r2, #2
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	68b8      	ldr	r0, [r7, #8]
 8006904:	f7fe fe6e 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f383 8811 	msr	BASEPRI, r3
}
 800690e:	bf00      	nop
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2001a818 	.word	0x2001a818
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006926:	f3ef 8311 	mrs	r3, BASEPRI
 800692a:	f04f 0120 	mov.w	r1, #32
 800692e:	f381 8811 	msr	BASEPRI, r1
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	4807      	ldr	r0, [pc, #28]	; (8006954 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006936:	f7fe fd64 	bl	8005402 <_PreparePacket>
 800693a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800693c:	2203      	movs	r2, #3
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6838      	ldr	r0, [r7, #0]
 8006942:	f7fe fe4f 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f383 8811 	msr	BASEPRI, r3
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	2001a818 	.word	0x2001a818

08006958 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800695e:	f3ef 8311 	mrs	r3, BASEPRI
 8006962:	f04f 0120 	mov.w	r1, #32
 8006966:	f381 8811 	msr	BASEPRI, r1
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	4807      	ldr	r0, [pc, #28]	; (800698c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800696e:	f7fe fd48 	bl	8005402 <_PreparePacket>
 8006972:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006974:	2212      	movs	r2, #18
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6838      	ldr	r0, [r7, #0]
 800697a:	f7fe fe33 	bl	80055e4 <_SendPacket>
  RECORD_END();
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f383 8811 	msr	BASEPRI, r3
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	2001a818 	.word	0x2001a818

08006990 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006996:	f3ef 8311 	mrs	r3, BASEPRI
 800699a:	f04f 0120 	mov.w	r1, #32
 800699e:	f381 8811 	msr	BASEPRI, r1
 80069a2:	607b      	str	r3, [r7, #4]
 80069a4:	4807      	ldr	r0, [pc, #28]	; (80069c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069a6:	f7fe fd2c 	bl	8005402 <_PreparePacket>
 80069aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069ac:	2211      	movs	r2, #17
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6838      	ldr	r0, [r7, #0]
 80069b2:	f7fe fe17 	bl	80055e4 <_SendPacket>
  RECORD_END();
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f383 8811 	msr	BASEPRI, r3
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	2001a818 	.word	0x2001a818

080069c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069d0:	f3ef 8311 	mrs	r3, BASEPRI
 80069d4:	f04f 0120 	mov.w	r1, #32
 80069d8:	f381 8811 	msr	BASEPRI, r1
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	4819      	ldr	r0, [pc, #100]	; (8006a44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80069e0:	f7fe fd0f 	bl	8005402 <_PreparePacket>
 80069e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069ea:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	e00b      	b.n	8006a16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	61f9      	str	r1, [r7, #28]
 8006a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	09db      	lsrs	r3, r3, #7
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b7f      	cmp	r3, #127	; 0x7f
 8006a1a:	d8f0      	bhi.n	80069fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	61fa      	str	r2, [r7, #28]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	6938      	ldr	r0, [r7, #16]
 8006a32:	f7fe fdd7 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f383 8811 	msr	BASEPRI, r3
}
 8006a3c:	bf00      	nop
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	2001a818 	.word	0x2001a818
 8006a48:	2001a7e8 	.word	0x2001a7e8

08006a4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a54:	f3ef 8311 	mrs	r3, BASEPRI
 8006a58:	f04f 0120 	mov.w	r1, #32
 8006a5c:	f381 8811 	msr	BASEPRI, r1
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	4819      	ldr	r0, [pc, #100]	; (8006ac8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006a64:	f7fe fccd 	bl	8005402 <_PreparePacket>
 8006a68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a6e:	4b17      	ldr	r3, [pc, #92]	; (8006acc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	61fb      	str	r3, [r7, #28]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	61f9      	str	r1, [r7, #28]
 8006a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	61fa      	str	r2, [r7, #28]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	6938      	ldr	r0, [r7, #16]
 8006ab6:	f7fe fd95 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f383 8811 	msr	BASEPRI, r3
}
 8006ac0:	bf00      	nop
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	2001a818 	.word	0x2001a818
 8006acc:	2001a7e8 	.word	0x2001a7e8

08006ad0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8006adc:	f04f 0120 	mov.w	r1, #32
 8006ae0:	f381 8811 	msr	BASEPRI, r1
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	4819      	ldr	r0, [pc, #100]	; (8006b4c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ae8:	f7fe fc8b 	bl	8005402 <_PreparePacket>
 8006aec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	e00b      	b.n	8006b1e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	1c59      	adds	r1, r3, #1
 8006b0e:	61f9      	str	r1, [r7, #28]
 8006b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	09db      	lsrs	r3, r3, #7
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b7f      	cmp	r3, #127	; 0x7f
 8006b22:	d8f0      	bhi.n	8006b06 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	61fa      	str	r2, [r7, #28]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b34:	2206      	movs	r2, #6
 8006b36:	68f9      	ldr	r1, [r7, #12]
 8006b38:	6938      	ldr	r0, [r7, #16]
 8006b3a:	f7fe fd53 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f383 8811 	msr	BASEPRI, r3
}
 8006b44:	bf00      	nop
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	2001a818 	.word	0x2001a818
 8006b50:	2001a7e8 	.word	0x2001a7e8

08006b54 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	; 0x28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	f04f 0120 	mov.w	r1, #32
 8006b66:	f381 8811 	msr	BASEPRI, r1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	4827      	ldr	r0, [pc, #156]	; (8006c0c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006b6e:	f7fe fc48 	bl	8005402 <_PreparePacket>
 8006b72:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b78:	4b25      	ldr	r3, [pc, #148]	; (8006c10 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	623b      	str	r3, [r7, #32]
 8006b8a:	e00b      	b.n	8006ba4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	1c59      	adds	r1, r3, #1
 8006b94:	6279      	str	r1, [r7, #36]	; 0x24
 8006b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	09db      	lsrs	r3, r3, #7
 8006ba2:	623b      	str	r3, [r7, #32]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba8:	d8f0      	bhi.n	8006b8c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	627a      	str	r2, [r7, #36]	; 0x24
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	e00b      	b.n	8006bdc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	1c59      	adds	r1, r3, #1
 8006bcc:	61f9      	str	r1, [r7, #28]
 8006bce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	09db      	lsrs	r3, r3, #7
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	2b7f      	cmp	r3, #127	; 0x7f
 8006be0:	d8f0      	bhi.n	8006bc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	61fa      	str	r2, [r7, #28]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	68f9      	ldr	r1, [r7, #12]
 8006bf6:	6938      	ldr	r0, [r7, #16]
 8006bf8:	f7fe fcf4 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f383 8811 	msr	BASEPRI, r3
}
 8006c02:	bf00      	nop
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	2001a818 	.word	0x2001a818
 8006c10:	2001a7e8 	.word	0x2001a7e8

08006c14 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	1ad3      	subs	r3, r2, r3
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	2001a7e8 	.word	0x2001a7e8

08006c34 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	; 0x30
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d06d      	beq.n	8006d22 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c46:	4b39      	ldr	r3, [pc, #228]	; (8006d2c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c50:	e008      	b.n	8006c64 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d007      	beq.n	8006c6e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	3301      	adds	r3, #1
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d3f2      	bcc.n	8006c52 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c6c:	e000      	b.n	8006c70 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c6e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d055      	beq.n	8006d22 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c76:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7a:	f04f 0120 	mov.w	r1, #32
 8006c7e:	f381 8811 	msr	BASEPRI, r1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	482a      	ldr	r0, [pc, #168]	; (8006d30 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c86:	f7fe fbbc 	bl	8005402 <_PreparePacket>
 8006c8a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	e00b      	b.n	8006cb2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	1c59      	adds	r1, r3, #1
 8006ca2:	6279      	str	r1, [r7, #36]	; 0x24
 8006ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	09db      	lsrs	r3, r3, #7
 8006cb0:	623b      	str	r3, [r7, #32]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb6:	d8f0      	bhi.n	8006c9a <SEGGER_SYSVIEW_SendModule+0x66>
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	627a      	str	r2, [r7, #36]	; 0x24
 8006cbe:	6a3a      	ldr	r2, [r7, #32]
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e00b      	b.n	8006cec <SEGGER_SYSVIEW_SendModule+0xb8>
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	61f9      	str	r1, [r7, #28]
 8006cde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	09db      	lsrs	r3, r3, #7
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf0:	d8f0      	bhi.n	8006cd4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	61fa      	str	r2, [r7, #28]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2280      	movs	r2, #128	; 0x80
 8006d08:	4619      	mov	r1, r3
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7fe fb2c 	bl	8005368 <_EncodeStr>
 8006d10:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d12:	2216      	movs	r2, #22
 8006d14:	68f9      	ldr	r1, [r7, #12]
 8006d16:	6938      	ldr	r0, [r7, #16]
 8006d18:	f7fe fc64 	bl	80055e4 <_SendPacket>
      RECORD_END();
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d22:	bf00      	nop
 8006d24:	3730      	adds	r7, #48	; 0x30
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2001a810 	.word	0x2001a810
 8006d30:	2001a818 	.word	0x2001a818

08006d34 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d3a:	4b0c      	ldr	r3, [pc, #48]	; (8006d6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00f      	beq.n	8006d62 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f2      	bne.n	8006d48 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	2001a810 	.word	0x2001a810

08006d70 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d76:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7a:	f04f 0120 	mov.w	r1, #32
 8006d7e:	f381 8811 	msr	BASEPRI, r1
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	4817      	ldr	r0, [pc, #92]	; (8006de4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d86:	f7fe fb3c 	bl	8005402 <_PreparePacket>
 8006d8a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	e00b      	b.n	8006db4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	6179      	str	r1, [r7, #20]
 8006da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d8f0      	bhi.n	8006d9c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	617a      	str	r2, [r7, #20]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006dca:	221b      	movs	r2, #27
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	68b8      	ldr	r0, [r7, #8]
 8006dd0:	f7fe fc08 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f383 8811 	msr	BASEPRI, r3
}
 8006dda:	bf00      	nop
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2001a818 	.word	0x2001a818
 8006de8:	2001a814 	.word	0x2001a814

08006dec <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006dec:	b40f      	push	{r0, r1, r2, r3}
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006df4:	f107 0314 	add.w	r3, r7, #20
 8006df8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006dfa:	1d3b      	adds	r3, r7, #4
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2100      	movs	r1, #0
 8006e00:	6938      	ldr	r0, [r7, #16]
 8006e02:	f7fe fe79 	bl	8005af8 <_VPrintTarget>
  va_end(ParamList);
}
 8006e06:	bf00      	nop
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e10:	b004      	add	sp, #16
 8006e12:	4770      	bx	lr

08006e14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e20:	f04f 0120 	mov.w	r1, #32
 8006e24:	f381 8811 	msr	BASEPRI, r1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	4827      	ldr	r0, [pc, #156]	; (8006ec8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e2c:	f7fe fae9 	bl	8005402 <_PreparePacket>
 8006e30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	6938      	ldr	r0, [r7, #16]
 8006e38:	f7fe fa96 	bl	8005368 <_EncodeStr>
 8006e3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
 8006e42:	2301      	movs	r3, #1
 8006e44:	623b      	str	r3, [r7, #32]
 8006e46:	e00b      	b.n	8006e60 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4e:	1c59      	adds	r1, r3, #1
 8006e50:	6279      	str	r1, [r7, #36]	; 0x24
 8006e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	09db      	lsrs	r3, r3, #7
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2b7f      	cmp	r3, #127	; 0x7f
 8006e64:	d8f0      	bhi.n	8006e48 <SEGGER_SYSVIEW_Warn+0x34>
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e6c:	6a3a      	ldr	r2, [r7, #32]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	e00b      	b.n	8006e98 <SEGGER_SYSVIEW_Warn+0x84>
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1c59      	adds	r1, r3, #1
 8006e88:	61f9      	str	r1, [r7, #28]
 8006e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	09db      	lsrs	r3, r3, #7
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9c:	d8f0      	bhi.n	8006e80 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	61fa      	str	r2, [r7, #28]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006eae:	221a      	movs	r2, #26
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	6938      	ldr	r0, [r7, #16]
 8006eb4:	f7fe fb96 	bl	80055e4 <_SendPacket>
  RECORD_END();
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f383 8811 	msr	BASEPRI, r3
}
 8006ebe:	bf00      	nop
 8006ec0:	3728      	adds	r7, #40	; 0x28
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	2001a818 	.word	0x2001a818

08006ecc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ed2:	7e1b      	ldrb	r3, [r3, #24]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4a13      	ldr	r2, [pc, #76]	; (8006f24 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006ed8:	460b      	mov	r3, r1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	440b      	add	r3, r1
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	336c      	adds	r3, #108	; 0x6c
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ee8:	7e1b      	ldrb	r3, [r3, #24]
 8006eea:	4618      	mov	r0, r3
 8006eec:	490d      	ldr	r1, [pc, #52]	; (8006f24 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006eee:	4603      	mov	r3, r0
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4403      	add	r3, r0
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3370      	adds	r3, #112	; 0x70
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d00b      	beq.n	8006f18 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f00:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f02:	789b      	ldrb	r3, [r3, #2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d107      	bne.n	8006f18 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f0e:	f7fe fa85 	bl	800541c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f12:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f18:	4b01      	ldr	r3, [pc, #4]	; (8006f20 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	2001a7e8 	.word	0x2001a7e8
 8006f24:	20019328 	.word	0x20019328

08006f28 <sniprintf>:
 8006f28:	b40c      	push	{r2, r3}
 8006f2a:	b530      	push	{r4, r5, lr}
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <sniprintf+0x64>)
 8006f2e:	1e0c      	subs	r4, r1, #0
 8006f30:	681d      	ldr	r5, [r3, #0]
 8006f32:	b09d      	sub	sp, #116	; 0x74
 8006f34:	da08      	bge.n	8006f48 <sniprintf+0x20>
 8006f36:	238b      	movs	r3, #139	; 0x8b
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	b01d      	add	sp, #116	; 0x74
 8006f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f44:	b002      	add	sp, #8
 8006f46:	4770      	bx	lr
 8006f48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f50:	bf14      	ite	ne
 8006f52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f56:	4623      	moveq	r3, r4
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	9307      	str	r3, [sp, #28]
 8006f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f60:	9002      	str	r0, [sp, #8]
 8006f62:	9006      	str	r0, [sp, #24]
 8006f64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f6a:	ab21      	add	r3, sp, #132	; 0x84
 8006f6c:	a902      	add	r1, sp, #8
 8006f6e:	4628      	mov	r0, r5
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	f000 f9ab 	bl	80072cc <_svfiprintf_r>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	bfbc      	itt	lt
 8006f7a:	238b      	movlt	r3, #139	; 0x8b
 8006f7c:	602b      	strlt	r3, [r5, #0]
 8006f7e:	2c00      	cmp	r4, #0
 8006f80:	d0dd      	beq.n	8006f3e <sniprintf+0x16>
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	2200      	movs	r2, #0
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	e7d9      	b.n	8006f3e <sniprintf+0x16>
 8006f8a:	bf00      	nop
 8006f8c:	20000068 	.word	0x20000068

08006f90 <memcmp>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	3901      	subs	r1, #1
 8006f94:	4402      	add	r2, r0
 8006f96:	4290      	cmp	r0, r2
 8006f98:	d101      	bne.n	8006f9e <memcmp+0xe>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e005      	b.n	8006faa <memcmp+0x1a>
 8006f9e:	7803      	ldrb	r3, [r0, #0]
 8006fa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fa4:	42a3      	cmp	r3, r4
 8006fa6:	d001      	beq.n	8006fac <memcmp+0x1c>
 8006fa8:	1b18      	subs	r0, r3, r4
 8006faa:	bd10      	pop	{r4, pc}
 8006fac:	3001      	adds	r0, #1
 8006fae:	e7f2      	b.n	8006f96 <memcmp+0x6>

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <__libc_init_array>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4d0d      	ldr	r5, [pc, #52]	; (8006ff8 <__libc_init_array+0x38>)
 8006fc4:	4c0d      	ldr	r4, [pc, #52]	; (8006ffc <__libc_init_array+0x3c>)
 8006fc6:	1b64      	subs	r4, r4, r5
 8006fc8:	10a4      	asrs	r4, r4, #2
 8006fca:	2600      	movs	r6, #0
 8006fcc:	42a6      	cmp	r6, r4
 8006fce:	d109      	bne.n	8006fe4 <__libc_init_array+0x24>
 8006fd0:	4d0b      	ldr	r5, [pc, #44]	; (8007000 <__libc_init_array+0x40>)
 8006fd2:	4c0c      	ldr	r4, [pc, #48]	; (8007004 <__libc_init_array+0x44>)
 8006fd4:	f000 fc78 	bl	80078c8 <_init>
 8006fd8:	1b64      	subs	r4, r4, r5
 8006fda:	10a4      	asrs	r4, r4, #2
 8006fdc:	2600      	movs	r6, #0
 8006fde:	42a6      	cmp	r6, r4
 8006fe0:	d105      	bne.n	8006fee <__libc_init_array+0x2e>
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe8:	4798      	blx	r3
 8006fea:	3601      	adds	r6, #1
 8006fec:	e7ee      	b.n	8006fcc <__libc_init_array+0xc>
 8006fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff2:	4798      	blx	r3
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	e7f2      	b.n	8006fde <__libc_init_array+0x1e>
 8006ff8:	08007a84 	.word	0x08007a84
 8006ffc:	08007a84 	.word	0x08007a84
 8007000:	08007a84 	.word	0x08007a84
 8007004:	08007a88 	.word	0x08007a88

08007008 <__retarget_lock_acquire_recursive>:
 8007008:	4770      	bx	lr

0800700a <__retarget_lock_release_recursive>:
 800700a:	4770      	bx	lr

0800700c <memcpy>:
 800700c:	440a      	add	r2, r1
 800700e:	4291      	cmp	r1, r2
 8007010:	f100 33ff 	add.w	r3, r0, #4294967295
 8007014:	d100      	bne.n	8007018 <memcpy+0xc>
 8007016:	4770      	bx	lr
 8007018:	b510      	push	{r4, lr}
 800701a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007022:	4291      	cmp	r1, r2
 8007024:	d1f9      	bne.n	800701a <memcpy+0xe>
 8007026:	bd10      	pop	{r4, pc}

08007028 <_free_r>:
 8007028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800702a:	2900      	cmp	r1, #0
 800702c:	d044      	beq.n	80070b8 <_free_r+0x90>
 800702e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007032:	9001      	str	r0, [sp, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f1a1 0404 	sub.w	r4, r1, #4
 800703a:	bfb8      	it	lt
 800703c:	18e4      	addlt	r4, r4, r3
 800703e:	f000 f8df 	bl	8007200 <__malloc_lock>
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <_free_r+0x94>)
 8007044:	9801      	ldr	r0, [sp, #4]
 8007046:	6813      	ldr	r3, [r2, #0]
 8007048:	b933      	cbnz	r3, 8007058 <_free_r+0x30>
 800704a:	6063      	str	r3, [r4, #4]
 800704c:	6014      	str	r4, [r2, #0]
 800704e:	b003      	add	sp, #12
 8007050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007054:	f000 b8da 	b.w	800720c <__malloc_unlock>
 8007058:	42a3      	cmp	r3, r4
 800705a:	d908      	bls.n	800706e <_free_r+0x46>
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	1961      	adds	r1, r4, r5
 8007060:	428b      	cmp	r3, r1
 8007062:	bf01      	itttt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	1949      	addeq	r1, r1, r5
 800706a:	6021      	streq	r1, [r4, #0]
 800706c:	e7ed      	b.n	800704a <_free_r+0x22>
 800706e:	461a      	mov	r2, r3
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	b10b      	cbz	r3, 8007078 <_free_r+0x50>
 8007074:	42a3      	cmp	r3, r4
 8007076:	d9fa      	bls.n	800706e <_free_r+0x46>
 8007078:	6811      	ldr	r1, [r2, #0]
 800707a:	1855      	adds	r5, r2, r1
 800707c:	42a5      	cmp	r5, r4
 800707e:	d10b      	bne.n	8007098 <_free_r+0x70>
 8007080:	6824      	ldr	r4, [r4, #0]
 8007082:	4421      	add	r1, r4
 8007084:	1854      	adds	r4, r2, r1
 8007086:	42a3      	cmp	r3, r4
 8007088:	6011      	str	r1, [r2, #0]
 800708a:	d1e0      	bne.n	800704e <_free_r+0x26>
 800708c:	681c      	ldr	r4, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	6053      	str	r3, [r2, #4]
 8007092:	440c      	add	r4, r1
 8007094:	6014      	str	r4, [r2, #0]
 8007096:	e7da      	b.n	800704e <_free_r+0x26>
 8007098:	d902      	bls.n	80070a0 <_free_r+0x78>
 800709a:	230c      	movs	r3, #12
 800709c:	6003      	str	r3, [r0, #0]
 800709e:	e7d6      	b.n	800704e <_free_r+0x26>
 80070a0:	6825      	ldr	r5, [r4, #0]
 80070a2:	1961      	adds	r1, r4, r5
 80070a4:	428b      	cmp	r3, r1
 80070a6:	bf04      	itt	eq
 80070a8:	6819      	ldreq	r1, [r3, #0]
 80070aa:	685b      	ldreq	r3, [r3, #4]
 80070ac:	6063      	str	r3, [r4, #4]
 80070ae:	bf04      	itt	eq
 80070b0:	1949      	addeq	r1, r1, r5
 80070b2:	6021      	streq	r1, [r4, #0]
 80070b4:	6054      	str	r4, [r2, #4]
 80070b6:	e7ca      	b.n	800704e <_free_r+0x26>
 80070b8:	b003      	add	sp, #12
 80070ba:	bd30      	pop	{r4, r5, pc}
 80070bc:	2001aa3c 	.word	0x2001aa3c

080070c0 <sbrk_aligned>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	4e0e      	ldr	r6, [pc, #56]	; (80070fc <sbrk_aligned+0x3c>)
 80070c4:	460c      	mov	r4, r1
 80070c6:	6831      	ldr	r1, [r6, #0]
 80070c8:	4605      	mov	r5, r0
 80070ca:	b911      	cbnz	r1, 80070d2 <sbrk_aligned+0x12>
 80070cc:	f000 fba6 	bl	800781c <_sbrk_r>
 80070d0:	6030      	str	r0, [r6, #0]
 80070d2:	4621      	mov	r1, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	f000 fba1 	bl	800781c <_sbrk_r>
 80070da:	1c43      	adds	r3, r0, #1
 80070dc:	d00a      	beq.n	80070f4 <sbrk_aligned+0x34>
 80070de:	1cc4      	adds	r4, r0, #3
 80070e0:	f024 0403 	bic.w	r4, r4, #3
 80070e4:	42a0      	cmp	r0, r4
 80070e6:	d007      	beq.n	80070f8 <sbrk_aligned+0x38>
 80070e8:	1a21      	subs	r1, r4, r0
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 fb96 	bl	800781c <_sbrk_r>
 80070f0:	3001      	adds	r0, #1
 80070f2:	d101      	bne.n	80070f8 <sbrk_aligned+0x38>
 80070f4:	f04f 34ff 	mov.w	r4, #4294967295
 80070f8:	4620      	mov	r0, r4
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	2001aa40 	.word	0x2001aa40

08007100 <_malloc_r>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	1ccd      	adds	r5, r1, #3
 8007106:	f025 0503 	bic.w	r5, r5, #3
 800710a:	3508      	adds	r5, #8
 800710c:	2d0c      	cmp	r5, #12
 800710e:	bf38      	it	cc
 8007110:	250c      	movcc	r5, #12
 8007112:	2d00      	cmp	r5, #0
 8007114:	4607      	mov	r7, r0
 8007116:	db01      	blt.n	800711c <_malloc_r+0x1c>
 8007118:	42a9      	cmp	r1, r5
 800711a:	d905      	bls.n	8007128 <_malloc_r+0x28>
 800711c:	230c      	movs	r3, #12
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	2600      	movs	r6, #0
 8007122:	4630      	mov	r0, r6
 8007124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007128:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80071fc <_malloc_r+0xfc>
 800712c:	f000 f868 	bl	8007200 <__malloc_lock>
 8007130:	f8d8 3000 	ldr.w	r3, [r8]
 8007134:	461c      	mov	r4, r3
 8007136:	bb5c      	cbnz	r4, 8007190 <_malloc_r+0x90>
 8007138:	4629      	mov	r1, r5
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff ffc0 	bl	80070c0 <sbrk_aligned>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	4604      	mov	r4, r0
 8007144:	d155      	bne.n	80071f2 <_malloc_r+0xf2>
 8007146:	f8d8 4000 	ldr.w	r4, [r8]
 800714a:	4626      	mov	r6, r4
 800714c:	2e00      	cmp	r6, #0
 800714e:	d145      	bne.n	80071dc <_malloc_r+0xdc>
 8007150:	2c00      	cmp	r4, #0
 8007152:	d048      	beq.n	80071e6 <_malloc_r+0xe6>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	4631      	mov	r1, r6
 8007158:	4638      	mov	r0, r7
 800715a:	eb04 0903 	add.w	r9, r4, r3
 800715e:	f000 fb5d 	bl	800781c <_sbrk_r>
 8007162:	4581      	cmp	r9, r0
 8007164:	d13f      	bne.n	80071e6 <_malloc_r+0xe6>
 8007166:	6821      	ldr	r1, [r4, #0]
 8007168:	1a6d      	subs	r5, r5, r1
 800716a:	4629      	mov	r1, r5
 800716c:	4638      	mov	r0, r7
 800716e:	f7ff ffa7 	bl	80070c0 <sbrk_aligned>
 8007172:	3001      	adds	r0, #1
 8007174:	d037      	beq.n	80071e6 <_malloc_r+0xe6>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	442b      	add	r3, r5
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	f8d8 3000 	ldr.w	r3, [r8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d038      	beq.n	80071f6 <_malloc_r+0xf6>
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	42a2      	cmp	r2, r4
 8007188:	d12b      	bne.n	80071e2 <_malloc_r+0xe2>
 800718a:	2200      	movs	r2, #0
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	e00f      	b.n	80071b0 <_malloc_r+0xb0>
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	1b52      	subs	r2, r2, r5
 8007194:	d41f      	bmi.n	80071d6 <_malloc_r+0xd6>
 8007196:	2a0b      	cmp	r2, #11
 8007198:	d917      	bls.n	80071ca <_malloc_r+0xca>
 800719a:	1961      	adds	r1, r4, r5
 800719c:	42a3      	cmp	r3, r4
 800719e:	6025      	str	r5, [r4, #0]
 80071a0:	bf18      	it	ne
 80071a2:	6059      	strne	r1, [r3, #4]
 80071a4:	6863      	ldr	r3, [r4, #4]
 80071a6:	bf08      	it	eq
 80071a8:	f8c8 1000 	streq.w	r1, [r8]
 80071ac:	5162      	str	r2, [r4, r5]
 80071ae:	604b      	str	r3, [r1, #4]
 80071b0:	4638      	mov	r0, r7
 80071b2:	f104 060b 	add.w	r6, r4, #11
 80071b6:	f000 f829 	bl	800720c <__malloc_unlock>
 80071ba:	f026 0607 	bic.w	r6, r6, #7
 80071be:	1d23      	adds	r3, r4, #4
 80071c0:	1af2      	subs	r2, r6, r3
 80071c2:	d0ae      	beq.n	8007122 <_malloc_r+0x22>
 80071c4:	1b9b      	subs	r3, r3, r6
 80071c6:	50a3      	str	r3, [r4, r2]
 80071c8:	e7ab      	b.n	8007122 <_malloc_r+0x22>
 80071ca:	42a3      	cmp	r3, r4
 80071cc:	6862      	ldr	r2, [r4, #4]
 80071ce:	d1dd      	bne.n	800718c <_malloc_r+0x8c>
 80071d0:	f8c8 2000 	str.w	r2, [r8]
 80071d4:	e7ec      	b.n	80071b0 <_malloc_r+0xb0>
 80071d6:	4623      	mov	r3, r4
 80071d8:	6864      	ldr	r4, [r4, #4]
 80071da:	e7ac      	b.n	8007136 <_malloc_r+0x36>
 80071dc:	4634      	mov	r4, r6
 80071de:	6876      	ldr	r6, [r6, #4]
 80071e0:	e7b4      	b.n	800714c <_malloc_r+0x4c>
 80071e2:	4613      	mov	r3, r2
 80071e4:	e7cc      	b.n	8007180 <_malloc_r+0x80>
 80071e6:	230c      	movs	r3, #12
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	4638      	mov	r0, r7
 80071ec:	f000 f80e 	bl	800720c <__malloc_unlock>
 80071f0:	e797      	b.n	8007122 <_malloc_r+0x22>
 80071f2:	6025      	str	r5, [r4, #0]
 80071f4:	e7dc      	b.n	80071b0 <_malloc_r+0xb0>
 80071f6:	605b      	str	r3, [r3, #4]
 80071f8:	deff      	udf	#255	; 0xff
 80071fa:	bf00      	nop
 80071fc:	2001aa3c 	.word	0x2001aa3c

08007200 <__malloc_lock>:
 8007200:	4801      	ldr	r0, [pc, #4]	; (8007208 <__malloc_lock+0x8>)
 8007202:	f7ff bf01 	b.w	8007008 <__retarget_lock_acquire_recursive>
 8007206:	bf00      	nop
 8007208:	2001aa38 	.word	0x2001aa38

0800720c <__malloc_unlock>:
 800720c:	4801      	ldr	r0, [pc, #4]	; (8007214 <__malloc_unlock+0x8>)
 800720e:	f7ff befc 	b.w	800700a <__retarget_lock_release_recursive>
 8007212:	bf00      	nop
 8007214:	2001aa38 	.word	0x2001aa38

08007218 <__ssputs_r>:
 8007218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	688e      	ldr	r6, [r1, #8]
 800721e:	461f      	mov	r7, r3
 8007220:	42be      	cmp	r6, r7
 8007222:	680b      	ldr	r3, [r1, #0]
 8007224:	4682      	mov	sl, r0
 8007226:	460c      	mov	r4, r1
 8007228:	4690      	mov	r8, r2
 800722a:	d82c      	bhi.n	8007286 <__ssputs_r+0x6e>
 800722c:	898a      	ldrh	r2, [r1, #12]
 800722e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007232:	d026      	beq.n	8007282 <__ssputs_r+0x6a>
 8007234:	6965      	ldr	r5, [r4, #20]
 8007236:	6909      	ldr	r1, [r1, #16]
 8007238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800723c:	eba3 0901 	sub.w	r9, r3, r1
 8007240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007244:	1c7b      	adds	r3, r7, #1
 8007246:	444b      	add	r3, r9
 8007248:	106d      	asrs	r5, r5, #1
 800724a:	429d      	cmp	r5, r3
 800724c:	bf38      	it	cc
 800724e:	461d      	movcc	r5, r3
 8007250:	0553      	lsls	r3, r2, #21
 8007252:	d527      	bpl.n	80072a4 <__ssputs_r+0x8c>
 8007254:	4629      	mov	r1, r5
 8007256:	f7ff ff53 	bl	8007100 <_malloc_r>
 800725a:	4606      	mov	r6, r0
 800725c:	b360      	cbz	r0, 80072b8 <__ssputs_r+0xa0>
 800725e:	6921      	ldr	r1, [r4, #16]
 8007260:	464a      	mov	r2, r9
 8007262:	f7ff fed3 	bl	800700c <memcpy>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	6126      	str	r6, [r4, #16]
 8007274:	6165      	str	r5, [r4, #20]
 8007276:	444e      	add	r6, r9
 8007278:	eba5 0509 	sub.w	r5, r5, r9
 800727c:	6026      	str	r6, [r4, #0]
 800727e:	60a5      	str	r5, [r4, #8]
 8007280:	463e      	mov	r6, r7
 8007282:	42be      	cmp	r6, r7
 8007284:	d900      	bls.n	8007288 <__ssputs_r+0x70>
 8007286:	463e      	mov	r6, r7
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	4632      	mov	r2, r6
 800728c:	4641      	mov	r1, r8
 800728e:	f000 faab 	bl	80077e8 <memmove>
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	1b9b      	subs	r3, r3, r6
 8007296:	60a3      	str	r3, [r4, #8]
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	4433      	add	r3, r6
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	2000      	movs	r0, #0
 80072a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a4:	462a      	mov	r2, r5
 80072a6:	f000 fac9 	bl	800783c <_realloc_r>
 80072aa:	4606      	mov	r6, r0
 80072ac:	2800      	cmp	r0, #0
 80072ae:	d1e0      	bne.n	8007272 <__ssputs_r+0x5a>
 80072b0:	6921      	ldr	r1, [r4, #16]
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7ff feb8 	bl	8007028 <_free_r>
 80072b8:	230c      	movs	r3, #12
 80072ba:	f8ca 3000 	str.w	r3, [sl]
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ca:	e7e9      	b.n	80072a0 <__ssputs_r+0x88>

080072cc <_svfiprintf_r>:
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	4698      	mov	r8, r3
 80072d2:	898b      	ldrh	r3, [r1, #12]
 80072d4:	061b      	lsls	r3, r3, #24
 80072d6:	b09d      	sub	sp, #116	; 0x74
 80072d8:	4607      	mov	r7, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	d50e      	bpl.n	80072fe <_svfiprintf_r+0x32>
 80072e0:	690b      	ldr	r3, [r1, #16]
 80072e2:	b963      	cbnz	r3, 80072fe <_svfiprintf_r+0x32>
 80072e4:	2140      	movs	r1, #64	; 0x40
 80072e6:	f7ff ff0b 	bl	8007100 <_malloc_r>
 80072ea:	6028      	str	r0, [r5, #0]
 80072ec:	6128      	str	r0, [r5, #16]
 80072ee:	b920      	cbnz	r0, 80072fa <_svfiprintf_r+0x2e>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e0d0      	b.n	800749c <_svfiprintf_r+0x1d0>
 80072fa:	2340      	movs	r3, #64	; 0x40
 80072fc:	616b      	str	r3, [r5, #20]
 80072fe:	2300      	movs	r3, #0
 8007300:	9309      	str	r3, [sp, #36]	; 0x24
 8007302:	2320      	movs	r3, #32
 8007304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007308:	f8cd 800c 	str.w	r8, [sp, #12]
 800730c:	2330      	movs	r3, #48	; 0x30
 800730e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074b4 <_svfiprintf_r+0x1e8>
 8007312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007316:	f04f 0901 	mov.w	r9, #1
 800731a:	4623      	mov	r3, r4
 800731c:	469a      	mov	sl, r3
 800731e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007322:	b10a      	cbz	r2, 8007328 <_svfiprintf_r+0x5c>
 8007324:	2a25      	cmp	r2, #37	; 0x25
 8007326:	d1f9      	bne.n	800731c <_svfiprintf_r+0x50>
 8007328:	ebba 0b04 	subs.w	fp, sl, r4
 800732c:	d00b      	beq.n	8007346 <_svfiprintf_r+0x7a>
 800732e:	465b      	mov	r3, fp
 8007330:	4622      	mov	r2, r4
 8007332:	4629      	mov	r1, r5
 8007334:	4638      	mov	r0, r7
 8007336:	f7ff ff6f 	bl	8007218 <__ssputs_r>
 800733a:	3001      	adds	r0, #1
 800733c:	f000 80a9 	beq.w	8007492 <_svfiprintf_r+0x1c6>
 8007340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007342:	445a      	add	r2, fp
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	f89a 3000 	ldrb.w	r3, [sl]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 80a1 	beq.w	8007492 <_svfiprintf_r+0x1c6>
 8007350:	2300      	movs	r3, #0
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800735a:	f10a 0a01 	add.w	sl, sl, #1
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	9307      	str	r3, [sp, #28]
 8007362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007366:	931a      	str	r3, [sp, #104]	; 0x68
 8007368:	4654      	mov	r4, sl
 800736a:	2205      	movs	r2, #5
 800736c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007370:	4850      	ldr	r0, [pc, #320]	; (80074b4 <_svfiprintf_r+0x1e8>)
 8007372:	f7f8 ff7d 	bl	8000270 <memchr>
 8007376:	9a04      	ldr	r2, [sp, #16]
 8007378:	b9d8      	cbnz	r0, 80073b2 <_svfiprintf_r+0xe6>
 800737a:	06d0      	lsls	r0, r2, #27
 800737c:	bf44      	itt	mi
 800737e:	2320      	movmi	r3, #32
 8007380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007384:	0711      	lsls	r1, r2, #28
 8007386:	bf44      	itt	mi
 8007388:	232b      	movmi	r3, #43	; 0x2b
 800738a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738e:	f89a 3000 	ldrb.w	r3, [sl]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d015      	beq.n	80073c2 <_svfiprintf_r+0xf6>
 8007396:	9a07      	ldr	r2, [sp, #28]
 8007398:	4654      	mov	r4, sl
 800739a:	2000      	movs	r0, #0
 800739c:	f04f 0c0a 	mov.w	ip, #10
 80073a0:	4621      	mov	r1, r4
 80073a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a6:	3b30      	subs	r3, #48	; 0x30
 80073a8:	2b09      	cmp	r3, #9
 80073aa:	d94d      	bls.n	8007448 <_svfiprintf_r+0x17c>
 80073ac:	b1b0      	cbz	r0, 80073dc <_svfiprintf_r+0x110>
 80073ae:	9207      	str	r2, [sp, #28]
 80073b0:	e014      	b.n	80073dc <_svfiprintf_r+0x110>
 80073b2:	eba0 0308 	sub.w	r3, r0, r8
 80073b6:	fa09 f303 	lsl.w	r3, r9, r3
 80073ba:	4313      	orrs	r3, r2
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	46a2      	mov	sl, r4
 80073c0:	e7d2      	b.n	8007368 <_svfiprintf_r+0x9c>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	9103      	str	r1, [sp, #12]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfbb      	ittet	lt
 80073ce:	425b      	neglt	r3, r3
 80073d0:	f042 0202 	orrlt.w	r2, r2, #2
 80073d4:	9307      	strge	r3, [sp, #28]
 80073d6:	9307      	strlt	r3, [sp, #28]
 80073d8:	bfb8      	it	lt
 80073da:	9204      	strlt	r2, [sp, #16]
 80073dc:	7823      	ldrb	r3, [r4, #0]
 80073de:	2b2e      	cmp	r3, #46	; 0x2e
 80073e0:	d10c      	bne.n	80073fc <_svfiprintf_r+0x130>
 80073e2:	7863      	ldrb	r3, [r4, #1]
 80073e4:	2b2a      	cmp	r3, #42	; 0x2a
 80073e6:	d134      	bne.n	8007452 <_svfiprintf_r+0x186>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	9203      	str	r2, [sp, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfb8      	it	lt
 80073f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80073f8:	3402      	adds	r4, #2
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80074c4 <_svfiprintf_r+0x1f8>
 8007400:	7821      	ldrb	r1, [r4, #0]
 8007402:	2203      	movs	r2, #3
 8007404:	4650      	mov	r0, sl
 8007406:	f7f8 ff33 	bl	8000270 <memchr>
 800740a:	b138      	cbz	r0, 800741c <_svfiprintf_r+0x150>
 800740c:	9b04      	ldr	r3, [sp, #16]
 800740e:	eba0 000a 	sub.w	r0, r0, sl
 8007412:	2240      	movs	r2, #64	; 0x40
 8007414:	4082      	lsls	r2, r0
 8007416:	4313      	orrs	r3, r2
 8007418:	3401      	adds	r4, #1
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007420:	4825      	ldr	r0, [pc, #148]	; (80074b8 <_svfiprintf_r+0x1ec>)
 8007422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007426:	2206      	movs	r2, #6
 8007428:	f7f8 ff22 	bl	8000270 <memchr>
 800742c:	2800      	cmp	r0, #0
 800742e:	d038      	beq.n	80074a2 <_svfiprintf_r+0x1d6>
 8007430:	4b22      	ldr	r3, [pc, #136]	; (80074bc <_svfiprintf_r+0x1f0>)
 8007432:	bb1b      	cbnz	r3, 800747c <_svfiprintf_r+0x1b0>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	3307      	adds	r3, #7
 8007438:	f023 0307 	bic.w	r3, r3, #7
 800743c:	3308      	adds	r3, #8
 800743e:	9303      	str	r3, [sp, #12]
 8007440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007442:	4433      	add	r3, r6
 8007444:	9309      	str	r3, [sp, #36]	; 0x24
 8007446:	e768      	b.n	800731a <_svfiprintf_r+0x4e>
 8007448:	fb0c 3202 	mla	r2, ip, r2, r3
 800744c:	460c      	mov	r4, r1
 800744e:	2001      	movs	r0, #1
 8007450:	e7a6      	b.n	80073a0 <_svfiprintf_r+0xd4>
 8007452:	2300      	movs	r3, #0
 8007454:	3401      	adds	r4, #1
 8007456:	9305      	str	r3, [sp, #20]
 8007458:	4619      	mov	r1, r3
 800745a:	f04f 0c0a 	mov.w	ip, #10
 800745e:	4620      	mov	r0, r4
 8007460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007464:	3a30      	subs	r2, #48	; 0x30
 8007466:	2a09      	cmp	r2, #9
 8007468:	d903      	bls.n	8007472 <_svfiprintf_r+0x1a6>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0c6      	beq.n	80073fc <_svfiprintf_r+0x130>
 800746e:	9105      	str	r1, [sp, #20]
 8007470:	e7c4      	b.n	80073fc <_svfiprintf_r+0x130>
 8007472:	fb0c 2101 	mla	r1, ip, r1, r2
 8007476:	4604      	mov	r4, r0
 8007478:	2301      	movs	r3, #1
 800747a:	e7f0      	b.n	800745e <_svfiprintf_r+0x192>
 800747c:	ab03      	add	r3, sp, #12
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	462a      	mov	r2, r5
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <_svfiprintf_r+0x1f4>)
 8007484:	a904      	add	r1, sp, #16
 8007486:	4638      	mov	r0, r7
 8007488:	f3af 8000 	nop.w
 800748c:	1c42      	adds	r2, r0, #1
 800748e:	4606      	mov	r6, r0
 8007490:	d1d6      	bne.n	8007440 <_svfiprintf_r+0x174>
 8007492:	89ab      	ldrh	r3, [r5, #12]
 8007494:	065b      	lsls	r3, r3, #25
 8007496:	f53f af2d 	bmi.w	80072f4 <_svfiprintf_r+0x28>
 800749a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800749c:	b01d      	add	sp, #116	; 0x74
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	ab03      	add	r3, sp, #12
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	462a      	mov	r2, r5
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <_svfiprintf_r+0x1f4>)
 80074aa:	a904      	add	r1, sp, #16
 80074ac:	4638      	mov	r0, r7
 80074ae:	f000 f879 	bl	80075a4 <_printf_i>
 80074b2:	e7eb      	b.n	800748c <_svfiprintf_r+0x1c0>
 80074b4:	08007a48 	.word	0x08007a48
 80074b8:	08007a52 	.word	0x08007a52
 80074bc:	00000000 	.word	0x00000000
 80074c0:	08007219 	.word	0x08007219
 80074c4:	08007a4e 	.word	0x08007a4e

080074c8 <_printf_common>:
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	4616      	mov	r6, r2
 80074ce:	4699      	mov	r9, r3
 80074d0:	688a      	ldr	r2, [r1, #8]
 80074d2:	690b      	ldr	r3, [r1, #16]
 80074d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074d8:	4293      	cmp	r3, r2
 80074da:	bfb8      	it	lt
 80074dc:	4613      	movlt	r3, r2
 80074de:	6033      	str	r3, [r6, #0]
 80074e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074e4:	4607      	mov	r7, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	b10a      	cbz	r2, 80074ee <_printf_common+0x26>
 80074ea:	3301      	adds	r3, #1
 80074ec:	6033      	str	r3, [r6, #0]
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	0699      	lsls	r1, r3, #26
 80074f2:	bf42      	ittt	mi
 80074f4:	6833      	ldrmi	r3, [r6, #0]
 80074f6:	3302      	addmi	r3, #2
 80074f8:	6033      	strmi	r3, [r6, #0]
 80074fa:	6825      	ldr	r5, [r4, #0]
 80074fc:	f015 0506 	ands.w	r5, r5, #6
 8007500:	d106      	bne.n	8007510 <_printf_common+0x48>
 8007502:	f104 0a19 	add.w	sl, r4, #25
 8007506:	68e3      	ldr	r3, [r4, #12]
 8007508:	6832      	ldr	r2, [r6, #0]
 800750a:	1a9b      	subs	r3, r3, r2
 800750c:	42ab      	cmp	r3, r5
 800750e:	dc26      	bgt.n	800755e <_printf_common+0x96>
 8007510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007514:	1e13      	subs	r3, r2, #0
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	bf18      	it	ne
 800751a:	2301      	movne	r3, #1
 800751c:	0692      	lsls	r2, r2, #26
 800751e:	d42b      	bmi.n	8007578 <_printf_common+0xb0>
 8007520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007524:	4649      	mov	r1, r9
 8007526:	4638      	mov	r0, r7
 8007528:	47c0      	blx	r8
 800752a:	3001      	adds	r0, #1
 800752c:	d01e      	beq.n	800756c <_printf_common+0xa4>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	6922      	ldr	r2, [r4, #16]
 8007532:	f003 0306 	and.w	r3, r3, #6
 8007536:	2b04      	cmp	r3, #4
 8007538:	bf02      	ittt	eq
 800753a:	68e5      	ldreq	r5, [r4, #12]
 800753c:	6833      	ldreq	r3, [r6, #0]
 800753e:	1aed      	subeq	r5, r5, r3
 8007540:	68a3      	ldr	r3, [r4, #8]
 8007542:	bf0c      	ite	eq
 8007544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007548:	2500      	movne	r5, #0
 800754a:	4293      	cmp	r3, r2
 800754c:	bfc4      	itt	gt
 800754e:	1a9b      	subgt	r3, r3, r2
 8007550:	18ed      	addgt	r5, r5, r3
 8007552:	2600      	movs	r6, #0
 8007554:	341a      	adds	r4, #26
 8007556:	42b5      	cmp	r5, r6
 8007558:	d11a      	bne.n	8007590 <_printf_common+0xc8>
 800755a:	2000      	movs	r0, #0
 800755c:	e008      	b.n	8007570 <_printf_common+0xa8>
 800755e:	2301      	movs	r3, #1
 8007560:	4652      	mov	r2, sl
 8007562:	4649      	mov	r1, r9
 8007564:	4638      	mov	r0, r7
 8007566:	47c0      	blx	r8
 8007568:	3001      	adds	r0, #1
 800756a:	d103      	bne.n	8007574 <_printf_common+0xac>
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007574:	3501      	adds	r5, #1
 8007576:	e7c6      	b.n	8007506 <_printf_common+0x3e>
 8007578:	18e1      	adds	r1, r4, r3
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	2030      	movs	r0, #48	; 0x30
 800757e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007582:	4422      	add	r2, r4
 8007584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800758c:	3302      	adds	r3, #2
 800758e:	e7c7      	b.n	8007520 <_printf_common+0x58>
 8007590:	2301      	movs	r3, #1
 8007592:	4622      	mov	r2, r4
 8007594:	4649      	mov	r1, r9
 8007596:	4638      	mov	r0, r7
 8007598:	47c0      	blx	r8
 800759a:	3001      	adds	r0, #1
 800759c:	d0e6      	beq.n	800756c <_printf_common+0xa4>
 800759e:	3601      	adds	r6, #1
 80075a0:	e7d9      	b.n	8007556 <_printf_common+0x8e>
	...

080075a4 <_printf_i>:
 80075a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	7e0f      	ldrb	r7, [r1, #24]
 80075aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075ac:	2f78      	cmp	r7, #120	; 0x78
 80075ae:	4691      	mov	r9, r2
 80075b0:	4680      	mov	r8, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	469a      	mov	sl, r3
 80075b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ba:	d807      	bhi.n	80075cc <_printf_i+0x28>
 80075bc:	2f62      	cmp	r7, #98	; 0x62
 80075be:	d80a      	bhi.n	80075d6 <_printf_i+0x32>
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	f000 80d4 	beq.w	800776e <_printf_i+0x1ca>
 80075c6:	2f58      	cmp	r7, #88	; 0x58
 80075c8:	f000 80c0 	beq.w	800774c <_printf_i+0x1a8>
 80075cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075d4:	e03a      	b.n	800764c <_printf_i+0xa8>
 80075d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075da:	2b15      	cmp	r3, #21
 80075dc:	d8f6      	bhi.n	80075cc <_printf_i+0x28>
 80075de:	a101      	add	r1, pc, #4	; (adr r1, 80075e4 <_printf_i+0x40>)
 80075e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007651 	.word	0x08007651
 80075ec:	080075cd 	.word	0x080075cd
 80075f0:	080075cd 	.word	0x080075cd
 80075f4:	080075cd 	.word	0x080075cd
 80075f8:	080075cd 	.word	0x080075cd
 80075fc:	08007651 	.word	0x08007651
 8007600:	080075cd 	.word	0x080075cd
 8007604:	080075cd 	.word	0x080075cd
 8007608:	080075cd 	.word	0x080075cd
 800760c:	080075cd 	.word	0x080075cd
 8007610:	08007755 	.word	0x08007755
 8007614:	0800767d 	.word	0x0800767d
 8007618:	0800770f 	.word	0x0800770f
 800761c:	080075cd 	.word	0x080075cd
 8007620:	080075cd 	.word	0x080075cd
 8007624:	08007777 	.word	0x08007777
 8007628:	080075cd 	.word	0x080075cd
 800762c:	0800767d 	.word	0x0800767d
 8007630:	080075cd 	.word	0x080075cd
 8007634:	080075cd 	.word	0x080075cd
 8007638:	08007717 	.word	0x08007717
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	1d1a      	adds	r2, r3, #4
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800764c:	2301      	movs	r3, #1
 800764e:	e09f      	b.n	8007790 <_printf_i+0x1ec>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	682b      	ldr	r3, [r5, #0]
 8007654:	0607      	lsls	r7, r0, #24
 8007656:	f103 0104 	add.w	r1, r3, #4
 800765a:	6029      	str	r1, [r5, #0]
 800765c:	d501      	bpl.n	8007662 <_printf_i+0xbe>
 800765e:	681e      	ldr	r6, [r3, #0]
 8007660:	e003      	b.n	800766a <_printf_i+0xc6>
 8007662:	0646      	lsls	r6, r0, #25
 8007664:	d5fb      	bpl.n	800765e <_printf_i+0xba>
 8007666:	f9b3 6000 	ldrsh.w	r6, [r3]
 800766a:	2e00      	cmp	r6, #0
 800766c:	da03      	bge.n	8007676 <_printf_i+0xd2>
 800766e:	232d      	movs	r3, #45	; 0x2d
 8007670:	4276      	negs	r6, r6
 8007672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007676:	485a      	ldr	r0, [pc, #360]	; (80077e0 <_printf_i+0x23c>)
 8007678:	230a      	movs	r3, #10
 800767a:	e012      	b.n	80076a2 <_printf_i+0xfe>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	6820      	ldr	r0, [r4, #0]
 8007680:	1d19      	adds	r1, r3, #4
 8007682:	6029      	str	r1, [r5, #0]
 8007684:	0605      	lsls	r5, r0, #24
 8007686:	d501      	bpl.n	800768c <_printf_i+0xe8>
 8007688:	681e      	ldr	r6, [r3, #0]
 800768a:	e002      	b.n	8007692 <_printf_i+0xee>
 800768c:	0641      	lsls	r1, r0, #25
 800768e:	d5fb      	bpl.n	8007688 <_printf_i+0xe4>
 8007690:	881e      	ldrh	r6, [r3, #0]
 8007692:	4853      	ldr	r0, [pc, #332]	; (80077e0 <_printf_i+0x23c>)
 8007694:	2f6f      	cmp	r7, #111	; 0x6f
 8007696:	bf0c      	ite	eq
 8007698:	2308      	moveq	r3, #8
 800769a:	230a      	movne	r3, #10
 800769c:	2100      	movs	r1, #0
 800769e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076a2:	6865      	ldr	r5, [r4, #4]
 80076a4:	60a5      	str	r5, [r4, #8]
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	bfa2      	ittt	ge
 80076aa:	6821      	ldrge	r1, [r4, #0]
 80076ac:	f021 0104 	bicge.w	r1, r1, #4
 80076b0:	6021      	strge	r1, [r4, #0]
 80076b2:	b90e      	cbnz	r6, 80076b8 <_printf_i+0x114>
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	d04b      	beq.n	8007750 <_printf_i+0x1ac>
 80076b8:	4615      	mov	r5, r2
 80076ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80076be:	fb03 6711 	mls	r7, r3, r1, r6
 80076c2:	5dc7      	ldrb	r7, [r0, r7]
 80076c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076c8:	4637      	mov	r7, r6
 80076ca:	42bb      	cmp	r3, r7
 80076cc:	460e      	mov	r6, r1
 80076ce:	d9f4      	bls.n	80076ba <_printf_i+0x116>
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d10b      	bne.n	80076ec <_printf_i+0x148>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	07de      	lsls	r6, r3, #31
 80076d8:	d508      	bpl.n	80076ec <_printf_i+0x148>
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	6861      	ldr	r1, [r4, #4]
 80076de:	4299      	cmp	r1, r3
 80076e0:	bfde      	ittt	le
 80076e2:	2330      	movle	r3, #48	; 0x30
 80076e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076ec:	1b52      	subs	r2, r2, r5
 80076ee:	6122      	str	r2, [r4, #16]
 80076f0:	f8cd a000 	str.w	sl, [sp]
 80076f4:	464b      	mov	r3, r9
 80076f6:	aa03      	add	r2, sp, #12
 80076f8:	4621      	mov	r1, r4
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7ff fee4 	bl	80074c8 <_printf_common>
 8007700:	3001      	adds	r0, #1
 8007702:	d14a      	bne.n	800779a <_printf_i+0x1f6>
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	b004      	add	sp, #16
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	f043 0320 	orr.w	r3, r3, #32
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	4833      	ldr	r0, [pc, #204]	; (80077e4 <_printf_i+0x240>)
 8007718:	2778      	movs	r7, #120	; 0x78
 800771a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	6829      	ldr	r1, [r5, #0]
 8007722:	061f      	lsls	r7, r3, #24
 8007724:	f851 6b04 	ldr.w	r6, [r1], #4
 8007728:	d402      	bmi.n	8007730 <_printf_i+0x18c>
 800772a:	065f      	lsls	r7, r3, #25
 800772c:	bf48      	it	mi
 800772e:	b2b6      	uxthmi	r6, r6
 8007730:	07df      	lsls	r7, r3, #31
 8007732:	bf48      	it	mi
 8007734:	f043 0320 	orrmi.w	r3, r3, #32
 8007738:	6029      	str	r1, [r5, #0]
 800773a:	bf48      	it	mi
 800773c:	6023      	strmi	r3, [r4, #0]
 800773e:	b91e      	cbnz	r6, 8007748 <_printf_i+0x1a4>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	f023 0320 	bic.w	r3, r3, #32
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	2310      	movs	r3, #16
 800774a:	e7a7      	b.n	800769c <_printf_i+0xf8>
 800774c:	4824      	ldr	r0, [pc, #144]	; (80077e0 <_printf_i+0x23c>)
 800774e:	e7e4      	b.n	800771a <_printf_i+0x176>
 8007750:	4615      	mov	r5, r2
 8007752:	e7bd      	b.n	80076d0 <_printf_i+0x12c>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	6826      	ldr	r6, [r4, #0]
 8007758:	6961      	ldr	r1, [r4, #20]
 800775a:	1d18      	adds	r0, r3, #4
 800775c:	6028      	str	r0, [r5, #0]
 800775e:	0635      	lsls	r5, r6, #24
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	d501      	bpl.n	8007768 <_printf_i+0x1c4>
 8007764:	6019      	str	r1, [r3, #0]
 8007766:	e002      	b.n	800776e <_printf_i+0x1ca>
 8007768:	0670      	lsls	r0, r6, #25
 800776a:	d5fb      	bpl.n	8007764 <_printf_i+0x1c0>
 800776c:	8019      	strh	r1, [r3, #0]
 800776e:	2300      	movs	r3, #0
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	4615      	mov	r5, r2
 8007774:	e7bc      	b.n	80076f0 <_printf_i+0x14c>
 8007776:	682b      	ldr	r3, [r5, #0]
 8007778:	1d1a      	adds	r2, r3, #4
 800777a:	602a      	str	r2, [r5, #0]
 800777c:	681d      	ldr	r5, [r3, #0]
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	2100      	movs	r1, #0
 8007782:	4628      	mov	r0, r5
 8007784:	f7f8 fd74 	bl	8000270 <memchr>
 8007788:	b108      	cbz	r0, 800778e <_printf_i+0x1ea>
 800778a:	1b40      	subs	r0, r0, r5
 800778c:	6060      	str	r0, [r4, #4]
 800778e:	6863      	ldr	r3, [r4, #4]
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	2300      	movs	r3, #0
 8007794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007798:	e7aa      	b.n	80076f0 <_printf_i+0x14c>
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	462a      	mov	r2, r5
 800779e:	4649      	mov	r1, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	47d0      	blx	sl
 80077a4:	3001      	adds	r0, #1
 80077a6:	d0ad      	beq.n	8007704 <_printf_i+0x160>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	079b      	lsls	r3, r3, #30
 80077ac:	d413      	bmi.n	80077d6 <_printf_i+0x232>
 80077ae:	68e0      	ldr	r0, [r4, #12]
 80077b0:	9b03      	ldr	r3, [sp, #12]
 80077b2:	4298      	cmp	r0, r3
 80077b4:	bfb8      	it	lt
 80077b6:	4618      	movlt	r0, r3
 80077b8:	e7a6      	b.n	8007708 <_printf_i+0x164>
 80077ba:	2301      	movs	r3, #1
 80077bc:	4632      	mov	r2, r6
 80077be:	4649      	mov	r1, r9
 80077c0:	4640      	mov	r0, r8
 80077c2:	47d0      	blx	sl
 80077c4:	3001      	adds	r0, #1
 80077c6:	d09d      	beq.n	8007704 <_printf_i+0x160>
 80077c8:	3501      	adds	r5, #1
 80077ca:	68e3      	ldr	r3, [r4, #12]
 80077cc:	9903      	ldr	r1, [sp, #12]
 80077ce:	1a5b      	subs	r3, r3, r1
 80077d0:	42ab      	cmp	r3, r5
 80077d2:	dcf2      	bgt.n	80077ba <_printf_i+0x216>
 80077d4:	e7eb      	b.n	80077ae <_printf_i+0x20a>
 80077d6:	2500      	movs	r5, #0
 80077d8:	f104 0619 	add.w	r6, r4, #25
 80077dc:	e7f5      	b.n	80077ca <_printf_i+0x226>
 80077de:	bf00      	nop
 80077e0:	08007a59 	.word	0x08007a59
 80077e4:	08007a6a 	.word	0x08007a6a

080077e8 <memmove>:
 80077e8:	4288      	cmp	r0, r1
 80077ea:	b510      	push	{r4, lr}
 80077ec:	eb01 0402 	add.w	r4, r1, r2
 80077f0:	d902      	bls.n	80077f8 <memmove+0x10>
 80077f2:	4284      	cmp	r4, r0
 80077f4:	4623      	mov	r3, r4
 80077f6:	d807      	bhi.n	8007808 <memmove+0x20>
 80077f8:	1e43      	subs	r3, r0, #1
 80077fa:	42a1      	cmp	r1, r4
 80077fc:	d008      	beq.n	8007810 <memmove+0x28>
 80077fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007806:	e7f8      	b.n	80077fa <memmove+0x12>
 8007808:	4402      	add	r2, r0
 800780a:	4601      	mov	r1, r0
 800780c:	428a      	cmp	r2, r1
 800780e:	d100      	bne.n	8007812 <memmove+0x2a>
 8007810:	bd10      	pop	{r4, pc}
 8007812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800781a:	e7f7      	b.n	800780c <memmove+0x24>

0800781c <_sbrk_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d06      	ldr	r5, [pc, #24]	; (8007838 <_sbrk_r+0x1c>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f000 f840 	bl	80078ac <_sbrk>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_sbrk_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_sbrk_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	2001aa34 	.word	0x2001aa34

0800783c <_realloc_r>:
 800783c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	4680      	mov	r8, r0
 8007842:	4614      	mov	r4, r2
 8007844:	460e      	mov	r6, r1
 8007846:	b921      	cbnz	r1, 8007852 <_realloc_r+0x16>
 8007848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800784c:	4611      	mov	r1, r2
 800784e:	f7ff bc57 	b.w	8007100 <_malloc_r>
 8007852:	b92a      	cbnz	r2, 8007860 <_realloc_r+0x24>
 8007854:	f7ff fbe8 	bl	8007028 <_free_r>
 8007858:	4625      	mov	r5, r4
 800785a:	4628      	mov	r0, r5
 800785c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007860:	f000 f81b 	bl	800789a <_malloc_usable_size_r>
 8007864:	4284      	cmp	r4, r0
 8007866:	4607      	mov	r7, r0
 8007868:	d802      	bhi.n	8007870 <_realloc_r+0x34>
 800786a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800786e:	d812      	bhi.n	8007896 <_realloc_r+0x5a>
 8007870:	4621      	mov	r1, r4
 8007872:	4640      	mov	r0, r8
 8007874:	f7ff fc44 	bl	8007100 <_malloc_r>
 8007878:	4605      	mov	r5, r0
 800787a:	2800      	cmp	r0, #0
 800787c:	d0ed      	beq.n	800785a <_realloc_r+0x1e>
 800787e:	42bc      	cmp	r4, r7
 8007880:	4622      	mov	r2, r4
 8007882:	4631      	mov	r1, r6
 8007884:	bf28      	it	cs
 8007886:	463a      	movcs	r2, r7
 8007888:	f7ff fbc0 	bl	800700c <memcpy>
 800788c:	4631      	mov	r1, r6
 800788e:	4640      	mov	r0, r8
 8007890:	f7ff fbca 	bl	8007028 <_free_r>
 8007894:	e7e1      	b.n	800785a <_realloc_r+0x1e>
 8007896:	4635      	mov	r5, r6
 8007898:	e7df      	b.n	800785a <_realloc_r+0x1e>

0800789a <_malloc_usable_size_r>:
 800789a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789e:	1f18      	subs	r0, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfbc      	itt	lt
 80078a4:	580b      	ldrlt	r3, [r1, r0]
 80078a6:	18c0      	addlt	r0, r0, r3
 80078a8:	4770      	bx	lr
	...

080078ac <_sbrk>:
 80078ac:	4a04      	ldr	r2, [pc, #16]	; (80078c0 <_sbrk+0x14>)
 80078ae:	6811      	ldr	r1, [r2, #0]
 80078b0:	4603      	mov	r3, r0
 80078b2:	b909      	cbnz	r1, 80078b8 <_sbrk+0xc>
 80078b4:	4903      	ldr	r1, [pc, #12]	; (80078c4 <_sbrk+0x18>)
 80078b6:	6011      	str	r1, [r2, #0]
 80078b8:	6810      	ldr	r0, [r2, #0]
 80078ba:	4403      	add	r3, r0
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	4770      	bx	lr
 80078c0:	2001aa44 	.word	0x2001aa44
 80078c4:	2001aa48 	.word	0x2001aa48

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
