
006LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007938  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007ac8  08007ac8  00008ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cac  08007cac  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cac  08007cac  00008cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb4  08007cb4  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cb8  08007cb8  00008cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08007cbc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          0001a8a0  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001a8bc  2001a8bc  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015222  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031fa  00000000  00000000  0001e26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00021468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4c  00000000  00000000  00022850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b92  00000000  00000000  0002379c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d8f  00000000  00000000  0004732e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d884e  00000000  00000000  0005e0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013690b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005338  00000000  00000000  00136950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cb  00000000  00000000  0013bc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ab0 	.word	0x08007ab0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08007ab0 	.word	0x08007ab0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200192e8 	.word	0x200192e8

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc35 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f87b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8e3 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* Enable Cycle counter - bit 0 of DWT_CTRL register */
  DWT_CTRL |= (1 << 0);
 8000566:	4b30      	ldr	r3, [pc, #192]	@ (8000628 <main+0xd4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a2f      	ldr	r2, [pc, #188]	@ (8000628 <main+0xd4>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000572:	482e      	ldr	r0, [pc, #184]	@ (800062c <main+0xd8>)
 8000574:	f004 fec6 	bl	8005304 <SEGGER_UART_init>
  
  SEGGER_SYSVIEW_Conf();
 8000578:	f004 fc32 	bl	8004de0 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start();

	status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 800057c:	4b2c      	ldr	r3, [pc, #176]	@ (8000630 <main+0xdc>)
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2303      	movs	r3, #3
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	492a      	ldr	r1, [pc, #168]	@ (8000634 <main+0xe0>)
 800058a:	482b      	ldr	r0, [pc, #172]	@ (8000638 <main+0xe4>)
 800058c:	f002 fa5e 	bl	8002a4c <xTaskCreate>
 8000590:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00b      	beq.n	80005b0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800059c:	f383 8811 	msr	BASEPRI, r3
 80005a0:	f3bf 8f6f 	isb	sy
 80005a4:	f3bf 8f4f 	dsb	sy
 80005a8:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x58>

	next_task_handle = ledg_task_handle;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <main+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <main+0xe8>)
 80005b6:	6013      	str	r3, [r2, #0]

	status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <main+0xec>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	@ 0xc8
 80005c4:	491f      	ldr	r1, [pc, #124]	@ (8000644 <main+0xf0>)
 80005c6:	4820      	ldr	r0, [pc, #128]	@ (8000648 <main+0xf4>)
 80005c8:	f002 fa40 	bl	8002a4c <xTaskCreate>
 80005cc:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00b      	beq.n	80005ec <main+0x98>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	607b      	str	r3, [r7, #4]
    }
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x94>

	status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &ledr_task_handle);
 80005ec:	4b17      	ldr	r3, [pc, #92]	@ (800064c <main+0xf8>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2301      	movs	r3, #1
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	@ 0xc8
 80005f8:	4915      	ldr	r1, [pc, #84]	@ (8000650 <main+0xfc>)
 80005fa:	4816      	ldr	r0, [pc, #88]	@ (8000654 <main+0x100>)
 80005fc:	f002 fa26 	bl	8002a4c <xTaskCreate>
 8000600:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00b      	beq.n	8000620 <main+0xcc>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	603b      	str	r3, [r7, #0]
    }
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0xc8>

    // start the FreeRTOS scheduler
    vTaskStartScheduler();
 8000620:	f002 fc52 	bl	8002ec8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0xd0>
 8000628:	e0001000 	.word	0xe0001000
 800062c:	0007a120 	.word	0x0007a120
 8000630:	20000038 	.word	0x20000038
 8000634:	08007ac8 	.word	0x08007ac8
 8000638:	08000a29 	.word	0x08000a29
 800063c:	20000044 	.word	0x20000044
 8000640:	2000003c 	.word	0x2000003c
 8000644:	08007ad8 	.word	0x08007ad8
 8000648:	08000a99 	.word	0x08000a99
 800064c:	20000040 	.word	0x20000040
 8000650:	08007ae8 	.word	0x08007ae8
 8000654:	08000b09 	.word	0x08000b09

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 f9e8 	bl	8007a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006cc:	23a8      	movs	r3, #168	@ 0xa8
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe8b 	bl	80013f8 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fa56 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f8ec 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 fa3f 	bl	8000b98 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	@ 0x30
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4ba6      	ldr	r3, [pc, #664]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4aa5      	ldr	r2, [pc, #660]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4ba3      	ldr	r3, [pc, #652]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b9f      	ldr	r3, [pc, #636]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a9e      	ldr	r2, [pc, #632]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b9c      	ldr	r3, [pc, #624]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b98      	ldr	r3, [pc, #608]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a97      	ldr	r2, [pc, #604]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b95      	ldr	r3, [pc, #596]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b91      	ldr	r3, [pc, #580]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a90      	ldr	r2, [pc, #576]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b8e      	ldr	r3, [pc, #568]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b8a      	ldr	r3, [pc, #552]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a89      	ldr	r2, [pc, #548]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b87      	ldr	r3, [pc, #540]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b83      	ldr	r3, [pc, #524]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a82      	ldr	r2, [pc, #520]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b80      	ldr	r3, [pc, #512]	@ (80009e0 <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	487d      	ldr	r0, [pc, #500]	@ (80009e4 <MX_GPIO_Init+0x2b8>)
 80007f0:	f000 fdaa 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	487b      	ldr	r0, [pc, #492]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 80007fa:	f000 fda5 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007fe:	2200      	movs	r2, #0
 8000800:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000804:	4879      	ldr	r0, [pc, #484]	@ (80009ec <MX_GPIO_Init+0x2c0>)
 8000806:	f000 fd9f 	bl	8001348 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080a:	2308      	movs	r3, #8
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	4619      	mov	r1, r3
 8000820:	4870      	ldr	r0, [pc, #448]	@ (80009e4 <MX_GPIO_Init+0x2b8>)
 8000822:	f000 fbf5 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	486a      	ldr	r0, [pc, #424]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 800083e:	f000 fbe7 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000852:	2305      	movs	r3, #5
 8000854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4862      	ldr	r0, [pc, #392]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 800085e:	f000 fbd7 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000866:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	485e      	ldr	r0, [pc, #376]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 8000878:	f000 fbca 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800087c:	2310      	movs	r3, #16
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800088c:	2306      	movs	r3, #6
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4856      	ldr	r0, [pc, #344]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 8000898:	f000 fbba 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800089c:	23e0      	movs	r3, #224	@ 0xe0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ac:	2305      	movs	r3, #5
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	484e      	ldr	r0, [pc, #312]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 80008b8:	f000 fbaa 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008bc:	2304      	movs	r3, #4
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4849      	ldr	r0, [pc, #292]	@ (80009f4 <MX_GPIO_Init+0x2c8>)
 80008d0:	f000 fb9e 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4840      	ldr	r0, [pc, #256]	@ (80009f4 <MX_GPIO_Init+0x2c8>)
 80008f2:	f000 fb8d 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4837      	ldr	r0, [pc, #220]	@ (80009ec <MX_GPIO_Init+0x2c0>)
 8000910:	f000 fb7e 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000914:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000926:	2306      	movs	r3, #6
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482d      	ldr	r0, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0x2bc>)
 8000932:	f000 fb6d 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000936:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4829      	ldr	r0, [pc, #164]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 800094c:	f000 fb60 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000950:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000962:	230a      	movs	r3, #10
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4820      	ldr	r0, [pc, #128]	@ (80009f0 <MX_GPIO_Init+0x2c4>)
 800096e:	f000 fb4f 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000972:	2320      	movs	r3, #32
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4819      	ldr	r0, [pc, #100]	@ (80009ec <MX_GPIO_Init+0x2c0>)
 8000986:	f000 fb43 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800098a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000990:	2312      	movs	r3, #18
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099c:	2304      	movs	r3, #4
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <MX_GPIO_Init+0x2c8>)
 80009a8:	f000 fb32 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <MX_GPIO_Init+0x2b8>)
 80009c2:	f000 fb25 	bl	8001010 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2106      	movs	r1, #6
 80009ca:	2006      	movs	r0, #6
 80009cc:	f000 faf6 	bl	8000fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d0:	2006      	movs	r0, #6
 80009d2:	f000 fb0f 	bl	8000ff4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3730      	adds	r7, #48	@ 0x30
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020400 	.word	0x40020400

080009f8 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af02      	add	r7, sp, #8
	traceISR_ENTER();
 80009fe:	f006 fcbd 	bl	800737c <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, NULL);
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <button_interrupt_handler+0x2c>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	f003 f866 	bl	8003ae4 <xTaskGenericNotifyFromISR>
	traceISR_EXIT();
 8000a18:	f006 fcf2 	bl	8007400 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000044 	.word	0x20000044

08000a28 <led_green_handler>:

static void led_green_handler(void * parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a30:	4814      	ldr	r0, [pc, #80]	@ (8000a84 <led_green_handler+0x5c>)
 8000a32:	f006 ff55 	bl	80078e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // PD12
 8000a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a3a:	4813      	ldr	r0, [pc, #76]	@ (8000a88 <led_green_handler+0x60>)
 8000a3c:	f000 fc9d 	bl	800137a <HAL_GPIO_TogglePin>
		// Wait for the notification
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f002 ffbf 	bl	80039d0 <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]

		if (status == pdTRUE)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_green_handler+0x8>
		{
			portENTER_CRITICAL();
 8000a5a:	f003 fe7f 	bl	800475c <vPortEnterCritical>
			//vTaskSuspendAll();
			// The notification is received or the User has already pressed the button
			next_task_handle = ledo_task_handle; // update next_task_handle
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <led_green_handler+0x64>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <led_green_handler+0x68>)
 8000a64:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // before deleting task, keep the LED on
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a6c:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <led_green_handler+0x60>)
 8000a6e:	f000 fc6b 	bl	8001348 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <led_green_handler+0x6c>)
 8000a74:	f006 ff34 	bl	80078e0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a78:	f003 fea2 	bl	80047c0 <vPortExitCritical>
			vTaskDelete(NULL); // delete itself
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f002 f973 	bl	8002d68 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a82:	e7d5      	b.n	8000a30 <led_green_handler+0x8>
 8000a84:	08007af8 	.word	0x08007af8
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	2000003c 	.word	0x2000003c
 8000a90:	20000044 	.word	0x20000044
 8000a94:	08007b0c 	.word	0x08007b0c

08000a98 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void * parameters)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000aa0:	4814      	ldr	r0, [pc, #80]	@ (8000af4 <led_orange_handler+0x5c>)
 8000aa2:	f006 ff1d 	bl	80078e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // PD13
 8000aa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aaa:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <led_orange_handler+0x60>)
 8000aac:	f000 fc65 	bl	800137a <HAL_GPIO_TogglePin>
		// Wait for the notification
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000ab0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f002 ff87 	bl	80039d0 <xTaskGenericNotifyWait>
 8000ac2:	60f8      	str	r0, [r7, #12]

		if (status == pdTRUE)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1ea      	bne.n	8000aa0 <led_orange_handler+0x8>
		{
			portENTER_CRITICAL();
 8000aca:	f003 fe47 	bl	800475c <vPortEnterCritical>
			//vTaskSuspendAll();
			// The notification is received or the User has already pressed the button
			next_task_handle = ledr_task_handle; // update next_task_handle
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <led_orange_handler+0x64>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <led_orange_handler+0x68>)
 8000ad4:	6013      	str	r3, [r2, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // before deleting task, keep the LED on
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000adc:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <led_orange_handler+0x60>)
 8000ade:	f000 fc33 	bl	8001348 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000ae2:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <led_orange_handler+0x6c>)
 8000ae4:	f006 fefc 	bl	80078e0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000ae8:	f003 fe6a 	bl	80047c0 <vPortExitCritical>
			vTaskDelete(NULL); // delete itself
 8000aec:	2000      	movs	r0, #0
 8000aee:	f002 f93b 	bl	8002d68 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000af2:	e7d5      	b.n	8000aa0 <led_orange_handler+0x8>
 8000af4:	08007b24 	.word	0x08007b24
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	20000040 	.word	0x20000040
 8000b00:	20000044 	.word	0x20000044
 8000b04:	08007b38 	.word	0x08007b38

08000b08 <led_red_handler>:
		}
	}
}

static void led_red_handler(void * parameters)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b10:	4814      	ldr	r0, [pc, #80]	@ (8000b64 <led_red_handler+0x5c>)
 8000b12:	f006 fee5 	bl	80078e0 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // PD14
 8000b16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <led_red_handler+0x60>)
 8000b1c:	f000 fc2d 	bl	800137a <HAL_GPIO_TogglePin>
		// Wait for the notification
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f002 ff4f 	bl	80039d0 <xTaskGenericNotifyWait>
 8000b32:	60f8      	str	r0, [r7, #12]

		if (status == pdTRUE)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d1ea      	bne.n	8000b10 <led_red_handler+0x8>
		{
			portENTER_CRITICAL();
 8000b3a:	f003 fe0f 	bl	800475c <vPortEnterCritical>
			//vTaskSuspendAll();
			// The notification is received or the User has already pressed the button
			next_task_handle = NULL; // update next_task_handle
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <led_red_handler+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
			//xTaskResumeAll();
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // before deleting task, keep the LED on
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b4a:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <led_red_handler+0x60>)
 8000b4c:	f000 fbfc 	bl	8001348 <HAL_GPIO_WritePin>
			//vTaskDelete(btn_task_handle); // delete button task
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000b50:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <led_red_handler+0x68>)
 8000b52:	f006 fec5 	bl	80078e0 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000b56:	f003 fe33 	bl	80047c0 <vPortExitCritical>
			vTaskDelete(NULL); // delete itself
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f002 f904 	bl	8002d68 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b60:	e7d6      	b.n	8000b10 <led_red_handler+0x8>
 8000b62:	bf00      	nop
 8000b64:	08007b50 	.word	0x08007b50
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	20000044 	.word	0x20000044
 8000b70:	08007b64 	.word	0x08007b64

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 f941 	bl	8000e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40001000 	.word	0x40001000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <Error_Handler+0x8>

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000be2:	f003 fd3b 	bl	800465c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	@ 0x38
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b33      	ldr	r3, [pc, #204]	@ (8000cd8 <HAL_InitTick+0xe4>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0c:	4a32      	ldr	r2, [pc, #200]	@ (8000cd8 <HAL_InitTick+0xe4>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c14:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <HAL_InitTick+0xe4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	f003 0310 	and.w	r3, r3, #16
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c20:	f107 0210 	add.w	r2, r7, #16
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 f868 	bl	8001d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c30:	6a3b      	ldr	r3, [r7, #32]
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d103      	bne.n	8000c42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c3a:	f001 f84d 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8000c3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c40:	e004      	b.n	8000c4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c42:	f001 f849 	bl	8001cd8 <HAL_RCC_GetPCLK1Freq>
 8000c46:	4603      	mov	r3, r0
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <HAL_InitTick+0xe8>)
 8000c50:	fba2 2303 	umull	r2, r3, r2, r3
 8000c54:	0c9b      	lsrs	r3, r3, #18
 8000c56:	3b01      	subs	r3, #1
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ce4 <HAL_InitTick+0xf0>)
 8000c5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c80:	4817      	ldr	r0, [pc, #92]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c82:	f001 f86f 	bl	8001d64 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d11b      	bne.n	8000ccc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c94:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <HAL_InitTick+0xec>)
 8000c96:	f001 f8bf 	bl	8001e18 <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d111      	bne.n	8000ccc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca8:	2036      	movs	r0, #54	@ 0x36
 8000caa:	f000 f9a3 	bl	8000ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d808      	bhi.n	8000cc6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	2036      	movs	r0, #54	@ 0x36
 8000cba:	f000 f97f 	bl	8000fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <HAL_InitTick+0xf4>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	e002      	b.n	8000ccc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3738      	adds	r7, #56	@ 0x38
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	20000048 	.word	0x20000048
 8000ce4:	40001000 	.word	0x40001000
 8000ce8:	20000004 	.word	0x20000004

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <MemManage_Handler+0x4>

08000d04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000d26:	f7ff fe67 	bl	80009f8 <button_interrupt_handler>

	// Clear EXTI0 pending bit in EXTI pending register
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fb40 	bl	80013b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f000 fb3d 	bl	80013b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM6_DAC_IRQHandler+0x10>)
 8000d42:	f001 f8d9 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000048 	.word	0x20000048

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d78:	f7ff ffea 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7e:	490d      	ldr	r1, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d80:	4a0d      	ldr	r2, [pc, #52]	@ (8000db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d84:	e002      	b.n	8000d8c <LoopCopyDataInit>

08000d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8a:	3304      	adds	r3, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d90:	d3f9      	bcc.n	8000d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d94:	4c0a      	ldr	r4, [pc, #40]	@ (8000dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d98:	e001      	b.n	8000d9e <LoopFillZerobss>

08000d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d9c:	3204      	adds	r2, #4

08000d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da0:	d3fb      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da2:	f006 fe53 	bl	8007a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fbd5 	bl	8000554 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000db8:	08007cbc 	.word	0x08007cbc
  ldr r2, =_sbss
 8000dbc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dc0:	2001a8bc 	.word	0x2001a8bc

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f8d8 	bl	8000fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fefc 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fed2 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000090 	.word	0x20000090

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000090 	.word	0x20000090

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	@ (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	@ 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	@ 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff4c 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fce:	f7ff ff61 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	6978      	ldr	r0, [r7, #20]
 8000fda:	f7ff ffb1 	bl	8000f40 <NVIC_EncodePriority>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff80 	bl	8000eec <__NVIC_SetPriority>
}
 8000fec:	bf00      	nop
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff54 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e16b      	b.n	8001304 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 815a 	bne.w	80012fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d005      	beq.n	8001062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	2b02      	cmp	r3, #2
 8001060:	d130      	bne.n	80010c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	2203      	movs	r2, #3
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 0201 	and.w	r2, r3, #1
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d017      	beq.n	8001100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80b4 	beq.w	80012fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b60      	ldr	r3, [pc, #384]	@ (800131c <HAL_GPIO_Init+0x30c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a5f      	ldr	r2, [pc, #380]	@ (800131c <HAL_GPIO_Init+0x30c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b5d      	ldr	r3, [pc, #372]	@ (800131c <HAL_GPIO_Init+0x30c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001320 <HAL_GPIO_Init+0x310>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a52      	ldr	r2, [pc, #328]	@ (8001324 <HAL_GPIO_Init+0x314>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d02b      	beq.n	8001236 <HAL_GPIO_Init+0x226>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a51      	ldr	r2, [pc, #324]	@ (8001328 <HAL_GPIO_Init+0x318>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d025      	beq.n	8001232 <HAL_GPIO_Init+0x222>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a50      	ldr	r2, [pc, #320]	@ (800132c <HAL_GPIO_Init+0x31c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01f      	beq.n	800122e <HAL_GPIO_Init+0x21e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001330 <HAL_GPIO_Init+0x320>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x21a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001334 <HAL_GPIO_Init+0x324>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x216>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4d      	ldr	r2, [pc, #308]	@ (8001338 <HAL_GPIO_Init+0x328>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x212>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4c      	ldr	r2, [pc, #304]	@ (800133c <HAL_GPIO_Init+0x32c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x20e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4b      	ldr	r2, [pc, #300]	@ (8001340 <HAL_GPIO_Init+0x330>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x20a>
 8001216:	2307      	movs	r3, #7
 8001218:	e00e      	b.n	8001238 <HAL_GPIO_Init+0x228>
 800121a:	2308      	movs	r3, #8
 800121c:	e00c      	b.n	8001238 <HAL_GPIO_Init+0x228>
 800121e:	2306      	movs	r3, #6
 8001220:	e00a      	b.n	8001238 <HAL_GPIO_Init+0x228>
 8001222:	2305      	movs	r3, #5
 8001224:	e008      	b.n	8001238 <HAL_GPIO_Init+0x228>
 8001226:	2304      	movs	r3, #4
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x228>
 800122a:	2303      	movs	r3, #3
 800122c:	e004      	b.n	8001238 <HAL_GPIO_Init+0x228>
 800122e:	2302      	movs	r3, #2
 8001230:	e002      	b.n	8001238 <HAL_GPIO_Init+0x228>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_GPIO_Init+0x228>
 8001236:	2300      	movs	r3, #0
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	f002 0203 	and.w	r2, r2, #3
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	4093      	lsls	r3, r2
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001248:	4935      	ldr	r1, [pc, #212]	@ (8001320 <HAL_GPIO_Init+0x310>)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001256:	4b3b      	ldr	r3, [pc, #236]	@ (8001344 <HAL_GPIO_Init+0x334>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127a:	4a32      	ldr	r2, [pc, #200]	@ (8001344 <HAL_GPIO_Init+0x334>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001280:	4b30      	ldr	r3, [pc, #192]	@ (8001344 <HAL_GPIO_Init+0x334>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a4:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <HAL_GPIO_Init+0x334>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <HAL_GPIO_Init+0x334>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001344 <HAL_GPIO_Init+0x334>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_GPIO_Init+0x334>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f8:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <HAL_GPIO_Init+0x334>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3301      	adds	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	f67f ae90 	bls.w	800102c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3724      	adds	r7, #36	@ 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40021400 	.word	0x40021400
 800133c:	40021800 	.word	0x40021800
 8001340:	40021c00 	.word	0x40021c00
 8001344:	40013c00 	.word	0x40013c00

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800138c:	887a      	ldrh	r2, [r7, #2]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	041a      	lsls	r2, r3, #16
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43d9      	mvns	r1, r3
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	400b      	ands	r3, r1
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f806 	bl	80013e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e267      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001416:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001422:	4b85      	ldr	r3, [pc, #532]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800142a:	2b08      	cmp	r3, #8
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b82      	ldr	r3, [pc, #520]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b7e      	ldr	r3, [pc, #504]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d05b      	beq.n	8001500 <HAL_RCC_OscConfig+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d157      	bne.n	8001500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e242      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x74>
 800145e:	4b76      	ldr	r3, [pc, #472]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a75      	ldr	r2, [pc, #468]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x98>
 8001476:	4b70      	ldr	r3, [pc, #448]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6f      	ldr	r2, [pc, #444]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b6d      	ldr	r3, [pc, #436]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6c      	ldr	r2, [pc, #432]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xb0>
 8001490:	4b69      	ldr	r3, [pc, #420]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a68      	ldr	r2, [pc, #416]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a65      	ldr	r2, [pc, #404]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcc0 	bl	8000e34 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcbc 	bl	8000e34 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e207      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xc0>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcac 	bl	8000e34 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fca8 	bl	8000e34 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1f3      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b51      	ldr	r3, [pc, #324]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0xe8>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150e:	4b4a      	ldr	r3, [pc, #296]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151a:	4b47      	ldr	r3, [pc, #284]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c7      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3b      	ldr	r3, [pc, #236]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4937      	ldr	r1, [pc, #220]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b34      	ldr	r3, [pc, #208]	@ (800163c <HAL_RCC_OscConfig+0x244>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fc61 	bl	8000e34 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fc5d 	bl	8000e34 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a8      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b28      	ldr	r3, [pc, #160]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4925      	ldr	r1, [pc, #148]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b24      	ldr	r3, [pc, #144]	@ (800163c <HAL_RCC_OscConfig+0x244>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc40 	bl	8000e34 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc3c 	bl	8000e34 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e187      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d036      	beq.n	8001650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d016      	beq.n	8001618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <HAL_RCC_OscConfig+0x248>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fc20 	bl	8000e34 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc1c 	bl	8000e34 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e167      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <HAL_RCC_OscConfig+0x240>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x200>
 8001616:	e01b      	b.n	8001650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b09      	ldr	r3, [pc, #36]	@ (8001640 <HAL_RCC_OscConfig+0x248>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fc09 	bl	8000e34 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	e00e      	b.n	8001644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fc05 	bl	8000e34 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d907      	bls.n	8001644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e150      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001638:	40023800 	.word	0x40023800
 800163c:	42470000 	.word	0x42470000
 8001640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001644:	4b88      	ldr	r3, [pc, #544]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ea      	bne.n	8001626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8097 	beq.w	800178c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b81      	ldr	r3, [pc, #516]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b7d      	ldr	r3, [pc, #500]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a7c      	ldr	r2, [pc, #496]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b7a      	ldr	r3, [pc, #488]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b77      	ldr	r3, [pc, #476]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b74      	ldr	r3, [pc, #464]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a73      	ldr	r2, [pc, #460]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7ff fbc5 	bl	8000e34 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7ff fbc1 	bl	8000e34 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e10c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	4b6a      	ldr	r3, [pc, #424]	@ (800186c <HAL_RCC_OscConfig+0x474>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2ea>
 80016d4:	4b64      	ldr	r3, [pc, #400]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d8:	4a63      	ldr	r2, [pc, #396]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x30c>
 80016ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	@ 0x70
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x324>
 8001704:	4b58      	ldr	r3, [pc, #352]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a57      	ldr	r2, [pc, #348]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	4b55      	ldr	r3, [pc, #340]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a54      	ldr	r2, [pc, #336]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff fb86 	bl	8000e34 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff fb82 	bl	8000e34 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0cb      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ee      	beq.n	800172c <HAL_RCC_OscConfig+0x334>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fb70 	bl	8000e34 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb6c 	bl	8000e34 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e0b5      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176e:	4b3e      	ldr	r3, [pc, #248]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ee      	bne.n	8001758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a1 	beq.w	80018d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001796:	4b34      	ldr	r3, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d05c      	beq.n	800185c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d141      	bne.n	800182e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb40 	bl	8000e34 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fb3c 	bl	8000e34 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e087      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69da      	ldr	r2, [r3, #28]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	019b      	lsls	r3, r3, #6
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	085b      	lsrs	r3, r3, #1
 80017ee:	3b01      	subs	r3, #1
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	491b      	ldr	r1, [pc, #108]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001806:	f7ff fb15 	bl	8000e34 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fb11 	bl	8000e34 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e05c      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x416>
 800182c:	e054      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_RCC_OscConfig+0x478>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fafe 	bl	8000e34 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff fafa 	bl	8000e34 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e045      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_RCC_OscConfig+0x470>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x444>
 800185a:	e03d      	b.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d107      	bne.n	8001874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e038      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000
 8001870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x4ec>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d028      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d121      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d11a      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018a4:	4013      	ands	r3, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3b01      	subs	r3, #1
 80018be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d107      	bne.n	80018d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff fa2c 	bl	8000e34 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff fa28 	bl	8000e34 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5ccb      	ldrb	r3, [r1, r3]
 8001a82:	fa22 f303 	lsr.w	r3, r2, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	@ (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f8b0 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	08007c58 	.word	0x08007c58
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab8:	b094      	sub	sp, #80	@ 0x50
 8001aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4b79      	ldr	r3, [pc, #484]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d00d      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	f200 80e1 	bhi.w	8001ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae6:	e0db      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b73      	ldr	r3, [pc, #460]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001aec:	e0db      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aee:	4b73      	ldr	r3, [pc, #460]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8001af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001af2:	e0d8      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af4:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afe:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d063      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	2200      	movs	r2, #0
 8001b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b1e:	2300      	movs	r3, #0
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b26:	4622      	mov	r2, r4
 8001b28:	462b      	mov	r3, r5
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4621      	mov	r1, r4
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	6139      	str	r1, [r7, #16]
 8001b44:	4629      	mov	r1, r5
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	ebb2 0801 	subs.w	r8, r2, r1
 8001b6c:	4659      	mov	r1, fp
 8001b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b86:	4690      	mov	r8, r2
 8001b88:	4699      	mov	r9, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	eb18 0303 	adds.w	r3, r8, r3
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	462b      	mov	r3, r5
 8001b94:	eb49 0303 	adc.w	r3, r9, r3
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	024b      	lsls	r3, r1, #9
 8001baa:	4621      	mov	r1, r4
 8001bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	024a      	lsls	r2, r1, #9
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bba:	2200      	movs	r2, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bc4:	f7fe fb4e 	bl	8000264 <__aeabi_uldivmod>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bd0:	e058      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b38      	ldr	r3, [pc, #224]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4611      	mov	r1, r2
 8001bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bec:	4642      	mov	r2, r8
 8001bee:	464b      	mov	r3, r9
 8001bf0:	f04f 0000 	mov.w	r0, #0
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	0159      	lsls	r1, r3, #5
 8001bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfe:	0150      	lsls	r0, r2, #5
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4641      	mov	r1, r8
 8001c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c24:	ebb2 040a 	subs.w	r4, r2, sl
 8001c28:	eb63 050b 	sbc.w	r5, r3, fp
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	00eb      	lsls	r3, r5, #3
 8001c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c3a:	00e2      	lsls	r2, r4, #3
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	4643      	mov	r3, r8
 8001c42:	18e3      	adds	r3, r4, r3
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	464b      	mov	r3, r9
 8001c48:	eb45 0303 	adc.w	r3, r5, r3
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	028b      	lsls	r3, r1, #10
 8001c5e:	4621      	mov	r1, r4
 8001c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c64:	4621      	mov	r1, r4
 8001c66:	028a      	lsls	r2, r1, #10
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	61fa      	str	r2, [r7, #28]
 8001c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c78:	f7fe faf4 	bl	8000264 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4613      	mov	r3, r2
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3750      	adds	r7, #80	@ 0x50
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b03      	ldr	r3, [pc, #12]	@ (8001cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000000 	.word	0x20000000

08001cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4903      	ldr	r1, [pc, #12]	@ (8001cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08007c68 	.word	0x08007c68

08001d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <HAL_RCC_GetClockConfig+0x60>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0207 	and.w	r2, r3, #7
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	601a      	str	r2, [r3, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40023c00 	.word	0x40023c00

08001d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e041      	b.n	8001dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f839 	bl	8001e02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f000 f9c0 	bl	8002128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e04e      	b.n	8001ece <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d022      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5a:	d01d      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d018      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d013      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00e      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <HAL_TIM_Base_Start_IT+0xd4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d004      	beq.n	8001e98 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d010      	beq.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eba:	e007      	b.n	8001ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40010400 	.word	0x40010400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40001800 	.word	0x40001800

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0202 	mvn.w	r2, #2
 8001f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8d2 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8c4 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8d5 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8ac 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f89e 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f8af 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0208 	mvn.w	r2, #8
 8001fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f886 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 8001fe0:	e005      	b.n	8001fee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f878 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f889 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d020      	beq.n	8002040 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01b      	beq.n	8002040 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0210 	mvn.w	r2, #16
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2208      	movs	r2, #8
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f860 	bl	80020ec <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f852 	bl	80020d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f863 	bl	8002100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0201 	mvn.w	r2, #1
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fd88 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f906 	bl	8002294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f834 	bl	8002114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0220 	mvn.w	r2, #32
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8d8 	bl	8002280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a46      	ldr	r2, [pc, #280]	@ (8002254 <TIM_Base_SetConfig+0x12c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002146:	d00f      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a43      	ldr	r2, [pc, #268]	@ (8002258 <TIM_Base_SetConfig+0x130>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a42      	ldr	r2, [pc, #264]	@ (800225c <TIM_Base_SetConfig+0x134>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a41      	ldr	r2, [pc, #260]	@ (8002260 <TIM_Base_SetConfig+0x138>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a40      	ldr	r2, [pc, #256]	@ (8002264 <TIM_Base_SetConfig+0x13c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d108      	bne.n	800217a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800216e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a35      	ldr	r2, [pc, #212]	@ (8002254 <TIM_Base_SetConfig+0x12c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002188:	d027      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a32      	ldr	r2, [pc, #200]	@ (8002258 <TIM_Base_SetConfig+0x130>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d023      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a31      	ldr	r2, [pc, #196]	@ (800225c <TIM_Base_SetConfig+0x134>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a30      	ldr	r2, [pc, #192]	@ (8002260 <TIM_Base_SetConfig+0x138>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002264 <TIM_Base_SetConfig+0x13c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d017      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002268 <TIM_Base_SetConfig+0x140>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2d      	ldr	r2, [pc, #180]	@ (800226c <TIM_Base_SetConfig+0x144>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00f      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002270 <TIM_Base_SetConfig+0x148>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00b      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002274 <TIM_Base_SetConfig+0x14c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002278 <TIM_Base_SetConfig+0x150>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a29      	ldr	r2, [pc, #164]	@ (800227c <TIM_Base_SetConfig+0x154>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a10      	ldr	r2, [pc, #64]	@ (8002254 <TIM_Base_SetConfig+0x12c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d003      	beq.n	8002220 <TIM_Base_SetConfig+0xf8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a12      	ldr	r2, [pc, #72]	@ (8002264 <TIM_Base_SetConfig+0x13c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f023 0201 	bic.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
  }
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40010400 	.word	0x40010400
 8002268:	40014000 	.word	0x40014000
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800
 8002274:	40001800 	.word	0x40001800
 8002278:	40001c00 	.word	0x40001c00
 800227c:	40002000 	.word	0x40002000

08002280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f103 0208 	add.w	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f103 0208 	add.w	r2, r3, #8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0208 	add.w	r2, r3, #8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002302:	b480      	push	{r7}
 8002304:	b085      	sub	sp, #20
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d103      	bne.n	800236a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e00c      	b.n	8002384 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3308      	adds	r3, #8
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e002      	b.n	8002378 <vListInsert+0x2e>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d2f6      	bcs.n	8002372 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	601a      	str	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6892      	ldr	r2, [r2, #8]
 80023d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6852      	ldr	r2, [r2, #4]
 80023dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d103      	bne.n	80023f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1e5a      	subs	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <xQueueGenericReset+0x30>
        __asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	60fb      	str	r3, [r7, #12]
    }
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	e7fd      	b.n	800243c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d052      	beq.n	80024ec <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800244a:	2b00      	cmp	r3, #0
 800244c:	d04e      	beq.n	80024ec <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	2100      	movs	r1, #0
 8002458:	fba3 2302 	umull	r2, r3, r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d000      	beq.n	8002462 <xQueueGenericReset+0x52>
 8002460:	2101      	movs	r1, #1
 8002462:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002464:	2b00      	cmp	r3, #0
 8002466:	d141      	bne.n	80024ec <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002468:	f002 f978 	bl	800475c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	6939      	ldr	r1, [r7, #16]
 8002476:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	441a      	add	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2200      	movs	r2, #0
 8002486:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	3b01      	subs	r3, #1
 800249a:	6939      	ldr	r1, [r7, #16]
 800249c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	441a      	add	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	22ff      	movs	r2, #255	@ 0xff
 80024ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	22ff      	movs	r2, #255	@ 0xff
 80024b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00f      	beq.n	80024e6 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	3310      	adds	r3, #16
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 f852 	bl	8003574 <xTaskRemoveFromEventList>
 80024d0:	e009      	b.n	80024e6 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	3310      	adds	r3, #16
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fee6 	bl	80022a8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	3324      	adds	r3, #36	@ 0x24
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fee1 	bl	80022a8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024e6:	f002 f96b 	bl	80047c0 <vPortExitCritical>
 80024ea:	e001      	b.n	80024f0 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10b      	bne.n	800250e <xQueueGenericReset+0xfe>
        __asm volatile
 80024f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fa:	f383 8811 	msr	BASEPRI, r3
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f3bf 8f4f 	dsb	sy
 8002506:	60bb      	str	r3, [r7, #8]
    }
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	e7fd      	b.n	800250a <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800250e:	697b      	ldr	r3, [r7, #20]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02e      	beq.n	800258e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002530:	2100      	movs	r1, #0
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d000      	beq.n	8002540 <xQueueGenericCreate+0x28>
 800253e:	2101      	movs	r1, #1
 8002540:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	d123      	bne.n	800258e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800254e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002552:	d81c      	bhi.n	800258e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	3350      	adds	r3, #80	@ 0x50
 8002562:	4618      	mov	r0, r3
 8002564:	f002 fa2c 	bl	80049c0 <pvPortMalloc>
 8002568:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01d      	beq.n	80025ac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	3350      	adds	r3, #80	@ 0x50
 8002578:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f815 	bl	80025b6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800258c:	e00e      	b.n	80025ac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <xQueueGenericCreate+0x94>
        __asm volatile
 8002594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	613b      	str	r3, [r7, #16]
    }
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025ac:	69fb      	ldr	r3, [r7, #28]
    }
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e002      	b.n	80025d8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025e4:	2101      	movs	r1, #1
 80025e6:	69b8      	ldr	r0, [r7, #24]
 80025e8:	f7ff ff12 	bl	8002410 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	2073      	movs	r0, #115	@ 0x73
 80025fc:	f004 fa3e 	bl	8006a7c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b08f      	sub	sp, #60	@ 0x3c
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800261c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <xQueueReceive+0x32>
        __asm volatile
 8002622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	f3bf 8f6f 	isb	sy
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	623b      	str	r3, [r7, #32]
    }
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	e7fd      	b.n	8002636 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d103      	bne.n	8002648 <xQueueReceive+0x40>
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <xQueueReceive+0x44>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <xQueueReceive+0x46>
 800264c:	2300      	movs	r3, #0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <xQueueReceive+0x62>
        __asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	61fb      	str	r3, [r7, #28]
    }
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	e7fd      	b.n	8002666 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800266a:	f001 f993 	bl	8003994 <xTaskGetSchedulerState>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <xQueueReceive+0x72>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <xQueueReceive+0x76>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <xQueueReceive+0x78>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10b      	bne.n	800269c <xQueueReceive+0x94>
        __asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	61bb      	str	r3, [r7, #24]
    }
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800269c:	f002 f85e 	bl	800475c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d024      	beq.n	80026f6 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026b0:	f000 f8b2 	bl	8002818 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	4618      	mov	r0, r3
 80026b8:	f005 f81c 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 80026bc:	4604      	mov	r4, r0
 80026be:	2000      	movs	r0, #0
 80026c0:	f005 f818 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2101      	movs	r1, #1
 80026ca:	9100      	str	r1, [sp, #0]
 80026cc:	4621      	mov	r1, r4
 80026ce:	205c      	movs	r0, #92	@ 0x5c
 80026d0:	f004 fa4a 	bl	8006b68 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026da:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e6:	3310      	adds	r3, #16
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 ff43 	bl	8003574 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026ee:	f002 f867 	bl	80047c0 <vPortExitCritical>
                return pdPASS;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e08a      	b.n	800280c <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026fc:	f002 f860 	bl	80047c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	4618      	mov	r0, r3
 8002704:	f004 fff6 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 8002708:	4604      	mov	r4, r0
 800270a:	2000      	movs	r0, #0
 800270c:	f004 fff2 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2101      	movs	r1, #1
 8002716:	9100      	str	r1, [sp, #0]
 8002718:	4621      	mov	r1, r4
 800271a:	205c      	movs	r0, #92	@ 0x5c
 800271c:	f004 fa24 	bl	8006b68 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002720:	2300      	movs	r3, #0
 8002722:	e073      	b.n	800280c <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fffa 	bl	8003728 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002738:	f002 f842 	bl	80047c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800273c:	f000 fc26 	bl	8002f8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002740:	f002 f80c 	bl	800475c <vPortEnterCritical>
 8002744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800274a:	b25b      	sxtb	r3, r3
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d103      	bne.n	800275a <xQueueReceive+0x152>
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002760:	b25b      	sxtb	r3, r3
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d103      	bne.n	8002770 <xQueueReceive+0x168>
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002770:	f002 f826 	bl	80047c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002774:	1d3a      	adds	r2, r7, #4
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f000 ffe9 	bl	8003754 <xTaskCheckForTimeOut>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d124      	bne.n	80027d2 <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002788:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800278a:	f000 f8bd 	bl	8002908 <prvIsQueueEmpty>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d018      	beq.n	80027c6 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002796:	3324      	adds	r3, #36	@ 0x24
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fe79 	bl	8003494 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027a4:	f000 f85e 	bl	8002864 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80027a8:	f000 fbfe 	bl	8002fa8 <xTaskResumeAll>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f af74 	bne.w	800269c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80027b4:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <xQueueReceive+0x20c>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	e76a      	b.n	800269c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027c8:	f000 f84c 	bl	8002864 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027cc:	f000 fbec 	bl	8002fa8 <xTaskResumeAll>
 80027d0:	e764      	b.n	800269c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027d4:	f000 f846 	bl	8002864 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027d8:	f000 fbe6 	bl	8002fa8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027de:	f000 f893 	bl	8002908 <prvIsQueueEmpty>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f af59 	beq.w	800269c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 ff81 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	4604      	mov	r4, r0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f004 ff7d 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2101      	movs	r1, #1
 8002800:	9100      	str	r1, [sp, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	205c      	movs	r0, #92	@ 0x5c
 8002806:	f004 f9af 	bl	8006b68 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800280a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800280c:	4618      	mov	r0, r3
 800280e:	3734      	adds	r7, #52	@ 0x34
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	441a      	add	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d303      	bcc.n	800284c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68d9      	ldr	r1, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	461a      	mov	r2, r3
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	f005 f91c 	bl	8007a94 <memcpy>
    }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800286c:	f001 ff76 	bl	800475c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002876:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002878:	e011      	b.n	800289e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3324      	adds	r3, #36	@ 0x24
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fe74 	bl	8003574 <xTaskRemoveFromEventList>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002892:	f000 ffc7 	bl	8003824 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	3b01      	subs	r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	dce9      	bgt.n	800287a <prvUnlockQueue+0x16>
 80028a6:	e000      	b.n	80028aa <prvUnlockQueue+0x46>
                        break;
 80028a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	22ff      	movs	r2, #255	@ 0xff
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80028b2:	f001 ff85 	bl	80047c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028b6:	f001 ff51 	bl	800475c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028c2:	e011      	b.n	80028e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3310      	adds	r3, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fe4f 	bl	8003574 <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028dc:	f000 ffa2 	bl	8003824 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dce9      	bgt.n	80028c4 <prvUnlockQueue+0x60>
 80028f0:	e000      	b.n	80028f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	22ff      	movs	r2, #255	@ 0xff
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028fc:	f001 ff60 	bl	80047c0 <vPortExitCritical>
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002910:	f001 ff24 	bl	800475c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800291c:	2301      	movs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e001      	b.n	8002926 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002926:	f001 ff4b 	bl	80047c0 <vPortExitCritical>

    return xReturn;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <vQueueAddToRegistry+0x28>
        __asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	60fb      	str	r3, [r7, #12]
    }
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d024      	beq.n	80029b0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e01e      	b.n	80029aa <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800296c:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <vQueueAddToRegistry+0xac>)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	429a      	cmp	r2, r3
 800297a:	d105      	bne.n	8002988 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4a17      	ldr	r2, [pc, #92]	@ (80029e0 <vQueueAddToRegistry+0xac>)
 8002982:	4413      	add	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
                    break;
 8002986:	e013      	b.n	80029b0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10a      	bne.n	80029a4 <vQueueAddToRegistry+0x70>
 800298e:	4a14      	ldr	r2, [pc, #80]	@ (80029e0 <vQueueAddToRegistry+0xac>)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4a10      	ldr	r2, [pc, #64]	@ (80029e0 <vQueueAddToRegistry+0xac>)
 80029a0:	4413      	add	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	3301      	adds	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	d9dd      	bls.n	800296c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00f      	beq.n	80029d6 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f004 fe95 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 80029ca:	4601      	mov	r1, r0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	2071      	movs	r0, #113	@ 0x71
 80029d2:	f003 fff9 	bl	80069c8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000094 	.word	0x20000094

080029e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029f4:	f001 feb2 	bl	800475c <vPortEnterCritical>
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029fe:	b25b      	sxtb	r3, r3
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d103      	bne.n	8002a0e <vQueueWaitForMessageRestricted+0x2a>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a14:	b25b      	sxtb	r3, r3
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d103      	bne.n	8002a24 <vQueueWaitForMessageRestricted+0x40>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a24:	f001 fecc 	bl	80047c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d106      	bne.n	8002a3e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	3324      	adds	r3, #36	@ 0x24
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fd51 	bl	80034e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a3e:	6978      	ldr	r0, [r7, #20]
 8002a40:	f7ff ff10 	bl	8002864 <prvUnlockQueue>
    }
 8002a44:	bf00      	nop
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	@ 0x30
 8002a50:	af04      	add	r7, sp, #16
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 ffad 	bl	80049c0 <pvPortMalloc>
 8002a66:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00e      	beq.n	8002a8c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a6e:	2058      	movs	r0, #88	@ 0x58
 8002a70:	f001 ffa6 	bl	80049c0 <pvPortMalloc>
 8002a74:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a82:	e005      	b.n	8002a90 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f002 f87d 	bl	8004b84 <vPortFree>
 8002a8a:	e001      	b.n	8002a90 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d013      	beq.n	8002abe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9303      	str	r3, [sp, #12]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f80e 	bl	8002ace <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ab2:	69f8      	ldr	r0, [r7, #28]
 8002ab4:	f000 f8b2 	bl	8002c1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e002      	b.n	8002ac4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ac4:	69bb      	ldr	r3, [r7, #24]
    }
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	21a5      	movs	r1, #165	@ 0xa5
 8002ae8:	f004 ffa8 	bl	8007a3c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002af6:	3b01      	subs	r3, #1
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	f023 0307 	bic.w	r3, r3, #7
 8002b04:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00b      	beq.n	8002b28 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	617b      	str	r3, [r7, #20]
    }
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01f      	beq.n	8002b6e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	e012      	b.n	8002b5a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	7819      	ldrb	r1, [r3, #0]
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	3334      	adds	r3, #52	@ 0x34
 8002b44:	460a      	mov	r2, r1
 8002b46:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	3301      	adds	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	2b09      	cmp	r3, #9
 8002b5e:	d9e9      	bls.n	8002b34 <prvInitialiseNewTask+0x66>
 8002b60:	e000      	b.n	8002b64 <prvInitialiseNewTask+0x96>
            {
                break;
 8002b62:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b6c:	e003      	b.n	8002b76 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d90b      	bls.n	8002b94 <prvInitialiseNewTask+0xc6>
        __asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	613b      	str	r3, [r7, #16]
    }
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <prvInitialiseNewTask+0xc2>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d901      	bls.n	8002b9e <prvInitialiseNewTask+0xd0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ba8:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bac:	2200      	movs	r2, #0
 8002bae:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fb97 	bl	80022e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fb92 	bl	80022e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bc8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	f1c3 0205 	rsb	r2, r3, #5
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bdc:	3350      	adds	r3, #80	@ 0x50
 8002bde:	2204      	movs	r2, #4
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 ff2a 	bl	8007a3c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bea:	3354      	adds	r3, #84	@ 0x54
 8002bec:	2201      	movs	r2, #1
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 ff23 	bl	8007a3c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	69b8      	ldr	r0, [r7, #24]
 8002bfc:	f001 fbfc 	bl	80043f8 <pxPortInitialiseStack>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <prvInitialiseNewTask+0x144>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c10:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c1c:	b5b0      	push	{r4, r5, r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c24:	f001 fd9a 	bl	800475c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c28:	4b49      	ldr	r3, [pc, #292]	@ (8002d50 <prvAddNewTaskToReadyList+0x134>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a48      	ldr	r2, [pc, #288]	@ (8002d50 <prvAddNewTaskToReadyList+0x134>)
 8002c30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c32:	4b48      	ldr	r3, [pc, #288]	@ (8002d54 <prvAddNewTaskToReadyList+0x138>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c3a:	4a46      	ldr	r2, [pc, #280]	@ (8002d54 <prvAddNewTaskToReadyList+0x138>)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c40:	4b43      	ldr	r3, [pc, #268]	@ (8002d50 <prvAddNewTaskToReadyList+0x134>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d110      	bne.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c48:	f000 fe0a 	bl	8003860 <prvInitialiseTaskLists>
 8002c4c:	e00d      	b.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c4e:	4b42      	ldr	r3, [pc, #264]	@ (8002d58 <prvAddNewTaskToReadyList+0x13c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c56:	4b3f      	ldr	r3, [pc, #252]	@ (8002d54 <prvAddNewTaskToReadyList+0x138>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d802      	bhi.n	8002c6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c64:	4a3b      	ldr	r2, [pc, #236]	@ (8002d54 <prvAddNewTaskToReadyList+0x138>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d5c <prvAddNewTaskToReadyList+0x140>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a3a      	ldr	r2, [pc, #232]	@ (8002d5c <prvAddNewTaskToReadyList+0x140>)
 8002c72:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c74:	4b39      	ldr	r3, [pc, #228]	@ (8002d5c <prvAddNewTaskToReadyList+0x140>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d016      	beq.n	8002cb0 <prvAddNewTaskToReadyList+0x94>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f004 fc0f 	bl	80074a8 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	461d      	mov	r5, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461c      	mov	r4, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	1ae3      	subs	r3, r4, r3
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	462b      	mov	r3, r5
 8002cac:	f002 f93a 	bl	8004f24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 fc7c 	bl	80075b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <prvAddNewTaskToReadyList+0x144>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	4a26      	ldr	r2, [pc, #152]	@ (8002d60 <prvAddNewTaskToReadyList+0x144>)
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cce:	4925      	ldr	r1, [pc, #148]	@ (8002d64 <prvAddNewTaskToReadyList+0x148>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3304      	adds	r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	3204      	adds	r2, #4
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1d1a      	adds	r2, r3, #4
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <prvAddNewTaskToReadyList+0x148>)
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	615a      	str	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d18:	4912      	ldr	r1, [pc, #72]	@ (8002d64 <prvAddNewTaskToReadyList+0x148>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	480e      	ldr	r0, [pc, #56]	@ (8002d64 <prvAddNewTaskToReadyList+0x148>)
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4403      	add	r3, r0
 8002d34:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d36:	f001 fd43 	bl	80047c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <prvAddNewTaskToReadyList+0x13c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <prvAddNewTaskToReadyList+0x138>)
 8002d44:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200001ac 	.word	0x200001ac
 8002d54:	200000d4 	.word	0x200000d4
 8002d58:	200001b8 	.word	0x200001b8
 8002d5c:	200001c8 	.word	0x200001c8
 8002d60:	200001b4 	.word	0x200001b4
 8002d64:	200000d8 	.word	0x200000d8

08002d68 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d70:	f001 fcf4 	bl	800475c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <vTaskDelete+0x18>
 8002d7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ea0 <vTaskDelete+0x138>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	e000      	b.n	8002d82 <vTaskDelete+0x1a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fb17 	bl	80023bc <uxListRemove>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d115      	bne.n	8002dc0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d98:	4942      	ldr	r1, [pc, #264]	@ (8002ea4 <vTaskDelete+0x13c>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <vTaskDelete+0x58>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	2201      	movs	r2, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <vTaskDelete+0x140>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea8 <vTaskDelete+0x140>)
 8002dbe:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff faf5 	bl	80023bc <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002dd2:	4b36      	ldr	r3, [pc, #216]	@ (8002eac <vTaskDelete+0x144>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4a34      	ldr	r2, [pc, #208]	@ (8002eac <vTaskDelete+0x144>)
 8002dda:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002ddc:	4b30      	ldr	r3, [pc, #192]	@ (8002ea0 <vTaskDelete+0x138>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d118      	bne.n	8002e18 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3304      	adds	r3, #4
 8002dea:	4619      	mov	r1, r3
 8002dec:	4830      	ldr	r0, [pc, #192]	@ (8002eb0 <vTaskDelete+0x148>)
 8002dee:	f7ff fa88 	bl	8002302 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002df2:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <vTaskDelete+0x14c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3301      	adds	r3, #1
 8002df8:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb4 <vTaskDelete+0x14c>)
 8002dfa:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 fc78 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	2022      	movs	r0, #34	@ 0x22
 8002e0a:	f003 fda1 	bl	8006950 <SEGGER_SYSVIEW_RecordU32>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 f8ef 	bl	8004ff4 <SYSVIEW_DeleteTask>
 8002e16:	e013      	b.n	8002e40 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002e18:	4b27      	ldr	r3, [pc, #156]	@ (8002eb8 <vTaskDelete+0x150>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	4a26      	ldr	r2, [pc, #152]	@ (8002eb8 <vTaskDelete+0x150>)
 8002e20:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f004 fc65 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	2022      	movs	r0, #34	@ 0x22
 8002e30:	f003 fd8e 	bl	8006950 <SEGGER_SYSVIEW_RecordU32>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 f8dc 	bl	8004ff4 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002e3c:	f000 fd8e 	bl	800395c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002e40:	f001 fcbe 	bl	80047c0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <vTaskDelete+0x138>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d002      	beq.n	8002e54 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fd74 	bl	800393c <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <vTaskDelete+0x154>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01c      	beq.n	8002e96 <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002e5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <vTaskDelete+0x138>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d117      	bne.n	8002e96 <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002e66:	4b16      	ldr	r3, [pc, #88]	@ (8002ec0 <vTaskDelete+0x158>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <vTaskDelete+0x11e>
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60bb      	str	r3, [r7, #8]
    }
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	e7fd      	b.n	8002e82 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002e86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <vTaskDelete+0x15c>)
 8002e88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200000d4 	.word	0x200000d4
 8002ea4:	200000d8 	.word	0x200000d8
 8002ea8:	200001b4 	.word	0x200001b4
 8002eac:	200001c8 	.word	0x200001c8
 8002eb0:	20000180 	.word	0x20000180
 8002eb4:	20000194 	.word	0x20000194
 8002eb8:	200001ac 	.word	0x200001ac
 8002ebc:	200001b8 	.word	0x200001b8
 8002ec0:	200001d4 	.word	0x200001d4
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ece:	4b27      	ldr	r3, [pc, #156]	@ (8002f6c <vTaskStartScheduler+0xa4>)
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2282      	movs	r2, #130	@ 0x82
 8002eda:	4925      	ldr	r1, [pc, #148]	@ (8002f70 <vTaskStartScheduler+0xa8>)
 8002edc:	4825      	ldr	r0, [pc, #148]	@ (8002f74 <vTaskStartScheduler+0xac>)
 8002ede:	f7ff fdb5 	bl	8002a4c <xTaskCreate>
 8002ee2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d102      	bne.n	8002ef0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002eea:	f000 fff9 	bl	8003ee0 <xTimerCreateTimerTask>
 8002eee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d124      	bne.n	8002f40 <vTaskStartScheduler+0x78>
        __asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60bb      	str	r3, [r7, #8]
    }
 8002f08:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f78 <vTaskStartScheduler+0xb0>)
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f12:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <vTaskStartScheduler+0xb4>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f18:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <vTaskStartScheduler+0xb8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f1e:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <vTaskStartScheduler+0xbc>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <vTaskStartScheduler+0xa4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d102      	bne.n	8002f30 <vTaskStartScheduler+0x68>
 8002f2a:	f004 faa1 	bl	8007470 <SEGGER_SYSVIEW_OnIdle>
 8002f2e:	e004      	b.n	8002f3a <vTaskStartScheduler+0x72>
 8002f30:	4b14      	ldr	r3, [pc, #80]	@ (8002f84 <vTaskStartScheduler+0xbc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 faf9 	bl	800752c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f3a:	f001 faeb 	bl	8004514 <xPortStartScheduler>
 8002f3e:	e00f      	b.n	8002f60 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d10b      	bne.n	8002f60 <vTaskStartScheduler+0x98>
        __asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	607b      	str	r3, [r7, #4]
    }
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f60:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <vTaskStartScheduler+0xc0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200001d0 	.word	0x200001d0
 8002f70:	08007b78 	.word	0x08007b78
 8002f74:	0800383d 	.word	0x0800383d
 8002f78:	200001cc 	.word	0x200001cc
 8002f7c:	200001b8 	.word	0x200001b8
 8002f80:	200001b0 	.word	0x200001b0
 8002f84:	200000d4 	.word	0x200000d4
 8002f88:	2000000c 	.word	0x2000000c

08002f8c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f90:	4b04      	ldr	r3, [pc, #16]	@ (8002fa4 <vTaskSuspendAll+0x18>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	4a03      	ldr	r2, [pc, #12]	@ (8002fa4 <vTaskSuspendAll+0x18>)
 8002f98:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	200001d4 	.word	0x200001d4

08002fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	@ (800316c <xTaskResumeAll+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <xTaskResumeAll+0x2e>
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	607b      	str	r3, [r7, #4]
    }
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fd6:	f001 fbc1 	bl	800475c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fda:	4b64      	ldr	r3, [pc, #400]	@ (800316c <xTaskResumeAll+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a62      	ldr	r2, [pc, #392]	@ (800316c <xTaskResumeAll+0x1c4>)
 8002fe2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <xTaskResumeAll+0x1c4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f040 80b8 	bne.w	800315e <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fee:	4b60      	ldr	r3, [pc, #384]	@ (8003170 <xTaskResumeAll+0x1c8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80b3 	beq.w	800315e <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff8:	e08e      	b.n	8003118 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffa:	4b5e      	ldr	r3, [pc, #376]	@ (8003174 <xTaskResumeAll+0x1cc>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	6a12      	ldr	r2, [r2, #32]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	69fa      	ldr	r2, [r7, #28]
 8003018:	69d2      	ldr	r2, [r2, #28]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	3318      	adds	r3, #24
 8003024:	429a      	cmp	r2, r3
 8003026:	d103      	bne.n	8003030 <xTaskResumeAll+0x88>
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2200      	movs	r2, #0
 8003034:	629a      	str	r2, [r3, #40]	@ 0x28
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	68d2      	ldr	r2, [r2, #12]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	6892      	ldr	r2, [r2, #8]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3304      	adds	r3, #4
 8003062:	429a      	cmp	r2, r3
 8003064:	d103      	bne.n	800306e <xTaskResumeAll+0xc6>
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2200      	movs	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4618      	mov	r0, r3
 8003082:	f004 fa95 	bl	80075b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308a:	2201      	movs	r2, #1
 800308c:	409a      	lsls	r2, r3
 800308e:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <xTaskResumeAll+0x1d0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	4a38      	ldr	r2, [pc, #224]	@ (8003178 <xTaskResumeAll+0x1d0>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309c:	4937      	ldr	r1, [pc, #220]	@ (800317c <xTaskResumeAll+0x1d4>)
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3304      	adds	r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	3204      	adds	r2, #4
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4a28      	ldr	r2, [pc, #160]	@ (800317c <xTaskResumeAll+0x1d4>)
 80030dc:	441a      	add	r2, r3
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	615a      	str	r2, [r3, #20]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e6:	4925      	ldr	r1, [pc, #148]	@ (800317c <xTaskResumeAll+0x1d4>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	4821      	ldr	r0, [pc, #132]	@ (800317c <xTaskResumeAll+0x1d4>)
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003108:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <xTaskResumeAll+0x1d8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003112:	4b1c      	ldr	r3, [pc, #112]	@ (8003184 <xTaskResumeAll+0x1dc>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003118:	4b16      	ldr	r3, [pc, #88]	@ (8003174 <xTaskResumeAll+0x1cc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f47f af6c 	bne.w	8002ffa <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003128:	f000 fc18 	bl	800395c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800312c:	4b16      	ldr	r3, [pc, #88]	@ (8003188 <xTaskResumeAll+0x1e0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003138:	f000 f84a 	bl	80031d0 <xTaskIncrementTick>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <xTaskResumeAll+0x1dc>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	3b01      	subs	r3, #1
 800314c:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f1      	bne.n	8003138 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8003154:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <xTaskResumeAll+0x1e0>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <xTaskResumeAll+0x1dc>)
 800315c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800315e:	f001 fb2f 	bl	80047c0 <vPortExitCritical>

    return xAlreadyYielded;
 8003162:	697b      	ldr	r3, [r7, #20]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200001d4 	.word	0x200001d4
 8003170:	200001ac 	.word	0x200001ac
 8003174:	2000016c 	.word	0x2000016c
 8003178:	200001b4 	.word	0x200001b4
 800317c:	200000d8 	.word	0x200000d8
 8003180:	200000d4 	.word	0x200000d4
 8003184:	200001c0 	.word	0x200001c0
 8003188:	200001bc 	.word	0x200001bc

0800318c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003192:	4b05      	ldr	r3, [pc, #20]	@ (80031a8 <xTaskGetTickCount+0x1c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003198:	687b      	ldr	r3, [r7, #4]
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	200001b0 	.word	0x200001b0

080031ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031b2:	f001 fbc3 	bl	800493c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031ba:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <xTaskGetTickCountFromISR+0x20>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031c0:	683b      	ldr	r3, [r7, #0]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200001b0 	.word	0x200001b0

080031d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031da:	4b70      	ldr	r3, [pc, #448]	@ (800339c <xTaskIncrementTick+0x1cc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 80d2 	bne.w	8003388 <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031e4:	4b6e      	ldr	r3, [pc, #440]	@ (80033a0 <xTaskIncrementTick+0x1d0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031ec:	4a6c      	ldr	r2, [pc, #432]	@ (80033a0 <xTaskIncrementTick+0x1d0>)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d121      	bne.n	800323c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80031f8:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <xTaskIncrementTick+0x1d4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <xTaskIncrementTick+0x4a>
        __asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	607b      	str	r3, [r7, #4]
    }
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	e7fd      	b.n	8003216 <xTaskIncrementTick+0x46>
 800321a:	4b62      	ldr	r3, [pc, #392]	@ (80033a4 <xTaskIncrementTick+0x1d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	4b61      	ldr	r3, [pc, #388]	@ (80033a8 <xTaskIncrementTick+0x1d8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5f      	ldr	r2, [pc, #380]	@ (80033a4 <xTaskIncrementTick+0x1d4>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4a5f      	ldr	r2, [pc, #380]	@ (80033a8 <xTaskIncrementTick+0x1d8>)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b5f      	ldr	r3, [pc, #380]	@ (80033ac <xTaskIncrementTick+0x1dc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	4a5d      	ldr	r2, [pc, #372]	@ (80033ac <xTaskIncrementTick+0x1dc>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	f000 fb90 	bl	800395c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800323c:	4b5c      	ldr	r3, [pc, #368]	@ (80033b0 <xTaskIncrementTick+0x1e0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	429a      	cmp	r2, r3
 8003244:	f0c0 80a5 	bcc.w	8003392 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003248:	4b56      	ldr	r3, [pc, #344]	@ (80033a4 <xTaskIncrementTick+0x1d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003252:	4b57      	ldr	r3, [pc, #348]	@ (80033b0 <xTaskIncrementTick+0x1e0>)
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	601a      	str	r2, [r3, #0]
                    break;
 800325a:	e09a      	b.n	8003392 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800325c:	4b51      	ldr	r3, [pc, #324]	@ (80033a4 <xTaskIncrementTick+0x1d4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	429a      	cmp	r2, r3
 8003272:	d203      	bcs.n	800327c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003274:	4a4e      	ldr	r2, [pc, #312]	@ (80033b0 <xTaskIncrementTick+0x1e0>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800327a:	e08a      	b.n	8003392 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	3304      	adds	r3, #4
 800329e:	429a      	cmp	r2, r3
 80032a0:	d103      	bne.n	80032aa <xTaskIncrementTick+0xda>
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	1e5a      	subs	r2, r3, #1
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d01e      	beq.n	8003300 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	6a12      	ldr	r2, [r2, #32]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	69d2      	ldr	r2, [r2, #28]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	3318      	adds	r3, #24
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d103      	bne.n	80032f0 <xTaskIncrementTick+0x120>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6a1a      	ldr	r2, [r3, #32]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2200      	movs	r2, #0
 80032f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	1e5a      	subs	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4618      	mov	r0, r3
 8003304:	f004 f954 	bl	80075b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	2201      	movs	r2, #1
 800330e:	409a      	lsls	r2, r3
 8003310:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <xTaskIncrementTick+0x1e4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4313      	orrs	r3, r2
 8003316:	4a27      	ldr	r2, [pc, #156]	@ (80033b4 <xTaskIncrementTick+0x1e4>)
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331e:	4926      	ldr	r1, [pc, #152]	@ (80033b8 <xTaskIncrementTick+0x1e8>)
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3304      	adds	r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	3204      	adds	r2, #4
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4a16      	ldr	r2, [pc, #88]	@ (80033b8 <xTaskIncrementTick+0x1e8>)
 800335e:	441a      	add	r2, r3
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	615a      	str	r2, [r3, #20]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003368:	4913      	ldr	r1, [pc, #76]	@ (80033b8 <xTaskIncrementTick+0x1e8>)
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	1c59      	adds	r1, r3, #1
 8003378:	480f      	ldr	r0, [pc, #60]	@ (80033b8 <xTaskIncrementTick+0x1e8>)
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4403      	add	r3, r0
 8003384:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003386:	e75f      	b.n	8003248 <xTaskIncrementTick+0x78>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003388:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <xTaskIncrementTick+0x1ec>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	4a0b      	ldr	r2, [pc, #44]	@ (80033bc <xTaskIncrementTick+0x1ec>)
 8003390:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	@ 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	200001d4 	.word	0x200001d4
 80033a0:	200001b0 	.word	0x200001b0
 80033a4:	20000164 	.word	0x20000164
 80033a8:	20000168 	.word	0x20000168
 80033ac:	200001c4 	.word	0x200001c4
 80033b0:	200001cc 	.word	0x200001cc
 80033b4:	200001b4 	.word	0x200001b4
 80033b8:	200000d8 	.word	0x200000d8
 80033bc:	200001bc 	.word	0x200001bc

080033c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033c6:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <vTaskSwitchContext+0xbc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <vTaskSwitchContext+0xc0>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033d4:	e04e      	b.n	8003474 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003480 <vTaskSwitchContext+0xc0>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	4b29      	ldr	r3, [pc, #164]	@ (8003484 <vTaskSwitchContext+0xc4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	fab3 f383 	clz	r3, r3
 80033e8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033ea:	7afb      	ldrb	r3, [r7, #11]
 80033ec:	f1c3 031f 	rsb	r3, r3, #31
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	4925      	ldr	r1, [pc, #148]	@ (8003488 <vTaskSwitchContext+0xc8>)
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <vTaskSwitchContext+0x5e>
        __asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	607b      	str	r3, [r7, #4]
    }
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <vTaskSwitchContext+0x5a>
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4a17      	ldr	r2, [pc, #92]	@ (8003488 <vTaskSwitchContext+0xc8>)
 800342a:	4413      	add	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	3308      	adds	r3, #8
 8003440:	429a      	cmp	r2, r3
 8003442:	d104      	bne.n	800344e <vTaskSwitchContext+0x8e>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a0d      	ldr	r2, [pc, #52]	@ (800348c <vTaskSwitchContext+0xcc>)
 8003456:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003458:	4b0c      	ldr	r3, [pc, #48]	@ (800348c <vTaskSwitchContext+0xcc>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <vTaskSwitchContext+0xd0>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d102      	bne.n	800346a <vTaskSwitchContext+0xaa>
 8003464:	f004 f804 	bl	8007470 <SEGGER_SYSVIEW_OnIdle>
}
 8003468:	e004      	b.n	8003474 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800346a:	4b08      	ldr	r3, [pc, #32]	@ (800348c <vTaskSwitchContext+0xcc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f004 f85c 	bl	800752c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200001d4 	.word	0x200001d4
 8003480:	200001c0 	.word	0x200001c0
 8003484:	200001b4 	.word	0x200001b4
 8003488:	200000d8 	.word	0x200000d8
 800348c:	200000d4 	.word	0x200000d4
 8003490:	200001d0 	.word	0x200001d0

08003494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	60fb      	str	r3, [r7, #12]
    }
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034bc:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <vTaskPlaceOnEventList+0x48>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3318      	adds	r3, #24
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fe ff40 	bl	800234a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034ca:	2101      	movs	r1, #1
 80034cc:	6838      	ldr	r0, [r7, #0]
 80034ce:	f000 fc7b 	bl	8003dc8 <prvAddCurrentTaskToDelayedList>
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200000d4 	.word	0x200000d4

080034e0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	613b      	str	r3, [r7, #16]
    }
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	4b17      	ldr	r3, [pc, #92]	@ (8003570 <vTaskPlaceOnEventListRestricted+0x90>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	61da      	str	r2, [r3, #28]
 8003518:	4b15      	ldr	r3, [pc, #84]	@ (8003570 <vTaskPlaceOnEventListRestricted+0x90>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	621a      	str	r2, [r3, #32]
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <vTaskPlaceOnEventListRestricted+0x90>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	3218      	adds	r2, #24
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	4b10      	ldr	r3, [pc, #64]	@ (8003570 <vTaskPlaceOnEventListRestricted+0x90>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f103 0218 	add.w	r2, r3, #24
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <vTaskPlaceOnEventListRestricted+0x90>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	629a      	str	r2, [r3, #40]	@ 0x28
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003558:	2024      	movs	r0, #36	@ 0x24
 800355a:	f003 f9db 	bl	8006914 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	68b8      	ldr	r0, [r7, #8]
 8003562:	f000 fc31 	bl	8003dc8 <prvAddCurrentTaskToDelayedList>
    }
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200000d4 	.word	0x200000d4

08003574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60fb      	str	r3, [r7, #12]
    }
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	6a12      	ldr	r2, [r2, #32]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	69d2      	ldr	r2, [r2, #28]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	3318      	adds	r3, #24
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d103      	bne.n	80035d0 <xTaskRemoveFromEventList+0x5c>
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	2200      	movs	r2, #0
 80035d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	1e5a      	subs	r2, r3, #1
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003710 <xTaskRemoveFromEventList+0x19c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d162      	bne.n	80036ae <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	6a3a      	ldr	r2, [r7, #32]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	6a3a      	ldr	r2, [r7, #32]
 80035fe:	6892      	ldr	r2, [r2, #8]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	3304      	adds	r3, #4
 800360a:	429a      	cmp	r2, r3
 800360c:	d103      	bne.n	8003616 <xTaskRemoveFromEventList+0xa2>
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	1e5a      	subs	r2, r3, #1
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	4618      	mov	r0, r3
 800362a:	f003 ffc1 	bl	80075b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	2201      	movs	r2, #1
 8003634:	409a      	lsls	r2, r3
 8003636:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <xTaskRemoveFromEventList+0x1a0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4313      	orrs	r3, r2
 800363c:	4a35      	ldr	r2, [pc, #212]	@ (8003714 <xTaskRemoveFromEventList+0x1a0>)
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003644:	4934      	ldr	r1, [pc, #208]	@ (8003718 <xTaskRemoveFromEventList+0x1a4>)
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3304      	adds	r3, #4
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	6a3a      	ldr	r2, [r7, #32]
 800366a:	3204      	adds	r2, #4
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4a25      	ldr	r2, [pc, #148]	@ (8003718 <xTaskRemoveFromEventList+0x1a4>)
 8003684:	441a      	add	r2, r3
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	615a      	str	r2, [r3, #20]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368e:	4922      	ldr	r1, [pc, #136]	@ (8003718 <xTaskRemoveFromEventList+0x1a4>)
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	1c59      	adds	r1, r3, #1
 800369e:	481e      	ldr	r0, [pc, #120]	@ (8003718 <xTaskRemoveFromEventList+0x1a4>)
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	6019      	str	r1, [r3, #0]
 80036ac:	e01b      	b.n	80036e6 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036ae:	4b1b      	ldr	r3, [pc, #108]	@ (800371c <xTaskRemoveFromEventList+0x1a8>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	61da      	str	r2, [r3, #28]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	621a      	str	r2, [r3, #32]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	3218      	adds	r2, #24
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f103 0218 	add.w	r2, r3, #24
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	4a10      	ldr	r2, [pc, #64]	@ (800371c <xTaskRemoveFromEventList+0x1a8>)
 80036da:	629a      	str	r2, [r3, #40]	@ 0x28
 80036dc:	4b0f      	ldr	r3, [pc, #60]	@ (800371c <xTaskRemoveFromEventList+0x1a8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	4a0e      	ldr	r2, [pc, #56]	@ (800371c <xTaskRemoveFromEventList+0x1a8>)
 80036e4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003720 <xTaskRemoveFromEventList+0x1ac>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d905      	bls.n	8003700 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <xTaskRemoveFromEventList+0x1b0>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e001      	b.n	8003704 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003706:	4618      	mov	r0, r3
 8003708:	3728      	adds	r7, #40	@ 0x28
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200001d4 	.word	0x200001d4
 8003714:	200001b4 	.word	0x200001b4
 8003718:	200000d8 	.word	0x200000d8
 800371c:	2000016c 	.word	0x2000016c
 8003720:	200000d4 	.word	0x200000d4
 8003724:	200001c0 	.word	0x200001c0

08003728 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003730:	4b06      	ldr	r3, [pc, #24]	@ (800374c <vTaskInternalSetTimeOutState+0x24>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <vTaskInternalSetTimeOutState+0x28>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	200001c4 	.word	0x200001c4
 8003750:	200001b0 	.word	0x200001b0

08003754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	613b      	str	r3, [r7, #16]
    }
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	60fb      	str	r3, [r7, #12]
    }
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	e7fd      	b.n	8003796 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800379a:	f000 ffdf 	bl	800475c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800379e:	4b1f      	ldr	r3, [pc, #124]	@ (800381c <xTaskCheckForTimeOut+0xc8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d102      	bne.n	80037be <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e026      	b.n	800380c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	4b17      	ldr	r3, [pc, #92]	@ (8003820 <xTaskCheckForTimeOut+0xcc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d00a      	beq.n	80037e0 <xTaskCheckForTimeOut+0x8c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d305      	bcc.n	80037e0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037d4:	2301      	movs	r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e015      	b.n	800380c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d20b      	bcs.n	8003802 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad2      	subs	r2, r2, r3
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ff96 	bl	8003728 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	e004      	b.n	800380c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800380c:	f000 ffd8 	bl	80047c0 <vPortExitCritical>

    return xReturn;
 8003810:	69fb      	ldr	r3, [r7, #28]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200001b0 	.word	0x200001b0
 8003820:	200001c4 	.word	0x200001c4

08003824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <vTaskMissedYield+0x14>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	200001c0 	.word	0x200001c0

0800383c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003844:	f000 f84c 	bl	80038e0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <prvIdleTask+0x20>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003858:	bf00      	nop
 800385a:	e7f3      	b.n	8003844 <prvIdleTask+0x8>
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	e00c      	b.n	8003886 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a12      	ldr	r2, [pc, #72]	@ (80038c0 <prvInitialiseTaskLists+0x60>)
 8003878:	4413      	add	r3, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe fd14 	bl	80022a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3301      	adds	r3, #1
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d9ef      	bls.n	800386c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800388c:	480d      	ldr	r0, [pc, #52]	@ (80038c4 <prvInitialiseTaskLists+0x64>)
 800388e:	f7fe fd0b 	bl	80022a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <prvInitialiseTaskLists+0x68>)
 8003894:	f7fe fd08 	bl	80022a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003898:	480c      	ldr	r0, [pc, #48]	@ (80038cc <prvInitialiseTaskLists+0x6c>)
 800389a:	f7fe fd05 	bl	80022a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800389e:	480c      	ldr	r0, [pc, #48]	@ (80038d0 <prvInitialiseTaskLists+0x70>)
 80038a0:	f7fe fd02 	bl	80022a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038a4:	480b      	ldr	r0, [pc, #44]	@ (80038d4 <prvInitialiseTaskLists+0x74>)
 80038a6:	f7fe fcff 	bl	80022a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <prvInitialiseTaskLists+0x78>)
 80038ac:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <prvInitialiseTaskLists+0x64>)
 80038ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038b0:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <prvInitialiseTaskLists+0x7c>)
 80038b2:	4a05      	ldr	r2, [pc, #20]	@ (80038c8 <prvInitialiseTaskLists+0x68>)
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200000d8 	.word	0x200000d8
 80038c4:	2000013c 	.word	0x2000013c
 80038c8:	20000150 	.word	0x20000150
 80038cc:	2000016c 	.word	0x2000016c
 80038d0:	20000180 	.word	0x20000180
 80038d4:	20000198 	.word	0x20000198
 80038d8:	20000164 	.word	0x20000164
 80038dc:	20000168 	.word	0x20000168

080038e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038e6:	e019      	b.n	800391c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80038e8:	f000 ff38 	bl	800475c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <prvCheckTasksWaitingTermination+0x50>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fe fd5f 	bl	80023bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80038fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <prvCheckTasksWaitingTermination+0x54>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	4a0b      	ldr	r2, [pc, #44]	@ (8003934 <prvCheckTasksWaitingTermination+0x54>)
 8003906:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <prvCheckTasksWaitingTermination+0x58>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3b01      	subs	r3, #1
 800390e:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <prvCheckTasksWaitingTermination+0x58>)
 8003910:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003912:	f000 ff55 	bl	80047c0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f810 	bl	800393c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800391c:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <prvCheckTasksWaitingTermination+0x58>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e1      	bne.n	80038e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000180 	.word	0x20000180
 8003934:	200001ac 	.word	0x200001ac
 8003938:	20000194 	.word	0x20000194

0800393c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	4618      	mov	r0, r3
 800394a:	f001 f91b 	bl	8004b84 <vPortFree>
                vPortFree( pxTCB );
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f001 f918 	bl	8004b84 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <prvResetNextTaskUnblockTime+0x30>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <prvResetNextTaskUnblockTime+0x34>)
 800396c:	f04f 32ff 	mov.w	r2, #4294967295
 8003970:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003972:	e005      	b.n	8003980 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <prvResetNextTaskUnblockTime+0x30>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a04      	ldr	r2, [pc, #16]	@ (8003990 <prvResetNextTaskUnblockTime+0x34>)
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000164 	.word	0x20000164
 8003990:	200001cc 	.word	0x200001cc

08003994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800399a:	4b0b      	ldr	r3, [pc, #44]	@ (80039c8 <xTaskGetSchedulerState+0x34>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039a2:	2301      	movs	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	e008      	b.n	80039ba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a8:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <xTaskGetSchedulerState+0x38>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d102      	bne.n	80039b6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039b0:	2302      	movs	r3, #2
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	e001      	b.n	80039ba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039ba:	687b      	ldr	r3, [r7, #4]
    }
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	200001b8 	.word	0x200001b8
 80039cc:	200001d4 	.word	0x200001d4

080039d0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	613b      	str	r3, [r7, #16]
    }
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	e7fd      	b.n	80039f8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80039fc:	f000 feae 	bl	800475c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003a00:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	3354      	adds	r3, #84	@ 0x54
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d022      	beq.n	8003a58 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003a12:	4b32      	ldr	r3, [pc, #200]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	3214      	adds	r2, #20
 8003a1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	43d2      	mvns	r2, r2
 8003a22:	4011      	ands	r1, r2
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	3214      	adds	r2, #20
 8003a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	3354      	adds	r3, #84	@ 0x54
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00b      	beq.n	8003a58 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a40:	2101      	movs	r1, #1
 8003a42:	6a38      	ldr	r0, [r7, #32]
 8003a44:	f000 f9c0 	bl	8003dc8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003a48:	4b25      	ldr	r3, [pc, #148]	@ (8003ae0 <xTaskGenericNotifyWait+0x110>)
 8003a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003a58:	f000 feb2 	bl	80047c0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003a5c:	f000 fe7e 	bl	800475c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	2040      	movs	r0, #64	@ 0x40
 8003a6e:	f003 f87b 	bl	8006b68 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003a78:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	3214      	adds	r2, #20
 8003a80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	3354      	adds	r3, #84	@ 0x54
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d002      	beq.n	8003aa0 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e00e      	b.n	8003abe <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	3214      	adds	r2, #20
 8003aa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	43d2      	mvns	r2, r2
 8003ab0:	4011      	ands	r1, r2
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	3214      	adds	r2, #20
 8003ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <xTaskGenericNotifyWait+0x10c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3354      	adds	r3, #84	@ 0x54
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003acc:	f000 fe78 	bl	80047c0 <vPortExitCritical>

        return xReturn;
 8003ad0:	697b      	ldr	r3, [r7, #20]
    }
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200000d4 	.word	0x200000d4
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b094      	sub	sp, #80	@ 0x50
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003af2:	2301      	movs	r3, #1
 8003af4:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	e7fd      	b.n	8003b2e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b32:	f000 ff03 	bl	800493c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	643b      	str	r3, [r7, #64]	@ 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	623a      	str	r2, [r7, #32]
 8003b50:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003b52:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003b56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d006      	beq.n	8003b6a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	3214      	adds	r2, #20
 8003b62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003b6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3354      	adds	r3, #84	@ 0x54
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3354      	adds	r3, #84	@ 0x54
 8003b80:	2202      	movs	r2, #2
 8003b82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d83b      	bhi.n	8003c02 <xTaskGenericNotifyFromISR+0x11e>
 8003b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <xTaskGenericNotifyFromISR+0xac>)
 8003b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b90:	08003c23 	.word	0x08003c23
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003be7 	.word	0x08003be7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	3214      	adds	r2, #20
 8003baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	3214      	adds	r2, #20
 8003bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003bbe:	e033      	b.n	8003c28 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	3214      	adds	r2, #20
 8003bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bca:	1c59      	adds	r1, r3, #1
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	3214      	adds	r2, #20
 8003bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003bd6:	e027      	b.n	8003c28 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	3214      	adds	r2, #20
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003be4:	e020      	b.n	8003c28 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003be6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d006      	beq.n	8003bfc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	3214      	adds	r2, #20
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003bfa:	e015      	b.n	8003c28 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003c00:	e012      	b.n	8003c28 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003c02:	4b6a      	ldr	r3, [pc, #424]	@ (8003dac <xTaskGenericNotifyFromISR+0x2c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61bb      	str	r3, [r7, #24]
    }
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003c26:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 fd62 	bl	80076f4 <SEGGER_SYSVIEW_ShrinkId>
 8003c30:	78f9      	ldrb	r1, [r7, #3]
 8003c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c36:	9201      	str	r2, [sp, #4]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4601      	mov	r1, r0
 8003c40:	203f      	movs	r0, #63	@ 0x3f
 8003c42:	f003 f823 	bl	8006c8c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003c46:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	f040 80a3 	bne.w	8003d96 <xTaskGenericNotifyFromISR+0x2b2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <xTaskGenericNotifyFromISR+0x18c>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	617b      	str	r3, [r7, #20]
    }
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xTaskGenericNotifyFromISR+0x188>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c70:	4b4f      	ldr	r3, [pc, #316]	@ (8003db0 <xTaskGenericNotifyFromISR+0x2cc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d162      	bne.n	8003d3e <xTaskGenericNotifyFromISR+0x25a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c84:	68d2      	ldr	r2, [r2, #12]
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c8e:	6892      	ldr	r2, [r2, #8]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c98:	3304      	adds	r3, #4
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d103      	bne.n	8003ca6 <xTaskGenericNotifyFromISR+0x1c2>
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca8:	2200      	movs	r2, #0
 8003caa:	615a      	str	r2, [r3, #20]
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fc79 	bl	80075b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <xTaskGenericNotifyFromISR+0x2d0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	4a39      	ldr	r2, [pc, #228]	@ (8003db4 <xTaskGenericNotifyFromISR+0x2d0>)
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd4:	4938      	ldr	r1, [pc, #224]	@ (8003db8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cfa:	3204      	adds	r2, #4
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d04:	609a      	str	r2, [r3, #8]
 8003d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4a29      	ldr	r2, [pc, #164]	@ (8003db8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003d14:	441a      	add	r2, r3
 8003d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d18:	615a      	str	r2, [r3, #20]
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1e:	4926      	ldr	r1, [pc, #152]	@ (8003db8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c59      	adds	r1, r3, #1
 8003d2e:	4822      	ldr	r0, [pc, #136]	@ (8003db8 <xTaskGenericNotifyFromISR+0x2d4>)
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4403      	add	r3, r0
 8003d3a:	6019      	str	r1, [r3, #0]
 8003d3c:	e01b      	b.n	8003d76 <xTaskGenericNotifyFromISR+0x292>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003dbc <xTaskGenericNotifyFromISR+0x2d8>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d48:	61da      	str	r2, [r3, #28]
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d50:	621a      	str	r2, [r3, #32]
 8003d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d58:	3218      	adds	r2, #24
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d5e:	f103 0218 	add.w	r2, r3, #24
 8003d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <xTaskGenericNotifyFromISR+0x2d8>)
 8003d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d6c:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <xTaskGenericNotifyFromISR+0x2d8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a12      	ldr	r2, [pc, #72]	@ (8003dbc <xTaskGenericNotifyFromISR+0x2d8>)
 8003d74:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7a:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <xTaskGenericNotifyFromISR+0x2dc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d908      	bls.n	8003d96 <xTaskGenericNotifyFromISR+0x2b2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <xTaskGenericNotifyFromISR+0x2ac>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003d90:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <xTaskGenericNotifyFromISR+0x2e0>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d98:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003da0:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8003da4:	4618      	mov	r0, r3
 8003da6:	3748      	adds	r7, #72	@ 0x48
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200001b0 	.word	0x200001b0
 8003db0:	200001d4 	.word	0x200001d4
 8003db4:	200001b4 	.word	0x200001b4
 8003db8:	200000d8 	.word	0x200000d8
 8003dbc:	2000016c 	.word	0x2000016c
 8003dc0:	200000d4 	.word	0x200000d4
 8003dc4:	200001c0 	.word	0x200001c0

08003dc8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fe faec 	bl	80023bc <uxListRemove>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dea:	4b37      	ldr	r3, [pc, #220]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	2201      	movs	r2, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	4b34      	ldr	r3, [pc, #208]	@ (8003ecc <prvAddCurrentTaskToDelayedList+0x104>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	4a33      	ldr	r2, [pc, #204]	@ (8003ecc <prvAddCurrentTaskToDelayedList+0x104>)
 8003e00:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d124      	bne.n	8003e54 <prvAddCurrentTaskToDelayedList+0x8c>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d021      	beq.n	8003e54 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e10:	4b2f      	ldr	r3, [pc, #188]	@ (8003ed0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	4b27      	ldr	r3, [pc, #156]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	3204      	adds	r2, #4
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	1d1a      	adds	r2, r3, #4
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	4b22      	ldr	r3, [pc, #136]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a23      	ldr	r2, [pc, #140]	@ (8003ed0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003e44:	615a      	str	r2, [r3, #20]
 8003e46:	4b22      	ldr	r3, [pc, #136]	@ (8003ed0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	4a20      	ldr	r2, [pc, #128]	@ (8003ed0 <prvAddCurrentTaskToDelayedList+0x108>)
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e52:	e032      	b.n	8003eba <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d20f      	bcs.n	8003e8c <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e6c:	4b16      	ldr	r3, [pc, #88]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2104      	movs	r1, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fbde 	bl	8007634 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e78:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3304      	adds	r3, #4
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe fa60 	bl	800234a <vListInsert>
}
 8003e8a:	e016      	b.n	8003eba <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2104      	movs	r1, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 fbce 	bl	8007634 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <prvAddCurrentTaskToDelayedList+0x110>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0x100>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe fa50 	bl	800234a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <prvAddCurrentTaskToDelayedList+0x114>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d202      	bcs.n	8003eba <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003eb4:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <prvAddCurrentTaskToDelayedList+0x114>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6013      	str	r3, [r2, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200001b0 	.word	0x200001b0
 8003ec8:	200000d4 	.word	0x200000d4
 8003ecc:	200001b4 	.word	0x200001b4
 8003ed0:	20000198 	.word	0x20000198
 8003ed4:	20000168 	.word	0x20000168
 8003ed8:	20000164 	.word	0x20000164
 8003edc:	200001cc 	.word	0x200001cc

08003ee0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003eea:	f000 fa4f 	bl	800438c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <xTimerCreateTimerTask+0x58>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003ef6:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <xTimerCreateTimerTask+0x5c>)
 8003ef8:	9301      	str	r3, [sp, #4]
 8003efa:	2302      	movs	r3, #2
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2300      	movs	r3, #0
 8003f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f04:	490e      	ldr	r1, [pc, #56]	@ (8003f40 <xTimerCreateTimerTask+0x60>)
 8003f06:	480f      	ldr	r0, [pc, #60]	@ (8003f44 <xTimerCreateTimerTask+0x64>)
 8003f08:	f7fe fda0 	bl	8002a4c <xTaskCreate>
 8003f0c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10b      	bne.n	8003f2c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	603b      	str	r3, [r7, #0]
    }
 8003f26:	bf00      	nop
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f2c:	687b      	ldr	r3, [r7, #4]
    }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000208 	.word	0x20000208
 8003f3c:	2000020c 	.word	0x2000020c
 8003f40:	08007b80 	.word	0x08007b80
 8003f44:	08003fed 	.word	0x08003fed

08003f48 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f54:	e008      	b.n	8003f68 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	18d1      	adds	r1, r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f8df 	bl	8004138 <prvInsertTimerInActiveList>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ea      	bne.n	8003f56 <prvReloadTimer+0xe>
        }
    }
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f96:	4b14      	ldr	r3, [pc, #80]	@ (8003fe8 <prvProcessExpiredTimer+0x5c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe fa09 	bl	80023bc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff ffc3 	bl	8003f48 <prvReloadTimer>
 8003fc2:	e008      	b.n	8003fd6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	4798      	blx	r3
    }
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000200 	.word	0x20000200

08003fec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ff4:	f107 0308 	add.w	r3, r7, #8
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f859 	bl	80040b0 <prvGetNextExpireTime>
 8003ffe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4619      	mov	r1, r3
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f805 	bl	8004014 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800400a:	f000 f8d7 	bl	80041bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800400e:	bf00      	nop
 8004010:	e7f0      	b.n	8003ff4 <prvTimerTask+0x8>
	...

08004014 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800401e:	f7fe ffb5 	bl	8002f8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f866 	bl	80040f8 <prvSampleTimeNow>
 800402c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d130      	bne.n	8004096 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <prvProcessTimerOrBlockTask+0x3c>
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	429a      	cmp	r2, r3
 8004040:	d806      	bhi.n	8004050 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004042:	f7fe ffb1 	bl	8002fa8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff9f 	bl	8003f8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800404e:	e024      	b.n	800409a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d008      	beq.n	8004068 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004056:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <prvProcessTimerOrBlockTask+0x90>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <prvProcessTimerOrBlockTask+0x50>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <prvProcessTimerOrBlockTask+0x52>
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004068:	4b0f      	ldr	r3, [pc, #60]	@ (80040a8 <prvProcessTimerOrBlockTask+0x94>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f7fe fcb5 	bl	80029e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800407a:	f7fe ff95 	bl	8002fa8 <xTaskResumeAll>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <prvProcessTimerOrBlockTask+0x98>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
    }
 8004094:	e001      	b.n	800409a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004096:	f7fe ff87 	bl	8002fa8 <xTaskResumeAll>
    }
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000204 	.word	0x20000204
 80040a8:	20000208 	.word	0x20000208
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040b8:	4b0e      	ldr	r3, [pc, #56]	@ (80040f4 <prvGetNextExpireTime+0x44>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <prvGetNextExpireTime+0x16>
 80040c2:	2201      	movs	r2, #1
 80040c4:	e000      	b.n	80040c8 <prvGetNextExpireTime+0x18>
 80040c6:	2200      	movs	r2, #0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <prvGetNextExpireTime+0x44>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e001      	b.n	80040e4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040e4:	68fb      	ldr	r3, [r7, #12]
    }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000200 	.word	0x20000200

080040f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004100:	f7ff f844 	bl	800318c <xTaskGetTickCount>
 8004104:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004106:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <prvSampleTimeNow+0x3c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	429a      	cmp	r2, r3
 800410e:	d205      	bcs.n	800411c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004110:	f000 f916 	bl	8004340 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e002      	b.n	8004122 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004122:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <prvSampleTimeNow+0x3c>)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004128:	68fb      	ldr	r3, [r7, #12]
    }
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000210 	.word	0x20000210

08004138 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004146:	2300      	movs	r3, #0
 8004148:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	d812      	bhi.n	8004184 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	1ad2      	subs	r2, r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	e01b      	b.n	80041aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <prvInsertTimerInActiveList+0x7c>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe f8e4 	bl	800234a <vListInsert>
 8004182:	e012      	b.n	80041aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d206      	bcs.n	800419a <prvInsertTimerInActiveList+0x62>
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004194:	2301      	movs	r3, #1
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e007      	b.n	80041aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800419a:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <prvInsertTimerInActiveList+0x80>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f7fe f8d0 	bl	800234a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041aa:	697b      	ldr	r3, [r7, #20]
    }
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000204 	.word	0x20000204
 80041b8:	20000200 	.word	0x20000200

080041bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041c2:	e0a9      	b.n	8004318 <prvProcessReceivedCommands+0x15c>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f2c0 80a6 	blt.w	8004318 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe f8ed 	bl	80023bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041e2:	1d3b      	adds	r3, r7, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff87 	bl	80040f8 <prvSampleTimeNow>
 80041ea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	f200 808e 	bhi.w	8004312 <prvProcessReceivedCommands+0x156>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <prvProcessReceivedCommands+0x40>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004221 	.word	0x08004221
 8004204:	08004289 	.word	0x08004289
 8004208:	0800429d 	.word	0x0800429d
 800420c:	080042e9 	.word	0x080042e9
 8004210:	08004221 	.word	0x08004221
 8004214:	08004221 	.word	0x08004221
 8004218:	08004289 	.word	0x08004289
 800421c:	0800429d 	.word	0x0800429d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	18d1      	adds	r1, r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	69f8      	ldr	r0, [r7, #28]
 8004240:	f7ff ff7a 	bl	8004138 <prvInsertTimerInActiveList>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d065      	beq.n	8004316 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d009      	beq.n	800426c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	4413      	add	r3, r2
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4619      	mov	r1, r3
 8004264:	69f8      	ldr	r0, [r7, #28]
 8004266:	f7ff fe6f 	bl	8003f48 <prvReloadTimer>
 800426a:	e008      	b.n	800427e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	b2da      	uxtb	r2, r3
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	69f8      	ldr	r0, [r7, #28]
 8004284:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004286:	e046      	b.n	8004316 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800429a:	e03d      	b.n	8004318 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10b      	bne.n	80042d4 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	617b      	str	r3, [r7, #20]
    }
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	18d1      	adds	r1, r2, r3
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	69f8      	ldr	r0, [r7, #28]
 80042e2:	f7ff ff29 	bl	8004138 <prvInsertTimerInActiveList>
                        break;
 80042e6:	e017      	b.n	8004318 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <prvProcessReceivedCommands+0x142>
                                {
                                    vPortFree( pxTimer );
 80042f6:	69f8      	ldr	r0, [r7, #28]
 80042f8:	f000 fc44 	bl	8004b84 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042fc:	e00c      	b.n	8004318 <prvProcessReceivedCommands+0x15c>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004310:	e002      	b.n	8004318 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <prvProcessReceivedCommands+0x15c>
                        break;
 8004316:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004318:	4b08      	ldr	r3, [pc, #32]	@ (800433c <prvProcessReceivedCommands+0x180>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f107 0108 	add.w	r1, r7, #8
 8004320:	2200      	movs	r2, #0
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe f970 	bl	8002608 <xQueueReceive>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	f47f af4a 	bne.w	80041c4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3720      	adds	r7, #32
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000208 	.word	0x20000208

08004340 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004346:	e009      	b.n	800435c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004348:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <prvSwitchTimerLists+0x44>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004352:	f04f 31ff 	mov.w	r1, #4294967295
 8004356:	6838      	ldr	r0, [r7, #0]
 8004358:	f7ff fe18 	bl	8003f8c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <prvSwitchTimerLists+0x44>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <prvSwitchTimerLists+0x44>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <prvSwitchTimerLists+0x48>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a04      	ldr	r2, [pc, #16]	@ (8004384 <prvSwitchTimerLists+0x44>)
 8004372:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004374:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <prvSwitchTimerLists+0x48>)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6013      	str	r3, [r2, #0]
    }
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000200 	.word	0x20000200
 8004388:	20000204 	.word	0x20000204

0800438c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004390:	f000 f9e4 	bl	800475c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004394:	4b12      	ldr	r3, [pc, #72]	@ (80043e0 <prvCheckForValidListAndQueue+0x54>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d11d      	bne.n	80043d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800439c:	4811      	ldr	r0, [pc, #68]	@ (80043e4 <prvCheckForValidListAndQueue+0x58>)
 800439e:	f7fd ff83 	bl	80022a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043a2:	4811      	ldr	r0, [pc, #68]	@ (80043e8 <prvCheckForValidListAndQueue+0x5c>)
 80043a4:	f7fd ff80 	bl	80022a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043a8:	4b10      	ldr	r3, [pc, #64]	@ (80043ec <prvCheckForValidListAndQueue+0x60>)
 80043aa:	4a0e      	ldr	r2, [pc, #56]	@ (80043e4 <prvCheckForValidListAndQueue+0x58>)
 80043ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <prvCheckForValidListAndQueue+0x64>)
 80043b0:	4a0d      	ldr	r2, [pc, #52]	@ (80043e8 <prvCheckForValidListAndQueue+0x5c>)
 80043b2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80043b4:	2200      	movs	r2, #0
 80043b6:	210c      	movs	r1, #12
 80043b8:	200a      	movs	r0, #10
 80043ba:	f7fe f8ad 	bl	8002518 <xQueueGenericCreate>
 80043be:	4603      	mov	r3, r0
 80043c0:	4a07      	ldr	r2, [pc, #28]	@ (80043e0 <prvCheckForValidListAndQueue+0x54>)
 80043c2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <prvCheckForValidListAndQueue+0x54>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <prvCheckForValidListAndQueue+0x54>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4908      	ldr	r1, [pc, #32]	@ (80043f4 <prvCheckForValidListAndQueue+0x68>)
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe faae 	bl	8002934 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043d8:	f000 f9f2 	bl	80047c0 <vPortExitCritical>
    }
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000208 	.word	0x20000208
 80043e4:	200001d8 	.word	0x200001d8
 80043e8:	200001ec 	.word	0x200001ec
 80043ec:	20000200 	.word	0x20000200
 80043f0:	20000204 	.word	0x20000204
 80043f4:	08007b88 	.word	0x08007b88

080043f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3b04      	subs	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004410:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b04      	subs	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b04      	subs	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004428:	4a0c      	ldr	r2, [pc, #48]	@ (800445c <pxPortInitialiseStack+0x64>)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b14      	subs	r3, #20
 8004432:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b04      	subs	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f06f 0202 	mvn.w	r2, #2
 8004446:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3b20      	subs	r3, #32
 800444c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	08004461 	.word	0x08004461

08004460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800446a:	4b13      	ldr	r3, [pc, #76]	@ (80044b8 <prvTaskExitError+0x58>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d00b      	beq.n	800448c <prvTaskExitError+0x2c>
        __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60fb      	str	r3, [r7, #12]
    }
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <prvTaskExitError+0x28>
        __asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60bb      	str	r3, [r7, #8]
    }
 800449e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044a0:	bf00      	nop
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0fc      	beq.n	80044a2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000010 	.word	0x20000010
 80044bc:	00000000 	.word	0x00000000

080044c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044c0:	4b07      	ldr	r3, [pc, #28]	@ (80044e0 <pxCurrentTCBConst2>)
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	6808      	ldr	r0, [r1, #0]
 80044c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	f380 8809 	msr	PSP, r0
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	4770      	bx	lr
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst2>:
 80044e0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80044e8:	4808      	ldr	r0, [pc, #32]	@ (800450c <prvPortStartFirstTask+0x24>)
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f380 8808 	msr	MSP, r0
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8814 	msr	CONTROL, r0
 80044fa:	b662      	cpsie	i
 80044fc:	b661      	cpsie	f
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	df00      	svc	0
 8004508:	bf00      	nop
 800450a:	0000      	.short	0x0000
 800450c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004510:	bf00      	nop
 8004512:	bf00      	nop

08004514 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800451a:	4b47      	ldr	r3, [pc, #284]	@ (8004638 <xPortStartScheduler+0x124>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a47      	ldr	r2, [pc, #284]	@ (800463c <xPortStartScheduler+0x128>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10b      	bne.n	800453c <xPortStartScheduler+0x28>
        __asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	613b      	str	r3, [r7, #16]
    }
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800453c:	4b3e      	ldr	r3, [pc, #248]	@ (8004638 <xPortStartScheduler+0x124>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a3f      	ldr	r2, [pc, #252]	@ (8004640 <xPortStartScheduler+0x12c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10b      	bne.n	800455e <xPortStartScheduler+0x4a>
        __asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60fb      	str	r3, [r7, #12]
    }
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800455e:	4b39      	ldr	r3, [pc, #228]	@ (8004644 <xPortStartScheduler+0x130>)
 8004560:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	22ff      	movs	r2, #255	@ 0xff
 800456e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <xPortStartScheduler+0x134>)
 8004584:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004586:	4b31      	ldr	r3, [pc, #196]	@ (800464c <xPortStartScheduler+0x138>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458c:	e009      	b.n	80045a2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800458e:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <xPortStartScheduler+0x138>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	4a2d      	ldr	r2, [pc, #180]	@ (800464c <xPortStartScheduler+0x138>)
 8004596:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b80      	cmp	r3, #128	@ 0x80
 80045ac:	d0ef      	beq.n	800458e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ae:	4b27      	ldr	r3, [pc, #156]	@ (800464c <xPortStartScheduler+0x138>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d00b      	beq.n	80045d2 <xPortStartScheduler+0xbe>
        __asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60bb      	str	r3, [r7, #8]
    }
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045d2:	4b1e      	ldr	r3, [pc, #120]	@ (800464c <xPortStartScheduler+0x138>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <xPortStartScheduler+0x138>)
 80045da:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <xPortStartScheduler+0x138>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045e4:	4a19      	ldr	r2, [pc, #100]	@ (800464c <xPortStartScheduler+0x138>)
 80045e6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80045f0:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <xPortStartScheduler+0x13c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <xPortStartScheduler+0x13c>)
 80045f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80045fc:	4b14      	ldr	r3, [pc, #80]	@ (8004650 <xPortStartScheduler+0x13c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a13      	ldr	r2, [pc, #76]	@ (8004650 <xPortStartScheduler+0x13c>)
 8004602:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004606:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004608:	f000 f968 	bl	80048dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <xPortStartScheduler+0x140>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004612:	f000 f987 	bl	8004924 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <xPortStartScheduler+0x144>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a0f      	ldr	r2, [pc, #60]	@ (8004658 <xPortStartScheduler+0x144>)
 800461c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004620:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004622:	f7ff ff61 	bl	80044e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004626:	f7fe fecb 	bl	80033c0 <vTaskSwitchContext>
    prvTaskExitError();
 800462a:	f7ff ff19 	bl	8004460 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	e000ed00 	.word	0xe000ed00
 800463c:	410fc271 	.word	0x410fc271
 8004640:	410fc270 	.word	0x410fc270
 8004644:	e000e400 	.word	0xe000e400
 8004648:	20000214 	.word	0x20000214
 800464c:	20000218 	.word	0x20000218
 8004650:	e000ed20 	.word	0xe000ed20
 8004654:	20000010 	.word	0x20000010
 8004658:	e000ef34 	.word	0xe000ef34

0800465c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004662:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <vInitPrioGroupValue+0xe8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a38      	ldr	r2, [pc, #224]	@ (8004748 <vInitPrioGroupValue+0xec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d10b      	bne.n	8004684 <vInitPrioGroupValue+0x28>
        __asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	613b      	str	r3, [r7, #16]
    }
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004684:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <vInitPrioGroupValue+0xe8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a30      	ldr	r2, [pc, #192]	@ (800474c <vInitPrioGroupValue+0xf0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d10b      	bne.n	80046a6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60fb      	str	r3, [r7, #12]
    }
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	e7fd      	b.n	80046a2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004750 <vInitPrioGroupValue+0xf4>)
 80046a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	22ff      	movs	r2, #255	@ 0xff
 80046b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b22      	ldr	r3, [pc, #136]	@ (8004754 <vInitPrioGroupValue+0xf8>)
 80046cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ce:	4b22      	ldr	r3, [pc, #136]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d4:	e009      	b.n	80046ea <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80046d6:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 80046de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ea:	78fb      	ldrb	r3, [r7, #3]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f2:	2b80      	cmp	r3, #128	@ 0x80
 80046f4:	d0ef      	beq.n	80046d6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046f6:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f1c3 0307 	rsb	r3, r3, #7
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00b      	beq.n	800471a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60bb      	str	r3, [r7, #8]
    }
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	e7fd      	b.n	8004716 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800471a:	4b0f      	ldr	r3, [pc, #60]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 8004722:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800472c:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <vInitPrioGroupValue+0xfc>)
 800472e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	b2da      	uxtb	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000ed00 	.word	0xe000ed00
 8004748:	410fc271 	.word	0x410fc271
 800474c:	410fc270 	.word	0x410fc270
 8004750:	e000e400 	.word	0xe000e400
 8004754:	20000214 	.word	0x20000214
 8004758:	20000218 	.word	0x20000218

0800475c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
        __asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
    }
 8004774:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004776:	4b10      	ldr	r3, [pc, #64]	@ (80047b8 <vPortEnterCritical+0x5c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	4a0e      	ldr	r2, [pc, #56]	@ (80047b8 <vPortEnterCritical+0x5c>)
 800477e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004780:	4b0d      	ldr	r3, [pc, #52]	@ (80047b8 <vPortEnterCritical+0x5c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d110      	bne.n	80047aa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004788:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <vPortEnterCritical+0x60>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <vPortEnterCritical+0x4e>
        __asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	603b      	str	r3, [r7, #0]
    }
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <vPortEnterCritical+0x4a>
    }
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000010 	.word	0x20000010
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047c6:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <vPortExitCritical+0x50>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <vPortExitCritical+0x26>
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
    }
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80047e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <vPortExitCritical+0x50>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	4a08      	ldr	r2, [pc, #32]	@ (8004810 <vPortExitCritical+0x50>)
 80047ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <vPortExitCritical+0x50>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <vPortExitCritical+0x44>
 80047f8:	2300      	movs	r3, #0
 80047fa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f383 8811 	msr	BASEPRI, r3
    }
 8004802:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	20000010 	.word	0x20000010
	...

08004820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004820:	f3ef 8009 	mrs	r0, PSP
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4b15      	ldr	r3, [pc, #84]	@ (8004880 <pxCurrentTCBConst>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	f01e 0f10 	tst.w	lr, #16
 8004830:	bf08      	it	eq
 8004832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	6010      	str	r0, [r2, #0]
 800483c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004840:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004844:	f380 8811 	msr	BASEPRI, r0
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f7fe fdb6 	bl	80033c0 <vTaskSwitchContext>
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f380 8811 	msr	BASEPRI, r0
 800485c:	bc09      	pop	{r0, r3}
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	6808      	ldr	r0, [r1, #0]
 8004862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004866:	f01e 0f10 	tst.w	lr, #16
 800486a:	bf08      	it	eq
 800486c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004870:	f380 8809 	msr	PSP, r0
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst>:
 8004880:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
        __asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	607b      	str	r3, [r7, #4]
    }
 80048a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048a2:	f002 fd6b 	bl	800737c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048a6:	f7fe fc93 	bl	80031d0 <xTaskIncrementTick>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d006      	beq.n	80048be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048b0:	f002 fdc2 	bl	8007438 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048b4:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <SysTick_Handler+0x50>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	e001      	b.n	80048c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048be:	f002 fd9f 	bl	8007400 <SEGGER_SYSVIEW_RecordExitISR>
 80048c2:	2300      	movs	r3, #0
 80048c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f383 8811 	msr	BASEPRI, r3
    }
 80048cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <vPortSetupTimerInterrupt+0x34>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <vPortSetupTimerInterrupt+0x38>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <vPortSetupTimerInterrupt+0x3c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	@ (800491c <vPortSetupTimerInterrupt+0x40>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	4a09      	ldr	r2, [pc, #36]	@ (8004920 <vPortSetupTimerInterrupt+0x44>)
 80048fa:	3b01      	subs	r3, #1
 80048fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048fe:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <vPortSetupTimerInterrupt+0x34>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	e000e010 	.word	0xe000e010
 8004914:	e000e018 	.word	0xe000e018
 8004918:	20000000 	.word	0x20000000
 800491c:	10624dd3 	.word	0x10624dd3
 8004920:	e000e014 	.word	0xe000e014

08004924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004934 <vPortEnableVFP+0x10>
 8004928:	6801      	ldr	r1, [r0, #0]
 800492a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800492e:	6001      	str	r1, [r0, #0]
 8004930:	4770      	bx	lr
 8004932:	0000      	.short	0x0000
 8004934:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004938:	bf00      	nop
 800493a:	bf00      	nop

0800493c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004942:	f3ef 8305 	mrs	r3, IPSR
 8004946:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d915      	bls.n	800497a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800494e:	4a18      	ldr	r2, [pc, #96]	@ (80049b0 <vPortValidateInterruptPriority+0x74>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004958:	4b16      	ldr	r3, [pc, #88]	@ (80049b4 <vPortValidateInterruptPriority+0x78>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	7afa      	ldrb	r2, [r7, #11]
 800495e:	429a      	cmp	r2, r3
 8004960:	d20b      	bcs.n	800497a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	607b      	str	r3, [r7, #4]
    }
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	e7fd      	b.n	8004976 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800497a:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <vPortValidateInterruptPriority+0x7c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004982:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <vPortValidateInterruptPriority+0x80>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d90b      	bls.n	80049a2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	603b      	str	r3, [r7, #0]
    }
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <vPortValidateInterruptPriority+0x62>
    }
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e3f0 	.word	0xe000e3f0
 80049b4:	20000214 	.word	0x20000214
 80049b8:	e000ed0c 	.word	0xe000ed0c
 80049bc:	20000218 	.word	0x20000218

080049c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	@ 0x28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80049cc:	f7fe fade 	bl	8002f8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049d0:	4b66      	ldr	r3, [pc, #408]	@ (8004b6c <pvPortMalloc+0x1ac>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049d8:	f000 f938 	bl	8004c4c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049dc:	4b64      	ldr	r3, [pc, #400]	@ (8004b70 <pvPortMalloc+0x1b0>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f040 80a9 	bne.w	8004b3c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02e      	beq.n	8004a4e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80049f0:	2208      	movs	r2, #8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d228      	bcs.n	8004a4e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80049fc:	2208      	movs	r2, #8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d022      	beq.n	8004a54 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f023 0307 	bic.w	r3, r3, #7
 8004a14:	3308      	adds	r3, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d215      	bcs.n	8004a48 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f023 0307 	bic.w	r3, r3, #7
 8004a22:	3308      	adds	r3, #8
 8004a24:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d011      	beq.n	8004a54 <pvPortMalloc+0x94>
        __asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	617b      	str	r3, [r7, #20]
    }
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a4c:	e002      	b.n	8004a54 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	e000      	b.n	8004a56 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a54:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d06f      	beq.n	8004b3c <pvPortMalloc+0x17c>
 8004a5c:	4b45      	ldr	r3, [pc, #276]	@ (8004b74 <pvPortMalloc+0x1b4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d86a      	bhi.n	8004b3c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a66:	4b44      	ldr	r3, [pc, #272]	@ (8004b78 <pvPortMalloc+0x1b8>)
 8004a68:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a6a:	4b43      	ldr	r3, [pc, #268]	@ (8004b78 <pvPortMalloc+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a70:	e004      	b.n	8004a7c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d903      	bls.n	8004a8e <pvPortMalloc+0xce>
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f1      	bne.n	8004a72 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a8e:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <pvPortMalloc+0x1ac>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d051      	beq.n	8004b3c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	4413      	add	r3, r2
 8004aa0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	1ad2      	subs	r2, r2, r3
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d920      	bls.n	8004afc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00b      	beq.n	8004ae4 <pvPortMalloc+0x124>
        __asm volatile
 8004acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	613b      	str	r3, [r7, #16]
    }
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	e7fd      	b.n	8004ae0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	1ad2      	subs	r2, r2, r3
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004af6:	69b8      	ldr	r0, [r7, #24]
 8004af8:	f000 f90a 	bl	8004d10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b74 <pvPortMalloc+0x1b4>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	4a1b      	ldr	r2, [pc, #108]	@ (8004b74 <pvPortMalloc+0x1b4>)
 8004b08:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b74 <pvPortMalloc+0x1b4>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <pvPortMalloc+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d203      	bcs.n	8004b1e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b16:	4b17      	ldr	r3, [pc, #92]	@ (8004b74 <pvPortMalloc+0x1b4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <pvPortMalloc+0x1bc>)
 8004b1c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b13      	ldr	r3, [pc, #76]	@ (8004b70 <pvPortMalloc+0x1b0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b32:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <pvPortMalloc+0x1c0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3301      	adds	r3, #1
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <pvPortMalloc+0x1c0>)
 8004b3a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b3c:	f7fe fa34 	bl	8002fa8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <pvPortMalloc+0x1a2>
        __asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60fb      	str	r3, [r7, #12]
    }
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	e7fd      	b.n	8004b5e <pvPortMalloc+0x19e>
    return pvReturn;
 8004b62:	69fb      	ldr	r3, [r7, #28]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3728      	adds	r7, #40	@ 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20019224 	.word	0x20019224
 8004b70:	20019238 	.word	0x20019238
 8004b74:	20019228 	.word	0x20019228
 8004b78:	2001921c 	.word	0x2001921c
 8004b7c:	2001922c 	.word	0x2001922c
 8004b80:	20019230 	.word	0x20019230

08004b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04f      	beq.n	8004c36 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b96:	2308      	movs	r3, #8
 8004b98:	425b      	negs	r3, r3
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <vPortFree+0xbc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <vPortFree+0x46>
        __asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60fb      	str	r3, [r7, #12]
    }
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <vPortFree+0x66>
        __asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60bb      	str	r3, [r7, #8]
    }
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4b14      	ldr	r3, [pc, #80]	@ (8004c40 <vPortFree+0xbc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01e      	beq.n	8004c36 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11a      	bne.n	8004c36 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <vPortFree+0xbc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	401a      	ands	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004c10:	f7fe f9bc 	bl	8002f8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <vPortFree+0xc0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a09      	ldr	r2, [pc, #36]	@ (8004c44 <vPortFree+0xc0>)
 8004c20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c22:	6938      	ldr	r0, [r7, #16]
 8004c24:	f000 f874 	bl	8004d10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c28:	4b07      	ldr	r3, [pc, #28]	@ (8004c48 <vPortFree+0xc4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	4a06      	ldr	r2, [pc, #24]	@ (8004c48 <vPortFree+0xc4>)
 8004c30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c32:	f7fe f9b9 	bl	8002fa8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20019238 	.word	0x20019238
 8004c44:	20019228 	.word	0x20019228
 8004c48:	20019234 	.word	0x20019234

08004c4c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c52:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8004c56:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004c58:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <prvHeapInit+0xac>)
 8004c5a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00c      	beq.n	8004c80 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3307      	adds	r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf8 <prvHeapInit+0xac>)
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c84:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <prvHeapInit+0xb0>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cfc <prvHeapInit+0xb0>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c98:	2208      	movs	r2, #8
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4a15      	ldr	r2, [pc, #84]	@ (8004d00 <prvHeapInit+0xb4>)
 8004cac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cae:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <prvHeapInit+0xb4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004cb6:	4b12      	ldr	r3, [pc, #72]	@ (8004d00 <prvHeapInit+0xb4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	1ad2      	subs	r2, r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8004d00 <prvHeapInit+0xb4>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <prvHeapInit+0xb8>)
 8004cda:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a09      	ldr	r2, [pc, #36]	@ (8004d08 <prvHeapInit+0xbc>)
 8004ce2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ce4:	4b09      	ldr	r3, [pc, #36]	@ (8004d0c <prvHeapInit+0xc0>)
 8004ce6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004cea:	601a      	str	r2, [r3, #0]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	2000021c 	.word	0x2000021c
 8004cfc:	2001921c 	.word	0x2001921c
 8004d00:	20019224 	.word	0x20019224
 8004d04:	2001922c 	.word	0x2001922c
 8004d08:	20019228 	.word	0x20019228
 8004d0c:	20019238 	.word	0x20019238

08004d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d18:	4b28      	ldr	r3, [pc, #160]	@ (8004dbc <prvInsertBlockIntoFreeList+0xac>)
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e002      	b.n	8004d24 <prvInsertBlockIntoFreeList+0x14>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d8f7      	bhi.n	8004d1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4413      	add	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d108      	bne.n	8004d52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	441a      	add	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d118      	bne.n	8004d98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d00d      	beq.n	8004d8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e008      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e003      	b.n	8004da0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d002      	beq.n	8004dae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	2001921c 	.word	0x2001921c
 8004dc0:	20019224 	.word	0x20019224

08004dc4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004dc8:	4803      	ldr	r0, [pc, #12]	@ (8004dd8 <_cbSendSystemDesc+0x14>)
 8004dca:	f002 fa81 	bl	80072d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004dce:	4803      	ldr	r0, [pc, #12]	@ (8004ddc <_cbSendSystemDesc+0x18>)
 8004dd0:	f002 fa7e 	bl	80072d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	08007b90 	.word	0x08007b90
 8004ddc:	08007bd4 	.word	0x08007bd4

08004de0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004de4:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <SEGGER_SYSVIEW_Conf+0x24>)
 8004dee:	4a06      	ldr	r2, [pc, #24]	@ (8004e08 <SEGGER_SYSVIEW_Conf+0x28>)
 8004df0:	f001 fd3c 	bl	800686c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004df4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004df8:	f001 fd7c 	bl	80068f4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004dfc:	bf00      	nop
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000000 	.word	0x20000000
 8004e04:	08004dc5 	.word	0x08004dc5
 8004e08:	08007c70 	.word	0x08007c70

08004e0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e12:	2300      	movs	r3, #0
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	e033      	b.n	8004e80 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e18:	491e      	ldr	r1, [pc, #120]	@ (8004e94 <_cbSendTaskList+0x88>)
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	491a      	ldr	r1, [pc, #104]	@ (8004e94 <_cbSendTaskList+0x88>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3304      	adds	r3, #4
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	4c16      	ldr	r4, [pc, #88]	@ (8004e94 <_cbSendTaskList+0x88>)
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4423      	add	r3, r4
 8004e48:	3308      	adds	r3, #8
 8004e4a:	681c      	ldr	r4, [r3, #0]
 8004e4c:	4d11      	ldr	r5, [pc, #68]	@ (8004e94 <_cbSendTaskList+0x88>)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	442b      	add	r3, r5
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	681d      	ldr	r5, [r3, #0]
 8004e5e:	4e0d      	ldr	r6, [pc, #52]	@ (8004e94 <_cbSendTaskList+0x88>)
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4433      	add	r3, r6
 8004e6c:	3310      	adds	r3, #16
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	462b      	mov	r3, r5
 8004e74:	4622      	mov	r2, r4
 8004e76:	f000 f979 	bl	800516c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <_cbSendTaskList+0x8c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3c6      	bcc.n	8004e18 <_cbSendTaskList+0xc>
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e94:	2001923c 	.word	0x2001923c
 8004e98:	200192dc 	.word	0x200192dc

08004e9c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ea4:	f7fe f982 	bl	80031ac <xTaskGetTickCountFromISR>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2200      	movs	r2, #0
 8004eac:	469a      	mov	sl, r3
 8004eae:	4693      	mov	fp, r2
 8004eb0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	f04f 0a00 	mov.w	sl, #0
 8004ec0:	f04f 0b00 	mov.w	fp, #0
 8004ec4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ec8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ecc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	465b      	mov	r3, fp
 8004ed4:	1a14      	subs	r4, r2, r0
 8004ed6:	eb63 0501 	sbc.w	r5, r3, r1
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	f04f 0300 	mov.w	r3, #0
 8004ee2:	00ab      	lsls	r3, r5, #2
 8004ee4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ee8:	00a2      	lsls	r2, r4, #2
 8004eea:	4614      	mov	r4, r2
 8004eec:	461d      	mov	r5, r3
 8004eee:	eb14 0800 	adds.w	r8, r4, r0
 8004ef2:	eb45 0901 	adc.w	r9, r5, r1
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f0a:	4690      	mov	r8, r2
 8004f0c:	4699      	mov	r9, r3
 8004f0e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f12:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f32:	2205      	movs	r2, #5
 8004f34:	492b      	ldr	r1, [pc, #172]	@ (8004fe4 <SYSVIEW_AddTask+0xc0>)
 8004f36:	68b8      	ldr	r0, [r7, #8]
 8004f38:	f002 fd70 	bl	8007a1c <memcmp>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d04b      	beq.n	8004fda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f42:	4b29      	ldr	r3, [pc, #164]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b07      	cmp	r3, #7
 8004f48:	d903      	bls.n	8004f52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f4a:	4828      	ldr	r0, [pc, #160]	@ (8004fec <SYSVIEW_AddTask+0xc8>)
 8004f4c:	f002 fcdc 	bl	8007908 <SEGGER_SYSVIEW_Warn>
    return;
 8004f50:	e044      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f52:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4926      	ldr	r1, [pc, #152]	@ (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4921      	ldr	r1, [pc, #132]	@ (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3304      	adds	r3, #4
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	491b      	ldr	r1, [pc, #108]	@ (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f82:	4613      	mov	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f92:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4916      	ldr	r1, [pc, #88]	@ (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	330c      	adds	r3, #12
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4910      	ldr	r1, [pc, #64]	@ (8004ff0 <SYSVIEW_AddTask+0xcc>)
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3310      	adds	r3, #16
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a08      	ldr	r2, [pc, #32]	@ (8004fe8 <SYSVIEW_AddTask+0xc4>)
 8004fc6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f8ca 	bl	800516c <SYSVIEW_SendTaskInfo>
 8004fd8:	e000      	b.n	8004fdc <SYSVIEW_AddTask+0xb8>
    return;
 8004fda:	bf00      	nop

}
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08007be4 	.word	0x08007be4
 8004fe8:	200192dc 	.word	0x200192dc
 8004fec:	08007bec 	.word	0x08007bec
 8004ff0:	2001923c 	.word	0x2001923c

08004ff4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004ffc:	4b59      	ldr	r3, [pc, #356]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80ab 	beq.w	800515c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e00d      	b.n	8005028 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800500c:	4956      	ldr	r1, [pc, #344]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d008      	beq.n	8005034 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3301      	adds	r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	4b4e      	ldr	r3, [pc, #312]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	429a      	cmp	r2, r3
 8005030:	d3ec      	bcc.n	800500c <SYSVIEW_DeleteTask+0x18>
 8005032:	e000      	b.n	8005036 <SYSVIEW_DeleteTask+0x42>
      break;
 8005034:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8005036:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3b01      	subs	r3, #1
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	429a      	cmp	r2, r3
 8005040:	d111      	bne.n	8005066 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4a46      	ldr	r2, [pc, #280]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 800504e:	4413      	add	r3, r2
 8005050:	2214      	movs	r2, #20
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f002 fcf1 	bl	8007a3c <memset>
    _NumTasks--;
 800505a:	4b42      	ldr	r3, [pc, #264]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	4a40      	ldr	r2, [pc, #256]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e07b      	b.n	800515e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005066:	4b3f      	ldr	r3, [pc, #252]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d276      	bcs.n	800515e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005070:	4b3c      	ldr	r3, [pc, #240]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	493c      	ldr	r1, [pc, #240]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	4838      	ldr	r0, [pc, #224]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4403      	add	r3, r0
 8005092:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005094:	4b33      	ldr	r3, [pc, #204]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	4933      	ldr	r1, [pc, #204]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3304      	adds	r3, #4
 80050a8:	6819      	ldr	r1, [r3, #0]
 80050aa:	482f      	ldr	r0, [pc, #188]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4403      	add	r3, r0
 80050b8:	3304      	adds	r3, #4
 80050ba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80050bc:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	4929      	ldr	r1, [pc, #164]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	3308      	adds	r3, #8
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	4825      	ldr	r0, [pc, #148]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4403      	add	r3, r0
 80050e0:	3308      	adds	r3, #8
 80050e2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80050e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1e5a      	subs	r2, r3, #1
 80050ea:	491f      	ldr	r1, [pc, #124]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	330c      	adds	r3, #12
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	481b      	ldr	r0, [pc, #108]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4403      	add	r3, r0
 8005108:	330c      	adds	r3, #12
 800510a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800510c:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	4915      	ldr	r1, [pc, #84]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3310      	adds	r3, #16
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	4811      	ldr	r0, [pc, #68]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	3310      	adds	r3, #16
 8005132:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8005134:	4b0b      	ldr	r3, [pc, #44]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a09      	ldr	r2, [pc, #36]	@ (8005168 <SYSVIEW_DeleteTask+0x174>)
 8005144:	4413      	add	r3, r2
 8005146:	2214      	movs	r2, #20
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f002 fc76 	bl	8007a3c <memset>
    _NumTasks--;
 8005150:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3b01      	subs	r3, #1
 8005156:	4a03      	ldr	r2, [pc, #12]	@ (8005164 <SYSVIEW_DeleteTask+0x170>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e000      	b.n	800515e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800515c:	bf00      	nop
  }
}
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	200192dc 	.word	0x200192dc
 8005168:	2001923c 	.word	0x2001923c

0800516c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800517a:	f107 0310 	add.w	r3, r7, #16
 800517e:	2218      	movs	r2, #24
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f002 fc5a 	bl	8007a3c <memset>
  TaskInfo.TaskID     = TaskID;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800519c:	f107 0310 	add.w	r3, r7, #16
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 ff9d 	bl	80070e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051a6:	bf00      	nop
 80051a8:	3728      	adds	r7, #40	@ 0x28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <__NVIC_EnableIRQ>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	db0b      	blt.n	80051da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	f003 021f 	and.w	r2, r3, #31
 80051c8:	4907      	ldr	r1, [pc, #28]	@ (80051e8 <__NVIC_EnableIRQ+0x38>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2001      	movs	r0, #1
 80051d2:	fa00 f202 	lsl.w	r2, r0, r2
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	e000e100 	.word	0xe000e100

080051ec <__NVIC_SetPriority>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	6039      	str	r1, [r7, #0]
 80051f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db0a      	blt.n	8005216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	b2da      	uxtb	r2, r3
 8005204:	490c      	ldr	r1, [pc, #48]	@ (8005238 <__NVIC_SetPriority+0x4c>)
 8005206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520a:	0112      	lsls	r2, r2, #4
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	440b      	add	r3, r1
 8005210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005214:	e00a      	b.n	800522c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4908      	ldr	r1, [pc, #32]	@ (800523c <__NVIC_SetPriority+0x50>)
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	3b04      	subs	r3, #4
 8005224:	0112      	lsls	r2, r2, #4
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	440b      	add	r3, r1
 800522a:	761a      	strb	r2, [r3, #24]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000e100 	.word	0xe000e100
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8005246:	f002 fbbb 	bl	80079c0 <SEGGER_SYSVIEW_IsStarted>
 800524a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8005252:	f001 fdc9 	bl	8006de8 <SEGGER_SYSVIEW_Start>
  }
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	4603      	mov	r3, r0
 8005268:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800526a:	4b0c      	ldr	r3, [pc, #48]	@ (800529c <_cbOnUARTRx+0x3c>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d806      	bhi.n	8005280 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005272:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <_cbOnUARTRx+0x3c>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	3301      	adds	r3, #1
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4b08      	ldr	r3, [pc, #32]	@ (800529c <_cbOnUARTRx+0x3c>)
 800527c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800527e:	e009      	b.n	8005294 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005280:	f7ff ffde 	bl	8005240 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005284:	4b05      	ldr	r3, [pc, #20]	@ (800529c <_cbOnUARTRx+0x3c>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	1dfb      	adds	r3, r7, #7
 800528c:	2201      	movs	r2, #1
 800528e:	4619      	mov	r1, r3
 8005290:	f000 fb9c 	bl	80059cc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005294:	bf00      	nop
}
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000014 	.word	0x20000014

080052a0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80052a8:	4b14      	ldr	r3, [pc, #80]	@ (80052fc <_cbOnUARTTx+0x5c>)
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d80f      	bhi.n	80052d0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80052b0:	4b12      	ldr	r3, [pc, #72]	@ (80052fc <_cbOnUARTTx+0x5c>)
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	461a      	mov	r2, r3
 80052b6:	4b12      	ldr	r3, [pc, #72]	@ (8005300 <_cbOnUARTTx+0x60>)
 80052b8:	5c9a      	ldrb	r2, [r3, r2]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80052be:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <_cbOnUARTTx+0x5c>)
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <_cbOnUARTTx+0x5c>)
 80052c8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
    goto Done;
 80052ce:	e00f      	b.n	80052f0 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80052d0:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <_cbOnUARTTx+0x5c>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fa1b 	bl	8005714 <SEGGER_RTT_ReadUpBufferNoLock>
 80052de:	4603      	mov	r3, r0
 80052e0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da02      	bge.n	80052ee <_cbOnUARTTx+0x4e>
    r = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e000      	b.n	80052f0 <_cbOnUARTTx+0x50>
  }
Done:
 80052ee:	bf00      	nop
  return r;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000014 	.word	0x20000014
 8005300:	08007c78 	.word	0x08007c78

08005304 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800530c:	4a04      	ldr	r2, [pc, #16]	@ (8005320 <SEGGER_UART_init+0x1c>)
 800530e:	4905      	ldr	r1, [pc, #20]	@ (8005324 <SEGGER_UART_init+0x20>)
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f863 	bl	80053dc <HIF_UART_Init>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	08005261 	.word	0x08005261
 8005324:	080052a1 	.word	0x080052a1

08005328 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800532e:	4b1e      	ldr	r3, [pc, #120]	@ (80053a8 <USART2_IRQHandler+0x80>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d011      	beq.n	8005362 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800533e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <USART2_IRQHandler+0x84>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 030b 	and.w	r3, r3, #11
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005350:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <USART2_IRQHandler+0x88>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005358:	4b15      	ldr	r3, [pc, #84]	@ (80053b0 <USART2_IRQHandler+0x88>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	4610      	mov	r0, r2
 8005360:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01a      	beq.n	80053a2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800536c:	4b11      	ldr	r3, [pc, #68]	@ (80053b4 <USART2_IRQHandler+0x8c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d015      	beq.n	80053a0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005374:	4b0f      	ldr	r3, [pc, #60]	@ (80053b4 <USART2_IRQHandler+0x8c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1dfa      	adds	r2, r7, #7
 800537a:	4610      	mov	r0, r2
 800537c:	4798      	blx	r3
 800537e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005386:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <USART2_IRQHandler+0x90>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a0b      	ldr	r2, [pc, #44]	@ (80053b8 <USART2_IRQHandler+0x90>)
 800538c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e006      	b.n	80053a2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005394:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <USART2_IRQHandler+0x80>)
 8005396:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005398:	79fa      	ldrb	r2, [r7, #7]
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <USART2_IRQHandler+0x84>)
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e000      	b.n	80053a2 <USART2_IRQHandler+0x7a>
      return;
 80053a0:	bf00      	nop
    }
  }
}
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40004400 	.word	0x40004400
 80053ac:	40004404 	.word	0x40004404
 80053b0:	200192e0 	.word	0x200192e0
 80053b4:	200192e4 	.word	0x200192e4
 80053b8:	4000440c 	.word	0x4000440c

080053bc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80053c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	4000440c 	.word	0x4000440c

080053dc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80053e8:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <HIF_UART_Init+0xc8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a2d      	ldr	r2, [pc, #180]	@ (80054a4 <HIF_UART_Init+0xc8>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80053f4:	4b2c      	ldr	r3, [pc, #176]	@ (80054a8 <HIF_UART_Init+0xcc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2b      	ldr	r2, [pc, #172]	@ (80054a8 <HIF_UART_Init+0xcc>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005400:	4b2a      	ldr	r3, [pc, #168]	@ (80054ac <HIF_UART_Init+0xd0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800540c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8005414:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005416:	4a25      	ldr	r2, [pc, #148]	@ (80054ac <HIF_UART_Init+0xd0>)
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800541c:	4b24      	ldr	r3, [pc, #144]	@ (80054b0 <HIF_UART_Init+0xd4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005428:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8005430:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <HIF_UART_Init+0xd4>)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005438:	4b1e      	ldr	r3, [pc, #120]	@ (80054b4 <HIF_UART_Init+0xd8>)
 800543a:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 800543e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005440:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <HIF_UART_Init+0xdc>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005446:	4b1d      	ldr	r3, [pc, #116]	@ (80054bc <HIF_UART_Init+0xe0>)
 8005448:	2280      	movs	r2, #128	@ 0x80
 800544a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005452:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <HIF_UART_Init+0xe4>)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	fbb2 f3f3 	udiv	r3, r2, r3
 800545a:	3301      	adds	r3, #1
 800545c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800546a:	d302      	bcc.n	8005472 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800546c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005470:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	4a11      	ldr	r2, [pc, #68]	@ (80054c4 <HIF_UART_Init+0xe8>)
 800547e:	b29b      	uxth	r3, r3
 8005480:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005482:	4a11      	ldr	r2, [pc, #68]	@ (80054c8 <HIF_UART_Init+0xec>)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005488:	4a10      	ldr	r2, [pc, #64]	@ (80054cc <HIF_UART_Init+0xf0>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800548e:	2106      	movs	r1, #6
 8005490:	2026      	movs	r0, #38	@ 0x26
 8005492:	f7ff feab 	bl	80051ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005496:	2026      	movs	r0, #38	@ 0x26
 8005498:	f7ff fe8a 	bl	80051b0 <__NVIC_EnableIRQ>
}
 800549c:	bf00      	nop
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023840 	.word	0x40023840
 80054a8:	40023830 	.word	0x40023830
 80054ac:	40020020 	.word	0x40020020
 80054b0:	40020000 	.word	0x40020000
 80054b4:	4000440c 	.word	0x4000440c
 80054b8:	40004410 	.word	0x40004410
 80054bc:	40004414 	.word	0x40004414
 80054c0:	0501bd00 	.word	0x0501bd00
 80054c4:	40004408 	.word	0x40004408
 80054c8:	200192e0 	.word	0x200192e0
 80054cc:	200192e4 	.word	0x200192e4

080054d0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054d6:	4b26      	ldr	r3, [pc, #152]	@ (8005570 <_DoInit+0xa0>)
 80054d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80054da:	22a8      	movs	r2, #168	@ 0xa8
 80054dc:	2100      	movs	r1, #0
 80054de:	6838      	ldr	r0, [r7, #0]
 80054e0:	f002 faac 	bl	8007a3c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2203      	movs	r2, #3
 80054e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2203      	movs	r2, #3
 80054ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4a20      	ldr	r2, [pc, #128]	@ (8005574 <_DoInit+0xa4>)
 80054f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005578 <_DoInit+0xa8>)
 80054fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005502:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2200      	movs	r2, #0
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4a16      	ldr	r2, [pc, #88]	@ (8005574 <_DoInit+0xa4>)
 800551a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4a17      	ldr	r2, [pc, #92]	@ (800557c <_DoInit+0xac>)
 8005520:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2210      	movs	r2, #16
 8005526:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800553a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e00c      	b.n	800555e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f1c3 030f 	rsb	r3, r3, #15
 800554a:	4a0d      	ldr	r2, [pc, #52]	@ (8005580 <_DoInit+0xb0>)
 800554c:	5cd1      	ldrb	r1, [r2, r3]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	460a      	mov	r2, r1
 8005556:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b0f      	cmp	r3, #15
 8005562:	d9ef      	bls.n	8005544 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005564:	f3bf 8f5f 	dmb	sy
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	200192e8 	.word	0x200192e8
 8005574:	08007c3c 	.word	0x08007c3c
 8005578:	20019390 	.word	0x20019390
 800557c:	20019790 	.word	0x20019790
 8005580:	08007c7c 	.word	0x08007c7c

08005584 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	@ 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005590:	2300      	movs	r3, #0
 8005592:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d905      	bls.n	80055b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	3b01      	subs	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b2:	e007      	b.n	80055c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	69b9      	ldr	r1, [r7, #24]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	3b01      	subs	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ce:	4293      	cmp	r3, r2
 80055d0:	bf28      	it	cs
 80055d2:	4613      	movcs	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80055d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4293      	cmp	r3, r2
 80055dc:	bf28      	it	cs
 80055de:	4613      	movcs	r3, r2
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80055ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	6978      	ldr	r0, [r7, #20]
 80055f2:	f002 fa4f 	bl	8007a94 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	4413      	add	r3, r2
 80055fc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005602:	4413      	add	r3, r2
 8005604:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	4413      	add	r3, r2
 8005614:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	429a      	cmp	r2, r3
 800561e:	d101      	bne.n	8005624 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005624:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1b2      	bne.n	800559a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005634:	6a3b      	ldr	r3, [r7, #32]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3728      	adds	r7, #40	@ 0x28
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	429a      	cmp	r2, r3
 8005660:	d911      	bls.n	8005686 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f002 fa0f 	bl	8007a94 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005676:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	441a      	add	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005684:	e01f      	b.n	80056c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	6938      	ldr	r0, [r7, #16]
 800569a:	f002 f9fb 	bl	8007a94 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	4413      	add	r3, r2
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f002 f9ec 	bl	8007a94 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	60da      	str	r2, [r3, #12]
}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d808      	bhi.n	80056fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	3b01      	subs	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e004      	b.n	8005706 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005706:	697b      	ldr	r3, [r7, #20]
}
 8005708:	4618      	mov	r0, r3
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08c      	sub	sp, #48	@ 0x30
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005720:	4b3e      	ldr	r3, [pc, #248]	@ (800581c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b53      	cmp	r3, #83	@ 0x53
 800572c:	d001      	beq.n	8005732 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800572e:	f7ff fecf 	bl	80054d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4a37      	ldr	r2, [pc, #220]	@ (800581c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005740:	4413      	add	r3, r2
 8005742:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005754:	2300      	movs	r3, #0
 8005756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	429a      	cmp	r2, r3
 800575e:	d92b      	bls.n	80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4293      	cmp	r3, r2
 8005770:	bf28      	it	cs
 8005772:	4613      	movcs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	4413      	add	r3, r2
 800577e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005786:	f002 f985 	bl	8007a94 <memcpy>
    NumBytesRead += NumBytesRem;
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d101      	bne.n	80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80057b4:	2300      	movs	r3, #0
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	bf28      	it	cs
 80057c8:	4613      	movcs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d019      	beq.n	8005806 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d8:	4413      	add	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	6939      	ldr	r1, [r7, #16]
 80057e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057e2:	f002 f957 	bl	8007a94 <memcpy>
    NumBytesRead += NumBytesRem;
 80057e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005810:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	@ 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200192e8 	.word	0x200192e8

08005820 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800582c:	4b3e      	ldr	r3, [pc, #248]	@ (8005928 <SEGGER_RTT_ReadNoLock+0x108>)
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b53      	cmp	r3, #83	@ 0x53
 8005838:	d001      	beq.n	800583e <SEGGER_RTT_ReadNoLock+0x1e>
 800583a:	f7ff fe49 	bl	80054d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4613      	mov	r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	3360      	adds	r3, #96	@ 0x60
 800584a:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <SEGGER_RTT_ReadNoLock+0x108>)
 800584c:	4413      	add	r3, r2
 800584e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005860:	2300      	movs	r3, #0
 8005862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d92b      	bls.n	80058c4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4293      	cmp	r3, r2
 800587c:	bf28      	it	cs
 800587e:	4613      	movcs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	4413      	add	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005892:	f002 f8ff 	bl	8007a94 <memcpy>
    NumBytesRead += NumBytesRem;
 8005896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	4413      	add	r3, r2
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058bc:	429a      	cmp	r2, r3
 80058be:	d101      	bne.n	80058c4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bf28      	it	cs
 80058d4:	4613      	movcs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d019      	beq.n	8005912 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	4413      	add	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058ee:	f002 f8d1 	bl	8007a94 <memcpy>
    NumBytesRead += NumBytesRem;
 80058f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	4413      	add	r3, r2
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80058fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800590a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800591c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800591e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005920:	4618      	mov	r0, r3
 8005922:	3730      	adds	r7, #48	@ 0x30
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	200192e8 	.word	0x200192e8

0800592c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	3360      	adds	r3, #96	@ 0x60
 8005948:	4a1f      	ldr	r2, [pc, #124]	@ (80059c8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800594a:	4413      	add	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d029      	beq.n	80059aa <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005956:	2b02      	cmp	r3, #2
 8005958:	d82e      	bhi.n	80059b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d013      	beq.n	800598a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005962:	e029      	b.n	80059b8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005964:	6978      	ldr	r0, [r7, #20]
 8005966:	f7ff feb2 	bl	80056ce <_GetAvailWriteSpace>
 800596a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d202      	bcs.n	800597a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005978:	e021      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	f7ff fe5b 	bl	800563e <_WriteNoCheck>
    break;
 8005988:	e019      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f7ff fe9f 	bl	80056ce <_GetAvailWriteSpace>
 8005990:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4293      	cmp	r3, r2
 8005998:	bf28      	it	cs
 800599a:	4613      	movcs	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	69b9      	ldr	r1, [r7, #24]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff fe4b 	bl	800563e <_WriteNoCheck>
    break;
 80059a8:	e009      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	6978      	ldr	r0, [r7, #20]
 80059b0:	f7ff fde8 	bl	8005584 <_WriteBlocking>
 80059b4:	61f8      	str	r0, [r7, #28]
    break;
 80059b6:	e002      	b.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
    break;
 80059bc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059be:	69fb      	ldr	r3, [r7, #28]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200192e8 	.word	0x200192e8

080059cc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80059d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a14 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b53      	cmp	r3, #83	@ 0x53
 80059e4:	d001      	beq.n	80059ea <SEGGER_RTT_WriteDownBuffer+0x1e>
 80059e6:	f7ff fd73 	bl	80054d0 <_DoInit>
  SEGGER_RTT_LOCK();
 80059ea:	f3ef 8311 	mrs	r3, BASEPRI
 80059ee:	f04f 0120 	mov.w	r1, #32
 80059f2:	f381 8811 	msr	BASEPRI, r1
 80059f6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff95 	bl	800592c <SEGGER_RTT_WriteDownBufferNoLock>
 8005a02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a0a:	697b      	ldr	r3, [r7, #20]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	200192e8 	.word	0x200192e8

08005a18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a26:	4b3d      	ldr	r3, [pc, #244]	@ (8005b1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a28:	61bb      	str	r3, [r7, #24]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b53      	cmp	r3, #83	@ 0x53
 8005a32:	d001      	beq.n	8005a38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a34:	f7ff fd4c 	bl	80054d0 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a38:	f3ef 8311 	mrs	r3, BASEPRI
 8005a3c:	f04f 0120 	mov.w	r1, #32
 8005a40:	f381 8811 	msr	BASEPRI, r1
 8005a44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a46:	4b35      	ldr	r3, [pc, #212]	@ (8005b1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a4e:	6939      	ldr	r1, [r7, #16]
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3304      	adds	r3, #4
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	dbeb      	blt.n	8005a4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a76:	e000      	b.n	8005a7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	da3f      	bge.n	8005b04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a84:	6939      	ldr	r1, [r7, #16]
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a98:	6939      	ldr	r1, [r7, #16]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005aae:	6939      	ldr	r1, [r7, #16]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	3320      	adds	r3, #32
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ac2:	6939      	ldr	r1, [r7, #16]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3328      	adds	r3, #40	@ 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3324      	adds	r3, #36	@ 0x24
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	332c      	adds	r3, #44	@ 0x2c
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005afe:	f3bf 8f5f 	dmb	sy
 8005b02:	e002      	b.n	8005b0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b04:	f04f 33ff 	mov.w	r3, #4294967295
 8005b08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b10:	69fb      	ldr	r3, [r7, #28]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200192e8 	.word	0x200192e8

08005b20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	@ 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005b2e:	4b21      	ldr	r3, [pc, #132]	@ (8005bb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b30:	623b      	str	r3, [r7, #32]
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b53      	cmp	r3, #83	@ 0x53
 8005b3a:	d001      	beq.n	8005b40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b3c:	f7ff fcc8 	bl	80054d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b40:	4b1c      	ldr	r3, [pc, #112]	@ (8005bb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b42:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d82c      	bhi.n	8005ba4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b4e:	f04f 0120 	mov.w	r1, #32
 8005b52:	f381 8811 	msr	BASEPRI, r1
 8005b56:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	3360      	adds	r3, #96	@ 0x60
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00e      	beq.n	8005b8e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2200      	movs	r2, #0
 8005b86:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b92:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba2:	e002      	b.n	8005baa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	@ 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	200192e8 	.word	0x200192e8

08005bb8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d105      	bne.n	8005bd6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	60fa      	str	r2, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	e022      	b.n	8005c1c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	60fa      	str	r2, [r7, #12]
 8005be0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b80      	cmp	r3, #128	@ 0x80
 8005be6:	d90a      	bls.n	8005bfe <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005bec:	e007      	b.n	8005bfe <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	1c53      	adds	r3, r2, #1
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	60f9      	str	r1, [r7, #12]
 8005bfa:	7812      	ldrb	r2, [r2, #0]
 8005bfc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	1e5a      	subs	r2, r3, #1
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <_EncodeStr+0x58>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ee      	bne.n	8005bee <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	371c      	adds	r7, #28
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3307      	adds	r3, #7
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c4a:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <_HandleIncomingPacket+0xd8>)
 8005c4c:	7e1b      	ldrb	r3, [r3, #24]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	1cfb      	adds	r3, r7, #3
 8005c52:	2201      	movs	r2, #1
 8005c54:	4619      	mov	r1, r3
 8005c56:	f7ff fde3 	bl	8005820 <SEGGER_RTT_ReadNoLock>
 8005c5a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d057      	beq.n	8005d12 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	2b80      	cmp	r3, #128	@ 0x80
 8005c66:	d031      	beq.n	8005ccc <_HandleIncomingPacket+0x88>
 8005c68:	2b80      	cmp	r3, #128	@ 0x80
 8005c6a:	dc40      	bgt.n	8005cee <_HandleIncomingPacket+0xaa>
 8005c6c:	2b07      	cmp	r3, #7
 8005c6e:	dc15      	bgt.n	8005c9c <_HandleIncomingPacket+0x58>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dd3c      	ble.n	8005cee <_HandleIncomingPacket+0xaa>
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b06      	cmp	r3, #6
 8005c78:	d839      	bhi.n	8005cee <_HandleIncomingPacket+0xaa>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <_HandleIncomingPacket+0x3c>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca3 	.word	0x08005ca3
 8005c84:	08005ca9 	.word	0x08005ca9
 8005c88:	08005caf 	.word	0x08005caf
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cbb 	.word	0x08005cbb
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c9e:	d033      	beq.n	8005d08 <_HandleIncomingPacket+0xc4>
 8005ca0:	e025      	b.n	8005cee <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005ca2:	f001 f8a1 	bl	8006de8 <SEGGER_SYSVIEW_Start>
      break;
 8005ca6:	e034      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ca8:	f001 f95a 	bl	8006f60 <SEGGER_SYSVIEW_Stop>
      break;
 8005cac:	e031      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cae:	f001 fb33 	bl	8007318 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cb2:	e02e      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005cb4:	f001 faf8 	bl	80072a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cb8:	e02b      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cba:	f001 f977 	bl	8006fac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cbe:	e028      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005cc0:	f001 fdd0 	bl	8007864 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cc4:	e025      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cc6:	f001 fdaf 	bl	8007828 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cca:	e022      	b.n	8005d12 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ccc:	4b13      	ldr	r3, [pc, #76]	@ (8005d1c <_HandleIncomingPacket+0xd8>)
 8005cce:	7e1b      	ldrb	r3, [r3, #24]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	1cfb      	adds	r3, r7, #3
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f7ff fda2 	bl	8005820 <SEGGER_RTT_ReadNoLock>
 8005cdc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d013      	beq.n	8005d0c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 fd14 	bl	8007714 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cec:	e00e      	b.n	8005d0c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da0c      	bge.n	8005d10 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cf6:	4b09      	ldr	r3, [pc, #36]	@ (8005d1c <_HandleIncomingPacket+0xd8>)
 8005cf8:	7e1b      	ldrb	r3, [r3, #24]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	1cfb      	adds	r3, r7, #3
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4619      	mov	r1, r3
 8005d02:	f7ff fd8d 	bl	8005820 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d06:	e003      	b.n	8005d10 <_HandleIncomingPacket+0xcc>
      break;
 8005d08:	bf00      	nop
 8005d0a:	e002      	b.n	8005d12 <_HandleIncomingPacket+0xce>
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e000      	b.n	8005d12 <_HandleIncomingPacket+0xce>
      break;
 8005d10:	bf00      	nop
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2001a7a8 	.word	0x2001a7a8

08005d20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08c      	sub	sp, #48	@ 0x30
 8005d24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d26:	2301      	movs	r3, #1
 8005d28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d34:	4b32      	ldr	r3, [pc, #200]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d3a:	e00b      	b.n	8005d54 <_TrySendOverflowPacket+0x34>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d42:	1c59      	adds	r1, r3, #1
 8005d44:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	09db      	lsrs	r3, r3, #7
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d58:	d8f0      	bhi.n	8005d3c <_TrySendOverflowPacket+0x1c>
 8005d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d6a:	4b26      	ldr	r3, [pc, #152]	@ (8005e04 <_TrySendOverflowPacket+0xe4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d70:	4b23      	ldr	r3, [pc, #140]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	e00b      	b.n	8005d9c <_TrySendOverflowPacket+0x7c>
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	1c59      	adds	r1, r3, #1
 8005d8c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	09db      	lsrs	r3, r3, #7
 8005d9a:	623b      	str	r3, [r7, #32]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005da0:	d8f0      	bhi.n	8005d84 <_TrySendOverflowPacket+0x64>
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005db2:	4b13      	ldr	r3, [pc, #76]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	4618      	mov	r0, r3
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	1d3b      	adds	r3, r7, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f7fa fa04 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005dcc:	f7ff faf6 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005ddc:	4b08      	ldr	r3, [pc, #32]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e004      	b.n	8005df4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005dea:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	3301      	adds	r3, #1
 8005df0:	4a03      	ldr	r2, [pc, #12]	@ (8005e00 <_TrySendOverflowPacket+0xe0>)
 8005df2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005df4:	693b      	ldr	r3, [r7, #16]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3730      	adds	r7, #48	@ 0x30
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	2001a7a8 	.word	0x2001a7a8
 8005e04:	e0001004 	.word	0xe0001004

08005e08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	@ 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e14:	4b96      	ldr	r3, [pc, #600]	@ (8006070 <_SendPacket+0x268>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d010      	beq.n	8005e3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e1c:	4b94      	ldr	r3, [pc, #592]	@ (8006070 <_SendPacket+0x268>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8130 	beq.w	8006086 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e26:	4b92      	ldr	r3, [pc, #584]	@ (8006070 <_SendPacket+0x268>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d109      	bne.n	8005e42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e2e:	f7ff ff77 	bl	8005d20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e32:	4b8f      	ldr	r3, [pc, #572]	@ (8006070 <_SendPacket+0x268>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	f040 8127 	bne.w	800608a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005e3c:	e001      	b.n	8005e42 <_SendPacket+0x3a>
    goto Send;
 8005e3e:	bf00      	nop
 8005e40:	e000      	b.n	8005e44 <_SendPacket+0x3c>
Send:
 8005e42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b1f      	cmp	r3, #31
 8005e48:	d809      	bhi.n	8005e5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e4a:	4b89      	ldr	r3, [pc, #548]	@ (8006070 <_SendPacket+0x268>)
 8005e4c:	69da      	ldr	r2, [r3, #28]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 8118 	bne.w	800608e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b17      	cmp	r3, #23
 8005e62:	d807      	bhi.n	8005e74 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e0c4      	b.n	8005ffe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e80:	d912      	bls.n	8005ea8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	09da      	lsrs	r2, r3, #7
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	3a01      	subs	r2, #1
 8005e9a:	60fa      	str	r2, [r7, #12]
 8005e9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	e006      	b.n	8005eb6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8005eba:	d807      	bhi.n	8005ecc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	e098      	b.n	8005ffe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ed2:	d212      	bcs.n	8005efa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	09da      	lsrs	r2, r3, #7
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	3a01      	subs	r2, #1
 8005eec:	60fa      	str	r2, [r7, #12]
 8005eee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e081      	b.n	8005ffe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f00:	d21d      	bcs.n	8005f3e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	0b9a      	lsrs	r2, r3, #14
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	09db      	lsrs	r3, r3, #7
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	3a01      	subs	r2, #1
 8005f1c:	60fa      	str	r2, [r7, #12]
 8005f1e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	60fa      	str	r2, [r7, #12]
 8005f32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e05f      	b.n	8005ffe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f44:	d228      	bcs.n	8005f98 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0d5a      	lsrs	r2, r3, #21
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	0b9b      	lsrs	r3, r3, #14
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	3a01      	subs	r2, #1
 8005f60:	60fa      	str	r2, [r7, #12]
 8005f62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	09db      	lsrs	r3, r3, #7
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	3a01      	subs	r2, #1
 8005f76:	60fa      	str	r2, [r7, #12]
 8005f78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	3a01      	subs	r2, #1
 8005f8a:	60fa      	str	r2, [r7, #12]
 8005f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	e032      	b.n	8005ffe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0f1a      	lsrs	r2, r3, #28
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0d5b      	lsrs	r3, r3, #21
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	60fa      	str	r2, [r7, #12]
 8005fb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0b9b      	lsrs	r3, r3, #14
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	60fa      	str	r2, [r7, #12]
 8005fca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	09db      	lsrs	r3, r3, #7
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	3a01      	subs	r2, #1
 8005fde:	60fa      	str	r2, [r7, #12]
 8005fe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	3a01      	subs	r2, #1
 8005ff2:	60fa      	str	r2, [r7, #12]
 8005ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8006074 <_SendPacket+0x26c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006004:	4b1a      	ldr	r3, [pc, #104]	@ (8006070 <_SendPacket+0x268>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	e00b      	b.n	8006030 <_SendPacket+0x228>
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	b2da      	uxtb	r2, r3
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	6279      	str	r1, [r7, #36]	@ 0x24
 8006022:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	09db      	lsrs	r3, r3, #7
 800602e:	623b      	str	r3, [r7, #32]
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	2b7f      	cmp	r3, #127	@ 0x7f
 8006034:	d8f0      	bhi.n	8006018 <_SendPacket+0x210>
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	627a      	str	r2, [r7, #36]	@ 0x24
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006046:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <_SendPacket+0x268>)
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	4618      	mov	r0, r3
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	461a      	mov	r2, r3
 8006054:	68f9      	ldr	r1, [r7, #12]
 8006056:	f7fa f8bb 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800605a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800605c:	f7ff f9ae 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006066:	4a02      	ldr	r2, [pc, #8]	@ (8006070 <_SendPacket+0x268>)
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	60d3      	str	r3, [r2, #12]
 800606c:	e010      	b.n	8006090 <_SendPacket+0x288>
 800606e:	bf00      	nop
 8006070:	2001a7a8 	.word	0x2001a7a8
 8006074:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006078:	4b19      	ldr	r3, [pc, #100]	@ (80060e0 <_SendPacket+0x2d8>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	3301      	adds	r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	4b17      	ldr	r3, [pc, #92]	@ (80060e0 <_SendPacket+0x2d8>)
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e004      	b.n	8006090 <_SendPacket+0x288>
    goto SendDone;
 8006086:	bf00      	nop
 8006088:	e002      	b.n	8006090 <_SendPacket+0x288>
      goto SendDone;
 800608a:	bf00      	nop
 800608c:	e000      	b.n	8006090 <_SendPacket+0x288>
      goto SendDone;
 800608e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006090:	4b13      	ldr	r3, [pc, #76]	@ (80060e0 <_SendPacket+0x2d8>)
 8006092:	7e1b      	ldrb	r3, [r3, #24]
 8006094:	4619      	mov	r1, r3
 8006096:	4a13      	ldr	r2, [pc, #76]	@ (80060e4 <_SendPacket+0x2dc>)
 8006098:	460b      	mov	r3, r1
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	440b      	add	r3, r1
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	336c      	adds	r3, #108	@ 0x6c
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b0e      	ldr	r3, [pc, #56]	@ (80060e0 <_SendPacket+0x2d8>)
 80060a8:	7e1b      	ldrb	r3, [r3, #24]
 80060aa:	4618      	mov	r0, r3
 80060ac:	490d      	ldr	r1, [pc, #52]	@ (80060e4 <_SendPacket+0x2dc>)
 80060ae:	4603      	mov	r3, r0
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4403      	add	r3, r0
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	440b      	add	r3, r1
 80060b8:	3370      	adds	r3, #112	@ 0x70
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d00b      	beq.n	80060d8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80060c0:	4b07      	ldr	r3, [pc, #28]	@ (80060e0 <_SendPacket+0x2d8>)
 80060c2:	789b      	ldrb	r3, [r3, #2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80060c8:	4b05      	ldr	r3, [pc, #20]	@ (80060e0 <_SendPacket+0x2d8>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80060ce:	f7ff fdb9 	bl	8005c44 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80060d2:	4b03      	ldr	r3, [pc, #12]	@ (80060e0 <_SendPacket+0x2d8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80060d8:	bf00      	nop
 80060da:	3728      	adds	r7, #40	@ 0x28
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2001a7a8 	.word	0x2001a7a8
 80060e4:	200192e8 	.word	0x200192e8

080060e8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08a      	sub	sp, #40	@ 0x28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	3301      	adds	r3, #1
 80060fe:	2b80      	cmp	r3, #128	@ 0x80
 8006100:	d80a      	bhi.n	8006118 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6051      	str	r1, [r2, #4]
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b80      	cmp	r3, #128	@ 0x80
 800611e:	d15a      	bne.n	80061d6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	623b      	str	r3, [r7, #32]
 8006140:	e00b      	b.n	800615a <_StoreChar+0x72>
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	6279      	str	r1, [r7, #36]	@ 0x24
 800614c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	623b      	str	r3, [r7, #32]
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2b7f      	cmp	r3, #127	@ 0x7f
 800615e:	d8f0      	bhi.n	8006142 <_StoreChar+0x5a>
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	627a      	str	r2, [r7, #36]	@ 0x24
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	2300      	movs	r3, #0
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	e00b      	b.n	8006192 <_StoreChar+0xaa>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	61f9      	str	r1, [r7, #28]
 8006184:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	09db      	lsrs	r3, r3, #7
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b7f      	cmp	r3, #127	@ 0x7f
 8006196:	d8f0      	bhi.n	800617a <_StoreChar+0x92>
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	61fa      	str	r2, [r7, #28]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	221a      	movs	r2, #26
 80061ae:	6939      	ldr	r1, [r7, #16]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fe29 	bl	8005e08 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fd35 	bl	8005c2a <_PreparePacket>
 80061c0:	4602      	mov	r2, r0
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
  }
}
 80061d6:	bf00      	nop
 80061d8:	3728      	adds	r7, #40	@ 0x28
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	@ 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80061f2:	2301      	movs	r3, #1
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80061f6:	2301      	movs	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80061fa:	e007      	b.n	800620c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	fbb2 f3f3 	udiv	r3, r2, r3
 8006204:	623b      	str	r3, [r7, #32]
    Width++;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	3301      	adds	r3, #1
 800620a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	429a      	cmp	r2, r3
 8006212:	d2f3      	bcs.n	80061fc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	429a      	cmp	r2, r3
 800621a:	d901      	bls.n	8006220 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d000      	beq.n	800622c <_PrintUnsigned+0x4c>
 800622a:	e01f      	b.n	800626c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01c      	beq.n	800626c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <_PrintUnsigned+0x68>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <_PrintUnsigned+0x68>
        c = '0';
 8006242:	2330      	movs	r3, #48	@ 0x30
 8006244:	76fb      	strb	r3, [r7, #27]
 8006246:	e001      	b.n	800624c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006248:	2320      	movs	r3, #32
 800624a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800624c:	e007      	b.n	800625e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	3b01      	subs	r3, #1
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006254:	7efb      	ldrb	r3, [r7, #27]
 8006256:	4619      	mov	r1, r3
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff ff45 	bl	80060e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <_PrintUnsigned+0x8c>
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	429a      	cmp	r2, r3
 800626a:	d3f0      	bcc.n	800624e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d903      	bls.n	800627a <_PrintUnsigned+0x9a>
      NumDigits--;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	3b01      	subs	r3, #1
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	e009      	b.n	800628e <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006282:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d200      	bcs.n	800628e <_PrintUnsigned+0xae>
        break;
 800628c:	e005      	b.n	800629a <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	fb02 f303 	mul.w	r3, r2, r3
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006298:	e7e8      	b.n	800626c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a8:	fb02 f303 	mul.w	r3, r2, r3
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <_PrintUnsigned+0x128>)
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	4413      	add	r3, r2
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff ff13 	bl	80060e8 <_StoreChar>
    Digit /= Base;
 80062c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e3      	bne.n	800629a <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80062d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00e      	beq.n	8006300 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062e2:	e006      	b.n	80062f2 <_PrintUnsigned+0x112>
        FieldWidth--;
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	3b01      	subs	r3, #1
 80062e8:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80062ea:	2120      	movs	r1, #32
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff fefb 	bl	80060e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <_PrintUnsigned+0x120>
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d3f1      	bcc.n	80062e4 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8006300:	bf00      	nop
 8006302:	3728      	adds	r7, #40	@ 0x28
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	08007c9c 	.word	0x08007c9c

0800630c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	bfb8      	it	lt
 8006320:	425b      	neglt	r3, r3
 8006322:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006324:	2301      	movs	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006328:	e007      	b.n	800633a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006332:	613b      	str	r3, [r7, #16]
    Width++;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3301      	adds	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	daf3      	bge.n	800632a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	429a      	cmp	r2, r3
 8006348:	d901      	bls.n	800634e <_PrintInt+0x42>
    Width = NumDigits;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <_PrintInt+0x5e>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	db04      	blt.n	8006364 <_PrintInt+0x58>
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <_PrintInt+0x5e>
    FieldWidth--;
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	3b01      	subs	r3, #1
 8006368:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800636a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <_PrintInt+0x6e>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d016      	beq.n	80063a8 <_PrintInt+0x9c>
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d111      	bne.n	80063a8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800638a:	e006      	b.n	800639a <_PrintInt+0x8e>
        FieldWidth--;
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	3b01      	subs	r3, #1
 8006390:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006392:	2120      	movs	r1, #32
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff fea7 	bl	80060e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <_PrintInt+0x9c>
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3f1      	bcc.n	800638c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da07      	bge.n	80063be <_PrintInt+0xb2>
    v = -v;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	425b      	negs	r3, r3
 80063b2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80063b4:	212d      	movs	r1, #45	@ 0x2d
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fe96 	bl	80060e8 <_StoreChar>
 80063bc:	e008      	b.n	80063d0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80063c8:	212b      	movs	r1, #43	@ 0x2b
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f7ff fe8c 	bl	80060e8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d019      	beq.n	800640e <_PrintInt+0x102>
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d114      	bne.n	800640e <_PrintInt+0x102>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d111      	bne.n	800640e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80063f0:	e006      	b.n	8006400 <_PrintInt+0xf4>
        FieldWidth--;
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80063f8:	2130      	movs	r1, #48	@ 0x30
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff fe74 	bl	80060e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <_PrintInt+0x102>
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	429a      	cmp	r2, r3
 800640c:	d3f1      	bcc.n	80063f2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800640e:	68b9      	ldr	r1, [r7, #8]
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	9301      	str	r3, [sp, #4]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f7ff fedf 	bl	80061e0 <_PrintUnsigned>
}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b098      	sub	sp, #96	@ 0x60
 8006430:	af02      	add	r7, sp, #8
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006438:	f3ef 8311 	mrs	r3, BASEPRI
 800643c:	f04f 0120 	mov.w	r1, #32
 8006440:	f381 8811 	msr	BASEPRI, r1
 8006444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006446:	48b7      	ldr	r0, [pc, #732]	@ (8006724 <_VPrintTarget+0x2f8>)
 8006448:	f7ff fbef 	bl	8005c2a <_PreparePacket>
 800644c:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800644e:	4bb5      	ldr	r3, [pc, #724]	@ (8006724 <_VPrintTarget+0x2f8>)
 8006450:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8006452:	2300      	movs	r3, #0
 8006454:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	3301      	adds	r3, #1
 800645e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006472:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 81a8 	beq.w	80067cc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 800647c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006480:	2b25      	cmp	r3, #37	@ 0x25
 8006482:	f040 8195 	bne.w	80067b0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006486:	2300      	movs	r3, #0
 8006488:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800648a:	2301      	movs	r3, #1
 800648c:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006496:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800649a:	3b23      	subs	r3, #35	@ 0x23
 800649c:	2b0d      	cmp	r3, #13
 800649e:	d83f      	bhi.n	8006520 <_VPrintTarget+0xf4>
 80064a0:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <_VPrintTarget+0x7c>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	08006511 	.word	0x08006511
 80064ac:	08006521 	.word	0x08006521
 80064b0:	08006521 	.word	0x08006521
 80064b4:	08006521 	.word	0x08006521
 80064b8:	08006521 	.word	0x08006521
 80064bc:	08006521 	.word	0x08006521
 80064c0:	08006521 	.word	0x08006521
 80064c4:	08006521 	.word	0x08006521
 80064c8:	08006501 	.word	0x08006501
 80064cc:	08006521 	.word	0x08006521
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	08006521 	.word	0x08006521
 80064d8:	08006521 	.word	0x08006521
 80064dc:	080064f1 	.word	0x080064f1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80064e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	e01a      	b.n	8006526 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80064f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064f2:	f043 0302 	orr.w	r3, r3, #2
 80064f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3301      	adds	r3, #1
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e012      	b.n	8006526 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e00a      	b.n	8006526 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006512:	f043 0308 	orr.w	r3, r3, #8
 8006516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	e002      	b.n	8006526 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006520:	2300      	movs	r3, #0
 8006522:	653b      	str	r3, [r7, #80]	@ 0x50
 8006524:	bf00      	nop
        }
      } while (v);
 8006526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1b0      	bne.n	800648e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800652c:	2300      	movs	r3, #0
 800652e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8006538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800653c:	2b2f      	cmp	r3, #47	@ 0x2f
 800653e:	d912      	bls.n	8006566 <_VPrintTarget+0x13a>
 8006540:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006544:	2b39      	cmp	r3, #57	@ 0x39
 8006546:	d80e      	bhi.n	8006566 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800654e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	461a      	mov	r2, r3
 800655a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800655e:	4413      	add	r3, r2
 8006560:	3b30      	subs	r3, #48	@ 0x30
 8006562:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006564:	e7e4      	b.n	8006530 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006566:	2300      	movs	r3, #0
 8006568:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006572:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006576:	2b2e      	cmp	r3, #46	@ 0x2e
 8006578:	d11d      	bne.n	80065b6 <_VPrintTarget+0x18a>
        sFormat++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006588:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800658c:	2b2f      	cmp	r3, #47	@ 0x2f
 800658e:	d912      	bls.n	80065b6 <_VPrintTarget+0x18a>
 8006590:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006594:	2b39      	cmp	r3, #57	@ 0x39
 8006596:	d80e      	bhi.n	80065b6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800659e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	461a      	mov	r2, r3
 80065aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065ae:	4413      	add	r3, r2
 80065b0:	3b30      	subs	r3, #48	@ 0x30
 80065b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 80065b4:	e7e4      	b.n	8006580 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80065be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065c2:	2b6c      	cmp	r3, #108	@ 0x6c
 80065c4:	d003      	beq.n	80065ce <_VPrintTarget+0x1a2>
 80065c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065ca:	2b68      	cmp	r3, #104	@ 0x68
 80065cc:	d107      	bne.n	80065de <_VPrintTarget+0x1b2>
          c = *sFormat;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3301      	adds	r3, #1
 80065da:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80065dc:	e7ef      	b.n	80065be <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80065de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065e2:	2b25      	cmp	r3, #37	@ 0x25
 80065e4:	f000 80d8 	beq.w	8006798 <_VPrintTarget+0x36c>
 80065e8:	2b25      	cmp	r3, #37	@ 0x25
 80065ea:	f2c0 80dc 	blt.w	80067a6 <_VPrintTarget+0x37a>
 80065ee:	2b78      	cmp	r3, #120	@ 0x78
 80065f0:	f300 80d9 	bgt.w	80067a6 <_VPrintTarget+0x37a>
 80065f4:	2b58      	cmp	r3, #88	@ 0x58
 80065f6:	f2c0 80d6 	blt.w	80067a6 <_VPrintTarget+0x37a>
 80065fa:	3b58      	subs	r3, #88	@ 0x58
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	f200 80d2 	bhi.w	80067a6 <_VPrintTarget+0x37a>
 8006602:	a201      	add	r2, pc, #4	@ (adr r2, 8006608 <_VPrintTarget+0x1dc>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	080066ff 	.word	0x080066ff
 800660c:	080067a7 	.word	0x080067a7
 8006610:	080067a7 	.word	0x080067a7
 8006614:	080067a7 	.word	0x080067a7
 8006618:	080067a7 	.word	0x080067a7
 800661c:	080067a7 	.word	0x080067a7
 8006620:	080067a7 	.word	0x080067a7
 8006624:	080067a7 	.word	0x080067a7
 8006628:	080067a7 	.word	0x080067a7
 800662c:	080067a7 	.word	0x080067a7
 8006630:	080067a7 	.word	0x080067a7
 8006634:	0800668d 	.word	0x0800668d
 8006638:	080066b3 	.word	0x080066b3
 800663c:	080067a7 	.word	0x080067a7
 8006640:	080067a7 	.word	0x080067a7
 8006644:	080067a7 	.word	0x080067a7
 8006648:	080067a7 	.word	0x080067a7
 800664c:	080067a7 	.word	0x080067a7
 8006650:	080067a7 	.word	0x080067a7
 8006654:	080067a7 	.word	0x080067a7
 8006658:	080067a7 	.word	0x080067a7
 800665c:	080067a7 	.word	0x080067a7
 8006660:	080067a7 	.word	0x080067a7
 8006664:	080067a7 	.word	0x080067a7
 8006668:	08006773 	.word	0x08006773
 800666c:	080067a7 	.word	0x080067a7
 8006670:	080067a7 	.word	0x080067a7
 8006674:	08006729 	.word	0x08006729
 8006678:	080067a7 	.word	0x080067a7
 800667c:	080066d9 	.word	0x080066d9
 8006680:	080067a7 	.word	0x080067a7
 8006684:	080067a7 	.word	0x080067a7
 8006688:	080066ff 	.word	0x080066ff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	1d19      	adds	r1, r3, #4
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6011      	str	r1, [r2, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800669a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800669c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 80066a0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80066a4:	f107 0310 	add.w	r3, r7, #16
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fd1c 	bl	80060e8 <_StoreChar>
        break;
 80066b0:	e07a      	b.n	80067a8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	1d19      	adds	r1, r3, #4
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6011      	str	r1, [r2, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80066c0:	f107 0010 	add.w	r0, r7, #16
 80066c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ce:	220a      	movs	r2, #10
 80066d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066d2:	f7ff fe1b 	bl	800630c <_PrintInt>
        break;
 80066d6:	e067      	b.n	80067a8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	1d19      	adds	r1, r3, #4
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6011      	str	r1, [r2, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80066e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80066e8:	f107 0010 	add.w	r0, r7, #16
 80066ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066f6:	220a      	movs	r2, #10
 80066f8:	f7ff fd72 	bl	80061e0 <_PrintUnsigned>
        break;
 80066fc:	e054      	b.n	80067a8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	1d19      	adds	r1, r3, #4
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6011      	str	r1, [r2, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800670c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800670e:	f107 0010 	add.w	r0, r7, #16
 8006712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800671c:	2210      	movs	r2, #16
 800671e:	f7ff fd5f 	bl	80061e0 <_PrintUnsigned>
        break;
 8006722:	e041      	b.n	80067a8 <_VPrintTarget+0x37c>
 8006724:	2001a7d8 	.word	0x2001a7d8
      case 's':
        s = va_arg(*pParamList, const char*);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	1d19      	adds	r1, r3, #4
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6011      	str	r1, [r2, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8006736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <_VPrintTarget+0x314>
          s = "(null)";
 800673c:	4b4a      	ldr	r3, [pc, #296]	@ (8006868 <_VPrintTarget+0x43c>)
 800673e:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8006740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8006748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674a:	3301      	adds	r3, #1
 800674c:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 800674e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8006756:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800675a:	f107 0310 	add.w	r3, r7, #16
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff fcc1 	bl	80060e8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b7f      	cmp	r3, #127	@ 0x7f
 800676a:	d9e9      	bls.n	8006740 <_VPrintTarget+0x314>
        break;
 800676c:	e01c      	b.n	80067a8 <_VPrintTarget+0x37c>
            break;
 800676e:	bf00      	nop
        break;
 8006770:	e01a      	b.n	80067a8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	1d19      	adds	r1, r3, #4
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6011      	str	r1, [r2, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006780:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006782:	f107 0010 	add.w	r0, r7, #16
 8006786:	2300      	movs	r3, #0
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	2308      	movs	r3, #8
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	2308      	movs	r3, #8
 8006790:	2210      	movs	r2, #16
 8006792:	f7ff fd25 	bl	80061e0 <_PrintUnsigned>
        break;
 8006796:	e007      	b.n	80067a8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	2125      	movs	r1, #37	@ 0x25
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fca2 	bl	80060e8 <_StoreChar>
        break;
 80067a4:	e000      	b.n	80067a8 <_VPrintTarget+0x37c>
      default:
        break;
 80067a6:	bf00      	nop
      }
      sFormat++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e007      	b.n	80067c0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 80067b0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80067b4:	f107 0310 	add.w	r3, r7, #16
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fc94 	bl	80060e8 <_StoreChar>
    }
  } while (*sFormat);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f47f ae4d 	bne.w	8006464 <_VPrintTarget+0x38>
 80067ca:	e000      	b.n	80067ce <_VPrintTarget+0x3a2>
      break;
 80067cc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d041      	beq.n	8006858 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80067d4:	6a3a      	ldr	r2, [r7, #32]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067e4:	e00b      	b.n	80067fe <_VPrintTarget+0x3d2>
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ec:	1c59      	adds	r1, r3, #1
 80067ee:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80067f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fa:	09db      	lsrs	r3, r3, #7
 80067fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	2b7f      	cmp	r3, #127	@ 0x7f
 8006802:	d8f0      	bhi.n	80067e6 <_VPrintTarget+0x3ba>
 8006804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800680a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006812:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
 8006818:	2300      	movs	r3, #0
 800681a:	633b      	str	r3, [r7, #48]	@ 0x30
 800681c:	e00b      	b.n	8006836 <_VPrintTarget+0x40a>
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	6379      	str	r1, [r7, #52]	@ 0x34
 8006828:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	09db      	lsrs	r3, r3, #7
 8006834:	633b      	str	r3, [r7, #48]	@ 0x30
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	2b7f      	cmp	r3, #127	@ 0x7f
 800683a:	d8f0      	bhi.n	800681e <_VPrintTarget+0x3f2>
 800683c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	637a      	str	r2, [r7, #52]	@ 0x34
 8006842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	6979      	ldr	r1, [r7, #20]
 8006850:	221a      	movs	r2, #26
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fad8 	bl	8005e08 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800685a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800685e:	bf00      	nop
 8006860:	3758      	adds	r7, #88	@ 0x58
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	08007c48 	.word	0x08007c48

0800686c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800687a:	2300      	movs	r3, #0
 800687c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006880:	4917      	ldr	r1, [pc, #92]	@ (80068e0 <SEGGER_SYSVIEW_Init+0x74>)
 8006882:	4818      	ldr	r0, [pc, #96]	@ (80068e4 <SEGGER_SYSVIEW_Init+0x78>)
 8006884:	f7ff f8c8 	bl	8005a18 <SEGGER_RTT_AllocUpBuffer>
 8006888:	4603      	mov	r3, r0
 800688a:	b2da      	uxtb	r2, r3
 800688c:	4b16      	ldr	r3, [pc, #88]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800688e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006890:	4b15      	ldr	r3, [pc, #84]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006892:	785a      	ldrb	r2, [r3, #1]
 8006894:	4b14      	ldr	r3, [pc, #80]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006896:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006898:	4b13      	ldr	r3, [pc, #76]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 800689a:	7e1b      	ldrb	r3, [r3, #24]
 800689c:	4618      	mov	r0, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2308      	movs	r3, #8
 80068a4:	4a11      	ldr	r2, [pc, #68]	@ (80068ec <SEGGER_SYSVIEW_Init+0x80>)
 80068a6:	490f      	ldr	r1, [pc, #60]	@ (80068e4 <SEGGER_SYSVIEW_Init+0x78>)
 80068a8:	f7ff f93a 	bl	8005b20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80068ac:	4b0e      	ldr	r3, [pc, #56]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80068b2:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <SEGGER_SYSVIEW_Init+0x84>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a0c      	ldr	r2, [pc, #48]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068b8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80068ba:	4a0b      	ldr	r2, [pc, #44]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80068c0:	4a09      	ldr	r2, [pc, #36]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80068c6:	4a08      	ldr	r2, [pc, #32]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80068cc:	4a06      	ldr	r2, [pc, #24]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80068d2:	4b05      	ldr	r3, [pc, #20]	@ (80068e8 <SEGGER_SYSVIEW_Init+0x7c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	200197a0 	.word	0x200197a0
 80068e4:	08007c50 	.word	0x08007c50
 80068e8:	2001a7a8 	.word	0x2001a7a8
 80068ec:	2001a7a0 	.word	0x2001a7a0
 80068f0:	e0001004 	.word	0xe0001004

080068f4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80068fc:	4a04      	ldr	r2, [pc, #16]	@ (8006910 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6113      	str	r3, [r2, #16]
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	2001a7a8 	.word	0x2001a7a8

08006914 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800691c:	f3ef 8311 	mrs	r3, BASEPRI
 8006920:	f04f 0120 	mov.w	r1, #32
 8006924:	f381 8811 	msr	BASEPRI, r1
 8006928:	60fb      	str	r3, [r7, #12]
 800692a:	4808      	ldr	r0, [pc, #32]	@ (800694c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800692c:	f7ff f97d 	bl	8005c2a <_PreparePacket>
 8006930:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f7ff fa66 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f383 8811 	msr	BASEPRI, r3
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	2001a7d8 	.word	0x2001a7d8

08006950 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	4816      	ldr	r0, [pc, #88]	@ (80069c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800696a:	f7ff f95e 	bl	8005c2a <_PreparePacket>
 800696e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e00b      	b.n	8006996 <SEGGER_SYSVIEW_RecordU32+0x46>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	61f9      	str	r1, [r7, #28]
 8006988:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	09db      	lsrs	r3, r3, #7
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b7f      	cmp	r3, #127	@ 0x7f
 800699a:	d8f0      	bhi.n	800697e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	61fa      	str	r2, [r7, #28]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	6938      	ldr	r0, [r7, #16]
 80069b2:	f7ff fa29 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f383 8811 	msr	BASEPRI, r3
}
 80069bc:	bf00      	nop
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	2001a7d8 	.word	0x2001a7d8

080069c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08c      	sub	sp, #48	@ 0x30
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80069d4:	f3ef 8311 	mrs	r3, BASEPRI
 80069d8:	f04f 0120 	mov.w	r1, #32
 80069dc:	f381 8811 	msr	BASEPRI, r1
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	4825      	ldr	r0, [pc, #148]	@ (8006a78 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80069e4:	f7ff f921 	bl	8005c2a <_PreparePacket>
 80069e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f6:	e00b      	b.n	8006a10 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	1c59      	adds	r1, r3, #1
 8006a00:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	09db      	lsrs	r3, r3, #7
 8006a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a14:	d8f0      	bhi.n	80069f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]
 8006a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	623b      	str	r3, [r7, #32]
 8006a2e:	e00b      	b.n	8006a48 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	1c59      	adds	r1, r3, #1
 8006a38:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	09db      	lsrs	r3, r3, #7
 8006a46:	623b      	str	r3, [r7, #32]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4c:	d8f0      	bhi.n	8006a30 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a54:	6a3a      	ldr	r2, [r7, #32]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	6979      	ldr	r1, [r7, #20]
 8006a62:	69b8      	ldr	r0, [r7, #24]
 8006a64:	f7ff f9d0 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
}
 8006a6e:	bf00      	nop
 8006a70:	3730      	adds	r7, #48	@ 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2001a7d8 	.word	0x2001a7d8

08006a7c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08e      	sub	sp, #56	@ 0x38
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8e:	f04f 0120 	mov.w	r1, #32
 8006a92:	f381 8811 	msr	BASEPRI, r1
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	4832      	ldr	r0, [pc, #200]	@ (8006b64 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006a9a:	f7ff f8c6 	bl	8005c2a <_PreparePacket>
 8006a9e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aac:	e00b      	b.n	8006ac6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ab8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	09db      	lsrs	r3, r3, #7
 8006ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aca:	d8f0      	bhi.n	8006aae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ada:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ae4:	e00b      	b.n	8006afe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006af0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
 8006af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afa:	09db      	lsrs	r3, r3, #7
 8006afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b02:	d8f0      	bhi.n	8006ae6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	623b      	str	r3, [r7, #32]
 8006b1c:	e00b      	b.n	8006b36 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	09db      	lsrs	r3, r3, #7
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b3a:	d8f0      	bhi.n	8006b1e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b42:	6a3a      	ldr	r2, [r7, #32]
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	6979      	ldr	r1, [r7, #20]
 8006b50:	69b8      	ldr	r0, [r7, #24]
 8006b52:	f7ff f959 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f383 8811 	msr	BASEPRI, r3
}
 8006b5c:	bf00      	nop
 8006b5e:	3738      	adds	r7, #56	@ 0x38
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2001a7d8 	.word	0x2001a7d8

08006b68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b090      	sub	sp, #64	@ 0x40
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b76:	f3ef 8311 	mrs	r3, BASEPRI
 8006b7a:	f04f 0120 	mov.w	r1, #32
 8006b7e:	f381 8811 	msr	BASEPRI, r1
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	4840      	ldr	r0, [pc, #256]	@ (8006c88 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006b86:	f7ff f850 	bl	8005c2a <_PreparePacket>
 8006b8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b98:	e00b      	b.n	8006bb2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006ba4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	09db      	lsrs	r3, r3, #7
 8006bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bb6:	d8f0      	bhi.n	8006b9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bd0:	e00b      	b.n	8006bea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd8:	1c59      	adds	r1, r3, #1
 8006bda:	6379      	str	r1, [r7, #52]	@ 0x34
 8006bdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	09db      	lsrs	r3, r3, #7
 8006be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bee:	d8f0      	bhi.n	8006bd2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c08:	e00b      	b.n	8006c22 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	1c59      	adds	r1, r3, #1
 8006c12:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006c14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1e:	09db      	lsrs	r3, r3, #7
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c26:	d8f0      	bhi.n	8006c0a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c30:	b2d2      	uxtb	r2, r2
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3e:	623b      	str	r3, [r7, #32]
 8006c40:	e00b      	b.n	8006c5a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c48:	1c59      	adds	r1, r3, #1
 8006c4a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	09db      	lsrs	r3, r3, #7
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c5e:	d8f0      	bhi.n	8006c42 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c66:	6a3a      	ldr	r2, [r7, #32]
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	69b8      	ldr	r0, [r7, #24]
 8006c76:	f7ff f8c7 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f383 8811 	msr	BASEPRI, r3
}
 8006c80:	bf00      	nop
 8006c82:	3740      	adds	r7, #64	@ 0x40
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	2001a7d8 	.word	0x2001a7d8

08006c8c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b092      	sub	sp, #72	@ 0x48
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c9e:	f04f 0120 	mov.w	r1, #32
 8006ca2:	f381 8811 	msr	BASEPRI, r1
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	484e      	ldr	r0, [pc, #312]	@ (8006de4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006caa:	f7fe ffbe 	bl	8005c2a <_PreparePacket>
 8006cae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cbc:	e00b      	b.n	8006cd6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	6479      	str	r1, [r7, #68]	@ 0x44
 8006cc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd2:	09db      	lsrs	r3, r3, #7
 8006cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cda:	d8f0      	bhi.n	8006cbe <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cf4:	e00b      	b.n	8006d0e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006d00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0a:	09db      	lsrs	r3, r3, #7
 8006d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d12:	d8f0      	bhi.n	8006cf6 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d2c:	e00b      	b.n	8006d46 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	6379      	str	r1, [r7, #52]	@ 0x34
 8006d38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d4a:	d8f0      	bhi.n	8006d2e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	637a      	str	r2, [r7, #52]	@ 0x34
 8006d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d64:	e00b      	b.n	8006d7e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6c:	1c59      	adds	r1, r3, #1
 8006d6e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006d70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7a:	09db      	lsrs	r3, r3, #7
 8006d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d82:	d8f0      	bhi.n	8006d66 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d9a:	623b      	str	r3, [r7, #32]
 8006d9c:	e00b      	b.n	8006db6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006da8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	701a      	strb	r2, [r3, #0]
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	09db      	lsrs	r3, r3, #7
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dba:	d8f0      	bhi.n	8006d9e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dc2:	6a3a      	ldr	r2, [r7, #32]
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	6979      	ldr	r1, [r7, #20]
 8006dd0:	69b8      	ldr	r0, [r7, #24]
 8006dd2:	f7ff f819 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f383 8811 	msr	BASEPRI, r3
}
 8006ddc:	bf00      	nop
 8006dde:	3748      	adds	r7, #72	@ 0x48
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	2001a7d8 	.word	0x2001a7d8

08006de8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08c      	sub	sp, #48	@ 0x30
 8006dec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006dee:	4b59      	ldr	r3, [pc, #356]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006df0:	2201      	movs	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006df4:	f3ef 8311 	mrs	r3, BASEPRI
 8006df8:	f04f 0120 	mov.w	r1, #32
 8006dfc:	f381 8811 	msr	BASEPRI, r1
 8006e00:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e02:	4b54      	ldr	r3, [pc, #336]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	220a      	movs	r2, #10
 8006e08:	4953      	ldr	r1, [pc, #332]	@ (8006f58 <SEGGER_SYSVIEW_Start+0x170>)
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7f9 f9e0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006e16:	f7fe fad1 	bl	80053bc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e1a:	200a      	movs	r0, #10
 8006e1c:	f7ff fd7a 	bl	8006914 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e20:	f3ef 8311 	mrs	r3, BASEPRI
 8006e24:	f04f 0120 	mov.w	r1, #32
 8006e28:	f381 8811 	msr	BASEPRI, r1
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	484b      	ldr	r0, [pc, #300]	@ (8006f5c <SEGGER_SYSVIEW_Start+0x174>)
 8006e30:	f7fe fefb 	bl	8005c2a <_PreparePacket>
 8006e34:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e3e:	4b45      	ldr	r3, [pc, #276]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e44:	e00b      	b.n	8006e5e <SEGGER_SYSVIEW_Start+0x76>
 8006e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4c:	1c59      	adds	r1, r3, #1
 8006e4e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006e50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5a:	09db      	lsrs	r3, r3, #7
 8006e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e62:	d8f0      	bhi.n	8006e46 <SEGGER_SYSVIEW_Start+0x5e>
 8006e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e78:	4b36      	ldr	r3, [pc, #216]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	623b      	str	r3, [r7, #32]
 8006e7e:	e00b      	b.n	8006e98 <SEGGER_SYSVIEW_Start+0xb0>
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	1c59      	adds	r1, r3, #1
 8006e88:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	09db      	lsrs	r3, r3, #7
 8006e96:	623b      	str	r3, [r7, #32]
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e9c:	d8f0      	bhi.n	8006e80 <SEGGER_SYSVIEW_Start+0x98>
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ea4:	6a3a      	ldr	r2, [r7, #32]
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	4b28      	ldr	r3, [pc, #160]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	e00b      	b.n	8006ed2 <SEGGER_SYSVIEW_Start+0xea>
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	1c59      	adds	r1, r3, #1
 8006ec2:	61f9      	str	r1, [r7, #28]
 8006ec4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	09db      	lsrs	r3, r3, #7
 8006ed0:	61bb      	str	r3, [r7, #24]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ed6:	d8f0      	bhi.n	8006eba <SEGGER_SYSVIEW_Start+0xd2>
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	61fa      	str	r2, [r7, #28]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	2300      	movs	r3, #0
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	e00b      	b.n	8006f0a <SEGGER_SYSVIEW_Start+0x122>
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	1c59      	adds	r1, r3, #1
 8006efa:	6179      	str	r1, [r7, #20]
 8006efc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	701a      	strb	r2, [r3, #0]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	09db      	lsrs	r3, r3, #7
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f0e:	d8f0      	bhi.n	8006ef2 <SEGGER_SYSVIEW_Start+0x10a>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	617a      	str	r2, [r7, #20]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f20:	2218      	movs	r2, #24
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fe ff6f 	bl	8005e08 <_SendPacket>
      RECORD_END();
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f30:	4b08      	ldr	r3, [pc, #32]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f38:	4b06      	ldr	r3, [pc, #24]	@ (8006f54 <SEGGER_SYSVIEW_Start+0x16c>)
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006f3e:	f000 f9eb 	bl	8007318 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006f42:	f000 f9b1 	bl	80072a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006f46:	f000 fc8d 	bl	8007864 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006f4a:	bf00      	nop
 8006f4c:	3730      	adds	r7, #48	@ 0x30
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	2001a7a8 	.word	0x2001a7a8
 8006f58:	08007c90 	.word	0x08007c90
 8006f5c:	2001a7d8 	.word	0x2001a7d8

08006f60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006f66:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6a:	f04f 0120 	mov.w	r1, #32
 8006f6e:	f381 8811 	msr	BASEPRI, r1
 8006f72:	607b      	str	r3, [r7, #4]
 8006f74:	480b      	ldr	r0, [pc, #44]	@ (8006fa4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006f76:	f7fe fe58 	bl	8005c2a <_PreparePacket>
 8006f7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006f84:	220b      	movs	r2, #11
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6838      	ldr	r0, [r7, #0]
 8006f8a:	f7fe ff3d 	bl	8005e08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006f8e:	4b06      	ldr	r3, [pc, #24]	@ (8006fa8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f383 8811 	msr	BASEPRI, r3
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2001a7d8 	.word	0x2001a7d8
 8006fa8:	2001a7a8 	.word	0x2001a7a8

08006fac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08c      	sub	sp, #48	@ 0x30
 8006fb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006fb6:	f04f 0120 	mov.w	r1, #32
 8006fba:	f381 8811 	msr	BASEPRI, r1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	4845      	ldr	r0, [pc, #276]	@ (80070d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006fc2:	f7fe fe32 	bl	8005c2a <_PreparePacket>
 8006fc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd0:	4b42      	ldr	r3, [pc, #264]	@ (80070dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd6:	e00b      	b.n	8006ff0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fde:	1c59      	adds	r1, r3, #1
 8006fe0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006fe2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fec:	09db      	lsrs	r3, r3, #7
 8006fee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ff4:	d8f0      	bhi.n	8006fd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007004:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
 800700a:	4b34      	ldr	r3, [pc, #208]	@ (80070dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	623b      	str	r3, [r7, #32]
 8007010:	e00b      	b.n	800702a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	b2da      	uxtb	r2, r3
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	1c59      	adds	r1, r3, #1
 800701a:	6279      	str	r1, [r7, #36]	@ 0x24
 800701c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007020:	b2d2      	uxtb	r2, r2
 8007022:	701a      	strb	r2, [r3, #0]
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	09db      	lsrs	r3, r3, #7
 8007028:	623b      	str	r3, [r7, #32]
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	2b7f      	cmp	r3, #127	@ 0x7f
 800702e:	d8f0      	bhi.n	8007012 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	627a      	str	r2, [r7, #36]	@ 0x24
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	4b25      	ldr	r3, [pc, #148]	@ (80070dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	e00b      	b.n	8007064 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	b2da      	uxtb	r2, r3
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	61f9      	str	r1, [r7, #28]
 8007056:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	09db      	lsrs	r3, r3, #7
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b7f      	cmp	r3, #127	@ 0x7f
 8007068:	d8f0      	bhi.n	800704c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	61fa      	str	r2, [r7, #28]
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	e00b      	b.n	800709c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	b2da      	uxtb	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	6179      	str	r1, [r7, #20]
 800708e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	09db      	lsrs	r3, r3, #7
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b7f      	cmp	r3, #127	@ 0x7f
 80070a0:	d8f0      	bhi.n	8007084 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	617a      	str	r2, [r7, #20]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80070b2:	2218      	movs	r2, #24
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	68b8      	ldr	r0, [r7, #8]
 80070b8:	f7fe fea6 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80070c2:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80070ca:	4b04      	ldr	r3, [pc, #16]	@ (80070dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ce:	4798      	blx	r3
  }
}
 80070d0:	bf00      	nop
 80070d2:	3730      	adds	r7, #48	@ 0x30
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	2001a7d8 	.word	0x2001a7d8
 80070dc:	2001a7a8 	.word	0x2001a7a8

080070e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b092      	sub	sp, #72	@ 0x48
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80070e8:	f3ef 8311 	mrs	r3, BASEPRI
 80070ec:	f04f 0120 	mov.w	r1, #32
 80070f0:	f381 8811 	msr	BASEPRI, r1
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	486a      	ldr	r0, [pc, #424]	@ (80072a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80070f8:	f7fe fd97 	bl	8005c2a <_PreparePacket>
 80070fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	647b      	str	r3, [r7, #68]	@ 0x44
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	643b      	str	r3, [r7, #64]	@ 0x40
 8007112:	e00b      	b.n	800712c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007116:	b2da      	uxtb	r2, r3
 8007118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711a:	1c59      	adds	r1, r3, #1
 800711c:	6479      	str	r1, [r7, #68]	@ 0x44
 800711e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007128:	09db      	lsrs	r3, r3, #7
 800712a:	643b      	str	r3, [r7, #64]	@ 0x40
 800712c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800712e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007130:	d8f0      	bhi.n	8007114 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	647a      	str	r2, [r7, #68]	@ 0x44
 8007138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007140:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800714c:	e00b      	b.n	8007166 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800714e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007150:	b2da      	uxtb	r2, r3
 8007152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007154:	1c59      	adds	r1, r3, #1
 8007156:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8007158:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	09db      	lsrs	r3, r3, #7
 8007164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	2b7f      	cmp	r3, #127	@ 0x7f
 800716a:	d8f0      	bhi.n	800714e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800716c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007172:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	701a      	strb	r2, [r3, #0]
 8007178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	4619      	mov	r1, r3
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7fe fd17 	bl	8005bb8 <_EncodeStr>
 800718a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800718c:	2209      	movs	r2, #9
 800718e:	68f9      	ldr	r1, [r7, #12]
 8007190:	6938      	ldr	r0, [r7, #16]
 8007192:	f7fe fe39 	bl	8005e08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b40      	ldr	r3, [pc, #256]	@ (80072a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071aa:	e00b      	b.n	80071c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b2:	1c59      	adds	r1, r3, #1
 80071b4:	6379      	str	r1, [r7, #52]	@ 0x34
 80071b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c0:	09db      	lsrs	r3, r3, #7
 80071c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80071c8:	d8f0      	bhi.n	80071ac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80071ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80071d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071e4:	e00b      	b.n	80071fe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ec:	1c59      	adds	r1, r3, #1
 80071ee:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80071f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	09db      	lsrs	r3, r3, #7
 80071fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	2b7f      	cmp	r3, #127	@ 0x7f
 8007202:	d8f0      	bhi.n	80071e6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800720a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	627b      	str	r3, [r7, #36]	@ 0x24
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	623b      	str	r3, [r7, #32]
 800721e:	e00b      	b.n	8007238 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	b2da      	uxtb	r2, r3
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	1c59      	adds	r1, r3, #1
 8007228:	6279      	str	r1, [r7, #36]	@ 0x24
 800722a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	09db      	lsrs	r3, r3, #7
 8007236:	623b      	str	r3, [r7, #32]
 8007238:	6a3b      	ldr	r3, [r7, #32]
 800723a:	2b7f      	cmp	r3, #127	@ 0x7f
 800723c:	d8f0      	bhi.n	8007220 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	627a      	str	r2, [r7, #36]	@ 0x24
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	e00b      	b.n	8007272 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	61f9      	str	r1, [r7, #28]
 8007264:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	09db      	lsrs	r3, r3, #7
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b7f      	cmp	r3, #127	@ 0x7f
 8007276:	d8f0      	bhi.n	800725a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	61fa      	str	r2, [r7, #28]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007288:	2215      	movs	r2, #21
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	6938      	ldr	r0, [r7, #16]
 800728e:	f7fe fdbb 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f383 8811 	msr	BASEPRI, r3
}
 8007298:	bf00      	nop
 800729a:	3748      	adds	r7, #72	@ 0x48
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	2001a7d8 	.word	0x2001a7d8
 80072a4:	2001a7a8 	.word	0x2001a7a8

080072a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80072b4:	4b05      	ldr	r3, [pc, #20]	@ (80072cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80072be:	4b03      	ldr	r3, [pc, #12]	@ (80072cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	4798      	blx	r3
  }
}
 80072c6:	bf00      	nop
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	2001a7a8 	.word	0x2001a7a8

080072d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072d8:	f3ef 8311 	mrs	r3, BASEPRI
 80072dc:	f04f 0120 	mov.w	r1, #32
 80072e0:	f381 8811 	msr	BASEPRI, r1
 80072e4:	617b      	str	r3, [r7, #20]
 80072e6:	480b      	ldr	r0, [pc, #44]	@ (8007314 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80072e8:	f7fe fc9f 	bl	8005c2a <_PreparePacket>
 80072ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072ee:	2280      	movs	r2, #128	@ 0x80
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	6938      	ldr	r0, [r7, #16]
 80072f4:	f7fe fc60 	bl	8005bb8 <_EncodeStr>
 80072f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80072fa:	220e      	movs	r2, #14
 80072fc:	68f9      	ldr	r1, [r7, #12]
 80072fe:	6938      	ldr	r0, [r7, #16]
 8007300:	f7fe fd82 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f383 8811 	msr	BASEPRI, r3
}
 800730a:	bf00      	nop
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	2001a7d8 	.word	0x2001a7d8

08007318 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007318:	b590      	push	{r4, r7, lr}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800731e:	4b15      	ldr	r3, [pc, #84]	@ (8007374 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007326:	4b13      	ldr	r3, [pc, #76]	@ (8007374 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007330:	4b10      	ldr	r3, [pc, #64]	@ (8007374 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4798      	blx	r3
 8007338:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800733c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800733e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	000a      	movs	r2, r1
 800734c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800734e:	4613      	mov	r3, r2
 8007350:	461a      	mov	r2, r3
 8007352:	4621      	mov	r1, r4
 8007354:	200d      	movs	r0, #13
 8007356:	f7ff fb37 	bl	80069c8 <SEGGER_SYSVIEW_RecordU32x2>
 800735a:	e006      	b.n	800736a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	200c      	movs	r0, #12
 8007364:	f7ff faf4 	bl	8006950 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bd90      	pop	{r4, r7, pc}
 8007372:	bf00      	nop
 8007374:	2001a7a8 	.word	0x2001a7a8
 8007378:	e0001004 	.word	0xe0001004

0800737c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007382:	f3ef 8311 	mrs	r3, BASEPRI
 8007386:	f04f 0120 	mov.w	r1, #32
 800738a:	f381 8811 	msr	BASEPRI, r1
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	4819      	ldr	r0, [pc, #100]	@ (80073f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007392:	f7fe fc4a 	bl	8005c2a <_PreparePacket>
 8007396:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800739c:	4b17      	ldr	r3, [pc, #92]	@ (80073fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e00b      	b.n	80073c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	6179      	str	r1, [r7, #20]
 80073ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	09db      	lsrs	r3, r3, #7
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80073cc:	d8f0      	bhi.n	80073b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80073de:	2202      	movs	r2, #2
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f7fe fd10 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f383 8811 	msr	BASEPRI, r3
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	2001a7d8 	.word	0x2001a7d8
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007406:	f3ef 8311 	mrs	r3, BASEPRI
 800740a:	f04f 0120 	mov.w	r1, #32
 800740e:	f381 8811 	msr	BASEPRI, r1
 8007412:	607b      	str	r3, [r7, #4]
 8007414:	4807      	ldr	r0, [pc, #28]	@ (8007434 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007416:	f7fe fc08 	bl	8005c2a <_PreparePacket>
 800741a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800741c:	2203      	movs	r2, #3
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6838      	ldr	r0, [r7, #0]
 8007422:	f7fe fcf1 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f383 8811 	msr	BASEPRI, r3
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	2001a7d8 	.word	0x2001a7d8

08007438 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800743e:	f3ef 8311 	mrs	r3, BASEPRI
 8007442:	f04f 0120 	mov.w	r1, #32
 8007446:	f381 8811 	msr	BASEPRI, r1
 800744a:	607b      	str	r3, [r7, #4]
 800744c:	4807      	ldr	r0, [pc, #28]	@ (800746c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800744e:	f7fe fbec 	bl	8005c2a <_PreparePacket>
 8007452:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007454:	2212      	movs	r2, #18
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	f7fe fcd5 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f383 8811 	msr	BASEPRI, r3
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	2001a7d8 	.word	0x2001a7d8

08007470 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007476:	f3ef 8311 	mrs	r3, BASEPRI
 800747a:	f04f 0120 	mov.w	r1, #32
 800747e:	f381 8811 	msr	BASEPRI, r1
 8007482:	607b      	str	r3, [r7, #4]
 8007484:	4807      	ldr	r0, [pc, #28]	@ (80074a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007486:	f7fe fbd0 	bl	8005c2a <_PreparePacket>
 800748a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800748c:	2211      	movs	r2, #17
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6838      	ldr	r0, [r7, #0]
 8007492:	f7fe fcb9 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f383 8811 	msr	BASEPRI, r3
}
 800749c:	bf00      	nop
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	2001a7d8 	.word	0x2001a7d8

080074a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074b0:	f3ef 8311 	mrs	r3, BASEPRI
 80074b4:	f04f 0120 	mov.w	r1, #32
 80074b8:	f381 8811 	msr	BASEPRI, r1
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	4819      	ldr	r0, [pc, #100]	@ (8007524 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80074c0:	f7fe fbb3 	bl	8005c2a <_PreparePacket>
 80074c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80074ca:	4b17      	ldr	r3, [pc, #92]	@ (8007528 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e00b      	b.n	80074f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	1c59      	adds	r1, r3, #1
 80074e6:	61f9      	str	r1, [r7, #28]
 80074e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	701a      	strb	r2, [r3, #0]
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	09db      	lsrs	r3, r3, #7
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80074fa:	d8f0      	bhi.n	80074de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	61fa      	str	r2, [r7, #28]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800750c:	2208      	movs	r2, #8
 800750e:	68f9      	ldr	r1, [r7, #12]
 8007510:	6938      	ldr	r0, [r7, #16]
 8007512:	f7fe fc79 	bl	8005e08 <_SendPacket>
  RECORD_END();
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f383 8811 	msr	BASEPRI, r3
}
 800751c:	bf00      	nop
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	2001a7d8 	.word	0x2001a7d8
 8007528:	2001a7a8 	.word	0x2001a7a8

0800752c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007534:	f3ef 8311 	mrs	r3, BASEPRI
 8007538:	f04f 0120 	mov.w	r1, #32
 800753c:	f381 8811 	msr	BASEPRI, r1
 8007540:	617b      	str	r3, [r7, #20]
 8007542:	4819      	ldr	r0, [pc, #100]	@ (80075a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007544:	f7fe fb71 	bl	8005c2a <_PreparePacket>
 8007548:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800754e:	4b17      	ldr	r3, [pc, #92]	@ (80075ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e00b      	b.n	800757a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	1c59      	adds	r1, r3, #1
 800756a:	61f9      	str	r1, [r7, #28]
 800756c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	09db      	lsrs	r3, r3, #7
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	2b7f      	cmp	r3, #127	@ 0x7f
 800757e:	d8f0      	bhi.n	8007562 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	61fa      	str	r2, [r7, #28]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007590:	2204      	movs	r2, #4
 8007592:	68f9      	ldr	r1, [r7, #12]
 8007594:	6938      	ldr	r0, [r7, #16]
 8007596:	f7fe fc37 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f383 8811 	msr	BASEPRI, r3
}
 80075a0:	bf00      	nop
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	2001a7d8 	.word	0x2001a7d8
 80075ac:	2001a7a8 	.word	0x2001a7a8

080075b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80075b8:	f3ef 8311 	mrs	r3, BASEPRI
 80075bc:	f04f 0120 	mov.w	r1, #32
 80075c0:	f381 8811 	msr	BASEPRI, r1
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	4819      	ldr	r0, [pc, #100]	@ (800762c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80075c8:	f7fe fb2f 	bl	8005c2a <_PreparePacket>
 80075cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075d2:	4b17      	ldr	r3, [pc, #92]	@ (8007630 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	e00b      	b.n	80075fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	1c59      	adds	r1, r3, #1
 80075ee:	61f9      	str	r1, [r7, #28]
 80075f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	701a      	strb	r2, [r3, #0]
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	09db      	lsrs	r3, r3, #7
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	2b7f      	cmp	r3, #127	@ 0x7f
 8007602:	d8f0      	bhi.n	80075e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	61fa      	str	r2, [r7, #28]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007614:	2206      	movs	r2, #6
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	6938      	ldr	r0, [r7, #16]
 800761a:	f7fe fbf5 	bl	8005e08 <_SendPacket>
  RECORD_END();
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f383 8811 	msr	BASEPRI, r3
}
 8007624:	bf00      	nop
 8007626:	3720      	adds	r7, #32
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	2001a7d8 	.word	0x2001a7d8
 8007630:	2001a7a8 	.word	0x2001a7a8

08007634 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	@ 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800763e:	f3ef 8311 	mrs	r3, BASEPRI
 8007642:	f04f 0120 	mov.w	r1, #32
 8007646:	f381 8811 	msr	BASEPRI, r1
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	4827      	ldr	r0, [pc, #156]	@ (80076ec <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800764e:	f7fe faec 	bl	8005c2a <_PreparePacket>
 8007652:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007658:	4b25      	ldr	r3, [pc, #148]	@ (80076f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	623b      	str	r3, [r7, #32]
 800766a:	e00b      	b.n	8007684 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	b2da      	uxtb	r2, r3
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	1c59      	adds	r1, r3, #1
 8007674:	6279      	str	r1, [r7, #36]	@ 0x24
 8007676:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	09db      	lsrs	r3, r3, #7
 8007682:	623b      	str	r3, [r7, #32]
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	2b7f      	cmp	r3, #127	@ 0x7f
 8007688:	d8f0      	bhi.n	800766c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	61fb      	str	r3, [r7, #28]
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e00b      	b.n	80076bc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	1c59      	adds	r1, r3, #1
 80076ac:	61f9      	str	r1, [r7, #28]
 80076ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	09db      	lsrs	r3, r3, #7
 80076ba:	61bb      	str	r3, [r7, #24]
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	2b7f      	cmp	r3, #127	@ 0x7f
 80076c0:	d8f0      	bhi.n	80076a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	61fa      	str	r2, [r7, #28]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80076d2:	2207      	movs	r2, #7
 80076d4:	68f9      	ldr	r1, [r7, #12]
 80076d6:	6938      	ldr	r0, [r7, #16]
 80076d8:	f7fe fb96 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f383 8811 	msr	BASEPRI, r3
}
 80076e2:	bf00      	nop
 80076e4:	3728      	adds	r7, #40	@ 0x28
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	2001a7d8 	.word	0x2001a7d8
 80076f0:	2001a7a8 	.word	0x2001a7a8

080076f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80076fc:	4b04      	ldr	r3, [pc, #16]	@ (8007710 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	1ad3      	subs	r3, r2, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	2001a7a8 	.word	0x2001a7a8

08007714 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b08c      	sub	sp, #48	@ 0x30
 8007718:	af00      	add	r7, sp, #0
 800771a:	4603      	mov	r3, r0
 800771c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800771e:	4b40      	ldr	r3, [pc, #256]	@ (8007820 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d077      	beq.n	8007816 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007726:	4b3e      	ldr	r3, [pc, #248]	@ (8007820 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800772c:	2300      	movs	r3, #0
 800772e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007730:	e008      	b.n	8007744 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	2b00      	cmp	r3, #0
 800773c:	d007      	beq.n	800774e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	3301      	adds	r3, #1
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007748:	429a      	cmp	r2, r3
 800774a:	d3f2      	bcc.n	8007732 <SEGGER_SYSVIEW_SendModule+0x1e>
 800774c:	e000      	b.n	8007750 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800774e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d055      	beq.n	8007802 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007756:	f3ef 8311 	mrs	r3, BASEPRI
 800775a:	f04f 0120 	mov.w	r1, #32
 800775e:	f381 8811 	msr	BASEPRI, r1
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	482f      	ldr	r0, [pc, #188]	@ (8007824 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007766:	f7fe fa60 	bl	8005c2a <_PreparePacket>
 800776a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
 8007774:	79fb      	ldrb	r3, [r7, #7]
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	e00b      	b.n	8007792 <SEGGER_SYSVIEW_SendModule+0x7e>
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	1c59      	adds	r1, r3, #1
 8007782:	6279      	str	r1, [r7, #36]	@ 0x24
 8007784:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007788:	b2d2      	uxtb	r2, r2
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	09db      	lsrs	r3, r3, #7
 8007790:	623b      	str	r3, [r7, #32]
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	2b7f      	cmp	r3, #127	@ 0x7f
 8007796:	d8f0      	bhi.n	800777a <SEGGER_SYSVIEW_SendModule+0x66>
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	627a      	str	r2, [r7, #36]	@ 0x24
 800779e:	6a3a      	ldr	r2, [r7, #32]
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	61bb      	str	r3, [r7, #24]
 80077b2:	e00b      	b.n	80077cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	1c59      	adds	r1, r3, #1
 80077bc:	61f9      	str	r1, [r7, #28]
 80077be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80077c2:	b2d2      	uxtb	r2, r2
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	09db      	lsrs	r3, r3, #7
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d0:	d8f0      	bhi.n	80077b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	61fa      	str	r2, [r7, #28]
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2280      	movs	r2, #128	@ 0x80
 80077e8:	4619      	mov	r1, r3
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7fe f9e4 	bl	8005bb8 <_EncodeStr>
 80077f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80077f2:	2216      	movs	r2, #22
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	6938      	ldr	r0, [r7, #16]
 80077f8:	f7fe fb06 	bl	8005e08 <_SendPacket>
      RECORD_END();
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <SEGGER_SYSVIEW_SendModule+0x102>
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	4798      	blx	r3
    }
  }
}
 8007816:	bf00      	nop
 8007818:	3730      	adds	r7, #48	@ 0x30
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	2001a7d0 	.word	0x2001a7d0
 8007824:	2001a7d8 	.word	0x2001a7d8

08007828 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800782e:	4b0c      	ldr	r3, [pc, #48]	@ (8007860 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00f      	beq.n	8007856 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f2      	bne.n	800783c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007856:	bf00      	nop
 8007858:	3708      	adds	r7, #8
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	2001a7d0 	.word	0x2001a7d0

08007864 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800786a:	f3ef 8311 	mrs	r3, BASEPRI
 800786e:	f04f 0120 	mov.w	r1, #32
 8007872:	f381 8811 	msr	BASEPRI, r1
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	4817      	ldr	r0, [pc, #92]	@ (80078d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800787a:	f7fe f9d6 	bl	8005c2a <_PreparePacket>
 800787e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	617b      	str	r3, [r7, #20]
 8007888:	4b14      	ldr	r3, [pc, #80]	@ (80078dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	e00b      	b.n	80078a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	6179      	str	r1, [r7, #20]
 800789a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	09db      	lsrs	r3, r3, #7
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80078ac:	d8f0      	bhi.n	8007890 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	617a      	str	r2, [r7, #20]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80078be:	221b      	movs	r2, #27
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	68b8      	ldr	r0, [r7, #8]
 80078c4:	f7fe faa0 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f383 8811 	msr	BASEPRI, r3
}
 80078ce:	bf00      	nop
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	2001a7d8 	.word	0x2001a7d8
 80078dc:	2001a7d4 	.word	0x2001a7d4

080078e0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80078e0:	b40f      	push	{r0, r1, r2, r3}
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	461a      	mov	r2, r3
 80078f2:	2100      	movs	r1, #0
 80078f4:	6938      	ldr	r0, [r7, #16]
 80078f6:	f7fe fd99 	bl	800642c <_VPrintTarget>
  va_end(ParamList);
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007904:	b004      	add	sp, #16
 8007906:	4770      	bx	lr

08007908 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	@ 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007910:	f3ef 8311 	mrs	r3, BASEPRI
 8007914:	f04f 0120 	mov.w	r1, #32
 8007918:	f381 8811 	msr	BASEPRI, r1
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	4827      	ldr	r0, [pc, #156]	@ (80079bc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007920:	f7fe f983 	bl	8005c2a <_PreparePacket>
 8007924:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007926:	2280      	movs	r2, #128	@ 0x80
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	6938      	ldr	r0, [r7, #16]
 800792c:	f7fe f944 	bl	8005bb8 <_EncodeStr>
 8007930:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
 8007936:	2301      	movs	r3, #1
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	e00b      	b.n	8007954 <SEGGER_SYSVIEW_Warn+0x4c>
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	b2da      	uxtb	r2, r3
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	1c59      	adds	r1, r3, #1
 8007944:	6279      	str	r1, [r7, #36]	@ 0x24
 8007946:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	09db      	lsrs	r3, r3, #7
 8007952:	623b      	str	r3, [r7, #32]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	2b7f      	cmp	r3, #127	@ 0x7f
 8007958:	d8f0      	bhi.n	800793c <SEGGER_SYSVIEW_Warn+0x34>
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007960:	6a3a      	ldr	r2, [r7, #32]
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	61fb      	str	r3, [r7, #28]
 800796e:	2300      	movs	r3, #0
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e00b      	b.n	800798c <SEGGER_SYSVIEW_Warn+0x84>
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	1c59      	adds	r1, r3, #1
 800797c:	61f9      	str	r1, [r7, #28]
 800797e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	09db      	lsrs	r3, r3, #7
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007990:	d8f0      	bhi.n	8007974 <SEGGER_SYSVIEW_Warn+0x6c>
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	61fa      	str	r2, [r7, #28]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079a2:	221a      	movs	r2, #26
 80079a4:	68f9      	ldr	r1, [r7, #12]
 80079a6:	6938      	ldr	r0, [r7, #16]
 80079a8:	f7fe fa2e 	bl	8005e08 <_SendPacket>
  RECORD_END();
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f383 8811 	msr	BASEPRI, r3
}
 80079b2:	bf00      	nop
 80079b4:	3728      	adds	r7, #40	@ 0x28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	2001a7d8 	.word	0x2001a7d8

080079c0 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079c4:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079c6:	7e1b      	ldrb	r3, [r3, #24]
 80079c8:	4619      	mov	r1, r3
 80079ca:	4a13      	ldr	r2, [pc, #76]	@ (8007a18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079cc:	460b      	mov	r3, r1
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	440b      	add	r3, r1
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	4413      	add	r3, r2
 80079d6:	336c      	adds	r3, #108	@ 0x6c
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	4b0e      	ldr	r3, [pc, #56]	@ (8007a14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079dc:	7e1b      	ldrb	r3, [r3, #24]
 80079de:	4618      	mov	r0, r3
 80079e0:	490d      	ldr	r1, [pc, #52]	@ (8007a18 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80079e2:	4603      	mov	r3, r0
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4403      	add	r3, r0
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	440b      	add	r3, r1
 80079ec:	3370      	adds	r3, #112	@ 0x70
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d00b      	beq.n	8007a0c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80079f4:	4b07      	ldr	r3, [pc, #28]	@ (8007a14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079f6:	789b      	ldrb	r3, [r3, #2]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d107      	bne.n	8007a0c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80079fe:	2201      	movs	r2, #1
 8007a00:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007a02:	f7fe f91f 	bl	8005c44 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007a06:	4b03      	ldr	r3, [pc, #12]	@ (8007a14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007a0c:	4b01      	ldr	r3, [pc, #4]	@ (8007a14 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	2001a7a8 	.word	0x2001a7a8
 8007a18:	200192e8 	.word	0x200192e8

08007a1c <memcmp>:
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	3901      	subs	r1, #1
 8007a20:	4402      	add	r2, r0
 8007a22:	4290      	cmp	r0, r2
 8007a24:	d101      	bne.n	8007a2a <memcmp+0xe>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e005      	b.n	8007a36 <memcmp+0x1a>
 8007a2a:	7803      	ldrb	r3, [r0, #0]
 8007a2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d001      	beq.n	8007a38 <memcmp+0x1c>
 8007a34:	1b18      	subs	r0, r3, r4
 8007a36:	bd10      	pop	{r4, pc}
 8007a38:	3001      	adds	r0, #1
 8007a3a:	e7f2      	b.n	8007a22 <memcmp+0x6>

08007a3c <memset>:
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d100      	bne.n	8007a46 <memset+0xa>
 8007a44:	4770      	bx	lr
 8007a46:	f803 1b01 	strb.w	r1, [r3], #1
 8007a4a:	e7f9      	b.n	8007a40 <memset+0x4>

08007a4c <__libc_init_array>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a84 <__libc_init_array+0x38>)
 8007a50:	4c0d      	ldr	r4, [pc, #52]	@ (8007a88 <__libc_init_array+0x3c>)
 8007a52:	1b64      	subs	r4, r4, r5
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	2600      	movs	r6, #0
 8007a58:	42a6      	cmp	r6, r4
 8007a5a:	d109      	bne.n	8007a70 <__libc_init_array+0x24>
 8007a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a8c <__libc_init_array+0x40>)
 8007a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a90 <__libc_init_array+0x44>)
 8007a60:	f000 f826 	bl	8007ab0 <_init>
 8007a64:	1b64      	subs	r4, r4, r5
 8007a66:	10a4      	asrs	r4, r4, #2
 8007a68:	2600      	movs	r6, #0
 8007a6a:	42a6      	cmp	r6, r4
 8007a6c:	d105      	bne.n	8007a7a <__libc_init_array+0x2e>
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a74:	4798      	blx	r3
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7ee      	b.n	8007a58 <__libc_init_array+0xc>
 8007a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7e:	4798      	blx	r3
 8007a80:	3601      	adds	r6, #1
 8007a82:	e7f2      	b.n	8007a6a <__libc_init_array+0x1e>
 8007a84:	08007cb4 	.word	0x08007cb4
 8007a88:	08007cb4 	.word	0x08007cb4
 8007a8c:	08007cb4 	.word	0x08007cb4
 8007a90:	08007cb8 	.word	0x08007cb8

08007a94 <memcpy>:
 8007a94:	440a      	add	r2, r1
 8007a96:	4291      	cmp	r1, r2
 8007a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a9c:	d100      	bne.n	8007aa0 <memcpy+0xc>
 8007a9e:	4770      	bx	lr
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	d1f9      	bne.n	8007aa2 <memcpy+0xe>
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <_init>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr

08007abc <_fini>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr
