
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006008  08006008  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006010  08006010  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00019854  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019868  20019868  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e880  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002867  00000000  00000000  0002e907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000db8  00000000  00000000  00031170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a56  00000000  00000000  00031f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022a4b  00000000  00000000  0003297e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010019  00000000  00000000  000553c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf4af  00000000  00000000  000653e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000037bc  00000000  00000000  00134894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cf  00000000  00000000  00138050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f10 	.word	0x08005f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08005f10 	.word	0x08005f10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001929c 	.word	0x2001929c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fb89 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f887 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8ef 	bl	8000750 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000572:	4b35      	ldr	r3, [pc, #212]	; (8000648 <main+0xe8>)
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2303      	movs	r3, #3
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	22c8      	movs	r2, #200	; 0xc8
 800057e:	4933      	ldr	r1, [pc, #204]	; (800064c <main+0xec>)
 8000580:	4833      	ldr	r0, [pc, #204]	; (8000650 <main+0xf0>)
 8000582:	f001 feef 	bl	8002364 <xTaskCreate>
 8000586:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d00a      	beq.n	80005a4 <main+0x44>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000592:	f383 8811 	msr	BASEPRI, r3
 8000596:	f3bf 8f6f 	isb	sy
 800059a:	f3bf 8f4f 	dsb	sy
 800059e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005a0:	bf00      	nop
 80005a2:	e7fe      	b.n	80005a2 <main+0x42>

  next_task_handle = ledg_task_handle;
 80005a4:	4b28      	ldr	r3, [pc, #160]	; (8000648 <main+0xe8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <main+0xf4>)
 80005aa:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <main+0xf8>)
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	22c8      	movs	r2, #200	; 0xc8
 80005b8:	4928      	ldr	r1, [pc, #160]	; (800065c <main+0xfc>)
 80005ba:	4829      	ldr	r0, [pc, #164]	; (8000660 <main+0x100>)
 80005bc:	f001 fed2 	bl	8002364 <xTaskCreate>
 80005c0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00a      	beq.n	80005de <main+0x7e>
        __asm volatile
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	60fb      	str	r3, [r7, #12]
    }
 80005da:	bf00      	nop
 80005dc:	e7fe      	b.n	80005dc <main+0x7c>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &ledr_task_handle);
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0x104>)
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	22c8      	movs	r2, #200	; 0xc8
 80005ea:	491f      	ldr	r1, [pc, #124]	; (8000668 <main+0x108>)
 80005ec:	481f      	ldr	r0, [pc, #124]	; (800066c <main+0x10c>)
 80005ee:	f001 feb9 	bl	8002364 <xTaskCreate>
 80005f2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d00a      	beq.n	8000610 <main+0xb0>
        __asm volatile
 80005fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fe:	f383 8811 	msr	BASEPRI, r3
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	60bb      	str	r3, [r7, #8]
    }
 800060c:	bf00      	nop
 800060e:	e7fe      	b.n	800060e <main+0xae>

  status = xTaskCreate(button_handler, "Button_task", 200, NULL, 4, &btn_task_handle);
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <main+0x110>)
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2304      	movs	r3, #4
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	22c8      	movs	r2, #200	; 0xc8
 800061c:	4915      	ldr	r1, [pc, #84]	; (8000674 <main+0x114>)
 800061e:	4816      	ldr	r0, [pc, #88]	; (8000678 <main+0x118>)
 8000620:	f001 fea0 	bl	8002364 <xTaskCreate>
 8000624:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d00a      	beq.n	8000642 <main+0xe2>
        __asm volatile
 800062c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000630:	f383 8811 	msr	BASEPRI, r3
 8000634:	f3bf 8f6f 	isb	sy
 8000638:	f3bf 8f4f 	dsb	sy
 800063c:	607b      	str	r3, [r7, #4]
    }
 800063e:	bf00      	nop
 8000640:	e7fe      	b.n	8000640 <main+0xe0>

  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000642:	f002 f90f 	bl	8002864 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0xe6>
 8000648:	20000030 	.word	0x20000030
 800064c:	08005f28 	.word	0x08005f28
 8000650:	08000a0d 	.word	0x08000a0d
 8000654:	20000040 	.word	0x20000040
 8000658:	20000034 	.word	0x20000034
 800065c:	08005f38 	.word	0x08005f38
 8000660:	08000a69 	.word	0x08000a69
 8000664:	20000038 	.word	0x20000038
 8000668:	08005f48 	.word	0x08005f48
 800066c:	08000ac5 	.word	0x08000ac5
 8000670:	2000003c 	.word	0x2000003c
 8000674:	08005f58 	.word	0x08005f58
 8000678:	08000b29 	.word	0x08000b29

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fc06 	bl	8005e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006f0:	2332      	movs	r3, #50	; 0x32
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fde7 	bl	80012d4 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 fa34 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f848 	bl	80017c4 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 fa1d 	bl	8000b78 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
 800076a:	4ba2      	ldr	r3, [pc, #648]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4aa1      	ldr	r2, [pc, #644]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b9f      	ldr	r3, [pc, #636]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0310 	and.w	r3, r3, #16
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	4b9b      	ldr	r3, [pc, #620]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a9a      	ldr	r2, [pc, #616]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b98      	ldr	r3, [pc, #608]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b94      	ldr	r3, [pc, #592]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a93      	ldr	r2, [pc, #588]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b91      	ldr	r3, [pc, #580]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b8d      	ldr	r3, [pc, #564]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a8c      	ldr	r2, [pc, #560]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b8a      	ldr	r3, [pc, #552]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b86      	ldr	r3, [pc, #536]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a85      	ldr	r2, [pc, #532]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b83      	ldr	r3, [pc, #524]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b7f      	ldr	r3, [pc, #508]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a7e      	ldr	r2, [pc, #504]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4879      	ldr	r0, [pc, #484]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 8000814:	f000 fd2a 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4877      	ldr	r0, [pc, #476]	; (80009fc <MX_GPIO_Init+0x2ac>)
 800081e:	f000 fd25 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000822:	2200      	movs	r2, #0
 8000824:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000828:	4875      	ldr	r0, [pc, #468]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 800082a:	f000 fd1f 	bl	800126c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	486c      	ldr	r0, [pc, #432]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 8000846:	f000 fb5d 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4866      	ldr	r0, [pc, #408]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fb4f 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000876:	2305      	movs	r3, #5
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	485e      	ldr	r0, [pc, #376]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000882:	f000 fb3f 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 800089c:	f000 fb32 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a0:	2310      	movs	r3, #16
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b0:	2306      	movs	r3, #6
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4852      	ldr	r0, [pc, #328]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 80008bc:	f000 fb22 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c0:	23e0      	movs	r3, #224	; 0xe0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d0:	2305      	movs	r3, #5
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	484a      	ldr	r0, [pc, #296]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 80008dc:	f000 fb12 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e0:	2304      	movs	r3, #4
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4845      	ldr	r0, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 80008f4:	f000 fb06 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 8000916:	f000 faf5 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800091a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800091e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4833      	ldr	r0, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 8000934:	f000 fae6 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000938:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094a:	2306      	movs	r3, #6
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4829      	ldr	r0, [pc, #164]	; (80009fc <MX_GPIO_Init+0x2ac>)
 8000956:	f000 fad5 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800095a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 8000970:	f000 fac8 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000974:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000986:	230a      	movs	r3, #10
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <MX_GPIO_Init+0x2b4>)
 8000992:	f000 fab7 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4815      	ldr	r0, [pc, #84]	; (8000a00 <MX_GPIO_Init+0x2b0>)
 80009aa:	f000 faab 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <MX_GPIO_Init+0x2b8>)
 80009cc:	f000 fa9a 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x2a8>)
 80009e6:	f000 fa8d 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ea:	bf00      	nop
 80009ec:	3730      	adds	r7, #48	; 0x30
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020c00 	.word	0x40020c00
 8000a04:	40020000 	.word	0x40020000
 8000a08:	40020400 	.word	0x40020400

08000a0c <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void * parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a18:	4810      	ldr	r0, [pc, #64]	; (8000a5c <led_green_handler+0x50>)
 8000a1a:	f000 fc40 	bl	800129e <HAL_GPIO_TogglePin>
		// Wait for the notification
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 fcba 	bl	80033a4 <xTaskGenericNotifyWait>
 8000a30:	60f8      	str	r0, [r7, #12]

		if (status == pdTRUE)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d1ed      	bne.n	8000a14 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000a38:	f001 ff76 	bl	8002928 <vTaskSuspendAll>
			// The notification is received or the User has already pressed the button
			next_task_handle = ledo_task_handle; // update next_task_handle
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <led_green_handler+0x54>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <led_green_handler+0x58>)
 8000a42:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a44:	f001 ff7e 	bl	8002944 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET); // before deleting task, keep the LED on
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <led_green_handler+0x50>)
 8000a50:	f000 fc0c 	bl	800126c <HAL_GPIO_WritePin>
			vTaskDelete(NULL); // delete itself
 8000a54:	2000      	movs	r0, #0
 8000a56:	f001 fe1f 	bl	8002698 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a5a:	e7db      	b.n	8000a14 <led_green_handler+0x8>
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	20000034 	.word	0x20000034
 8000a64:	20000040 	.word	0x20000040

08000a68 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void * parameters)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a74:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <led_orange_handler+0x50>)
 8000a76:	f000 fc12 	bl	800129e <HAL_GPIO_TogglePin>
		// Wait for the notification
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000a7a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f002 fc8c 	bl	80033a4 <xTaskGenericNotifyWait>
 8000a8c:	60f8      	str	r0, [r7, #12]

		if (status == pdTRUE)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1ed      	bne.n	8000a70 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000a94:	f001 ff48 	bl	8002928 <vTaskSuspendAll>
			// The notification is received or the User has already pressed the button
			next_task_handle = ledr_task_handle; // update next_task_handle
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <led_orange_handler+0x54>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <led_orange_handler+0x58>)
 8000a9e:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000aa0:	f001 ff50 	bl	8002944 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET); // before deleting task, keep the LED on
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <led_orange_handler+0x50>)
 8000aac:	f000 fbde 	bl	800126c <HAL_GPIO_WritePin>
			vTaskDelete(NULL); // delete itself
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f001 fdf1 	bl	8002698 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000ab6:	e7db      	b.n	8000a70 <led_orange_handler+0x8>
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	20000038 	.word	0x20000038
 8000ac0:	20000040 	.word	0x20000040

08000ac4 <led_red_handler>:
		}
	}
}

static void led_red_handler(void * parameters)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad0:	4812      	ldr	r0, [pc, #72]	; (8000b1c <led_red_handler+0x58>)
 8000ad2:	f000 fbe4 	bl	800129e <HAL_GPIO_TogglePin>
		// Wait for the notification
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000ad6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2300      	movs	r3, #0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f002 fc5e 	bl	80033a4 <xTaskGenericNotifyWait>
 8000ae8:	60f8      	str	r0, [r7, #12]

		if (status == pdTRUE)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d1ed      	bne.n	8000acc <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000af0:	f001 ff1a 	bl	8002928 <vTaskSuspendAll>
			// The notification is received or the User has already pressed the button
			next_task_handle = NULL; // update next_task_handle
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <led_red_handler+0x5c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000afa:	f001 ff23 	bl	8002944 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET); // before deleting task, keep the LED on
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <led_red_handler+0x58>)
 8000b06:	f000 fbb1 	bl	800126c <HAL_GPIO_WritePin>
			vTaskDelete(btn_task_handle); // delete button task
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <led_red_handler+0x60>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fdc2 	bl	8002698 <vTaskDelete>
			vTaskDelete(NULL); // delete itself
 8000b14:	2000      	movs	r0, #0
 8000b16:	f001 fdbf 	bl	8002698 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b1a:	e7d7      	b.n	8000acc <led_red_handler+0x8>
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	20000040 	.word	0x20000040
 8000b24:	2000003c 	.word	0x2000003c

08000b28 <button_handler>:
		}
	}
}

static void button_handler(void *parameters)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <button_handler+0x48>)
 8000b3c:	f000 fb7e 	bl	800123c <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	73bb      	strb	r3, [r7, #14]
		if (btn_read)
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <button_handler+0x3a>
		{
			if (prev_read == 0) // if previous button read is zero (0)
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <button_handler+0x3a>
			{
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <button_handler+0x4c>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	2300      	movs	r3, #0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f002 fca9 	bl	80034b4 <xTaskGenericNotify>
			}
		}
		prev_read = btn_read;
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b66:	200a      	movs	r0, #10
 8000b68:	f001 fe44 	bl	80027f4 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b6c:	e7e4      	b.n	8000b38 <button_handler+0x10>
 8000b6e:	bf00      	nop
 8000b70:	40020000 	.word	0x40020000
 8000b74:	20000040 	.word	0x20000040

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_MspInit+0x50>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_MspInit+0x50>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_MspInit+0x50>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_MspInit+0x50>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <HAL_MspInit+0x50>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_MspInit+0x50>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 f96a 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000bc8:	f003 f9e6 	bl	8003f98 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f005 f929 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc81 	bl	8000560 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c6c:	08006018 	.word	0x08006018
  ldr r2, =_sbss
 8000c70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c74:	20019868 	.word	0x20019868

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8f9 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff ff68 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f903 	bl	8000eea <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f8d9 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000044 	.word	0x20000044

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff47 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5c 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff8e 	bl	8000df0 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5d 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb0 	bl	8000e58 <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e16b      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 815a 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80b4 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae90 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	041a      	lsls	r2, r3, #16
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	400b      	ands	r3, r1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e267      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d075      	beq.n	80013de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	4b88      	ldr	r3, [pc, #544]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d00c      	beq.n	8001318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4b85      	ldr	r3, [pc, #532]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d112      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4b82      	ldr	r3, [pc, #520]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001316:	d10b      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	4b7e      	ldr	r3, [pc, #504]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d05b      	beq.n	80013dc <HAL_RCC_OscConfig+0x108>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d157      	bne.n	80013dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e242      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d106      	bne.n	8001348 <HAL_RCC_OscConfig+0x74>
 800133a:	4b76      	ldr	r3, [pc, #472]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a75      	ldr	r2, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x98>
 8001352:	4b70      	ldr	r3, [pc, #448]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6f      	ldr	r2, [pc, #444]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b6d      	ldr	r3, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a6c      	ldr	r2, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 800136c:	4b69      	ldr	r3, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a68      	ldr	r2, [pc, #416]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b66      	ldr	r3, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a65      	ldr	r2, [pc, #404]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcc8 	bl	8000d20 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcc4 	bl	8000d20 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e207      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xc0>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcb4 	bl	8000d20 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcb0 	bl	8000d20 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e1f3      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0xe8>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	4b4a      	ldr	r3, [pc, #296]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b41      	ldr	r3, [pc, #260]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x152>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1c7      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4937      	ldr	r1, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e03a      	b.n	80014b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x244>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fc69 	bl	8000d20 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fc65 	bl	8000d20 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e1a8      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4925      	ldr	r1, [pc, #148]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x244>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fc48 	bl	8000d20 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fc44 	bl	8000d20 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e187      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d036      	beq.n	800152c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_RCC_OscConfig+0x248>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fc28 	bl	8000d20 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fc24 	bl	8000d20 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e167      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x240>)
 80014e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x200>
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x248>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc11 	bl	8000d20 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e00e      	b.n	8001520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fc0d 	bl	8000d20 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d907      	bls.n	8001520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e150      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
 8001514:	40023800 	.word	0x40023800
 8001518:	42470000 	.word	0x42470000
 800151c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ea      	bne.n	8001502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 8097 	beq.w	8001668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b7d      	ldr	r3, [pc, #500]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a7c      	ldr	r2, [pc, #496]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b77      	ldr	r3, [pc, #476]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d118      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a73      	ldr	r2, [pc, #460]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff fbcd 	bl	8000d20 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff fbc9 	bl	8000d20 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e10c      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x474>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_RCC_OscConfig+0x2ea>
 80015b0:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	e01c      	b.n	80015f8 <HAL_RCC_OscConfig+0x324>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x30c>
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ca:	4a5e      	ldr	r2, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6713      	str	r3, [r2, #112]	; 0x70
 80015d2:	4b5c      	ldr	r3, [pc, #368]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6713      	str	r3, [r2, #112]	; 0x70
 80015de:	e00b      	b.n	80015f8 <HAL_RCC_OscConfig+0x324>
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	4b55      	ldr	r3, [pc, #340]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a54      	ldr	r2, [pc, #336]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f023 0304 	bic.w	r3, r3, #4
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d015      	beq.n	800162c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fb8e 	bl	8000d20 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	e00a      	b.n	800161e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001608:	f7ff fb8a 	bl	8000d20 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	f241 3288 	movw	r2, #5000	; 0x1388
 8001616:	4293      	cmp	r3, r2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e0cb      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ee      	beq.n	8001608 <HAL_RCC_OscConfig+0x334>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fb78 	bl	8000d20 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	e00a      	b.n	800164a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001634:	f7ff fb74 	bl	8000d20 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001642:	4293      	cmp	r3, r2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e0b5      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ee      	bne.n	8001634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a38      	ldr	r2, [pc, #224]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80a1 	beq.w	80017b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b08      	cmp	r3, #8
 800167c:	d05c      	beq.n	8001738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d141      	bne.n	800170a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001686:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_RCC_OscConfig+0x478>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb48 	bl	8000d20 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001694:	f7ff fb44 	bl	8000d20 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e087      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69da      	ldr	r2, [r3, #28]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	019b      	lsls	r3, r3, #6
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	3b01      	subs	r3, #1
 80016cc:	041b      	lsls	r3, r3, #16
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x478>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb1d 	bl	8000d20 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff fb19 	bl	8000d20 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e05c      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x416>
 8001708:	e054      	b.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb06 	bl	8000d20 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fb02 	bl	8000d20 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e045      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x444>
 8001736:	e03d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e038      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
 8001744:	40023800 	.word	0x40023800
 8001748:	40007000 	.word	0x40007000
 800174c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_RCC_OscConfig+0x4ec>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d028      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d121      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d11a      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001780:	4013      	ands	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001788:	4293      	cmp	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	3b01      	subs	r3, #1
 800179a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0cc      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d90c      	bls.n	8001800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b65      	ldr	r3, [pc, #404]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0b8      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d020      	beq.n	800184e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800183a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800183c:	4b50      	ldr	r3, [pc, #320]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	494d      	ldr	r1, [pc, #308]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d044      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d119      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e07f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d003      	beq.n	8001882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187e:	2b03      	cmp	r3, #3
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e067      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a2:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 0203 	bic.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4934      	ldr	r1, [pc, #208]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b4:	f7ff fa34 	bl	8000d20 <HAL_GetTick>
 80018b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018bc:	f7ff fa30 	bl	8000d20 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e04f      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 020c 	and.w	r2, r3, #12
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d1eb      	bne.n	80018bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20c      	bcs.n	800190c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_RCC_ClockConfig+0x1b8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e032      	b.n	8001972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d008      	beq.n	800192a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	4916      	ldr	r1, [pc, #88]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194a:	f000 f821 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 800194e:	4602      	mov	r2, r0
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	490a      	ldr	r1, [pc, #40]	; (8001984 <HAL_RCC_ClockConfig+0x1c0>)
 800195c:	5ccb      	ldrb	r3, [r1, r3]
 800195e:	fa22 f303 	lsr.w	r3, r2, r3
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_ClockConfig+0x1c8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff f9a8 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00
 8001980:	40023800 	.word	0x40023800
 8001984:	08005fec 	.word	0x08005fec
 8001988:	20000000 	.word	0x20000000
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001994:	b094      	sub	sp, #80	; 0x50
 8001996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
 800199c:	2300      	movs	r3, #0
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019a0:	2300      	movs	r3, #0
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a8:	4b79      	ldr	r3, [pc, #484]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d00d      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x40>
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	f200 80e1 	bhi.w	8001b7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x34>
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x3a>
 80019c2:	e0db      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c4:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019c8:	e0db      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ca:	4b73      	ldr	r3, [pc, #460]	; (8001b98 <HAL_RCC_GetSysClockFreq+0x208>)
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ce:	e0d8      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d0:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4b6d      	ldr	r3, [pc, #436]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d063      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80019f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
 80019fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a02:	4622      	mov	r2, r4
 8001a04:	462b      	mov	r3, r5
 8001a06:	f04f 0000 	mov.w	r0, #0
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	0159      	lsls	r1, r3, #5
 8001a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a14:	0150      	lsls	r0, r2, #5
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	1a51      	subs	r1, r2, r1
 8001a1e:	6139      	str	r1, [r7, #16]
 8001a20:	4629      	mov	r1, r5
 8001a22:	eb63 0301 	sbc.w	r3, r3, r1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a34:	4659      	mov	r1, fp
 8001a36:	018b      	lsls	r3, r1, #6
 8001a38:	4651      	mov	r1, sl
 8001a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3e:	4651      	mov	r1, sl
 8001a40:	018a      	lsls	r2, r1, #6
 8001a42:	4651      	mov	r1, sl
 8001a44:	ebb2 0801 	subs.w	r8, r2, r1
 8001a48:	4659      	mov	r1, fp
 8001a4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a62:	4690      	mov	r8, r2
 8001a64:	4699      	mov	r9, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	eb18 0303 	adds.w	r3, r8, r3
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	462b      	mov	r3, r5
 8001a70:	eb49 0303 	adc.w	r3, r9, r3
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a82:	4629      	mov	r1, r5
 8001a84:	024b      	lsls	r3, r1, #9
 8001a86:	4621      	mov	r1, r4
 8001a88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	024a      	lsls	r2, r1, #9
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a96:	2200      	movs	r2, #0
 8001a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001aa0:	f7fe fbe0 	bl	8000264 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aac:	e058      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	099b      	lsrs	r3, r3, #6
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4611      	mov	r1, r2
 8001aba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001abe:	623b      	str	r3, [r7, #32]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac8:	4642      	mov	r2, r8
 8001aca:	464b      	mov	r3, r9
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	0159      	lsls	r1, r3, #5
 8001ad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ada:	0150      	lsls	r0, r2, #5
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4641      	mov	r1, r8
 8001ae2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae6:	4649      	mov	r1, r9
 8001ae8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001afc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b00:	ebb2 040a 	subs.w	r4, r2, sl
 8001b04:	eb63 050b 	sbc.w	r5, r3, fp
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	00eb      	lsls	r3, r5, #3
 8001b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b16:	00e2      	lsls	r2, r4, #3
 8001b18:	4614      	mov	r4, r2
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	4643      	mov	r3, r8
 8001b1e:	18e3      	adds	r3, r4, r3
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	464b      	mov	r3, r9
 8001b24:	eb45 0303 	adc.w	r3, r5, r3
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b36:	4629      	mov	r1, r5
 8001b38:	028b      	lsls	r3, r1, #10
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b40:	4621      	mov	r1, r4
 8001b42:	028a      	lsls	r2, r1, #10
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	61fa      	str	r2, [r7, #28]
 8001b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b54:	f7fe fb86 	bl	8000264 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7a:	e002      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3750      	adds	r7, #80	; 0x50
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	007a1200 	.word	0x007a1200

08001b9c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f103 0208 	add.w	r2, r3, #8
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 0208 	add.w	r2, r3, #8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f103 0208 	add.w	r2, r3, #8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d103      	bne.n	8001c5e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e00c      	b.n	8001c78 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3308      	adds	r3, #8
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e002      	b.n	8001c6c <vListInsert+0x2e>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d2f6      	bcs.n	8001c66 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	601a      	str	r2, [r3, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6892      	ldr	r2, [r2, #8]
 8001cc6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6852      	ldr	r2, [r2, #4]
 8001cd0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d103      	bne.n	8001ce4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <xQueueGenericReset+0x2e>
        __asm volatile
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	60fb      	str	r3, [r7, #12]
    }
 8001d2e:	bf00      	nop
 8001d30:	e7fe      	b.n	8001d30 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05d      	beq.n	8001df4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d059      	beq.n	8001df4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	2100      	movs	r1, #0
 8001d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d000      	beq.n	8001d54 <xQueueGenericReset+0x50>
 8001d52:	2101      	movs	r1, #1
 8001d54:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d14c      	bne.n	8001df4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001d5a:	f002 f99b 	bl	8004094 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d66:	6939      	ldr	r1, [r7, #16]
 8001d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	441a      	add	r2, r3
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2200      	movs	r2, #0
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	441a      	add	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	22ff      	movs	r2, #255	; 0xff
 8001da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d114      	bne.n	8001dda <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d01a      	beq.n	8001dee <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3310      	adds	r3, #16
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 f8c1 	bl	8002f44 <xTaskRemoveFromEventList>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <xQueueGenericReset+0x11c>)
 8001dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f3bf 8f4f 	dsb	sy
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	e009      	b.n	8001dee <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	3310      	adds	r3, #16
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fedc 	bl	8001b9c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	3324      	adds	r3, #36	; 0x24
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fed7 	bl	8001b9c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001dee:	f002 f981 	bl	80040f4 <vPortExitCritical>
 8001df2:	e001      	b.n	8001df8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <xQueueGenericReset+0x110>
        __asm volatile
 8001dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	60bb      	str	r3, [r7, #8]
    }
 8001e10:	bf00      	nop
 8001e12:	e7fe      	b.n	8001e12 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001e14:	697b      	ldr	r3, [r7, #20]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	e000ed04 	.word	0xe000ed04

08001e24 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d02e      	beq.n	8001e9a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	fba3 2302 	umull	r2, r3, r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d000      	beq.n	8001e4c <xQueueGenericCreate+0x28>
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d123      	bne.n	8001e9a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001e5a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001e5e:	d81c      	bhi.n	8001e9a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	3350      	adds	r3, #80	; 0x50
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f002 f9fc 	bl	800426c <pvPortMalloc>
 8001e74:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01c      	beq.n	8001eb6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3350      	adds	r3, #80	; 0x50
 8001e84:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f814 	bl	8001ec0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001e98:	e00d      	b.n	8001eb6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <xQueueGenericCreate+0x92>
        __asm volatile
 8001ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea4:	f383 8811 	msr	BASEPRI, r3
 8001ea8:	f3bf 8f6f 	isb	sy
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	613b      	str	r3, [r7, #16]
    }
 8001eb2:	bf00      	nop
 8001eb4:	e7fe      	b.n	8001eb4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
    }
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e002      	b.n	8001ee2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001eee:	2101      	movs	r1, #1
 8001ef0:	69b8      	ldr	r0, [r7, #24]
 8001ef2:	f7ff ff07 	bl	8001d04 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	68f9      	ldr	r1, [r7, #12]
 8001f04:	2073      	movs	r0, #115	; 0x73
 8001f06:	f003 f907 	bl	8005118 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b08f      	sub	sp, #60	; 0x3c
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <xQueueReceive+0x30>
        __asm volatile
 8001f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f32:	f383 8811 	msr	BASEPRI, r3
 8001f36:	f3bf 8f6f 	isb	sy
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	623b      	str	r3, [r7, #32]
    }
 8001f40:	bf00      	nop
 8001f42:	e7fe      	b.n	8001f42 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <xQueueReceive+0x3e>
 8001f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <xQueueReceive+0x42>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <xQueueReceive+0x44>
 8001f56:	2300      	movs	r3, #0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <xQueueReceive+0x5e>
        __asm volatile
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	61fb      	str	r3, [r7, #28]
    }
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f72:	f001 f9f9 	bl	8003368 <xTaskGetSchedulerState>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <xQueueReceive+0x6e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <xQueueReceive+0x72>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <xQueueReceive+0x74>
 8001f86:	2300      	movs	r3, #0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <xQueueReceive+0x8e>
        __asm volatile
 8001f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f90:	f383 8811 	msr	BASEPRI, r3
 8001f94:	f3bf 8f6f 	isb	sy
 8001f98:	f3bf 8f4f 	dsb	sy
 8001f9c:	61bb      	str	r3, [r7, #24]
    }
 8001f9e:	bf00      	nop
 8001fa0:	e7fe      	b.n	8001fa0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001fa2:	f002 f877 	bl	8004094 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d02f      	beq.n	8002012 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fb6:	f000 f8bd 	bl	8002134 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fe15 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 8001fc2:	4604      	mov	r4, r0
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f003 fe11 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2101      	movs	r1, #1
 8001fd0:	9100      	str	r1, [sp, #0]
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	205c      	movs	r0, #92	; 0x5c
 8001fd6:	f003 f915 	bl	8005204 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	3310      	adds	r3, #16
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 ffa8 	bl	8002f44 <xTaskRemoveFromEventList>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ffa:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <xQueueReceive+0x21c>)
 8001ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800200a:	f002 f873 	bl	80040f4 <vPortExitCritical>
                return pdPASS;
 800200e:	2301      	movs	r3, #1
 8002010:	e08a      	b.n	8002128 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d113      	bne.n	8002040 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002018:	f002 f86c 	bl	80040f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fde4 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 8002024:	4604      	mov	r4, r0
 8002026:	2000      	movs	r0, #0
 8002028:	f003 fde0 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 800202c:	4602      	mov	r2, r0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2101      	movs	r1, #1
 8002032:	9100      	str	r1, [sp, #0]
 8002034:	4621      	mov	r1, r4
 8002036:	205c      	movs	r0, #92	; 0x5c
 8002038:	f003 f8e4 	bl	8005204 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800203c:	2300      	movs	r3, #0
 800203e:	e073      	b.n	8002128 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4618      	mov	r0, r3
 800204c:	f001 f852 	bl	80030f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002050:	2301      	movs	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002054:	f002 f84e 	bl	80040f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002058:	f000 fc66 	bl	8002928 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800205c:	f002 f81a 	bl	8004094 <vPortEnterCritical>
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002066:	b25b      	sxtb	r3, r3
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d103      	bne.n	8002076 <xQueueReceive+0x162>
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800207c:	b25b      	sxtb	r3, r3
 800207e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002082:	d103      	bne.n	800208c <xQueueReceive+0x178>
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800208c:	f002 f832 	bl	80040f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002090:	1d3a      	adds	r2, r7, #4
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f841 	bl	8003120 <xTaskCheckForTimeOut>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d124      	bne.n	80020ee <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020a6:	f000 f8bd 	bl	8002224 <prvIsQueueEmpty>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d018      	beq.n	80020e2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	3324      	adds	r3, #36	; 0x24
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fed7 	bl	8002e6c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80020be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020c0:	f000 f85e 	bl	8002180 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80020c4:	f000 fc3e 	bl	8002944 <xTaskResumeAll>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f47f af69 	bne.w	8001fa2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <xQueueReceive+0x21c>)
 80020d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f3bf 8f4f 	dsb	sy
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	e75f      	b.n	8001fa2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80020e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020e4:	f000 f84c 	bl	8002180 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80020e8:	f000 fc2c 	bl	8002944 <xTaskResumeAll>
 80020ec:	e759      	b.n	8001fa2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80020ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020f0:	f000 f846 	bl	8002180 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80020f4:	f000 fc26 	bl	8002944 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020fa:	f000 f893 	bl	8002224 <prvIsQueueEmpty>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	f43f af4e 	beq.w	8001fa2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fd6f 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 800210e:	4604      	mov	r4, r0
 8002110:	2000      	movs	r0, #0
 8002112:	f003 fd6b 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2101      	movs	r1, #1
 800211c:	9100      	str	r1, [sp, #0]
 800211e:	4621      	mov	r1, r4
 8002120:	205c      	movs	r0, #92	; 0x5c
 8002122:	f003 f86f 	bl	8005204 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002126:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002128:	4618      	mov	r0, r3
 800212a:	3734      	adds	r7, #52	; 0x34
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d018      	beq.n	8002178 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	441a      	add	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	d303      	bcc.n	8002168 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	461a      	mov	r2, r3
 8002172:	6838      	ldr	r0, [r7, #0]
 8002174:	f003 febe 	bl	8005ef4 <memcpy>
    }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002188:	f001 ff84 	bl	8004094 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002192:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002194:	e011      	b.n	80021ba <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3324      	adds	r3, #36	; 0x24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fece 	bl	8002f44 <xTaskRemoveFromEventList>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80021ae:	f001 f81d 	bl	80031ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dce9      	bgt.n	8002196 <prvUnlockQueue+0x16>
 80021c2:	e000      	b.n	80021c6 <prvUnlockQueue+0x46>
                        break;
 80021c4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	22ff      	movs	r2, #255	; 0xff
 80021ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80021ce:	f001 ff91 	bl	80040f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80021d2:	f001 ff5f 	bl	8004094 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021dc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80021de:	e011      	b.n	8002204 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3310      	adds	r3, #16
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fea9 	bl	8002f44 <xTaskRemoveFromEventList>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80021f8:	f000 fff8 	bl	80031ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	3b01      	subs	r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002208:	2b00      	cmp	r3, #0
 800220a:	dce9      	bgt.n	80021e0 <prvUnlockQueue+0x60>
 800220c:	e000      	b.n	8002210 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800220e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002218:	f001 ff6c 	bl	80040f4 <vPortExitCritical>
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800222c:	f001 ff32 	bl	8004094 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e001      	b.n	8002242 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002242:	f001 ff57 	bl	80040f4 <vPortExitCritical>

    return xReturn;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <vQueueAddToRegistry+0x26>
        __asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	60fb      	str	r3, [r7, #12]
    }
 8002272:	bf00      	nop
 8002274:	e7fe      	b.n	8002274 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d024      	beq.n	80022ca <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e01e      	b.n	80022c4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002286:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <vQueueAddToRegistry+0xa8>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	d105      	bne.n	80022a2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <vQueueAddToRegistry+0xa8>)
 800229c:	4413      	add	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
                    break;
 80022a0:	e013      	b.n	80022ca <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <vQueueAddToRegistry+0x6e>
 80022a8:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <vQueueAddToRegistry+0xa8>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <vQueueAddToRegistry+0xa8>)
 80022ba:	4413      	add	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b07      	cmp	r3, #7
 80022c8:	d9dd      	bls.n	8002286 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00f      	beq.n	80022f0 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fc84 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 80022e4:	4601      	mov	r1, r0
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	2071      	movs	r0, #113	; 0x71
 80022ec:	f002 feba 	bl	8005064 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000048 	.word	0x20000048

080022fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800230c:	f001 fec2 	bl	8004094 <vPortEnterCritical>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002316:	b25b      	sxtb	r3, r3
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d103      	bne.n	8002326 <vQueueWaitForMessageRestricted+0x2a>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232c:	b25b      	sxtb	r3, r3
 800232e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002332:	d103      	bne.n	800233c <vQueueWaitForMessageRestricted+0x40>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800233c:	f001 feda 	bl	80040f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3324      	adds	r3, #36	; 0x24
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fdaf 	bl	8002eb4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff12 	bl	8002180 <prvUnlockQueue>
    }
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af04      	add	r7, sp, #16
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f001 ff77 	bl	800426c <pvPortMalloc>
 800237e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00e      	beq.n	80023a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002386:	2058      	movs	r0, #88	; 0x58
 8002388:	f001 ff70 	bl	800426c <pvPortMalloc>
 800238c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
 800239a:	e005      	b.n	80023a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f002 f845 	bl	800442c <vPortFree>
 80023a2:	e001      	b.n	80023a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d013      	beq.n	80023d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	2300      	movs	r3, #0
 80023b2:	9303      	str	r3, [sp, #12]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	9302      	str	r3, [sp, #8]
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f80e 	bl	80023e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023ca:	69f8      	ldr	r0, [r7, #28]
 80023cc:	f000 f8b0 	bl	8002530 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023d0:	2301      	movs	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e002      	b.n	80023dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023dc:	69bb      	ldr	r3, [r7, #24]
    }
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b088      	sub	sp, #32
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	21a5      	movs	r1, #165	; 0xa5
 8002400:	f003 fd4c 	bl	8005e9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800240e:	3b01      	subs	r3, #1
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f023 0307 	bic.w	r3, r3, #7
 800241c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	617b      	str	r3, [r7, #20]
    }
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01f      	beq.n	8002484 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	e012      	b.n	8002470 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	4413      	add	r3, r2
 8002450:	7819      	ldrb	r1, [r3, #0]
 8002452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	3334      	adds	r3, #52	; 0x34
 800245a:	460a      	mov	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3301      	adds	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b09      	cmp	r3, #9
 8002474:	d9e9      	bls.n	800244a <prvInitialiseNewTask+0x64>
 8002476:	e000      	b.n	800247a <prvInitialiseNewTask+0x94>
            {
                break;
 8002478:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002482:	e003      	b.n	800248c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248e:	2b04      	cmp	r3, #4
 8002490:	d90a      	bls.n	80024a8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	613b      	str	r3, [r7, #16]
    }
 80024a4:	bf00      	nop
 80024a6:	e7fe      	b.n	80024a6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d901      	bls.n	80024b2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024ae:	2304      	movs	r3, #4
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024bc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	2200      	movs	r2, #0
 80024c2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	3304      	adds	r3, #4
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fb87 	bl	8001bdc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	3318      	adds	r3, #24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fb82 	bl	8001bdc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024dc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	f1c3 0205 	rsb	r2, r3, #5
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	3350      	adds	r3, #80	; 0x50
 80024f2:	2204      	movs	r2, #4
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fcd0 	bl	8005e9c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fe:	3354      	adds	r3, #84	; 0x54
 8002500:	2201      	movs	r2, #1
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fcc9 	bl	8005e9c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f001 fc14 	bl	8003d3c <pxPortInitialiseStack>
 8002514:	4602      	mov	r2, r0
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002524:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002530:	b5b0      	push	{r4, r5, r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af02      	add	r7, sp, #8
 8002536:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002538:	f001 fdac 	bl	8004094 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800253c:	4b4f      	ldr	r3, [pc, #316]	; (800267c <prvAddNewTaskToReadyList+0x14c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	4a4e      	ldr	r2, [pc, #312]	; (800267c <prvAddNewTaskToReadyList+0x14c>)
 8002544:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <prvAddNewTaskToReadyList+0x150>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800254e:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <prvAddNewTaskToReadyList+0x150>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002554:	4b49      	ldr	r3, [pc, #292]	; (800267c <prvAddNewTaskToReadyList+0x14c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d110      	bne.n	800257e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800255c:	f000 fe6a 	bl	8003234 <prvInitialiseTaskLists>
 8002560:	e00d      	b.n	800257e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002562:	4b48      	ldr	r3, [pc, #288]	; (8002684 <prvAddNewTaskToReadyList+0x154>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d109      	bne.n	800257e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <prvAddNewTaskToReadyList+0x150>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	429a      	cmp	r2, r3
 8002576:	d802      	bhi.n	800257e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002578:	4a41      	ldr	r2, [pc, #260]	; (8002680 <prvAddNewTaskToReadyList+0x150>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800257e:	4b42      	ldr	r3, [pc, #264]	; (8002688 <prvAddNewTaskToReadyList+0x158>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	4a40      	ldr	r2, [pc, #256]	; (8002688 <prvAddNewTaskToReadyList+0x158>)
 8002586:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <prvAddNewTaskToReadyList+0x158>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <prvAddNewTaskToReadyList+0x94>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f003 fa01 	bl	80059a0 <SEGGER_SYSVIEW_OnTaskCreate>
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	461d      	mov	r5, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461c      	mov	r4, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	1ae3      	subs	r3, r4, r3
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	462b      	mov	r3, r5
 80025c0:	f002 f852 	bl	8004668 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fa6e 	bl	8005aa8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	2201      	movs	r2, #1
 80025d2:	409a      	lsls	r2, r3
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <prvAddNewTaskToReadyList+0x15c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4313      	orrs	r3, r2
 80025da:	4a2c      	ldr	r2, [pc, #176]	; (800268c <prvAddNewTaskToReadyList+0x15c>)
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	492b      	ldr	r1, [pc, #172]	; (8002690 <prvAddNewTaskToReadyList+0x160>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	3304      	adds	r3, #4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	3204      	adds	r2, #4
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4a1b      	ldr	r2, [pc, #108]	; (8002690 <prvAddNewTaskToReadyList+0x160>)
 8002622:	441a      	add	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	615a      	str	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262c:	4918      	ldr	r1, [pc, #96]	; (8002690 <prvAddNewTaskToReadyList+0x160>)
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	4814      	ldr	r0, [pc, #80]	; (8002690 <prvAddNewTaskToReadyList+0x160>)
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4403      	add	r3, r0
 8002648:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800264a:	f001 fd53 	bl	80040f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <prvAddNewTaskToReadyList+0x154>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00e      	beq.n	8002674 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <prvAddNewTaskToReadyList+0x150>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <prvAddNewTaskToReadyList+0x164>)
 8002666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bdb0      	pop	{r4, r5, r7, pc}
 800267c:	20000160 	.word	0x20000160
 8002680:	20000088 	.word	0x20000088
 8002684:	2000016c 	.word	0x2000016c
 8002688:	2000017c 	.word	0x2000017c
 800268c:	20000168 	.word	0x20000168
 8002690:	2000008c 	.word	0x2000008c
 8002694:	e000ed04 	.word	0xe000ed04

08002698 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80026a0:	f001 fcf8 	bl	8004094 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <vTaskDelete+0x18>
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <vTaskDelete+0x134>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e000      	b.n	80026b2 <vTaskDelete+0x1a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff faf9 	bl	8001cb0 <uxListRemove>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d115      	bne.n	80026f0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	4941      	ldr	r1, [pc, #260]	; (80027d0 <vTaskDelete+0x138>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <vTaskDelete+0x58>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2201      	movs	r2, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43da      	mvns	r2, r3
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <vTaskDelete+0x13c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4013      	ands	r3, r2
 80026ec:	4a39      	ldr	r2, [pc, #228]	; (80027d4 <vTaskDelete+0x13c>)
 80026ee:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3318      	adds	r3, #24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fad7 	bl	8001cb0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002702:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <vTaskDelete+0x140>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <vTaskDelete+0x140>)
 800270a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800270c:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <vTaskDelete+0x134>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	429a      	cmp	r2, r3
 8002714:	d118      	bne.n	8002748 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3304      	adds	r3, #4
 800271a:	4619      	mov	r1, r3
 800271c:	482f      	ldr	r0, [pc, #188]	; (80027dc <vTaskDelete+0x144>)
 800271e:	f7ff fa6a 	bl	8001bf6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002722:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <vTaskDelete+0x148>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	4a2d      	ldr	r2, [pc, #180]	; (80027e0 <vTaskDelete+0x148>)
 800272a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fa5c 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 8002734:	4603      	mov	r3, r0
 8002736:	4619      	mov	r1, r3
 8002738:	2022      	movs	r0, #34	; 0x22
 800273a:	f002 fc57 	bl	8004fec <SEGGER_SYSVIEW_RecordU32>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f001 fff9 	bl	8004738 <SYSVIEW_DeleteTask>
 8002746:	e013      	b.n	8002770 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002748:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <vTaskDelete+0x14c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3b01      	subs	r3, #1
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <vTaskDelete+0x14c>)
 8002750:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4618      	mov	r0, r3
 8002756:	f003 fa49 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	2022      	movs	r0, #34	; 0x22
 8002760:	f002 fc44 	bl	8004fec <SEGGER_SYSVIEW_RecordU32>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4618      	mov	r0, r3
 8002768:	f001 ffe6 	bl	8004738 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800276c:	f000 fde0 	bl	8003330 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002770:	f001 fcc0 	bl	80040f4 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <vTaskDelete+0x134>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	429a      	cmp	r2, r3
 800277c:	d002      	beq.n	8002784 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 fdc6 	bl	8003310 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <vTaskDelete+0x150>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <vTaskDelete+0x134>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	d116      	bne.n	80027c4 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <vTaskDelete+0x154>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <vTaskDelete+0x11c>
        __asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	60bb      	str	r3, [r7, #8]
    }
 80027b0:	bf00      	nop
 80027b2:	e7fe      	b.n	80027b2 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <vTaskDelete+0x158>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000088 	.word	0x20000088
 80027d0:	2000008c 	.word	0x2000008c
 80027d4:	20000168 	.word	0x20000168
 80027d8:	2000017c 	.word	0x2000017c
 80027dc:	20000134 	.word	0x20000134
 80027e0:	20000148 	.word	0x20000148
 80027e4:	20000160 	.word	0x20000160
 80027e8:	2000016c 	.word	0x2000016c
 80027ec:	20000188 	.word	0x20000188
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01b      	beq.n	800283e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <vTaskDelay+0x68>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <vTaskDelay+0x30>
        __asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	60bb      	str	r3, [r7, #8]
    }
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002824:	f000 f880 	bl	8002928 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	2023      	movs	r0, #35	; 0x23
 800282c:	f002 fbde 	bl	8004fec <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002830:	2100      	movs	r1, #0
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 ff72 	bl	800371c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002838:	f000 f884 	bl	8002944 <xTaskResumeAll>
 800283c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <vTaskDelay+0x6c>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000188 	.word	0x20000188
 8002860:	e000ed04 	.word	0xe000ed04

08002864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <vTaskStartScheduler+0xa4>)
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2300      	movs	r3, #0
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	2282      	movs	r2, #130	; 0x82
 8002876:	4925      	ldr	r1, [pc, #148]	; (800290c <vTaskStartScheduler+0xa8>)
 8002878:	4825      	ldr	r0, [pc, #148]	; (8002910 <vTaskStartScheduler+0xac>)
 800287a:	f7ff fd73 	bl	8002364 <xTaskCreate>
 800287e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002886:	f000 ffd5 	bl	8003834 <xTimerCreateTimerTask>
 800288a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d124      	bne.n	80028dc <vTaskStartScheduler+0x78>
        __asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	60bb      	str	r3, [r7, #8]
    }
 80028a4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <vTaskStartScheduler+0xb0>)
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <vTaskStartScheduler+0xb4>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <vTaskStartScheduler+0xb8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <vTaskStartScheduler+0xbc>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <vTaskStartScheduler+0xa4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d102      	bne.n	80028cc <vTaskStartScheduler+0x68>
 80028c6:	f003 f84f 	bl	8005968 <SEGGER_SYSVIEW_OnIdle>
 80028ca:	e004      	b.n	80028d6 <vTaskStartScheduler+0x72>
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <vTaskStartScheduler+0xbc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 f8a7 	bl	8005a24 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028d6:	f001 fabd 	bl	8003e54 <xPortStartScheduler>
 80028da:	e00e      	b.n	80028fa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d10a      	bne.n	80028fa <vTaskStartScheduler+0x96>
        __asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	607b      	str	r3, [r7, #4]
    }
 80028f6:	bf00      	nop
 80028f8:	e7fe      	b.n	80028f8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <vTaskStartScheduler+0xc0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000184 	.word	0x20000184
 800290c:	08005f64 	.word	0x08005f64
 8002910:	08003205 	.word	0x08003205
 8002914:	20000180 	.word	0x20000180
 8002918:	2000016c 	.word	0x2000016c
 800291c:	20000164 	.word	0x20000164
 8002920:	20000088 	.word	0x20000088
 8002924:	2000000c 	.word	0x2000000c

08002928 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <vTaskSuspendAll+0x18>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a03      	ldr	r2, [pc, #12]	; (8002940 <vTaskSuspendAll+0x18>)
 8002934:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	20000188 	.word	0x20000188

08002944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002952:	4b73      	ldr	r3, [pc, #460]	; (8002b20 <xTaskResumeAll+0x1dc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <xTaskResumeAll+0x2c>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	607b      	str	r3, [r7, #4]
    }
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002970:	f001 fb90 	bl	8004094 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <xTaskResumeAll+0x1dc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	4a69      	ldr	r2, [pc, #420]	; (8002b20 <xTaskResumeAll+0x1dc>)
 800297c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800297e:	4b68      	ldr	r3, [pc, #416]	; (8002b20 <xTaskResumeAll+0x1dc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 80c4 	bne.w	8002b10 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002988:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <xTaskResumeAll+0x1e0>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80bf 	beq.w	8002b10 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002992:	e08e      	b.n	8002ab2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002994:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <xTaskResumeAll+0x1e4>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	6a12      	ldr	r2, [r2, #32]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	69d2      	ldr	r2, [r2, #28]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3318      	adds	r3, #24
 80029be:	429a      	cmp	r2, r3
 80029c0:	d103      	bne.n	80029ca <xTaskResumeAll+0x86>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2200      	movs	r2, #0
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1e5a      	subs	r2, r3, #1
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	68d2      	ldr	r2, [r2, #12]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	6892      	ldr	r2, [r2, #8]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3304      	adds	r3, #4
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d103      	bne.n	8002a08 <xTaskResumeAll+0xc4>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	615a      	str	r2, [r3, #20]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	1e5a      	subs	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f003 f844 	bl	8005aa8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2201      	movs	r2, #1
 8002a26:	409a      	lsls	r2, r3
 8002a28:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <xTaskResumeAll+0x1e8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	4a3f      	ldr	r2, [pc, #252]	; (8002b2c <xTaskResumeAll+0x1e8>)
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a36:	493e      	ldr	r1, [pc, #248]	; (8002b30 <xTaskResumeAll+0x1ec>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3304      	adds	r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	3204      	adds	r2, #4
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	1d1a      	adds	r2, r3, #4
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <xTaskResumeAll+0x1ec>)
 8002a76:	441a      	add	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	615a      	str	r2, [r3, #20]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	492b      	ldr	r1, [pc, #172]	; (8002b30 <xTaskResumeAll+0x1ec>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c59      	adds	r1, r3, #1
 8002a90:	4827      	ldr	r0, [pc, #156]	; (8002b30 <xTaskResumeAll+0x1ec>)
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4403      	add	r3, r0
 8002a9c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <xTaskResumeAll+0x1f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <xTaskResumeAll+0x1f4>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <xTaskResumeAll+0x1e4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f47f af6c 	bne.w	8002994 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ac2:	f000 fc35 	bl	8003330 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <xTaskResumeAll+0x1f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ad2:	f000 f847 	bl	8002b64 <xTaskIncrementTick>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <xTaskResumeAll+0x1f4>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f1      	bne.n	8002ad2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <xTaskResumeAll+0x1f8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <xTaskResumeAll+0x1f4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d009      	beq.n	8002b10 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <xTaskResumeAll+0x1fc>)
 8002b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b10:	f001 faf0 	bl	80040f4 <vPortExitCritical>

    return xAlreadyYielded;
 8002b14:	69bb      	ldr	r3, [r7, #24]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000188 	.word	0x20000188
 8002b24:	20000160 	.word	0x20000160
 8002b28:	20000120 	.word	0x20000120
 8002b2c:	20000168 	.word	0x20000168
 8002b30:	2000008c 	.word	0x2000008c
 8002b34:	20000088 	.word	0x20000088
 8002b38:	20000174 	.word	0x20000174
 8002b3c:	20000170 	.word	0x20000170
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <xTaskGetTickCount+0x1c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b50:	687b      	ldr	r3, [r7, #4]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000164 	.word	0x20000164

08002b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b6e:	4b7f      	ldr	r3, [pc, #508]	; (8002d6c <xTaskIncrementTick+0x208>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 80f0 	bne.w	8002d58 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b78:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <xTaskIncrementTick+0x20c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b80:	4a7b      	ldr	r2, [pc, #492]	; (8002d70 <xTaskIncrementTick+0x20c>)
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d120      	bne.n	8002bce <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <xTaskIncrementTick+0x210>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <xTaskIncrementTick+0x48>
        __asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	607b      	str	r3, [r7, #4]
    }
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <xTaskIncrementTick+0x46>
 8002bac:	4b71      	ldr	r3, [pc, #452]	; (8002d74 <xTaskIncrementTick+0x210>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <xTaskIncrementTick+0x214>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6f      	ldr	r2, [pc, #444]	; (8002d74 <xTaskIncrementTick+0x210>)
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4a6f      	ldr	r2, [pc, #444]	; (8002d78 <xTaskIncrementTick+0x214>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <xTaskIncrementTick+0x218>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	4a6d      	ldr	r2, [pc, #436]	; (8002d7c <xTaskIncrementTick+0x218>)
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	f000 fbb1 	bl	8003330 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bce:	4b6c      	ldr	r3, [pc, #432]	; (8002d80 <xTaskIncrementTick+0x21c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f0c0 80aa 	bcc.w	8002d2e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bda:	4b66      	ldr	r3, [pc, #408]	; (8002d74 <xTaskIncrementTick+0x210>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be4:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <xTaskIncrementTick+0x21c>)
 8002be6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bea:	601a      	str	r2, [r3, #0]
                    break;
 8002bec:	e09f      	b.n	8002d2e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bee:	4b61      	ldr	r3, [pc, #388]	; (8002d74 <xTaskIncrementTick+0x210>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d203      	bcs.n	8002c0e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c06:	4a5e      	ldr	r2, [pc, #376]	; (8002d80 <xTaskIncrementTick+0x21c>)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c0c:	e08f      	b.n	8002d2e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	68d2      	ldr	r2, [r2, #12]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	6892      	ldr	r2, [r2, #8]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d103      	bne.n	8002c3c <xTaskIncrementTick+0xd8>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1e5a      	subs	r2, r3, #1
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01e      	beq.n	8002c92 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	6a12      	ldr	r2, [r2, #32]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	69d2      	ldr	r2, [r2, #28]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	3318      	adds	r3, #24
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d103      	bne.n	8002c82 <xTaskIncrementTick+0x11e>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2200      	movs	r2, #0
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	1e5a      	subs	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 ff07 	bl	8005aa8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	4b38      	ldr	r3, [pc, #224]	; (8002d84 <xTaskIncrementTick+0x220>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	4a36      	ldr	r2, [pc, #216]	; (8002d84 <xTaskIncrementTick+0x220>)
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4935      	ldr	r1, [pc, #212]	; (8002d88 <xTaskIncrementTick+0x224>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	3204      	adds	r2, #4
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	1d1a      	adds	r2, r3, #4
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <xTaskIncrementTick+0x224>)
 8002cf0:	441a      	add	r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	615a      	str	r2, [r3, #20]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	4923      	ldr	r1, [pc, #140]	; (8002d88 <xTaskIncrementTick+0x224>)
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	1c59      	adds	r1, r3, #1
 8002d0a:	481f      	ldr	r0, [pc, #124]	; (8002d88 <xTaskIncrementTick+0x224>)
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4403      	add	r3, r0
 8002d16:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <xTaskIncrementTick+0x228>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	f4ff af59 	bcc.w	8002bda <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d2c:	e755      	b.n	8002bda <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <xTaskIncrementTick+0x228>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	4914      	ldr	r1, [pc, #80]	; (8002d88 <xTaskIncrementTick+0x224>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d901      	bls.n	8002d4a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <xTaskIncrementTick+0x22c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002d52:	2301      	movs	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
 8002d56:	e004      	b.n	8002d62 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <xTaskIncrementTick+0x230>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <xTaskIncrementTick+0x230>)
 8002d60:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000188 	.word	0x20000188
 8002d70:	20000164 	.word	0x20000164
 8002d74:	20000118 	.word	0x20000118
 8002d78:	2000011c 	.word	0x2000011c
 8002d7c:	20000178 	.word	0x20000178
 8002d80:	20000180 	.word	0x20000180
 8002d84:	20000168 	.word	0x20000168
 8002d88:	2000008c 	.word	0x2000008c
 8002d8c:	20000088 	.word	0x20000088
 8002d90:	20000174 	.word	0x20000174
 8002d94:	20000170 	.word	0x20000170

08002d98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <vTaskSwitchContext+0xbc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002da6:	4b2c      	ldr	r3, [pc, #176]	; (8002e58 <vTaskSwitchContext+0xc0>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002dac:	e04d      	b.n	8002e4a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <vTaskSwitchContext+0xc0>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <vTaskSwitchContext+0xc4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	fab3 f383 	clz	r3, r3
 8002dc0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dc2:	7afb      	ldrb	r3, [r7, #11]
 8002dc4:	f1c3 031f 	rsb	r3, r3, #31
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	4925      	ldr	r1, [pc, #148]	; (8002e60 <vTaskSwitchContext+0xc8>)
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10a      	bne.n	8002df4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	607b      	str	r3, [r7, #4]
    }
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <vTaskSwitchContext+0x5a>
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <vTaskSwitchContext+0xc8>)
 8002e00:	4413      	add	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	3308      	adds	r3, #8
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d104      	bne.n	8002e24 <vTaskSwitchContext+0x8c>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <vTaskSwitchContext+0xcc>)
 8002e2c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <vTaskSwitchContext+0xcc>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <vTaskSwitchContext+0xd0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d102      	bne.n	8002e40 <vTaskSwitchContext+0xa8>
 8002e3a:	f002 fd95 	bl	8005968 <SEGGER_SYSVIEW_OnIdle>
}
 8002e3e:	e004      	b.n	8002e4a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <vTaskSwitchContext+0xcc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fded 	bl	8005a24 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e4a:	bf00      	nop
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000188 	.word	0x20000188
 8002e58:	20000174 	.word	0x20000174
 8002e5c:	20000168 	.word	0x20000168
 8002e60:	2000008c 	.word	0x2000008c
 8002e64:	20000088 	.word	0x20000088
 8002e68:	20000184 	.word	0x20000184

08002e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60fb      	str	r3, [r7, #12]
    }
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <vTaskPlaceOnEventList+0x44>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3318      	adds	r3, #24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe fecf 	bl	8001c3e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f000 fc3a 	bl	800371c <prvAddCurrentTaskToDelayedList>
}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000088 	.word	0x20000088

08002eb4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	613b      	str	r3, [r7, #16]
    }
 8002ed8:	bf00      	nop
 8002eda:	e7fe      	b.n	8002eda <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	61da      	str	r2, [r3, #28]
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	6892      	ldr	r2, [r2, #8]
 8002ef2:	621a      	str	r2, [r3, #32]
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	3218      	adds	r2, #24
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f103 0218 	add.w	r2, r3, #24
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
 8002f28:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002f2a:	2024      	movs	r0, #36	; 0x24
 8002f2c:	f002 f840 	bl	8004fb0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	68b8      	ldr	r0, [r7, #8]
 8002f34:	f000 fbf2 	bl	800371c <prvAddCurrentTaskToDelayedList>
    }
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000088 	.word	0x20000088

08002f44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	60fb      	str	r3, [r7, #12]
    }
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	6a3a      	ldr	r2, [r7, #32]
 8002f7c:	6a12      	ldr	r2, [r2, #32]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	69d2      	ldr	r2, [r2, #28]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	3318      	adds	r3, #24
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d103      	bne.n	8002f9e <xTaskRemoveFromEventList+0x5a>
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1e5a      	subs	r2, r3, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fae:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <xTaskRemoveFromEventList+0x198>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d162      	bne.n	800307c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	6a3a      	ldr	r2, [r7, #32]
 8002fc2:	68d2      	ldr	r2, [r2, #12]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	6892      	ldr	r2, [r2, #8]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d103      	bne.n	8002fe4 <xTaskRemoveFromEventList+0xa0>
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	615a      	str	r2, [r3, #20]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	1e5a      	subs	r2, r3, #1
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 fd56 	bl	8005aa8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <xTaskRemoveFromEventList+0x19c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <xTaskRemoveFromEventList+0x19c>)
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003012:	4934      	ldr	r1, [pc, #208]	; (80030e4 <xTaskRemoveFromEventList+0x1a0>)
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3304      	adds	r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	6a3a      	ldr	r2, [r7, #32]
 8003038:	3204      	adds	r2, #4
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	1d1a      	adds	r2, r3, #4
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4a24      	ldr	r2, [pc, #144]	; (80030e4 <xTaskRemoveFromEventList+0x1a0>)
 8003052:	441a      	add	r2, r3
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	615a      	str	r2, [r3, #20]
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305c:	4921      	ldr	r1, [pc, #132]	; (80030e4 <xTaskRemoveFromEventList+0x1a0>)
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	481d      	ldr	r0, [pc, #116]	; (80030e4 <xTaskRemoveFromEventList+0x1a0>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4403      	add	r3, r0
 8003078:	6019      	str	r1, [r3, #0]
 800307a:	e01b      	b.n	80030b4 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <xTaskRemoveFromEventList+0x1a4>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	61da      	str	r2, [r3, #28]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	621a      	str	r2, [r3, #32]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	3218      	adds	r2, #24
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f103 0218 	add.w	r2, r3, #24
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	4a10      	ldr	r2, [pc, #64]	; (80030e8 <xTaskRemoveFromEventList+0x1a4>)
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <xTaskRemoveFromEventList+0x1a4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <xTaskRemoveFromEventList+0x1a4>)
 80030b2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <xTaskRemoveFromEventList+0x1a8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	429a      	cmp	r2, r3
 80030c0:	d905      	bls.n	80030ce <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <xTaskRemoveFromEventList+0x1ac>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e001      	b.n	80030d2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000188 	.word	0x20000188
 80030e0:	20000168 	.word	0x20000168
 80030e4:	2000008c 	.word	0x2000008c
 80030e8:	20000120 	.word	0x20000120
 80030ec:	20000088 	.word	0x20000088
 80030f0:	20000174 	.word	0x20000174

080030f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <vTaskInternalSetTimeOutState+0x24>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <vTaskInternalSetTimeOutState+0x28>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	20000178 	.word	0x20000178
 800311c:	20000164 	.word	0x20000164

08003120 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	613b      	str	r3, [r7, #16]
    }
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60fb      	str	r3, [r7, #12]
    }
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003162:	f000 ff97 	bl	8004094 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003166:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <xTaskCheckForTimeOut+0xc4>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d102      	bne.n	8003186 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e026      	b.n	80031d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <xTaskCheckForTimeOut+0xc8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d00a      	beq.n	80031a8 <xTaskCheckForTimeOut+0x88>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	429a      	cmp	r2, r3
 800319a:	d305      	bcc.n	80031a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800319c:	2301      	movs	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e015      	b.n	80031d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20b      	bcs.n	80031ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad2      	subs	r2, r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ff98 	bl	80030f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e004      	b.n	80031d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031d4:	f000 ff8e 	bl	80040f4 <vPortExitCritical>

    return xReturn;
 80031d8:	69fb      	ldr	r3, [r7, #28]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000164 	.word	0x20000164
 80031e8:	20000178 	.word	0x20000178

080031ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <vTaskMissedYield+0x14>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000174 	.word	0x20000174

08003204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800320c:	f000 f852 	bl	80032b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <prvIdleTask+0x28>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d9f9      	bls.n	800320c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <prvIdleTask+0x2c>)
 800321a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003228:	e7f0      	b.n	800320c <prvIdleTask+0x8>
 800322a:	bf00      	nop
 800322c:	2000008c 	.word	0x2000008c
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	e00c      	b.n	800325a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <prvInitialiseTaskLists+0x60>)
 800324c:	4413      	add	r3, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe fca4 	bl	8001b9c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3301      	adds	r3, #1
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d9ef      	bls.n	8003240 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003260:	480d      	ldr	r0, [pc, #52]	; (8003298 <prvInitialiseTaskLists+0x64>)
 8003262:	f7fe fc9b 	bl	8001b9c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003266:	480d      	ldr	r0, [pc, #52]	; (800329c <prvInitialiseTaskLists+0x68>)
 8003268:	f7fe fc98 	bl	8001b9c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800326c:	480c      	ldr	r0, [pc, #48]	; (80032a0 <prvInitialiseTaskLists+0x6c>)
 800326e:	f7fe fc95 	bl	8001b9c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <prvInitialiseTaskLists+0x70>)
 8003274:	f7fe fc92 	bl	8001b9c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003278:	480b      	ldr	r0, [pc, #44]	; (80032a8 <prvInitialiseTaskLists+0x74>)
 800327a:	f7fe fc8f 	bl	8001b9c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <prvInitialiseTaskLists+0x78>)
 8003280:	4a05      	ldr	r2, [pc, #20]	; (8003298 <prvInitialiseTaskLists+0x64>)
 8003282:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <prvInitialiseTaskLists+0x7c>)
 8003286:	4a05      	ldr	r2, [pc, #20]	; (800329c <prvInitialiseTaskLists+0x68>)
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	2000008c 	.word	0x2000008c
 8003298:	200000f0 	.word	0x200000f0
 800329c:	20000104 	.word	0x20000104
 80032a0:	20000120 	.word	0x20000120
 80032a4:	20000134 	.word	0x20000134
 80032a8:	2000014c 	.word	0x2000014c
 80032ac:	20000118 	.word	0x20000118
 80032b0:	2000011c 	.word	0x2000011c

080032b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ba:	e019      	b.n	80032f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80032bc:	f000 feea 	bl	8004094 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c0:	4b10      	ldr	r3, [pc, #64]	; (8003304 <prvCheckTasksWaitingTermination+0x50>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fcef 	bl	8001cb0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <prvCheckTasksWaitingTermination+0x54>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <prvCheckTasksWaitingTermination+0x54>)
 80032da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <prvCheckTasksWaitingTermination+0x58>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <prvCheckTasksWaitingTermination+0x58>)
 80032e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80032e6:	f000 ff05 	bl	80040f4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f810 	bl	8003310 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <prvCheckTasksWaitingTermination+0x58>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e1      	bne.n	80032bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000134 	.word	0x20000134
 8003308:	20000160 	.word	0x20000160
 800330c:	20000148 	.word	0x20000148

08003310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f885 	bl	800442c <vPortFree>
                vPortFree( pxTCB );
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 f882 	bl	800442c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <prvResetNextTaskUnblockTime+0x30>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <prvResetNextTaskUnblockTime+0x34>)
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003346:	e005      	b.n	8003354 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <prvResetNextTaskUnblockTime+0x30>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <prvResetNextTaskUnblockTime+0x34>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	20000118 	.word	0x20000118
 8003364:	20000180 	.word	0x20000180

08003368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <xTaskGetSchedulerState+0x34>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003376:	2301      	movs	r3, #1
 8003378:	607b      	str	r3, [r7, #4]
 800337a:	e008      	b.n	800338e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <xTaskGetSchedulerState+0x38>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003384:	2302      	movs	r3, #2
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	e001      	b.n	800338e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800338e:	687b      	ldr	r3, [r7, #4]
    }
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	2000016c 	.word	0x2000016c
 80033a0:	20000188 	.word	0x20000188

080033a4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	613b      	str	r3, [r7, #16]
    }
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80033ce:	f000 fe61 	bl	8004094 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80033d2:	4b36      	ldr	r3, [pc, #216]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	3354      	adds	r3, #84	; 0x54
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d022      	beq.n	800342a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	3214      	adds	r2, #20
 80033ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	43d2      	mvns	r2, r2
 80033f4:	4011      	ands	r1, r2
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	3214      	adds	r2, #20
 80033fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80033fe:	4b2b      	ldr	r3, [pc, #172]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4413      	add	r3, r2
 8003406:	3354      	adds	r3, #84	; 0x54
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003412:	2101      	movs	r1, #1
 8003414:	6a38      	ldr	r0, [r7, #32]
 8003416:	f000 f981 	bl	800371c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800341a:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <xTaskGenericNotifyWait+0x10c>)
 800341c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800342a:	f000 fe63 	bl	80040f4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800342e:	f000 fe31 	bl	8004094 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	2040      	movs	r0, #64	; 0x40
 8003440:	f001 fee0 	bl	8005204 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d007      	beq.n	800345a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	3214      	adds	r2, #20
 8003452:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4413      	add	r3, r2
 8003462:	3354      	adds	r3, #84	; 0x54
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d002      	beq.n	8003472 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e00e      	b.n	8003490 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	3214      	adds	r2, #20
 800347a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	43d2      	mvns	r2, r2
 8003482:	4011      	ands	r1, r2
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	3214      	adds	r2, #20
 8003488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <xTaskGenericNotifyWait+0x108>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	3354      	adds	r3, #84	; 0x54
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800349e:	f000 fe29 	bl	80040f4 <vPortExitCritical>

        return xReturn;
 80034a2:	697b      	ldr	r3, [r7, #20]
    }
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000088 	.word	0x20000088
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b090      	sub	sp, #64	; 0x40
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80034c2:	2301      	movs	r3, #1
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <xTaskGenericNotify+0x2e>
        __asm volatile
 80034cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	623b      	str	r3, [r7, #32]
    }
 80034de:	bf00      	nop
 80034e0:	e7fe      	b.n	80034e0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xTaskGenericNotify+0x4a>
        __asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61fb      	str	r3, [r7, #28]
    }
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003502:	f000 fdc7 	bl	8004094 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	3214      	adds	r2, #20
 8003512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003518:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800351a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4413      	add	r3, r2
 8003520:	3354      	adds	r3, #84	; 0x54
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	3354      	adds	r3, #84	; 0x54
 8003530:	2202      	movs	r2, #2
 8003532:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d83b      	bhi.n	80035b2 <xTaskGenericNotify+0xfe>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <xTaskGenericNotify+0x8c>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	080035d1 	.word	0x080035d1
 8003544:	08003555 	.word	0x08003555
 8003548:	08003571 	.word	0x08003571
 800354c:	08003589 	.word	0x08003589
 8003550:	08003597 	.word	0x08003597
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	3214      	adds	r2, #20
 800355a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	ea42 0103 	orr.w	r1, r2, r3
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	3214      	adds	r2, #20
 800356a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800356e:	e032      	b.n	80035d6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	3214      	adds	r2, #20
 8003576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800357a:	1c59      	adds	r1, r3, #1
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	3214      	adds	r2, #20
 8003582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003586:	e026      	b.n	80035d6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	3214      	adds	r2, #20
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003594:	e01f      	b.n	80035d6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800359a:	2b02      	cmp	r3, #2
 800359c:	d006      	beq.n	80035ac <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	3214      	adds	r2, #20
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80035aa:	e014      	b.n	80035d6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 80035b0:	e011      	b.n	80035d6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80035b2:	4b55      	ldr	r3, [pc, #340]	; (8003708 <xTaskGenericNotify+0x254>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <xTaskGenericNotify+0x120>
        __asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	61bb      	str	r3, [r7, #24]
    }
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <xTaskGenericNotify+0x11a>
                    break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <xTaskGenericNotify+0x122>

                    break;
 80035d4:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 fb07 	bl	8005bec <SEGGER_SYSVIEW_ShrinkId>
 80035de:	4601      	mov	r1, r0
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	203e      	movs	r0, #62	; 0x3e
 80035ec:	f001 fe0a 	bl	8005204 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80035f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d17f      	bne.n	80036f8 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003604:	68d2      	ldr	r2, [r2, #12]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003618:	3304      	adds	r3, #4
 800361a:	429a      	cmp	r2, r3
 800361c:	d103      	bne.n	8003626 <xTaskGenericNotify+0x172>
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fa35 	bl	8005aa8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <xTaskGenericNotify+0x258>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	4a2f      	ldr	r2, [pc, #188]	; (800370c <xTaskGenericNotify+0x258>)
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	492e      	ldr	r1, [pc, #184]	; (8003710 <xTaskGenericNotify+0x25c>)
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3304      	adds	r3, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	60da      	str	r2, [r3, #12]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800367a:	3204      	adds	r2, #4
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <xTaskGenericNotify+0x25c>)
 8003694:	441a      	add	r2, r3
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	615a      	str	r2, [r3, #20]
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369e:	491c      	ldr	r1, [pc, #112]	; (8003710 <xTaskGenericNotify+0x25c>)
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	4818      	ldr	r0, [pc, #96]	; (8003710 <xTaskGenericNotify+0x25c>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4403      	add	r3, r0
 80036ba:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <xTaskGenericNotify+0x226>
        __asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	617b      	str	r3, [r7, #20]
    }
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <xTaskGenericNotify+0x260>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d907      	bls.n	80036f8 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <xTaskGenericNotify+0x264>)
 80036ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80036f8:	f000 fcfc 	bl	80040f4 <vPortExitCritical>

        return xReturn;
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80036fe:	4618      	mov	r0, r3
 8003700:	3738      	adds	r7, #56	; 0x38
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000164 	.word	0x20000164
 800370c:	20000168 	.word	0x20000168
 8003710:	2000008c 	.word	0x2000008c
 8003714:	20000088 	.word	0x20000088
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003726:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800372c:	4b3b      	ldr	r3, [pc, #236]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3304      	adds	r3, #4
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fabc 	bl	8001cb0 <uxListRemove>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2201      	movs	r2, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	4b34      	ldr	r3, [pc, #208]	; (8003820 <prvAddCurrentTaskToDelayedList+0x104>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4013      	ands	r3, r2
 8003752:	4a33      	ldr	r2, [pc, #204]	; (8003820 <prvAddCurrentTaskToDelayedList+0x104>)
 8003754:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d124      	bne.n	80037a8 <prvAddCurrentTaskToDelayedList+0x8c>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d021      	beq.n	80037a8 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <prvAddCurrentTaskToDelayedList+0x108>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b2c      	ldr	r3, [pc, #176]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	3204      	adds	r2, #4
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	1d1a      	adds	r2, r3, #4
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <prvAddCurrentTaskToDelayedList+0x108>)
 8003798:	615a      	str	r2, [r3, #20]
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <prvAddCurrentTaskToDelayedList+0x108>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	4a20      	ldr	r2, [pc, #128]	; (8003824 <prvAddCurrentTaskToDelayedList+0x108>)
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037a6:	e032      	b.n	800380e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d20f      	bcs.n	80037e0 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80037c0:	4b16      	ldr	r3, [pc, #88]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2104      	movs	r1, #4
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 f9b0 	bl	8005b2c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <prvAddCurrentTaskToDelayedList+0x10c>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f7fe fa30 	bl	8001c3e <vListInsert>
}
 80037de:	e016      	b.n	800380e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2104      	movs	r1, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 f9a0 	bl	8005b2c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <prvAddCurrentTaskToDelayedList+0x110>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <prvAddCurrentTaskToDelayedList+0x100>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7fe fa20 	bl	8001c3e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <prvAddCurrentTaskToDelayedList+0x114>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d202      	bcs.n	800380e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003808:	4a09      	ldr	r2, [pc, #36]	; (8003830 <prvAddCurrentTaskToDelayedList+0x114>)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6013      	str	r3, [r2, #0]
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000164 	.word	0x20000164
 800381c:	20000088 	.word	0x20000088
 8003820:	20000168 	.word	0x20000168
 8003824:	2000014c 	.word	0x2000014c
 8003828:	2000011c 	.word	0x2000011c
 800382c:	20000118 	.word	0x20000118
 8003830:	20000180 	.word	0x20000180

08003834 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800383e:	f000 fa47 	bl	8003cd0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <xTimerCreateTimerTask+0x54>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <xTimerCreateTimerTask+0x58>)
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2302      	movs	r3, #2
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003858:	490d      	ldr	r1, [pc, #52]	; (8003890 <xTimerCreateTimerTask+0x5c>)
 800385a:	480e      	ldr	r0, [pc, #56]	; (8003894 <xTimerCreateTimerTask+0x60>)
 800385c:	f7fe fd82 	bl	8002364 <xTaskCreate>
 8003860:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	603b      	str	r3, [r7, #0]
    }
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800387e:	687b      	ldr	r3, [r7, #4]
    }
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200001bc 	.word	0x200001bc
 800388c:	200001c0 	.word	0x200001c0
 8003890:	08005f6c 	.word	0x08005f6c
 8003894:	0800393d 	.word	0x0800393d

08003898 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038a4:	e008      	b.n	80038b8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	18d1      	adds	r1, r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f8dd 	bl	8003a84 <prvInsertTimerInActiveList>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1ea      	bne.n	80038a6 <prvReloadTimer+0xe>
        }
    }
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <prvProcessExpiredTimer+0x5c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe f9db 	bl	8001cb0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff ffc3 	bl	8003898 <prvReloadTimer>
 8003912:	e008      	b.n	8003926 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	4798      	blx	r3
    }
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200001b4 	.word	0x200001b4

0800393c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003944:	f107 0308 	add.w	r3, r7, #8
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f857 	bl	80039fc <prvGetNextExpireTime>
 800394e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4619      	mov	r1, r3
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f803 	bl	8003960 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800395a:	f000 f8d5 	bl	8003b08 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800395e:	e7f1      	b.n	8003944 <prvTimerTask+0x8>

08003960 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800396a:	f7fe ffdd 	bl	8002928 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f866 	bl	8003a44 <prvSampleTimeNow>
 8003978:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d130      	bne.n	80039e2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <prvProcessTimerOrBlockTask+0x3c>
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	429a      	cmp	r2, r3
 800398c:	d806      	bhi.n	800399c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800398e:	f7fe ffd9 	bl	8002944 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ffa1 	bl	80038dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800399a:	e024      	b.n	80039e6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039a2:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <prvProcessTimerOrBlockTask+0x90>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <prvProcessTimerOrBlockTask+0x50>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <prvProcessTimerOrBlockTask+0x52>
 80039b0:	2300      	movs	r3, #0
 80039b2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <prvProcessTimerOrBlockTask+0x94>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fe fc9b 	bl	80022fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80039c6:	f7fe ffbd 	bl	8002944 <xTaskResumeAll>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <prvProcessTimerOrBlockTask+0x98>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
    }
 80039e0:	e001      	b.n	80039e6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80039e2:	f7fe ffaf 	bl	8002944 <xTaskResumeAll>
    }
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200001b8 	.word	0x200001b8
 80039f4:	200001bc 	.word	0x200001bc
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a04:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <prvGetNextExpireTime+0x44>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <prvGetNextExpireTime+0x16>
 8003a0e:	2201      	movs	r2, #1
 8003a10:	e000      	b.n	8003a14 <prvGetNextExpireTime+0x18>
 8003a12:	2200      	movs	r2, #0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d105      	bne.n	8003a2c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a20:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <prvGetNextExpireTime+0x44>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e001      	b.n	8003a30 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a30:	68fb      	ldr	r3, [r7, #12]
    }
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	200001b4 	.word	0x200001b4

08003a44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a4c:	f7ff f87a 	bl	8002b44 <xTaskGetTickCount>
 8003a50:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <prvSampleTimeNow+0x3c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d205      	bcs.n	8003a68 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a5c:	f000 f912 	bl	8003c84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e002      	b.n	8003a6e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a6e:	4a04      	ldr	r2, [pc, #16]	; (8003a80 <prvSampleTimeNow+0x3c>)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a74:	68fb      	ldr	r3, [r7, #12]
    }
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200001c4 	.word	0x200001c4

08003a84 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d812      	bhi.n	8003ad0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e01b      	b.n	8003af6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <prvInsertTimerInActiveList+0x7c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe f8b8 	bl	8001c3e <vListInsert>
 8003ace:	e012      	b.n	8003af6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d206      	bcs.n	8003ae6 <prvInsertTimerInActiveList+0x62>
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e007      	b.n	8003af6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <prvInsertTimerInActiveList+0x80>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe f8a4 	bl	8001c3e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003af6:	697b      	ldr	r3, [r7, #20]
    }
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	200001b8 	.word	0x200001b8
 8003b04:	200001b4 	.word	0x200001b4

08003b08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b0e:	e0a6      	b.n	8003c5e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f2c0 80a3 	blt.w	8003c5e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	3304      	adds	r3, #4
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe f8c1 	bl	8001cb0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff87 	bl	8003a44 <prvSampleTimeNow>
 8003b36:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	f200 808d 	bhi.w	8003c5c <prvProcessReceivedCommands+0x154>
 8003b42:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <prvProcessReceivedCommands+0x40>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b6d 	.word	0x08003b6d
 8003b50:	08003bd5 	.word	0x08003bd5
 8003b54:	08003be9 	.word	0x08003be9
 8003b58:	08003c33 	.word	0x08003c33
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b6d 	.word	0x08003b6d
 8003b64:	08003bd5 	.word	0x08003bd5
 8003b68:	08003be9 	.word	0x08003be9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	18d1      	adds	r1, r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	69f8      	ldr	r0, [r7, #28]
 8003b8c:	f7ff ff7a 	bl	8003a84 <prvInsertTimerInActiveList>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4413      	add	r3, r2
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	69f8      	ldr	r0, [r7, #28]
 8003bb2:	f7ff fe71 	bl	8003898 <prvReloadTimer>
 8003bb6:	e008      	b.n	8003bca <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	69f8      	ldr	r0, [r7, #28]
 8003bd0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003bd2:	e044      	b.n	8003c5e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003be6:	e03a      	b.n	8003c5e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10a      	bne.n	8003c1e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	617b      	str	r3, [r7, #20]
    }
 8003c1a:	bf00      	nop
 8003c1c:	e7fe      	b.n	8003c1c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	18d1      	adds	r1, r2, r3
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	69f8      	ldr	r0, [r7, #28]
 8003c2c:	f7ff ff2a 	bl	8003a84 <prvInsertTimerInActiveList>
                        break;
 8003c30:	e015      	b.n	8003c5e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003c40:	69f8      	ldr	r0, [r7, #28]
 8003c42:	f000 fbf3 	bl	800442c <vPortFree>
 8003c46:	e00a      	b.n	8003c5e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c5a:	e000      	b.n	8003c5e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003c5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c5e:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <prvProcessReceivedCommands+0x178>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f107 0108 	add.w	r1, r7, #8
 8003c66:	2200      	movs	r2, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fe f953 	bl	8001f14 <xQueueReceive>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f af4d 	bne.w	8003b10 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200001bc 	.word	0x200001bc

08003c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c8a:	e009      	b.n	8003ca0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <prvSwitchTimerLists+0x44>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c96:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9a:	6838      	ldr	r0, [r7, #0]
 8003c9c:	f7ff fe1e 	bl	80038dc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <prvSwitchTimerLists+0x44>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <prvSwitchTimerLists+0x44>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <prvSwitchTimerLists+0x48>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <prvSwitchTimerLists+0x44>)
 8003cb6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003cb8:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <prvSwitchTimerLists+0x48>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
    }
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	200001b4 	.word	0x200001b4
 8003ccc:	200001b8 	.word	0x200001b8

08003cd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003cd4:	f000 f9de 	bl	8004094 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003cd8:	4b12      	ldr	r3, [pc, #72]	; (8003d24 <prvCheckForValidListAndQueue+0x54>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d11d      	bne.n	8003d1c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ce0:	4811      	ldr	r0, [pc, #68]	; (8003d28 <prvCheckForValidListAndQueue+0x58>)
 8003ce2:	f7fd ff5b 	bl	8001b9c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ce6:	4811      	ldr	r0, [pc, #68]	; (8003d2c <prvCheckForValidListAndQueue+0x5c>)
 8003ce8:	f7fd ff58 	bl	8001b9c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <prvCheckForValidListAndQueue+0x60>)
 8003cee:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <prvCheckForValidListAndQueue+0x58>)
 8003cf0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <prvCheckForValidListAndQueue+0x64>)
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <prvCheckForValidListAndQueue+0x5c>)
 8003cf6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	210c      	movs	r1, #12
 8003cfc:	200a      	movs	r0, #10
 8003cfe:	f7fe f891 	bl	8001e24 <xQueueGenericCreate>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4a07      	ldr	r2, [pc, #28]	; (8003d24 <prvCheckForValidListAndQueue+0x54>)
 8003d06:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <prvCheckForValidListAndQueue+0x54>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <prvCheckForValidListAndQueue+0x54>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4908      	ldr	r1, [pc, #32]	; (8003d38 <prvCheckForValidListAndQueue+0x68>)
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fa9a 	bl	8002250 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d1c:	f000 f9ea 	bl	80040f4 <vPortExitCritical>
    }
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	200001bc 	.word	0x200001bc
 8003d28:	2000018c 	.word	0x2000018c
 8003d2c:	200001a0 	.word	0x200001a0
 8003d30:	200001b4 	.word	0x200001b4
 8003d34:	200001b8 	.word	0x200001b8
 8003d38:	08005f74 	.word	0x08005f74

08003d3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3b04      	subs	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b04      	subs	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b04      	subs	r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <pxPortInitialiseStack+0x64>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3b14      	subs	r3, #20
 8003d76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3b04      	subs	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f06f 0202 	mvn.w	r2, #2
 8003d8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b20      	subs	r3, #32
 8003d90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	08003da5 	.word	0x08003da5

08003da4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <prvTaskExitError+0x54>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db6:	d00a      	beq.n	8003dce <prvTaskExitError+0x2a>
        __asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60fb      	str	r3, [r7, #12]
    }
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <prvTaskExitError+0x28>
        __asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	60bb      	str	r3, [r7, #8]
    }
 8003de0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003de2:	bf00      	nop
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0fc      	beq.n	8003de4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	20000010 	.word	0x20000010
 8003dfc:	00000000 	.word	0x00000000

08003e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <pxCurrentTCBConst2>)
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	f380 8809 	msr	PSP, r0
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w

08003e20 <pxCurrentTCBConst2>:
 8003e20:	20000088 	.word	0x20000088
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop

08003e28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <prvPortStartFirstTask+0x24>)
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	f380 8808 	msr	MSP, r0
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8814 	msr	CONTROL, r0
 8003e3a:	b662      	cpsie	i
 8003e3c:	b661      	cpsie	f
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	df00      	svc	0
 8003e48:	bf00      	nop
 8003e4a:	0000      	.short	0x0000
 8003e4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop

08003e54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e5a:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <xPortStartScheduler+0x120>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a46      	ldr	r2, [pc, #280]	; (8003f78 <xPortStartScheduler+0x124>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10a      	bne.n	8003e7a <xPortStartScheduler+0x26>
        __asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	613b      	str	r3, [r7, #16]
    }
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <xPortStartScheduler+0x120>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <xPortStartScheduler+0x128>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10a      	bne.n	8003e9a <xPortStartScheduler+0x46>
        __asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	60fb      	str	r3, [r7, #12]
    }
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e9a:	4b39      	ldr	r3, [pc, #228]	; (8003f80 <xPortStartScheduler+0x12c>)
 8003e9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	22ff      	movs	r2, #255	; 0xff
 8003eaa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b31      	ldr	r3, [pc, #196]	; (8003f84 <xPortStartScheduler+0x130>)
 8003ec0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ec2:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <xPortStartScheduler+0x134>)
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec8:	e009      	b.n	8003ede <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <xPortStartScheduler+0x134>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <xPortStartScheduler+0x134>)
 8003ed2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d0ef      	beq.n	8003eca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003eea:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <xPortStartScheduler+0x134>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d00a      	beq.n	8003f0c <xPortStartScheduler+0xb8>
        __asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	60bb      	str	r3, [r7, #8]
    }
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <xPortStartScheduler+0x134>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <xPortStartScheduler+0x134>)
 8003f14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <xPortStartScheduler+0x134>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <xPortStartScheduler+0x134>)
 8003f20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <xPortStartScheduler+0x138>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <xPortStartScheduler+0x138>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <xPortStartScheduler+0x138>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <xPortStartScheduler+0x138>)
 8003f3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f42:	f000 f963 	bl	800420c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <xPortStartScheduler+0x13c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f4c:	f000 f982 	bl	8004254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <xPortStartScheduler+0x140>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0f      	ldr	r2, [pc, #60]	; (8003f94 <xPortStartScheduler+0x140>)
 8003f56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f5c:	f7ff ff64 	bl	8003e28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f60:	f7fe ff1a 	bl	8002d98 <vTaskSwitchContext>
    prvTaskExitError();
 8003f64:	f7ff ff1e 	bl	8003da4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	e000ed00 	.word	0xe000ed00
 8003f78:	410fc271 	.word	0x410fc271
 8003f7c:	410fc270 	.word	0x410fc270
 8003f80:	e000e400 	.word	0xe000e400
 8003f84:	200001c8 	.word	0x200001c8
 8003f88:	200001cc 	.word	0x200001cc
 8003f8c:	e000ed20 	.word	0xe000ed20
 8003f90:	20000010 	.word	0x20000010
 8003f94:	e000ef34 	.word	0xe000ef34

08003f98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f9e:	4b37      	ldr	r3, [pc, #220]	; (800407c <vInitPrioGroupValue+0xe4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a37      	ldr	r2, [pc, #220]	; (8004080 <vInitPrioGroupValue+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10a      	bne.n	8003fbe <vInitPrioGroupValue+0x26>
        __asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	613b      	str	r3, [r7, #16]
    }
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fbe:	4b2f      	ldr	r3, [pc, #188]	; (800407c <vInitPrioGroupValue+0xe4>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a30      	ldr	r2, [pc, #192]	; (8004084 <vInitPrioGroupValue+0xec>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10a      	bne.n	8003fde <vInitPrioGroupValue+0x46>
        __asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60fb      	str	r3, [r7, #12]
    }
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fde:	4b2a      	ldr	r3, [pc, #168]	; (8004088 <vInitPrioGroupValue+0xf0>)
 8003fe0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <vInitPrioGroupValue+0xf4>)
 8004004:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800400c:	e009      	b.n	8004022 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800400e:	4b20      	ldr	r3, [pc, #128]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004016:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402a:	2b80      	cmp	r3, #128	; 0x80
 800402c:	d0ef      	beq.n	800400e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800402e:	4b18      	ldr	r3, [pc, #96]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	d00a      	beq.n	8004050 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60bb      	str	r3, [r7, #8]
    }
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004058:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <vInitPrioGroupValue+0xf8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <vInitPrioGroupValue+0xf8>)
 8004064:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000ed00 	.word	0xe000ed00
 8004080:	410fc271 	.word	0x410fc271
 8004084:	410fc270 	.word	0x410fc270
 8004088:	e000e400 	.word	0xe000e400
 800408c:	200001c8 	.word	0x200001c8
 8004090:	200001cc 	.word	0x200001cc

08004094 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
        __asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
    }
 80040ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <vPortEnterCritical+0x58>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	4a0d      	ldr	r2, [pc, #52]	; (80040ec <vPortEnterCritical+0x58>)
 80040b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <vPortEnterCritical+0x58>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10f      	bne.n	80040e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <vPortEnterCritical+0x5c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <vPortEnterCritical+0x4c>
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	603b      	str	r3, [r7, #0]
    }
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <vPortEnterCritical+0x4a>
    }
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	20000010 	.word	0x20000010
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <vPortExitCritical+0x50>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <vPortExitCritical+0x24>
        __asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	607b      	str	r3, [r7, #4]
    }
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <vPortExitCritical+0x50>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3b01      	subs	r3, #1
 800411e:	4a09      	ldr	r2, [pc, #36]	; (8004144 <vPortExitCritical+0x50>)
 8004120:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <vPortExitCritical+0x50>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <vPortExitCritical+0x42>
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004134:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000010 	.word	0x20000010
	...

08004150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004150:	f3ef 8009 	mrs	r0, PSP
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <pxCurrentTCBConst>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	f01e 0f10 	tst.w	lr, #16
 8004160:	bf08      	it	eq
 8004162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	6010      	str	r0, [r2, #0]
 800416c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004174:	f380 8811 	msr	BASEPRI, r0
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f7fe fe0a 	bl	8002d98 <vTaskSwitchContext>
 8004184:	f04f 0000 	mov.w	r0, #0
 8004188:	f380 8811 	msr	BASEPRI, r0
 800418c:	bc09      	pop	{r0, r3}
 800418e:	6819      	ldr	r1, [r3, #0]
 8004190:	6808      	ldr	r0, [r1, #0]
 8004192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004196:	f01e 0f10 	tst.w	lr, #16
 800419a:	bf08      	it	eq
 800419c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041a0:	f380 8809 	msr	PSP, r0
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	f3af 8000 	nop.w

080041b0 <pxCurrentTCBConst>:
 80041b0:	20000088 	.word	0x20000088
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
        __asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	607b      	str	r3, [r7, #4]
    }
 80041d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80041d2:	f001 fb4f 	bl	8005874 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80041d6:	f7fe fcc5 	bl	8002b64 <xTaskIncrementTick>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80041e0:	f001 fba6 	bl	8005930 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <SysTick_Handler+0x50>)
 80041e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e001      	b.n	80041f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80041ee:	f001 fb83 	bl	80058f8 <SEGGER_SYSVIEW_RecordExitISR>
 80041f2:	2300      	movs	r3, #0
 80041f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	f383 8811 	msr	BASEPRI, r3
    }
 80041fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <vPortSetupTimerInterrupt+0x34>)
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004216:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <vPortSetupTimerInterrupt+0x38>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800421c:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <vPortSetupTimerInterrupt+0x3c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <vPortSetupTimerInterrupt+0x40>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	4a09      	ldr	r2, [pc, #36]	; (8004250 <vPortSetupTimerInterrupt+0x44>)
 800422a:	3b01      	subs	r3, #1
 800422c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800422e:	4b04      	ldr	r3, [pc, #16]	; (8004240 <vPortSetupTimerInterrupt+0x34>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010
 8004244:	e000e018 	.word	0xe000e018
 8004248:	20000000 	.word	0x20000000
 800424c:	10624dd3 	.word	0x10624dd3
 8004250:	e000e014 	.word	0xe000e014

08004254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004264 <vPortEnableVFP+0x10>
 8004258:	6801      	ldr	r1, [r0, #0]
 800425a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800425e:	6001      	str	r1, [r0, #0]
 8004260:	4770      	bx	lr
 8004262:	0000      	.short	0x0000
 8004264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop

0800426c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004278:	f7fe fb56 	bl	8002928 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800427c:	4b65      	ldr	r3, [pc, #404]	; (8004414 <pvPortMalloc+0x1a8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004284:	f000 f934 	bl	80044f0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004288:	4b63      	ldr	r3, [pc, #396]	; (8004418 <pvPortMalloc+0x1ac>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	f040 80a7 	bne.w	80043e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02d      	beq.n	80042f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800429c:	2208      	movs	r2, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d227      	bcs.n	80042f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80042a8:	2208      	movs	r2, #8
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d021      	beq.n	80042fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f023 0307 	bic.w	r3, r3, #7
 80042c0:	3308      	adds	r3, #8
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d214      	bcs.n	80042f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	3308      	adds	r3, #8
 80042d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d010      	beq.n	80042fe <pvPortMalloc+0x92>
        __asm volatile
 80042dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e0:	f383 8811 	msr	BASEPRI, r3
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	617b      	str	r3, [r7, #20]
    }
 80042ee:	bf00      	nop
 80042f0:	e7fe      	b.n	80042f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042f6:	e002      	b.n	80042fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	e000      	b.n	8004300 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d06e      	beq.n	80043e4 <pvPortMalloc+0x178>
 8004306:	4b45      	ldr	r3, [pc, #276]	; (800441c <pvPortMalloc+0x1b0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d869      	bhi.n	80043e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004310:	4b43      	ldr	r3, [pc, #268]	; (8004420 <pvPortMalloc+0x1b4>)
 8004312:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <pvPortMalloc+0x1b4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800431a:	e004      	b.n	8004326 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d903      	bls.n	8004338 <pvPortMalloc+0xcc>
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f1      	bne.n	800431c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <pvPortMalloc+0x1a8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	429a      	cmp	r2, r3
 8004340:	d050      	beq.n	80043e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2208      	movs	r2, #8
 8004348:	4413      	add	r3, r2
 800434a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	2308      	movs	r3, #8
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	429a      	cmp	r2, r3
 8004362:	d91f      	bls.n	80043a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <pvPortMalloc+0x120>
        __asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	613b      	str	r3, [r7, #16]
    }
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f000 f908 	bl	80045b4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <pvPortMalloc+0x1b0>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	4a1b      	ldr	r2, [pc, #108]	; (800441c <pvPortMalloc+0x1b0>)
 80043b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043b2:	4b1a      	ldr	r3, [pc, #104]	; (800441c <pvPortMalloc+0x1b0>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <pvPortMalloc+0x1b8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d203      	bcs.n	80043c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043be:	4b17      	ldr	r3, [pc, #92]	; (800441c <pvPortMalloc+0x1b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <pvPortMalloc+0x1b8>)
 80043c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	4b13      	ldr	r3, [pc, #76]	; (8004418 <pvPortMalloc+0x1ac>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <pvPortMalloc+0x1bc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a11      	ldr	r2, [pc, #68]	; (8004428 <pvPortMalloc+0x1bc>)
 80043e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043e4:	f7fe faae 	bl	8002944 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <pvPortMalloc+0x19c>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60fb      	str	r3, [r7, #12]
    }
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <pvPortMalloc+0x19a>
    return pvReturn;
 8004408:	69fb      	ldr	r3, [r7, #28]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3728      	adds	r7, #40	; 0x28
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200191d8 	.word	0x200191d8
 8004418:	200191ec 	.word	0x200191ec
 800441c:	200191dc 	.word	0x200191dc
 8004420:	200191d0 	.word	0x200191d0
 8004424:	200191e0 	.word	0x200191e0
 8004428:	200191e4 	.word	0x200191e4

0800442c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04d      	beq.n	80044da <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800443e:	2308      	movs	r3, #8
 8004440:	425b      	negs	r3, r3
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4413      	add	r3, r2
 8004446:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <vPortFree+0xb8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <vPortFree+0x44>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00a      	beq.n	800448e <vPortFree+0x62>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	60bb      	str	r3, [r7, #8]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <vPortFree+0xb8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01e      	beq.n	80044da <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d11a      	bne.n	80044da <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <vPortFree+0xb8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80044b4:	f7fe fa38 	bl	8002928 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <vPortFree+0xbc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4413      	add	r3, r2
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <vPortFree+0xbc>)
 80044c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044c6:	6938      	ldr	r0, [r7, #16]
 80044c8:	f000 f874 	bl	80045b4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <vPortFree+0xc0>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3301      	adds	r3, #1
 80044d2:	4a06      	ldr	r2, [pc, #24]	; (80044ec <vPortFree+0xc0>)
 80044d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044d6:	f7fe fa35 	bl	8002944 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200191ec 	.word	0x200191ec
 80044e8:	200191dc 	.word	0x200191dc
 80044ec:	200191e8 	.word	0x200191e8

080044f0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044f6:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 80044fa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <prvHeapInit+0xac>)
 80044fe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3307      	adds	r3, #7
 800450e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	4a1f      	ldr	r2, [pc, #124]	; (800459c <prvHeapInit+0xac>)
 8004520:	4413      	add	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004528:	4a1d      	ldr	r2, [pc, #116]	; (80045a0 <prvHeapInit+0xb0>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <prvHeapInit+0xb0>)
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4413      	add	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800453c:	2208      	movs	r2, #8
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0307 	bic.w	r3, r3, #7
 800454a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <prvHeapInit+0xb4>)
 8004550:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <prvHeapInit+0xb4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2200      	movs	r2, #0
 8004558:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <prvHeapInit+0xb4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <prvHeapInit+0xb4>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <prvHeapInit+0xb8>)
 800457e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <prvHeapInit+0xbc>)
 8004586:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004588:	4b09      	ldr	r3, [pc, #36]	; (80045b0 <prvHeapInit+0xc0>)
 800458a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	200001d0 	.word	0x200001d0
 80045a0:	200191d0 	.word	0x200191d0
 80045a4:	200191d8 	.word	0x200191d8
 80045a8:	200191e0 	.word	0x200191e0
 80045ac:	200191dc 	.word	0x200191dc
 80045b0:	200191ec 	.word	0x200191ec

080045b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045bc:	4b28      	ldr	r3, [pc, #160]	; (8004660 <prvInsertBlockIntoFreeList+0xac>)
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e002      	b.n	80045c8 <prvInsertBlockIntoFreeList+0x14>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d8f7      	bhi.n	80045c2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d108      	bne.n	80045f6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	441a      	add	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d118      	bne.n	800463c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <prvInsertBlockIntoFreeList+0xb0>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d00d      	beq.n	8004632 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e008      	b.n	8004644 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004632:	4b0c      	ldr	r3, [pc, #48]	; (8004664 <prvInsertBlockIntoFreeList+0xb0>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e003      	b.n	8004644 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d002      	beq.n	8004652 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	200191d0 	.word	0x200191d0
 8004664:	200191d8 	.word	0x200191d8

08004668 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004676:	2205      	movs	r2, #5
 8004678:	492b      	ldr	r1, [pc, #172]	; (8004728 <SYSVIEW_AddTask+0xc0>)
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f001 fbfe 	bl	8005e7c <memcmp>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04b      	beq.n	800471e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <SYSVIEW_AddTask+0xc4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b07      	cmp	r3, #7
 800468c:	d903      	bls.n	8004696 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800468e:	4828      	ldr	r0, [pc, #160]	; (8004730 <SYSVIEW_AddTask+0xc8>)
 8004690:	f001 fb98 	bl	8005dc4 <SEGGER_SYSVIEW_Warn>
    return;
 8004694:	e044      	b.n	8004720 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004696:	4b25      	ldr	r3, [pc, #148]	; (800472c <SYSVIEW_AddTask+0xc4>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4926      	ldr	r1, [pc, #152]	; (8004734 <SYSVIEW_AddTask+0xcc>)
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <SYSVIEW_AddTask+0xc4>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4921      	ldr	r1, [pc, #132]	; (8004734 <SYSVIEW_AddTask+0xcc>)
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3304      	adds	r3, #4
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <SYSVIEW_AddTask+0xc4>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	491b      	ldr	r1, [pc, #108]	; (8004734 <SYSVIEW_AddTask+0xcc>)
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3308      	adds	r3, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <SYSVIEW_AddTask+0xc4>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4916      	ldr	r1, [pc, #88]	; (8004734 <SYSVIEW_AddTask+0xcc>)
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	330c      	adds	r3, #12
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <SYSVIEW_AddTask+0xc4>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4910      	ldr	r1, [pc, #64]	; (8004734 <SYSVIEW_AddTask+0xcc>)
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3310      	adds	r3, #16
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <SYSVIEW_AddTask+0xc4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	4a08      	ldr	r2, [pc, #32]	; (800472c <SYSVIEW_AddTask+0xc4>)
 800470a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8ca 	bl	80048b0 <SYSVIEW_SendTaskInfo>
 800471c:	e000      	b.n	8004720 <SYSVIEW_AddTask+0xb8>
    return;
 800471e:	bf00      	nop

}
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	08005f7c 	.word	0x08005f7c
 800472c:	20019290 	.word	0x20019290
 8004730:	08005f84 	.word	0x08005f84
 8004734:	200191f0 	.word	0x200191f0

08004738 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80ab 	beq.w	80048a0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e00d      	b.n	800476c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004750:	4956      	ldr	r1, [pc, #344]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d008      	beq.n	8004778 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	4b4e      	ldr	r3, [pc, #312]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3ec      	bcc.n	8004750 <SYSVIEW_DeleteTask+0x18>
 8004776:	e000      	b.n	800477a <SYSVIEW_DeleteTask+0x42>
      break;
 8004778:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800477a:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d111      	bne.n	80047aa <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a46      	ldr	r2, [pc, #280]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004792:	4413      	add	r3, r2
 8004794:	2214      	movs	r2, #20
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fb7f 	bl	8005e9c <memset>
    _NumTasks--;
 800479e:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	4a40      	ldr	r2, [pc, #256]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	e07b      	b.n	80048a2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d276      	bcs.n	80048a2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80047b4:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	493c      	ldr	r1, [pc, #240]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	4838      	ldr	r0, [pc, #224]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4403      	add	r3, r0
 80047d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80047d8:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	4933      	ldr	r1, [pc, #204]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 80047e0:	4613      	mov	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3304      	adds	r3, #4
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	482f      	ldr	r0, [pc, #188]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4403      	add	r3, r0
 80047fc:	3304      	adds	r3, #4
 80047fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004800:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1e5a      	subs	r2, r3, #1
 8004806:	4929      	ldr	r1, [pc, #164]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3308      	adds	r3, #8
 8004814:	6819      	ldr	r1, [r3, #0]
 8004816:	4825      	ldr	r0, [pc, #148]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4403      	add	r3, r0
 8004824:	3308      	adds	r3, #8
 8004826:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	491f      	ldr	r1, [pc, #124]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	330c      	adds	r3, #12
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	481b      	ldr	r0, [pc, #108]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4403      	add	r3, r0
 800484c:	330c      	adds	r3, #12
 800484e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004850:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	4915      	ldr	r1, [pc, #84]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	3310      	adds	r3, #16
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	4811      	ldr	r0, [pc, #68]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4403      	add	r3, r0
 8004874:	3310      	adds	r3, #16
 8004876:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4a09      	ldr	r2, [pc, #36]	; (80048ac <SYSVIEW_DeleteTask+0x174>)
 8004888:	4413      	add	r3, r2
 800488a:	2214      	movs	r2, #20
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fb04 	bl	8005e9c <memset>
    _NumTasks--;
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3b01      	subs	r3, #1
 800489a:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <SYSVIEW_DeleteTask+0x170>)
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	e000      	b.n	80048a2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80048a0:	bf00      	nop
  }
}
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20019290 	.word	0x20019290
 80048ac:	200191f0 	.word	0x200191f0

080048b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	2214      	movs	r2, #20
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fae8 	bl	8005e9c <memset>
  TaskInfo.TaskID     = TaskID;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fe9b 	bl	8005620 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80048ea:	bf00      	nop
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <USART2_IRQHandler+0x80>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d011      	beq.n	800492e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <USART2_IRQHandler+0x84>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	b2db      	uxtb	r3, r3
 8004910:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 030b 	and.w	r3, r3, #11
 8004918:	2b00      	cmp	r3, #0
 800491a:	d108      	bne.n	800492e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <USART2_IRQHandler+0x88>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <USART2_IRQHandler+0x88>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	79fa      	ldrb	r2, [r7, #7]
 800492a:	4610      	mov	r0, r2
 800492c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01a      	beq.n	800496e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004938:	4b11      	ldr	r3, [pc, #68]	; (8004980 <USART2_IRQHandler+0x8c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <USART2_IRQHandler+0x8c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1dfa      	adds	r2, r7, #7
 8004946:	4610      	mov	r0, r2
 8004948:	4798      	blx	r3
 800494a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004952:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <USART2_IRQHandler+0x90>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <USART2_IRQHandler+0x90>)
 8004958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e006      	b.n	800496e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <USART2_IRQHandler+0x80>)
 8004962:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004964:	79fa      	ldrb	r2, [r7, #7]
 8004966:	4b04      	ldr	r3, [pc, #16]	; (8004978 <USART2_IRQHandler+0x84>)
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e000      	b.n	800496e <USART2_IRQHandler+0x7a>
      return;
 800496c:	bf00      	nop
    }
  }
}
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40004400 	.word	0x40004400
 8004978:	40004404 	.word	0x40004404
 800497c:	20019294 	.word	0x20019294
 8004980:	20019298 	.word	0x20019298
 8004984:	4000440c 	.word	0x4000440c

08004988 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	4000440c 	.word	0x4000440c

080049a8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <_DoInit+0x98>)
 80049b0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2203      	movs	r2, #3
 80049b6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a20      	ldr	r2, [pc, #128]	; (8004a44 <_DoInit+0x9c>)
 80049c2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <_DoInit+0xa0>)
 80049c8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <_DoInit+0x9c>)
 80049e8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <_DoInit+0xa4>)
 80049ee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2210      	movs	r2, #16
 80049f4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3307      	adds	r3, #7
 8004a0c:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <_DoInit+0xa8>)
 8004a0e:	6810      	ldr	r0, [r2, #0]
 8004a10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a12:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <_DoInit+0xac>)
 8004a1a:	6810      	ldr	r0, [r2, #0]
 8004a1c:	6018      	str	r0, [r3, #0]
 8004a1e:	8891      	ldrh	r1, [r2, #4]
 8004a20:	7992      	ldrb	r2, [r2, #6]
 8004a22:	8099      	strh	r1, [r3, #4]
 8004a24:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a26:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a30:	f3bf 8f5f 	dmb	sy
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	2001929c 	.word	0x2001929c
 8004a44:	08005fd4 	.word	0x08005fd4
 8004a48:	20019344 	.word	0x20019344
 8004a4c:	20019744 	.word	0x20019744
 8004a50:	08005fe0 	.word	0x08005fe0
 8004a54:	08005fe4 	.word	0x08005fe4

08004a58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	; 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004a64:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <SEGGER_RTT_ReadNoLock+0x1e>
 8004a72:	f7ff ff99 	bl	80049a8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3360      	adds	r3, #96	; 0x60
 8004a82:	4a37      	ldr	r2, [pc, #220]	; (8004b60 <SEGGER_RTT_ReadNoLock+0x108>)
 8004a84:	4413      	add	r3, r2
 8004a86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d92b      	bls.n	8004afc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	bf28      	it	cs
 8004ab6:	4613      	movcs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	4413      	add	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	6939      	ldr	r1, [r7, #16]
 8004ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aca:	f001 fa13 	bl	8005ef4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4413      	add	r3, r2
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d101      	bne.n	8004afc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf28      	it	cs
 8004b0c:	4613      	movcs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d019      	beq.n	8004b4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	4413      	add	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	6939      	ldr	r1, [r7, #16]
 8004b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b26:	f001 f9e5 	bl	8005ef4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	4413      	add	r3, r2
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4413      	add	r3, r2
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3730      	adds	r7, #48	; 0x30
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	2001929c 	.word	0x2001929c

08004b64 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b74:	e002      	b.n	8004b7c <_EncodeStr+0x18>
    Len++;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f6      	bne.n	8004b76 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d901      	bls.n	8004b94 <_EncodeStr+0x30>
    Len = Limit;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2bfe      	cmp	r3, #254	; 0xfe
 8004b98:	d806      	bhi.n	8004ba8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	60fa      	str	r2, [r7, #12]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e011      	b.n	8004bcc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	60fa      	str	r2, [r7, #12]
 8004bae:	22ff      	movs	r2, #255	; 0xff
 8004bb0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	60fa      	str	r2, [r7, #12]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	0a19      	lsrs	r1, r3, #8
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	60fa      	str	r2, [r7, #12]
 8004bc8:	b2ca      	uxtb	r2, r1
 8004bca:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004bd0:	e00a      	b.n	8004be8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	1c53      	adds	r3, r2, #1
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	60f9      	str	r1, [r7, #12]
 8004bde:	7812      	ldrb	r2, [r2, #0]
 8004be0:	701a      	strb	r2, [r3, #0]
    n++;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	3301      	adds	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d3f0      	bcc.n	8004bd2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c1e:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <_HandleIncomingPacket+0xdc>)
 8004c20:	7e1b      	ldrb	r3, [r3, #24]
 8004c22:	4618      	mov	r0, r3
 8004c24:	1cfb      	adds	r3, r7, #3
 8004c26:	2201      	movs	r2, #1
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f7ff ff15 	bl	8004a58 <SEGGER_RTT_ReadNoLock>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	dd59      	ble.n	8004cec <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d032      	beq.n	8004ca4 <_HandleIncomingPacket+0x8c>
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	dc42      	bgt.n	8004cc8 <_HandleIncomingPacket+0xb0>
 8004c42:	2b07      	cmp	r3, #7
 8004c44:	dc16      	bgt.n	8004c74 <_HandleIncomingPacket+0x5c>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	dd3e      	ble.n	8004cc8 <_HandleIncomingPacket+0xb0>
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d83b      	bhi.n	8004cc8 <_HandleIncomingPacket+0xb0>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <_HandleIncomingPacket+0x40>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c7b 	.word	0x08004c7b
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c87 	.word	0x08004c87
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c93 	.word	0x08004c93
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	08004c9f 	.word	0x08004c9f
 8004c74:	2b7f      	cmp	r3, #127	; 0x7f
 8004c76:	d034      	beq.n	8004ce2 <_HandleIncomingPacket+0xca>
 8004c78:	e026      	b.n	8004cc8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c7a:	f000 fb55 	bl	8005328 <SEGGER_SYSVIEW_Start>
      break;
 8004c7e:	e035      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c80:	f000 fc0e 	bl	80054a0 <SEGGER_SYSVIEW_Stop>
      break;
 8004c84:	e032      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c86:	f000 fdc3 	bl	8005810 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c8a:	e02f      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c8c:	f000 fdac 	bl	80057e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c90:	e02c      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c92:	f000 fc2b 	bl	80054ec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c96:	e029      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c98:	f001 f856 	bl	8005d48 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c9c:	e026      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c9e:	f001 f835 	bl	8005d0c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ca2:	e023      	b.n	8004cec <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ca4:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <_HandleIncomingPacket+0xdc>)
 8004ca6:	7e1b      	ldrb	r3, [r3, #24]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	1cfb      	adds	r3, r7, #3
 8004cac:	2201      	movs	r2, #1
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f7ff fed2 	bl	8004a58 <SEGGER_RTT_ReadNoLock>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dd13      	ble.n	8004ce6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 ffa3 	bl	8005c0c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004cc6:	e00e      	b.n	8004ce6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da0c      	bge.n	8004cea <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <_HandleIncomingPacket+0xdc>)
 8004cd2:	7e1b      	ldrb	r3, [r3, #24]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	1cfb      	adds	r3, r7, #3
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7ff febc 	bl	8004a58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004ce0:	e003      	b.n	8004cea <_HandleIncomingPacket+0xd2>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <_HandleIncomingPacket+0xd4>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e000      	b.n	8004cec <_HandleIncomingPacket+0xd4>
      break;
 8004cea:	bf00      	nop
    }
  }
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20019754 	.word	0x20019754

08004cf8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08c      	sub	sp, #48	; 0x30
 8004cfc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004cfe:	2301      	movs	r3, #1
 8004d00:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	3301      	adds	r3, #1
 8004d06:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0c:	4b32      	ldr	r3, [pc, #200]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d12:	e00b      	b.n	8004d2c <_TrySendOverflowPacket+0x34>
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	09db      	lsrs	r3, r3, #7
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d30:	d8f0      	bhi.n	8004d14 <_TrySendOverflowPacket+0x1c>
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004d42:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <_TrySendOverflowPacket+0xe4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004d48:	4b23      	ldr	r3, [pc, #140]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	e00b      	b.n	8004d74 <_TrySendOverflowPacket+0x7c>
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1c59      	adds	r1, r3, #1
 8004d64:	6279      	str	r1, [r7, #36]	; 0x24
 8004d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	09db      	lsrs	r3, r3, #7
 8004d72:	623b      	str	r3, [r7, #32]
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d8f0      	bhi.n	8004d5c <_TrySendOverflowPacket+0x64>
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004d8c:	785b      	ldrb	r3, [r3, #1]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	1d3b      	adds	r3, r7, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f7fb fa18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004da0:	4603      	mov	r3, r0
 8004da2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004da4:	f7ff fdf0 	bl	8004988 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004dae:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	e004      	b.n	8004dcc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a03      	ldr	r2, [pc, #12]	; (8004dd8 <_TrySendOverflowPacket+0xe0>)
 8004dca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004dcc:	693b      	ldr	r3, [r7, #16]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3730      	adds	r7, #48	; 0x30
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20019754 	.word	0x20019754
 8004ddc:	e0001004 	.word	0xe0001004

08004de0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004dec:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <_SendPacket+0x1c4>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d010      	beq.n	8004e16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004df4:	4b6b      	ldr	r3, [pc, #428]	; (8004fa4 <_SendPacket+0x1c4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a5 	beq.w	8004f48 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004dfe:	4b69      	ldr	r3, [pc, #420]	; (8004fa4 <_SendPacket+0x1c4>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d109      	bne.n	8004e1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004e06:	f7ff ff77 	bl	8004cf8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004e0a:	4b66      	ldr	r3, [pc, #408]	; (8004fa4 <_SendPacket+0x1c4>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	f040 809c 	bne.w	8004f4c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004e14:	e001      	b.n	8004e1a <_SendPacket+0x3a>
    goto Send;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <_SendPacket+0x3c>
Send:
 8004e1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b1f      	cmp	r3, #31
 8004e20:	d809      	bhi.n	8004e36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004e22:	4b60      	ldr	r3, [pc, #384]	; (8004fa4 <_SendPacket+0x1c4>)
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 808d 	bne.w	8004f50 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b17      	cmp	r3, #23
 8004e3a:	d807      	bhi.n	8004e4c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e03d      	b.n	8004ec8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b7f      	cmp	r3, #127	; 0x7f
 8004e58:	d912      	bls.n	8004e80 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	09da      	lsrs	r2, r3, #7
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	3a01      	subs	r2, #1
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e006      	b.n	8004e8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b7f      	cmp	r3, #127	; 0x7f
 8004e92:	d912      	bls.n	8004eba <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	09da      	lsrs	r2, r3, #7
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	3a01      	subs	r2, #1
 8004eac:	60fa      	str	r2, [r7, #12]
 8004eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	e006      	b.n	8004ec8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ec8:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <_SendPacket+0x1c8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ece:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <_SendPacket+0x1c4>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	e00b      	b.n	8004efa <_SendPacket+0x11a>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	6279      	str	r1, [r7, #36]	; 0x24
 8004eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	2b7f      	cmp	r3, #127	; 0x7f
 8004efe:	d8f0      	bhi.n	8004ee2 <_SendPacket+0x102>
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	627a      	str	r2, [r7, #36]	; 0x24
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004f10:	4b24      	ldr	r3, [pc, #144]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	4618      	mov	r0, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68f9      	ldr	r1, [r7, #12]
 8004f20:	f7fb f956 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f24:	4603      	mov	r3, r0
 8004f26:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004f28:	f7ff fd2e 	bl	8004988 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f32:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	60d3      	str	r3, [r2, #12]
 8004f38:	e00b      	b.n	8004f52 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	e004      	b.n	8004f52 <_SendPacket+0x172>
    goto SendDone;
 8004f48:	bf00      	nop
 8004f4a:	e002      	b.n	8004f52 <_SendPacket+0x172>
      goto SendDone;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <_SendPacket+0x172>
      goto SendDone;
 8004f50:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f54:	7e1b      	ldrb	r3, [r3, #24]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4a14      	ldr	r2, [pc, #80]	; (8004fac <_SendPacket+0x1cc>)
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	440b      	add	r3, r1
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	336c      	adds	r3, #108	; 0x6c
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f6a:	7e1b      	ldrb	r3, [r3, #24]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	490f      	ldr	r1, [pc, #60]	; (8004fac <_SendPacket+0x1cc>)
 8004f70:	4603      	mov	r3, r0
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4403      	add	r3, r0
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	440b      	add	r3, r1
 8004f7a:	3370      	adds	r3, #112	; 0x70
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d00b      	beq.n	8004f9a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004f82:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f84:	789b      	ldrb	r3, [r3, #2]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004f90:	f7ff fe42 	bl	8004c18 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <_SendPacket+0x1c4>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004f9a:	bf00      	nop
 8004f9c:	3728      	adds	r7, #40	; 0x28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20019754 	.word	0x20019754
 8004fa8:	e0001004 	.word	0xe0001004
 8004fac:	2001929c 	.word	0x2001929c

08004fb0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fbc:	f04f 0120 	mov.w	r1, #32
 8004fc0:	f381 8811 	msr	BASEPRI, r1
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	4808      	ldr	r0, [pc, #32]	; (8004fe8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004fc8:	f7ff fe19 	bl	8004bfe <_PreparePacket>
 8004fcc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68b8      	ldr	r0, [r7, #8]
 8004fd4:	f7ff ff04 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f383 8811 	msr	BASEPRI, r3
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20019784 	.word	0x20019784

08004fec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffa:	f04f 0120 	mov.w	r1, #32
 8004ffe:	f381 8811 	msr	BASEPRI, r1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	4816      	ldr	r0, [pc, #88]	; (8005060 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005006:	f7ff fdfa 	bl	8004bfe <_PreparePacket>
 800500a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	61bb      	str	r3, [r7, #24]
 8005018:	e00b      	b.n	8005032 <SEGGER_SYSVIEW_RecordU32+0x46>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	b2da      	uxtb	r2, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	61f9      	str	r1, [r7, #28]
 8005024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b7f      	cmp	r3, #127	; 0x7f
 8005036:	d8f0      	bhi.n	800501a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	61fa      	str	r2, [r7, #28]
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	6938      	ldr	r0, [r7, #16]
 800504e:	f7ff fec7 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f383 8811 	msr	BASEPRI, r3
}
 8005058:	bf00      	nop
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20019784 	.word	0x20019784

08005064 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b08c      	sub	sp, #48	; 0x30
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005070:	f3ef 8311 	mrs	r3, BASEPRI
 8005074:	f04f 0120 	mov.w	r1, #32
 8005078:	f381 8811 	msr	BASEPRI, r1
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	4825      	ldr	r0, [pc, #148]	; (8005114 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005080:	f7ff fdbd 	bl	8004bfe <_PreparePacket>
 8005084:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
 8005092:	e00b      	b.n	80050ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	b2da      	uxtb	r2, r3
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800509e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	09db      	lsrs	r3, r3, #7
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	2b7f      	cmp	r3, #127	; 0x7f
 80050b0:	d8f0      	bhi.n	8005094 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	e00b      	b.n	80050e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	1c59      	adds	r1, r3, #1
 80050d4:	6279      	str	r1, [r7, #36]	; 0x24
 80050d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	09db      	lsrs	r3, r3, #7
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	2b7f      	cmp	r3, #127	; 0x7f
 80050e8:	d8f0      	bhi.n	80050cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	627a      	str	r2, [r7, #36]	; 0x24
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	f7ff fe6e 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f383 8811 	msr	BASEPRI, r3
}
 800510a:	bf00      	nop
 800510c:	3730      	adds	r7, #48	; 0x30
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20019784 	.word	0x20019784

08005118 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b08e      	sub	sp, #56	; 0x38
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005126:	f3ef 8311 	mrs	r3, BASEPRI
 800512a:	f04f 0120 	mov.w	r1, #32
 800512e:	f381 8811 	msr	BASEPRI, r1
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	4832      	ldr	r0, [pc, #200]	; (8005200 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005136:	f7ff fd62 	bl	8004bfe <_PreparePacket>
 800513a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	633b      	str	r3, [r7, #48]	; 0x30
 8005148:	e00b      	b.n	8005162 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	b2da      	uxtb	r2, r3
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	1c59      	adds	r1, r3, #1
 8005152:	6379      	str	r1, [r7, #52]	; 0x34
 8005154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	09db      	lsrs	r3, r3, #7
 8005160:	633b      	str	r3, [r7, #48]	; 0x30
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	2b7f      	cmp	r3, #127	; 0x7f
 8005166:	d8f0      	bhi.n	800514a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	637a      	str	r2, [r7, #52]	; 0x34
 800516e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005176:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005180:	e00b      	b.n	800519a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	b2da      	uxtb	r2, r3
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	1c59      	adds	r1, r3, #1
 800518a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800518c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	09db      	lsrs	r3, r3, #7
 8005198:	62bb      	str	r3, [r7, #40]	; 0x28
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	2b7f      	cmp	r3, #127	; 0x7f
 800519e:	d8f0      	bhi.n	8005182 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	e00b      	b.n	80051d2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	1c59      	adds	r1, r3, #1
 80051c2:	6279      	str	r1, [r7, #36]	; 0x24
 80051c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	09db      	lsrs	r3, r3, #7
 80051d0:	623b      	str	r3, [r7, #32]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2b7f      	cmp	r3, #127	; 0x7f
 80051d6:	d8f0      	bhi.n	80051ba <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	627a      	str	r2, [r7, #36]	; 0x24
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	69b8      	ldr	r0, [r7, #24]
 80051ee:	f7ff fdf7 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f383 8811 	msr	BASEPRI, r3
}
 80051f8:	bf00      	nop
 80051fa:	3738      	adds	r7, #56	; 0x38
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20019784 	.word	0x20019784

08005204 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b090      	sub	sp, #64	; 0x40
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005212:	f3ef 8311 	mrs	r3, BASEPRI
 8005216:	f04f 0120 	mov.w	r1, #32
 800521a:	f381 8811 	msr	BASEPRI, r1
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	4840      	ldr	r0, [pc, #256]	; (8005324 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005222:	f7ff fcec 	bl	8004bfe <_PreparePacket>
 8005226:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	63bb      	str	r3, [r7, #56]	; 0x38
 8005234:	e00b      	b.n	800524e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	b2da      	uxtb	r2, r3
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	1c59      	adds	r1, r3, #1
 800523e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	09db      	lsrs	r3, r3, #7
 800524c:	63bb      	str	r3, [r7, #56]	; 0x38
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b7f      	cmp	r3, #127	; 0x7f
 8005252:	d8f0      	bhi.n	8005236 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800525a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005262:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	633b      	str	r3, [r7, #48]	; 0x30
 800526c:	e00b      	b.n	8005286 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	b2da      	uxtb	r2, r3
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	1c59      	adds	r1, r3, #1
 8005276:	6379      	str	r1, [r7, #52]	; 0x34
 8005278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	09db      	lsrs	r3, r3, #7
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2b7f      	cmp	r3, #127	; 0x7f
 800528a:	d8f0      	bhi.n	800526e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	637a      	str	r2, [r7, #52]	; 0x34
 8005292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	e00b      	b.n	80052be <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	1c59      	adds	r1, r3, #1
 80052ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	09db      	lsrs	r3, r3, #7
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	2b7f      	cmp	r3, #127	; 0x7f
 80052c2:	d8f0      	bhi.n	80052a6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
 80052d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	e00b      	b.n	80052f6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1c59      	adds	r1, r3, #1
 80052e6:	6279      	str	r1, [r7, #36]	; 0x24
 80052e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	09db      	lsrs	r3, r3, #7
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2b7f      	cmp	r3, #127	; 0x7f
 80052fa:	d8f0      	bhi.n	80052de <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	627a      	str	r2, [r7, #36]	; 0x24
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	701a      	strb	r2, [r3, #0]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6979      	ldr	r1, [r7, #20]
 8005310:	69b8      	ldr	r0, [r7, #24]
 8005312:	f7ff fd65 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f383 8811 	msr	BASEPRI, r3
}
 800531c:	bf00      	nop
 800531e:	3740      	adds	r7, #64	; 0x40
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20019784 	.word	0x20019784

08005328 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800532e:	4b59      	ldr	r3, [pc, #356]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005334:	f3ef 8311 	mrs	r3, BASEPRI
 8005338:	f04f 0120 	mov.w	r1, #32
 800533c:	f381 8811 	msr	BASEPRI, r1
 8005340:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005342:	4b54      	ldr	r3, [pc, #336]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	220a      	movs	r2, #10
 8005348:	4953      	ldr	r1, [pc, #332]	; (8005498 <SEGGER_SYSVIEW_Start+0x170>)
 800534a:	4618      	mov	r0, r3
 800534c:	f7fa ff40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005356:	f7ff fb17 	bl	8004988 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800535a:	200a      	movs	r0, #10
 800535c:	f7ff fe28 	bl	8004fb0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005360:	f3ef 8311 	mrs	r3, BASEPRI
 8005364:	f04f 0120 	mov.w	r1, #32
 8005368:	f381 8811 	msr	BASEPRI, r1
 800536c:	60bb      	str	r3, [r7, #8]
 800536e:	484b      	ldr	r0, [pc, #300]	; (800549c <SEGGER_SYSVIEW_Start+0x174>)
 8005370:	f7ff fc45 	bl	8004bfe <_PreparePacket>
 8005374:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537e:	4b45      	ldr	r3, [pc, #276]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
 8005384:	e00b      	b.n	800539e <SEGGER_SYSVIEW_Start+0x76>
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	b2da      	uxtb	r2, r3
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	1c59      	adds	r1, r3, #1
 800538e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	09db      	lsrs	r3, r3, #7
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2b7f      	cmp	r3, #127	; 0x7f
 80053a2:	d8f0      	bhi.n	8005386 <SEGGER_SYSVIEW_Start+0x5e>
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
 80053b8:	4b36      	ldr	r3, [pc, #216]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	e00b      	b.n	80053d8 <SEGGER_SYSVIEW_Start+0xb0>
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1c59      	adds	r1, r3, #1
 80053c8:	6279      	str	r1, [r7, #36]	; 0x24
 80053ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	09db      	lsrs	r3, r3, #7
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	2b7f      	cmp	r3, #127	; 0x7f
 80053dc:	d8f0      	bhi.n	80053c0 <SEGGER_SYSVIEW_Start+0x98>
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	627a      	str	r2, [r7, #36]	; 0x24
 80053e4:	6a3a      	ldr	r2, [r7, #32]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	4b28      	ldr	r3, [pc, #160]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	e00b      	b.n	8005412 <SEGGER_SYSVIEW_Start+0xea>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	1c59      	adds	r1, r3, #1
 8005402:	61f9      	str	r1, [r7, #28]
 8005404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	09db      	lsrs	r3, r3, #7
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b7f      	cmp	r3, #127	; 0x7f
 8005416:	d8f0      	bhi.n	80053fa <SEGGER_SYSVIEW_Start+0xd2>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	61fa      	str	r2, [r7, #28]
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	e00b      	b.n	800544a <SEGGER_SYSVIEW_Start+0x122>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	b2da      	uxtb	r2, r3
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	6179      	str	r1, [r7, #20]
 800543c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	09db      	lsrs	r3, r3, #7
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b7f      	cmp	r3, #127	; 0x7f
 800544e:	d8f0      	bhi.n	8005432 <SEGGER_SYSVIEW_Start+0x10a>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	617a      	str	r2, [r7, #20]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005460:	2218      	movs	r2, #24
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff fcbb 	bl	8004de0 <_SendPacket>
      RECORD_END();
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005478:	4b06      	ldr	r3, [pc, #24]	; (8005494 <SEGGER_SYSVIEW_Start+0x16c>)
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800547e:	f000 f9c7 	bl	8005810 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005482:	f000 f9b1 	bl	80057e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005486:	f000 fc5f 	bl	8005d48 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800548a:	bf00      	nop
 800548c:	3730      	adds	r7, #48	; 0x30
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20019754 	.word	0x20019754
 8005498:	08005ffc 	.word	0x08005ffc
 800549c:	20019784 	.word	0x20019784

080054a0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054a6:	f3ef 8311 	mrs	r3, BASEPRI
 80054aa:	f04f 0120 	mov.w	r1, #32
 80054ae:	f381 8811 	msr	BASEPRI, r1
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	480b      	ldr	r0, [pc, #44]	; (80054e4 <SEGGER_SYSVIEW_Stop+0x44>)
 80054b6:	f7ff fba2 	bl	8004bfe <_PreparePacket>
 80054ba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80054c4:	220b      	movs	r2, #11
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	6838      	ldr	r0, [r7, #0]
 80054ca:	f7ff fc89 	bl	8004de0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f383 8811 	msr	BASEPRI, r3
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20019784 	.word	0x20019784
 80054e8:	20019754 	.word	0x20019754

080054ec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	; 0x30
 80054f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054f2:	f3ef 8311 	mrs	r3, BASEPRI
 80054f6:	f04f 0120 	mov.w	r1, #32
 80054fa:	f381 8811 	msr	BASEPRI, r1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	4845      	ldr	r0, [pc, #276]	; (8005618 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005502:	f7ff fb7c 	bl	8004bfe <_PreparePacket>
 8005506:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
 8005516:	e00b      	b.n	8005530 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	09db      	lsrs	r3, r3, #7
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	2b7f      	cmp	r3, #127	; 0x7f
 8005534:	d8f0      	bhi.n	8005518 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	4b34      	ldr	r3, [pc, #208]	; (800561c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	e00b      	b.n	800556a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	6279      	str	r1, [r7, #36]	; 0x24
 800555c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	09db      	lsrs	r3, r3, #7
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	2b7f      	cmp	r3, #127	; 0x7f
 800556e:	d8f0      	bhi.n	8005552 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	627a      	str	r2, [r7, #36]	; 0x24
 8005576:	6a3a      	ldr	r2, [r7, #32]
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	4b25      	ldr	r3, [pc, #148]	; (800561c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	e00b      	b.n	80055a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	61f9      	str	r1, [r7, #28]
 8005596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	09db      	lsrs	r3, r3, #7
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b7f      	cmp	r3, #127	; 0x7f
 80055a8:	d8f0      	bhi.n	800558c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	2300      	movs	r3, #0
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	e00b      	b.n	80055dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	6179      	str	r1, [r7, #20]
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	617a      	str	r2, [r7, #20]
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055f2:	2218      	movs	r2, #24
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	68b8      	ldr	r0, [r7, #8]
 80055f8:	f7ff fbf2 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800560a:	4b04      	ldr	r3, [pc, #16]	; (800561c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	4798      	blx	r3
  }
}
 8005610:	bf00      	nop
 8005612:	3730      	adds	r7, #48	; 0x30
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20019784 	.word	0x20019784
 800561c:	20019754 	.word	0x20019754

08005620 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b092      	sub	sp, #72	; 0x48
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005628:	f3ef 8311 	mrs	r3, BASEPRI
 800562c:	f04f 0120 	mov.w	r1, #32
 8005630:	f381 8811 	msr	BASEPRI, r1
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	486a      	ldr	r0, [pc, #424]	; (80057e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005638:	f7ff fae1 	bl	8004bfe <_PreparePacket>
 800563c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	647b      	str	r3, [r7, #68]	; 0x44
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b66      	ldr	r3, [pc, #408]	; (80057e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	643b      	str	r3, [r7, #64]	; 0x40
 8005652:	e00b      	b.n	800566c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565a:	1c59      	adds	r1, r3, #1
 800565c:	6479      	str	r1, [r7, #68]	; 0x44
 800565e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
 8005666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005668:	09db      	lsrs	r3, r3, #7
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	2b7f      	cmp	r3, #127	; 0x7f
 8005670:	d8f0      	bhi.n	8005654 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	647a      	str	r2, [r7, #68]	; 0x44
 8005678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
 800568c:	e00b      	b.n	80056a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	1c59      	adds	r1, r3, #1
 8005696:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	09db      	lsrs	r3, r3, #7
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	2b7f      	cmp	r3, #127	; 0x7f
 80056aa:	d8f0      	bhi.n	800568e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80056ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	4619      	mov	r1, r3
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff fa4d 	bl	8004b64 <_EncodeStr>
 80056ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80056cc:	2209      	movs	r2, #9
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	6938      	ldr	r0, [r7, #16]
 80056d2:	f7ff fb85 	bl	8004de0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b40      	ldr	r3, [pc, #256]	; (80057e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ea:	e00b      	b.n	8005704 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	1c59      	adds	r1, r3, #1
 80056f4:	6379      	str	r1, [r7, #52]	; 0x34
 80056f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	09db      	lsrs	r3, r3, #7
 8005702:	633b      	str	r3, [r7, #48]	; 0x30
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	2b7f      	cmp	r3, #127	; 0x7f
 8005708:	d8f0      	bhi.n	80056ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	637a      	str	r2, [r7, #52]	; 0x34
 8005710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005718:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
 8005724:	e00b      	b.n	800573e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	b2da      	uxtb	r2, r3
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	09db      	lsrs	r3, r3, #7
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	2b7f      	cmp	r3, #127	; 0x7f
 8005742:	d8f0      	bhi.n	8005726 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800574a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e00b      	b.n	8005778 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	6279      	str	r1, [r7, #36]	; 0x24
 800576a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	09db      	lsrs	r3, r3, #7
 8005776:	623b      	str	r3, [r7, #32]
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b7f      	cmp	r3, #127	; 0x7f
 800577c:	d8f0      	bhi.n	8005760 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	627a      	str	r2, [r7, #36]	; 0x24
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e00b      	b.n	80057b0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	61f9      	str	r1, [r7, #28]
 80057a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	09db      	lsrs	r3, r3, #7
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b7f      	cmp	r3, #127	; 0x7f
 80057b4:	d8f0      	bhi.n	8005798 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	61fa      	str	r2, [r7, #28]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80057c6:	2215      	movs	r2, #21
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	6938      	ldr	r0, [r7, #16]
 80057cc:	f7ff fb08 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f383 8811 	msr	BASEPRI, r3
}
 80057d6:	bf00      	nop
 80057d8:	3748      	adds	r7, #72	; 0x48
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20019784 	.word	0x20019784
 80057e4:	20019754 	.word	0x20019754

080057e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4798      	blx	r3
  }
}
 8005806:	bf00      	nop
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20019754 	.word	0x20019754

08005810 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01a      	beq.n	8005854 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4798      	blx	r3
 8005830:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005834:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	000a      	movs	r2, r1
 8005844:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005846:	4613      	mov	r3, r2
 8005848:	461a      	mov	r2, r3
 800584a:	4621      	mov	r1, r4
 800584c:	200d      	movs	r0, #13
 800584e:	f7ff fc09 	bl	8005064 <SEGGER_SYSVIEW_RecordU32x2>
 8005852:	e006      	b.n	8005862 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	200c      	movs	r0, #12
 800585c:	f7ff fbc6 	bl	8004fec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bd90      	pop	{r4, r7, pc}
 800586a:	bf00      	nop
 800586c:	20019754 	.word	0x20019754
 8005870:	e0001004 	.word	0xe0001004

08005874 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800587a:	f3ef 8311 	mrs	r3, BASEPRI
 800587e:	f04f 0120 	mov.w	r1, #32
 8005882:	f381 8811 	msr	BASEPRI, r1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	4819      	ldr	r0, [pc, #100]	; (80058f0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800588a:	f7ff f9b8 	bl	8004bfe <_PreparePacket>
 800588e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800589c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e00b      	b.n	80058c0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1c59      	adds	r1, r3, #1
 80058b0:	6179      	str	r1, [r7, #20]
 80058b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	09db      	lsrs	r3, r3, #7
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b7f      	cmp	r3, #127	; 0x7f
 80058c4:	d8f0      	bhi.n	80058a8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	617a      	str	r2, [r7, #20]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058d6:	2202      	movs	r2, #2
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	68b8      	ldr	r0, [r7, #8]
 80058dc:	f7ff fa80 	bl	8004de0 <_SendPacket>
  RECORD_END();
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f383 8811 	msr	BASEPRI, r3
}
 80058e6:	bf00      	nop
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20019784 	.word	0x20019784
 80058f4:	e000ed04 	.word	0xe000ed04

080058f8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005902:	f04f 0120 	mov.w	r1, #32
 8005906:	f381 8811 	msr	BASEPRI, r1
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	4807      	ldr	r0, [pc, #28]	; (800592c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800590e:	f7ff f976 	bl	8004bfe <_PreparePacket>
 8005912:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005914:	2203      	movs	r2, #3
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	f7ff fa61 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f383 8811 	msr	BASEPRI, r3
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20019784 	.word	0x20019784

08005930 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	f04f 0120 	mov.w	r1, #32
 800593e:	f381 8811 	msr	BASEPRI, r1
 8005942:	607b      	str	r3, [r7, #4]
 8005944:	4807      	ldr	r0, [pc, #28]	; (8005964 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005946:	f7ff f95a 	bl	8004bfe <_PreparePacket>
 800594a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800594c:	2212      	movs	r2, #18
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6838      	ldr	r0, [r7, #0]
 8005952:	f7ff fa45 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f383 8811 	msr	BASEPRI, r3
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20019784 	.word	0x20019784

08005968 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800596e:	f3ef 8311 	mrs	r3, BASEPRI
 8005972:	f04f 0120 	mov.w	r1, #32
 8005976:	f381 8811 	msr	BASEPRI, r1
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	4807      	ldr	r0, [pc, #28]	; (800599c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800597e:	f7ff f93e 	bl	8004bfe <_PreparePacket>
 8005982:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005984:	2211      	movs	r2, #17
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	6838      	ldr	r0, [r7, #0]
 800598a:	f7ff fa29 	bl	8004de0 <_SendPacket>
  RECORD_END();
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f383 8811 	msr	BASEPRI, r3
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20019784 	.word	0x20019784

080059a0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059a8:	f3ef 8311 	mrs	r3, BASEPRI
 80059ac:	f04f 0120 	mov.w	r1, #32
 80059b0:	f381 8811 	msr	BASEPRI, r1
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	4819      	ldr	r0, [pc, #100]	; (8005a1c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059b8:	f7ff f921 	bl	8004bfe <_PreparePacket>
 80059bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	e00b      	b.n	80059ee <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	1c59      	adds	r1, r3, #1
 80059de:	61f9      	str	r1, [r7, #28]
 80059e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	09db      	lsrs	r3, r3, #7
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b7f      	cmp	r3, #127	; 0x7f
 80059f2:	d8f0      	bhi.n	80059d6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	61fa      	str	r2, [r7, #28]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a04:	2208      	movs	r2, #8
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	6938      	ldr	r0, [r7, #16]
 8005a0a:	f7ff f9e9 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f383 8811 	msr	BASEPRI, r3
}
 8005a14:	bf00      	nop
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20019784 	.word	0x20019784
 8005a20:	20019754 	.word	0x20019754

08005a24 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a30:	f04f 0120 	mov.w	r1, #32
 8005a34:	f381 8811 	msr	BASEPRI, r1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	4819      	ldr	r0, [pc, #100]	; (8005aa0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a3c:	f7ff f8df 	bl	8004bfe <_PreparePacket>
 8005a40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a46:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	e00b      	b.n	8005a72 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	1c59      	adds	r1, r3, #1
 8005a62:	61f9      	str	r1, [r7, #28]
 8005a64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	09db      	lsrs	r3, r3, #7
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b7f      	cmp	r3, #127	; 0x7f
 8005a76:	d8f0      	bhi.n	8005a5a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	61fa      	str	r2, [r7, #28]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	701a      	strb	r2, [r3, #0]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a88:	2204      	movs	r2, #4
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	6938      	ldr	r0, [r7, #16]
 8005a8e:	f7ff f9a7 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f383 8811 	msr	BASEPRI, r3
}
 8005a98:	bf00      	nop
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20019784 	.word	0x20019784
 8005aa4:	20019754 	.word	0x20019754

08005aa8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab4:	f04f 0120 	mov.w	r1, #32
 8005ab8:	f381 8811 	msr	BASEPRI, r1
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	4819      	ldr	r0, [pc, #100]	; (8005b24 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ac0:	f7ff f89d 	bl	8004bfe <_PreparePacket>
 8005ac4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005aca:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e00b      	b.n	8005af6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	61f9      	str	r1, [r7, #28]
 8005ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b7f      	cmp	r3, #127	; 0x7f
 8005afa:	d8f0      	bhi.n	8005ade <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b0c:	2206      	movs	r2, #6
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	6938      	ldr	r0, [r7, #16]
 8005b12:	f7ff f965 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f383 8811 	msr	BASEPRI, r3
}
 8005b1c:	bf00      	nop
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20019784 	.word	0x20019784
 8005b28:	20019754 	.word	0x20019754

08005b2c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b36:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3a:	f04f 0120 	mov.w	r1, #32
 8005b3e:	f381 8811 	msr	BASEPRI, r1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	4827      	ldr	r0, [pc, #156]	; (8005be4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005b46:	f7ff f85a 	bl	8004bfe <_PreparePacket>
 8005b4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b50:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	e00b      	b.n	8005b7c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	09db      	lsrs	r3, r3, #7
 8005b7a:	623b      	str	r3, [r7, #32]
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b80:	d8f0      	bhi.n	8005b64 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	627a      	str	r2, [r7, #36]	; 0x24
 8005b88:	6a3a      	ldr	r2, [r7, #32]
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e00b      	b.n	8005bb4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	61f9      	str	r1, [r7, #28]
 8005ba6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	09db      	lsrs	r3, r3, #7
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bb8:	d8f0      	bhi.n	8005b9c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	61fa      	str	r2, [r7, #28]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005bca:	2207      	movs	r2, #7
 8005bcc:	68f9      	ldr	r1, [r7, #12]
 8005bce:	6938      	ldr	r0, [r7, #16]
 8005bd0:	f7ff f906 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f383 8811 	msr	BASEPRI, r3
}
 8005bda:	bf00      	nop
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20019784 	.word	0x20019784
 8005be8:	20019754 	.word	0x20019754

08005bec <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	1ad3      	subs	r3, r2, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20019754 	.word	0x20019754

08005c0c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08c      	sub	sp, #48	; 0x30
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c16:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d06d      	beq.n	8005cfa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005c1e:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c24:	2300      	movs	r3, #0
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c28:	e008      	b.n	8005c3c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	3301      	adds	r3, #1
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3f2      	bcc.n	8005c2a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005c44:	e000      	b.n	8005c48 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005c46:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d055      	beq.n	8005cfa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c52:	f04f 0120 	mov.w	r1, #32
 8005c56:	f381 8811 	msr	BASEPRI, r1
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	482a      	ldr	r0, [pc, #168]	; (8005d08 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005c5e:	f7fe ffce 	bl	8004bfe <_PreparePacket>
 8005c62:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	623b      	str	r3, [r7, #32]
 8005c70:	e00b      	b.n	8005c8a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1c59      	adds	r1, r3, #1
 8005c7a:	6279      	str	r1, [r7, #36]	; 0x24
 8005c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	09db      	lsrs	r3, r3, #7
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8e:	d8f0      	bhi.n	8005c72 <SEGGER_SYSVIEW_SendModule+0x66>
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	627a      	str	r2, [r7, #36]	; 0x24
 8005c96:	6a3a      	ldr	r2, [r7, #32]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	61fb      	str	r3, [r7, #28]
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e00b      	b.n	8005cc4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	61f9      	str	r1, [r7, #28]
 8005cb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	09db      	lsrs	r3, r3, #7
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc8:	d8f0      	bhi.n	8005cac <SEGGER_SYSVIEW_SendModule+0xa0>
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	61fa      	str	r2, [r7, #28]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	701a      	strb	r2, [r3, #0]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2280      	movs	r2, #128	; 0x80
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7fe ff3e 	bl	8004b64 <_EncodeStr>
 8005ce8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005cea:	2216      	movs	r2, #22
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	6938      	ldr	r0, [r7, #16]
 8005cf0:	f7ff f876 	bl	8004de0 <_SendPacket>
      RECORD_END();
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	3730      	adds	r7, #48	; 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	2001977c 	.word	0x2001977c
 8005d08:	20019784 	.word	0x20019784

08005d0c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d12:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00f      	beq.n	8005d3a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f2      	bne.n	8005d20 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2001977c 	.word	0x2001977c

08005d48 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d52:	f04f 0120 	mov.w	r1, #32
 8005d56:	f381 8811 	msr	BASEPRI, r1
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	4817      	ldr	r0, [pc, #92]	; (8005dbc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005d5e:	f7fe ff4e 	bl	8004bfe <_PreparePacket>
 8005d62:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	e00b      	b.n	8005d8c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	1c59      	adds	r1, r3, #1
 8005d7c:	6179      	str	r1, [r7, #20]
 8005d7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	09db      	lsrs	r3, r3, #7
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d90:	d8f0      	bhi.n	8005d74 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	617a      	str	r2, [r7, #20]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005da2:	221b      	movs	r2, #27
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	68b8      	ldr	r0, [r7, #8]
 8005da8:	f7ff f81a 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f383 8811 	msr	BASEPRI, r3
}
 8005db2:	bf00      	nop
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	20019784 	.word	0x20019784
 8005dc0:	20019780 	.word	0x20019780

08005dc4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd0:	f04f 0120 	mov.w	r1, #32
 8005dd4:	f381 8811 	msr	BASEPRI, r1
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	4827      	ldr	r0, [pc, #156]	; (8005e78 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005ddc:	f7fe ff0f 	bl	8004bfe <_PreparePacket>
 8005de0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	6938      	ldr	r0, [r7, #16]
 8005de8:	f7fe febc 	bl	8004b64 <_EncodeStr>
 8005dec:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
 8005df2:	2301      	movs	r3, #1
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	e00b      	b.n	8005e10 <SEGGER_SYSVIEW_Warn+0x4c>
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	6279      	str	r1, [r7, #36]	; 0x24
 8005e02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	09db      	lsrs	r3, r3, #7
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b7f      	cmp	r3, #127	; 0x7f
 8005e14:	d8f0      	bhi.n	8005df8 <SEGGER_SYSVIEW_Warn+0x34>
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e1c:	6a3a      	ldr	r2, [r7, #32]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e00b      	b.n	8005e48 <SEGGER_SYSVIEW_Warn+0x84>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	61f9      	str	r1, [r7, #28]
 8005e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	09db      	lsrs	r3, r3, #7
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4c:	d8f0      	bhi.n	8005e30 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	61fa      	str	r2, [r7, #28]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e5e:	221a      	movs	r2, #26
 8005e60:	68f9      	ldr	r1, [r7, #12]
 8005e62:	6938      	ldr	r0, [r7, #16]
 8005e64:	f7fe ffbc 	bl	8004de0 <_SendPacket>
  RECORD_END();
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
}
 8005e6e:	bf00      	nop
 8005e70:	3728      	adds	r7, #40	; 0x28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20019784 	.word	0x20019784

08005e7c <memcmp>:
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	3901      	subs	r1, #1
 8005e80:	4402      	add	r2, r0
 8005e82:	4290      	cmp	r0, r2
 8005e84:	d101      	bne.n	8005e8a <memcmp+0xe>
 8005e86:	2000      	movs	r0, #0
 8005e88:	e005      	b.n	8005e96 <memcmp+0x1a>
 8005e8a:	7803      	ldrb	r3, [r0, #0]
 8005e8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d001      	beq.n	8005e98 <memcmp+0x1c>
 8005e94:	1b18      	subs	r0, r3, r4
 8005e96:	bd10      	pop	{r4, pc}
 8005e98:	3001      	adds	r0, #1
 8005e9a:	e7f2      	b.n	8005e82 <memcmp+0x6>

08005e9c <memset>:
 8005e9c:	4402      	add	r2, r0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d100      	bne.n	8005ea6 <memset+0xa>
 8005ea4:	4770      	bx	lr
 8005ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eaa:	e7f9      	b.n	8005ea0 <memset+0x4>

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4d0d      	ldr	r5, [pc, #52]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb2:	1b64      	subs	r4, r4, r5
 8005eb4:	10a4      	asrs	r4, r4, #2
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	4d0b      	ldr	r5, [pc, #44]	; (8005eec <__libc_init_array+0x40>)
 8005ebe:	4c0c      	ldr	r4, [pc, #48]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec0:	f000 f826 	bl	8005f10 <_init>
 8005ec4:	1b64      	subs	r4, r4, r5
 8005ec6:	10a4      	asrs	r4, r4, #2
 8005ec8:	2600      	movs	r6, #0
 8005eca:	42a6      	cmp	r6, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed4:	4798      	blx	r3
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ede:	4798      	blx	r3
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	08006010 	.word	0x08006010
 8005ee8:	08006010 	.word	0x08006010
 8005eec:	08006010 	.word	0x08006010
 8005ef0:	08006014 	.word	0x08006014

08005ef4 <memcpy>:
 8005ef4:	440a      	add	r2, r1
 8005ef6:	4291      	cmp	r1, r2
 8005ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005efc:	d100      	bne.n	8005f00 <memcpy+0xc>
 8005efe:	4770      	bx	lr
 8005f00:	b510      	push	{r4, lr}
 8005f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f0a:	4291      	cmp	r1, r2
 8005f0c:	d1f9      	bne.n	8005f02 <memcpy+0xe>
 8005f0e:	bd10      	pop	{r4, pc}

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
